<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Owen</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-02T10:56:58.224Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Owen Gao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Reflect</title>
    <link href="http://yoursite.com/2019/04/02/Reflect/"/>
    <id>http://yoursite.com/2019/04/02/Reflect/</id>
    <published>2019-04-02T08:22:02.000Z</published>
    <updated>2019-04-02T10:56:58.224Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h2><blockquote><p>将<code>Object</code>对象中一些属于语言内部的方法，放到 <code>Reflect</code>对象中<br>优化一些放法返回的结果<br>只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法,不管Proxy怎么修改默认行为，你总可以在Reflect上获取默认行为。</p></blockquote><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><blockquote><p>13 个静态方法  作用对应Object同名方法</p></blockquote><h3 id="Reflect-apply-target-thisArg-args"><a href="#Reflect-apply-target-thisArg-args" class="headerlink" title="Reflect.apply(target, thisArg, args)"></a>Reflect.apply(target, thisArg, args)</h3><blockquote><p>等同于 <code>Function</code> 构造函数中的<code>Function.prototype.apply.call(func, thisArg, args)</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ages = [<span class="number">11</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">96</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">const</span> youngest = <span class="built_in">Math</span>.min.apply(<span class="built_in">Math</span>, ages);</span><br><span class="line"><span class="keyword">const</span> oldest = <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, ages);</span><br><span class="line"><span class="keyword">const</span> type = <span class="built_in">Object</span>.prototype.toString.call(youngest);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reflect</span></span><br><span class="line"><span class="keyword">const</span> youngest = <span class="built_in">Reflect</span>.apply(<span class="built_in">Math</span>.min, <span class="built_in">Math</span>, ages);</span><br><span class="line"><span class="keyword">const</span> oldest = <span class="built_in">Reflect</span>.apply(<span class="built_in">Math</span>.max, <span class="built_in">Math</span>, ages);</span><br><span class="line"><span class="keyword">const</span> type = <span class="built_in">Reflect</span>.apply(<span class="built_in">Object</span>.prototype.toString, youngest, []);</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-construct-target-args"><a href="#Reflect-construct-target-args" class="headerlink" title="Reflect.construct(target, args)"></a>Reflect.construct(target, args)</h3><blockquote><p>对应 <code>new target(...args)</code>  提供了一种不使用new，来调用构造函数的方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greeting</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// new 的写法</span></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> Greeting(<span class="string">'Owen'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reflect.construct 的写法</span></span><br><span class="line"><span class="keyword">const</span> instance = <span class="built_in">Reflect</span>.construct(Greeting, [<span class="string">'Owen'</span>]);</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-get-target-name-receiver"><a href="#Reflect-get-target-name-receiver" class="headerlink" title="Reflect.get(target, name, receiver)"></a>Reflect.get(target, name, receiver)</h3><blockquote><p>查找目标对象属性值并返回<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name : <span class="string">'Owen'</span>,</span><br><span class="line">    age:<span class="number">18</span>,</span><br><span class="line">    <span class="keyword">get</span> baz()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="keyword">this</span>.age </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.get(obj,<span class="string">'name'</span>) <span class="comment">//'Owen'</span></span><br><span class="line"><span class="built_in">Reflect</span>.get(obj,<span class="string">'baz'</span>)  <span class="comment">//'Owen18'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// receiver 改变 get 函数 this 指向</span></span><br><span class="line"><span class="keyword">let</span> obj1 =&#123;</span><br><span class="line">     name : <span class="string">'Owen'</span>,</span><br><span class="line">    age:<span class="number">16</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Reflect</span>.get(obj,<span class="string">'baz'</span>,obj1) <span class="comment">//'Owen16</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-set-target-name-value-receiver"><a href="#Reflect-set-target-name-value-receiver" class="headerlink" title="Reflect.set(target, name, value, receiver)"></a>Reflect.set(target, name, value, receiver)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name : <span class="string">'Owen'</span>,</span><br><span class="line">    age:<span class="number">18</span>,</span><br><span class="line">    <span class="keyword">set</span> baz(val)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.age = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Reflect</span>.set(obj,<span class="string">'name'</span>,<span class="string">'wen'</span>) </span><br><span class="line">obj.name <span class="comment">//'wen'</span></span><br><span class="line"><span class="built_in">Reflect</span>.set(obj,<span class="string">'baz'</span>, <span class="number">16</span>)</span><br><span class="line">obj.age <span class="comment">// 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//receiver 改变 set this 指向</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果 <code>Proxy</code>和 <code>Reflect</code> 联合使用，<label>并且传入 <code>receiver</code> </label>， 那么 <code>Reflect.set</code> 会触发<code>Proxy.defineProperty</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> proxy = &#123;</span><br><span class="line">    name:<span class="string">'Owen'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">    <span class="keyword">set</span> (target, key, value, receiver)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'set'</span>)</span><br><span class="line">        Refelect.set(target, key, value, receiver)</span><br><span class="line">    &#125;,</span><br><span class="line">    defineProerty(target, key, attribute)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'defineProperty'</span>)</span><br><span class="line">        <span class="built_in">Reflect</span>.defineProperty(target, key, attribute)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(proxy,handler)</span><br><span class="line">obj.name = <span class="string">'wen'</span>;</span><br><span class="line"><span class="comment">// set</span></span><br><span class="line"><span class="comment">// defineProperty</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">因为Proxy.set的receiver参数总是指向当前的 Proxy实例（即上例的obj），</span></span><br><span class="line"><span class="comment">而Reflect.set一旦传入receiver，就会将属性赋值到receiver上面（即obj），导致触发defineProperty拦截。</span></span><br><span class="line"><span class="comment">如果Reflect.set没有传入receiver，那么就不会触发defineProperty拦截。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p></blockquote><ul><li>Reflect.defineProperty(target, name, desc)<h3 id="Reflect-deleteProperty-target-name"><a href="#Reflect-deleteProperty-target-name" class="headerlink" title="Reflect.deleteProperty(target, name)"></a>Reflect.deleteProperty(target, name)</h3><blockquote><p>对应 <code>delete obj.name</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name:<span class="string">'Owen'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//es5 </span></span><br><span class="line"><span class="keyword">delete</span> obj.name</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reflect</span></span><br><span class="line"><span class="built_in">Reflect</span>.deleteProperty(obj,<span class="string">'name'</span>)</span><br></pre></td></tr></table></figure></blockquote></li></ul><h3 id="Reflect-has-target-name"><a href="#Reflect-has-target-name" class="headerlink" title="Reflect.has(target, name)"></a>Reflect.has(target, name)</h3><blockquote><p>对应 <code>name in obj</code>  中的 in 运算<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name:<span class="string">'Owen'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//es5</span></span><br><span class="line"> <span class="string">'name'</span> <span class="keyword">in</span> obj <span class="comment">// ture</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Reflect</span></span><br><span class="line"><span class="built_in">Reflect</span>.has(obj,<span class="string">'name'</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p></blockquote><ul><li>Reflect.ownKeys(target)</li><li>Reflect.isExtensible(target)</li><li>Reflect.preventExtensions(target)</li><li><p>Reflect.getOwnPropertyDescriptor(target, name)</p><h3 id="Reflect-getPrototypeOf-target"><a href="#Reflect-getPrototypeOf-target" class="headerlink" title="Reflect.getPrototypeOf(target)"></a>Reflect.getPrototypeOf(target)</h3><blockquote><p>获取对象原型<br>参数不是对象，Object.getPrototypeOf会将这个参数转为对象，然后再运行，而Reflect.getPrototypeOf会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObj = <span class="keyword">new</span> FancyThing();</span><br><span class="line"></span><br><span class="line"><span class="comment">// es5 </span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(myObj) === FancyThing.prototype;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reflect</span></span><br><span class="line"><span class="built_in">Reflect</span>.getPrototypeOf(myObj) === FancyThing.prototype;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>Reflect.setPrototypeOf(target, prototype)</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Reflect&quot;&gt;&lt;a href=&quot;#Reflect&quot; class=&quot;headerlink&quot; title=&quot;Reflect&quot;&gt;&lt;/a&gt;Reflect&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;将&lt;code&gt;Object&lt;/code&gt;对象中一些属于语言内部的方法，放到
      
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="Reflect" scheme="http://yoursite.com/tags/Reflect/"/>
    
  </entry>
  
  <entry>
    <title>proxy</title>
    <link href="http://yoursite.com/2019/03/26/proxy/"/>
    <id>http://yoursite.com/2019/03/26/proxy/</id>
    <published>2019-03-26T14:51:32.000Z</published>
    <updated>2019-03-28T11:03:10.371Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><blockquote><p>用于修改某些操作的默认行为。（对编程语言进行编程）<br>在目标对象之前架设一层‘门户’，外界访问对象时，必须先访问这个门户，<label>对外界的访问进行过滤和改写</label></p></blockquote><p><strong>生成：</strong></p><blockquote><p>ES6中 所有proxy实例 通过 Proxy 构造函数生成<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">new</span> <span class="built_in">Proxy</span>(target,handler);</span><br><span class="line"><span class="comment">// target对象 要访问的对象， handler对象 拦截行为</span></span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  <span class="keyword">get</span>: function(target, property) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">35</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy.time <span class="comment">// 35</span></span><br><span class="line">proxy.name <span class="comment">// 35</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Proxy-支持的操作"><a href="#Proxy-支持的操作" class="headerlink" title="Proxy 支持的操作"></a>Proxy 支持的操作</h3><ul><li>get(target, propKey, receiver)：拦截对象属性的读取，比如proxy.foo和proxy[‘foo’]。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*get 接收三个参数</span></span><br><span class="line"><span class="comment">*target 目标对象</span></span><br><span class="line"><span class="comment">*property 属性名</span></span><br><span class="line"><span class="comment">*proxy 实例本身</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">"Owen"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;</span><br><span class="line">  <span class="keyword">get</span>: function(target, property) &#123;</span><br><span class="line">    <span class="keyword">if</span> (property <span class="keyword">in</span> target) &#123;</span><br><span class="line">      <span class="keyword">return</span> target[property];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">ReferenceError</span>(<span class="string">"Property \""</span> + property + <span class="string">"\" does not exist."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy.name <span class="comment">// "Owen"</span></span><br><span class="line">proxy.age <span class="comment">// error:Property "age" does not exist.</span></span><br><span class="line"><span class="comment">//如果访问目标对象不存在的属性，会抛出一个错误。如果没有这个拦截函数，访问不存在的属性，只会返回undefined。</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>set(target, propKey, value, receiver)：拦截对象属性的设置，比如proxy.foo = v或proxy[‘foo’] = v，返回一个布尔值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*set 有4 个参数</span></span><br><span class="line"><span class="comment">*target 目标对象</span></span><br><span class="line"><span class="comment">*property 属性名</span></span><br><span class="line"><span class="comment">*value 属性值</span></span><br><span class="line"><span class="comment">*proxy 实例本身</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">let</span> validator = &#123;</span><br><span class="line">  <span class="keyword">set</span>: function(obj, prop, value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prop === <span class="string">'age'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">Number</span>.isInteger(value)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'The age is not an integer'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (value &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeError</span>(<span class="string">'The age seems invalid'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对于满足条件的 age 属性以及其他属性，直接保存</span></span><br><span class="line">    obj[prop] = value;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">//严格模式下 return false or undefined 会报错 </span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, validator);</span><br><span class="line">obj.age = <span class="number">18</span>;</span><br><span class="line">obj.age =<span class="string">'18'</span>; <span class="comment">//error</span></span><br><span class="line">obj.age =<span class="number">101</span>;<span class="comment">//error</span></span><br><span class="line"><span class="comment">//每当对象发生变化时，会自动更新 DOM。</span></span><br></pre></td></tr></table></figure></li><li><p>has(target, propKey)：拦截propKey in proxy的操作，返回一个布尔值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*接收两个参数</span></span><br><span class="line"><span class="comment">*target目标对象</span></span><br><span class="line"><span class="comment">*key 查询的属性名</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  has (target, key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">'_'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> key <span class="keyword">in</span> target;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">_prop</span>: <span class="string">'Owen'</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="string">'_prop'</span> <span class="keyword">in</span> proxy <span class="comment">// false</span></span><br><span class="line"><span class="comment">//拦截以‘_’开头的属性名 对for ...in 遍历不生效</span></span><br></pre></td></tr></table></figure></li><li><p>deleteProperty(target, propKey)：拦截delete proxy[propKey]的操作，返回一个布尔值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  deleteProperty (target, key) &#123;</span><br><span class="line">    invariant(key, <span class="string">'delete'</span>);</span><br><span class="line">    <span class="keyword">delete</span> target[key];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invariant</span> (<span class="params">key, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">'_'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Invalid attempt to <span class="subst">$&#123;action&#125;</span> private "<span class="subst">$&#123;key&#125;</span>" property`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">_prop</span>: <span class="string">'foo'</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="keyword">delete</span> proxy._prop</span><br><span class="line"><span class="comment">// Error: Invalid attempt to delete private "_prop" property</span></span><br></pre></td></tr></table></figure></li><li><p>ownKeys(target)：拦截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for…in循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而Object.keys()的返回结果仅包括目标对象自身的可遍历属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拦截对象自身属性的读取操作</span></span><br><span class="line"><span class="keyword">let</span> target = &#123;</span><br><span class="line">  _bar: <span class="string">'foo'</span>,</span><br><span class="line">  _prop: <span class="string">'bar'</span>,</span><br><span class="line">  prop: <span class="string">'Owen'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">  ownKeys (target) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.ownKeys(target).filter(<span class="function"><span class="params">key</span> =&gt;</span> key[<span class="number">0</span>] !== <span class="string">'_'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(proxy)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(target[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//会自动过滤 不存在的属性，Symbol，不可遍历属性</span></span><br></pre></td></tr></table></figure></li><li><p>getOwnPropertyDescriptor(target, propKey)：拦截Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  getOwnPropertyDescriptor (target, key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">'_'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.getOwnPropertyDescriptor(target, key);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">_foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="string">'tar'</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(proxy, <span class="string">'wat'</span>)</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(proxy, <span class="string">'_foo'</span>)</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(proxy, <span class="string">'baz'</span>)</span><br><span class="line"><span class="comment">// &#123; value: 'tar', writable: true, enumerable: true, configurable: true &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>defineProperty(target, propKey, propDesc)：拦截Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一个布尔值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  defineProperty (target, key, descriptor) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line">proxy.owen = <span class="string">'Owen'</span> <span class="comment">// 不会生效</span></span><br></pre></td></tr></table></figure></li><li><p>preventExtensions(target)：拦截Object.preventExtensions(proxy)，返回一个布尔值。</p></li><li><p>getPrototypeOf(target)：拦截Object.getPrototypeOf(proxy)，返回一个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主要拦截获取对象原型</span></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">*Object.prototype.__proto__</span></span><br><span class="line"><span class="comment">*Object.prototype.isPrototypeOf()</span></span><br><span class="line"><span class="comment">*Object.getPrototypeOf()</span></span><br><span class="line"><span class="comment">*Reflect.getPrototypeOf()</span></span><br><span class="line"><span class="comment">*instanceof</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">var</span> proto = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  getPrototypeOf(target) &#123;</span><br><span class="line">    <span class="keyword">return</span> proto;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(p) === proto <span class="comment">// true</span></span><br><span class="line"><span class="comment">//返回值必须是对象或者null，否则报错</span></span><br></pre></td></tr></table></figure></li><li><p>isExtensible(target)：拦截Object.isExtensible(proxy)，返回一个布尔值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  isExtensible: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Owen"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.isExtensible(p)</span><br><span class="line"><span class="comment">//返回值必须是Boolean</span></span><br></pre></td></tr></table></figure></li><li><p>setPrototypeOf(target, proto)：拦截Object.setPrototypeOf(proxy, proto)，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。</p></li><li><p>apply(target, object, args)：拦截 Proxy 实例作为函数调用的操作，比如proxy(…args)、proxy.call(object, …args)、proxy.apply(…)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*接收三个参数 </span></span><br><span class="line"><span class="comment">*target 目标对象</span></span><br><span class="line"><span class="comment">*this  目标对象上下文</span></span><br><span class="line"><span class="comment">*目标对象的参数数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> target = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'I am the target'</span>; &#125;;</span><br><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  apply: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'I am the proxy'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"></span><br><span class="line">p()</span><br><span class="line"><span class="comment">// "I am the proxy"</span></span><br></pre></td></tr></table></figure></li><li><p>construct(target, args)：拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(…args)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接收两个参数</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*target 目标对象</span></span><br><span class="line"><span class="comment">*args 构造函数参数对象</span></span><br><span class="line"><span class="comment">函数必须返回对象，否则会报错</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">let</span> obj = &#123;</span><br><span class="line">      construct: <span class="function"><span class="keyword">function</span>(<span class="params">target, args</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Owen: '</span> + args.join(<span class="string">', '</span>));</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">value</span>: args[<span class="number">0</span>] * <span class="number">10</span> &#125;;</span><br><span class="line">   <span class="comment">// retirn '18'; error</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, obj)</span><br><span class="line"> <span class="keyword">new</span> p(<span class="number">2</span>).value <span class="comment">// 20</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Proxy&quot;&gt;&lt;a href=&quot;#Proxy&quot; class=&quot;headerlink&quot; title=&quot;Proxy&quot;&gt;&lt;/a&gt;Proxy&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;用于修改某些操作的默认行为。（对编程语言进行编程）&lt;br&gt;在目标对象之前架设一层‘门户’，
      
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="Proxy" scheme="http://yoursite.com/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>Extend</title>
    <link href="http://yoursite.com/2019/03/19/extend/"/>
    <id>http://yoursite.com/2019/03/19/extend/</id>
    <published>2019-03-19T11:28:30.000Z</published>
    <updated>2019-04-02T08:11:29.551Z</updated>
    
    <content type="html"><![CDATA[<h3 id="String-Extend"><a href="#String-Extend" class="headerlink" title="String Extend"></a>String Extend</h3><h4 id="被-for-of-遍历"><a href="#被-for-of-遍历" class="headerlink" title="被 for ... of 遍历"></a><strong>被 <code>for ... of</code> 遍历</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> <span class="string">'abc'</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">    <span class="comment">//a</span></span><br><span class="line">    <span class="comment">//b</span></span><br><span class="line">    <span class="comment">//c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找字符"><a href="#查找字符" class="headerlink" title="查找字符"></a><strong>查找字符</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'Hello Brother!'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//includes 是否包含参数字符串</span></span><br><span class="line">str.includes(<span class="string">'Br'</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//startsWith  开头是否存在参数字符串</span></span><br><span class="line">str.startsWith(<span class="string">'Hello'</span>) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//endsWith 结尾是否存在参数字符串</span></span><br><span class="line">str.endsWith(<span class="string">'er!'</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="重复字符"><a href="#重复字符" class="headerlink" title="重复字符"></a><strong>重复字符</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//repeat  重复 n 次，  n 为参数,返回新字符串</span></span><br><span class="line"><span class="keyword">let</span> re = <span class="string">'Hello Brother!'</span>;</span><br><span class="line"></span><br><span class="line">re.repeat(<span class="number">2</span>); <span class="comment">//"Hello Brother!Hello Brother!"</span></span><br><span class="line"></span><br><span class="line">re.repeat(<span class="number">-2</span>); <span class="comment">// Invalid count value</span></span><br><span class="line">re.repeat(<span class="literal">Infinity</span>); <span class="comment">// Invalid count value</span></span><br><span class="line"><span class="comment">//小数会取整 </span></span><br><span class="line">re.repeat(<span class="number">1.9</span>) <span class="comment">// "Hello Brother!"</span></span><br><span class="line">re.repeat(<span class="number">-0.9</span>) <span class="comment">// ""</span></span><br></pre></td></tr></table></figure><h4 id="补全字符"><a href="#补全字符" class="headerlink" title="补全字符"></a><strong>补全字符</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//补全开头 padStart 补齐尾部 padEnd</span></span><br><span class="line"><span class="keyword">let</span> pd = <span class="string">'Brother!'</span>; </span><br><span class="line">pd.padStart(<span class="number">14</span>,<span class="string">'Hello '</span>); <span class="comment">//"Hello Brother!"</span></span><br><span class="line"><span class="comment">//第一个参数为补齐的最大长度（整串字符） 第二个参数为补齐缺省的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果原始字符长度大于等于最大长度，返回原字符串</span></span><br><span class="line">pd.padStart(<span class="number">7</span>,<span class="string">'Hello '</span>)<span class="comment">// 'Brother!'</span></span><br><span class="line">pd.padStart(<span class="number">8</span>,<span class="string">'Hello '</span>)<span class="comment">// 'Brother!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果最大长度小于补齐长度，则去除超出部分</span></span><br><span class="line">pd.padStart(<span class="number">9</span>,<span class="string">'Aay '</span>)<span class="comment">//'ABrother!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果缺省第二个参数则 默认使用空格补齐</span></span><br><span class="line">pd.padStart(<span class="number">9</span>)<span class="comment">//' Brother!'</span></span><br></pre></td></tr></table></figure><h4 id="模板字符"><a href="#模板字符" class="headerlink" title="模板字符"></a><strong>模板字符</strong></h4><blockquote><p>通过反引号 “ <code></code> ” 当普通字符串使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有换行和空格会保留，嵌入变量，须将变量包含在 `$&#123;&#125;` 中，并且可进行运算,函数调用，对象调用</span></span><br><span class="line"><span class="keyword">let</span> num =<span class="number">1</span>,obj =&#123;<span class="attr">name</span>:<span class="string">'Owen'</span>&#125;, fn=<span class="function"><span class="params">()</span>=&gt;</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> str =<span class="string">` </span></span><br><span class="line"><span class="string"><span class="subst">$&#123;num * <span class="number">3</span> + <span class="number">1</span> + fn() + obj.name&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str)</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">" </span></span><br><span class="line"><span class="comment">7Owen"</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果紧更在函数名后，函数将被调用（标签模板）</span></span><br><span class="line">alert<span class="string">`123`</span>  <span class="comment">// 等同于</span></span><br><span class="line">alert(<span class="number">123</span>)</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="转义符"><a href="#转义符" class="headerlink" title="转义符 \"></a><strong>转义符 <code>\</code></strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以 x 开头,会被当做 16 进制</span></span><br><span class="line"></span><br><span class="line"> <span class="string">`\x23`</span> <span class="comment">// #</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//以 u 开头,会被当做 unicode  字符</span></span><br><span class="line"> <span class="string">`\u004F`</span> <span class="comment">//"O"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果无法编译将会报错</span></span><br></pre></td></tr></table></figure><p>ES2018 放松了对<code>标签模板</code>里面的字符串转义的限制，无法转义的返回<code>undefined</code>；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log<span class="string">`\uw`</span>;</span><br><span class="line"><span class="comment">//[undefined, raw: Array(1)]</span></span><br><span class="line"><span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><hr><h3 id="Function-Extend"><a href="#Function-Extend" class="headerlink" title="Function Extend"></a>Function Extend</h3><h4 id="形参指定默认值"><a href="#形参指定默认值" class="headerlink" title="形参指定默认值"></a><strong>形参指定默认值</strong></h4><blockquote><p>形参 不能再次使用 let 和 const 声明<br>形参不能重名<br>函数 length 不包含设置默认值和后面的形参个数<br>使用 <code>...arg</code> 中的参数 length 也不包含</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function">(<span class="params">x, y = <span class="string">'Owen'</span></span>) =&gt;</span>( <span class="built_in">console</span>.log(x,y));</span><br><span class="line">fn(<span class="number">1</span>) <span class="comment">// 1 "Owen"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认参数 惰性求值</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">99</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">y = x + <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(y);</span><br><span class="line">&#125;</span><br><span class="line">foo() <span class="comment">// 100</span></span><br><span class="line">x = <span class="number">100</span>;</span><br><span class="line">foo() <span class="comment">// 101</span></span><br><span class="line"><span class="comment">//调用一次计算一次</span></span><br></pre></td></tr></table></figure><blockquote><p>事实上 每次调用函数，如果不传递参数， 形参默认传递 <code>undefined</code><br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 默认参数最好定义再尾部，因为使用形参默认参数，那么那个位置的形参必传</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y = <span class="number">5</span>, z， ...arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y, z];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f() <span class="comment">// [undefined, 5, undefined]</span></span><br><span class="line">f(<span class="number">1</span>) <span class="comment">// [1, 5, undefined]</span></span><br><span class="line">f(<span class="number">1</span>, ,<span class="number">2</span>) <span class="comment">// 报错</span></span><br><span class="line">f(<span class="number">1</span>, <span class="literal">undefined</span>, <span class="number">2</span>) <span class="comment">// [1, 5, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//length 不包含设置默认值 和后面的形参 的个数，</span></span><br><span class="line">f().length <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a><strong>作用域</strong></h4><blockquote><p>函数中的<label>变量无法访问</label> 默认值<br>函数中的形参名不能和默认名一样<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数变量无法访问默认值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">y = x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f() <span class="comment">// ReferenceError: x is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数中的形参名不能和默认名一样</span></span><br><span class="line"><span class="comment">//参数x = x形成一个单独作用域。实际执行的是let x = x，由于暂时性死区的原因，这行代码会报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x = x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">f()<span class="comment">//  x is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y = function(</span>) </span>&#123; x = <span class="number">2</span>; &#125;) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">3</span>;</span><br><span class="line">  y();</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo() <span class="comment">// 3</span></span><br><span class="line">x <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p></blockquote><p>由于  var 声明的 x 和函数形参 x 不再同一个作用域 ， 因此调用 y() x值不变；<br>如果 去掉 var , 那么 x 就指向 形参 x ,调用 y() x = 2。</p><h4 id="reset-参数-（…）"><a href="#reset-参数-（…）" class="headerlink" title="reset 参数 （…）"></a><strong>reset 参数 （…）</strong></h4><blockquote><p>使用形式 <code>...arg</code>  实数以数组的形势赋给变量<br>reset 参数后不能再有形参，否则报错<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">a,...arg</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)<span class="comment">//[2,3,4,5]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">a,...arg,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ught SyntaxError: Rest parameter must be last formal parameter</span></span><br></pre></td></tr></table></figure></p></blockquote><p><label>只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错。 </label><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a, b = a</span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="comment">// code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params">&#123;a, b&#125;</span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="comment">// code</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function">(<span class="params">...a</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="comment">// code</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="comment">// 报错</span></span><br><span class="line">  fn(&#123;a, b&#125;) &#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a><strong>箭头函数</strong></h4><blockquote><p>使用 <code>() =&gt;</code>  定义函数<br>注意：</p><ul><li>this 指向函数定义时所绑定的普通函数，不会被(bind,call,apply)更改,也不会被调用时的上下文改变。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span><span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">"Owen"</span>&#125;;</span><br><span class="line"></span><br><span class="line">fn.call(obj) <span class="comment">//window</span></span><br><span class="line"></span><br><span class="line">fn.bind(obj)</span><br><span class="line">fn() <span class="comment">//window</span></span><br><span class="line"></span><br><span class="line">fn.apply(obj)  <span class="comment">//window</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="comment">//可以通过改变宿主环境来改变 this 指向</span></span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>)&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">foo.call(obj)() <span class="comment">//&#123;name: "Owen"&#125;</span></span><br><span class="line">foo.call(obj)()() <span class="comment">//&#123;name: "Owen"&#125; &#123;name: "Owen"&#125;</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li><p>外层没有普通函数 ，严格模式和非严格模式下它的this都会指向window(全局对象)。</p></li><li><p>不可以当作构造函数，也就是说，不可以使用new命令，没有<code>prototype</code>属性，不支持<code>new.target</code>,否则会抛出一个错误。</p></li><li>参数和箭头之间不能换行</li><li><p>不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p></li><li><p>不可以使用yield命令，因此箭头函数不能用作 Generator 函数。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//定义简单函数</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">'Owen'</span>;</span><br><span class="line">fn()<span class="comment">// 'Owen'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo = <span class="function"><span class="params">r</span> =&gt;</span> r;</span><br><span class="line">foo(<span class="string">'Owen'</span>) <span class="comment">// 'Owen'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f = <span class="function">(<span class="params">num1,num2</span>) =&gt;</span> num1 + num2;</span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>)<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果返回一个对象需要小括号包裹,f否则会报错</span></span><br><span class="line"><span class="keyword">let</span> f = <span class="function">(<span class="params">name,age</span>) =&gt;</span> (&#123;name,age&#125;);</span><br><span class="line">f(<span class="string">'Owen'</span>,<span class="number">18</span>)<span class="comment">//&#123;name: "Owen", age: 18&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果代码部分大于一条语句，那么需要 大括号包裹，使用return 返回值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fn1 = <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="keyword">return</span> r + a;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">####  **不推荐使用场景**</span><br><span class="line"></span><br><span class="line">- 在对象中使用 <span class="keyword">this</span>.</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`javascript</span></span><br><span class="line"><span class="string">var obj = &#123;</span></span><br><span class="line"><span class="string">  gender:"man",</span></span><br><span class="line"><span class="string">  getSex: () =&gt;  &#123;console.log(this.gender)&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">obj.getSex() //undefined</span></span><br><span class="line"><span class="string">//this -&gt; global</span></span><br></pre></td></tr></table></figure><ul><li>动态使用 this. </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelector(<span class="string">'li'</span>);</span><br><span class="line">lis.addEventListener(<span class="string">'click'</span>,() =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// this -&gt; global</span></span><br></pre></td></tr></table></figure><ul><li>内部有大量的读写操作，不单纯是为了计算值，这时也不应该使用箭头函数</li></ul><h4 id="双冒号运算符"><a href="#双冒号运算符" class="headerlink" title="双冒号运算符 ::"></a><strong>双冒号运算符 <code>::</code></strong></h4><blockquote><p>目前只是一个提案，用来绑定函数的 this 类似于 (bind,call,apply)<br>将做边的对象作为参数，绑定到右边函数上。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bar:: fn</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">fn.bind(bar);</span><br><span class="line"></span><br><span class="line">bar::fn(...arguments);</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">fn.apply(bar, <span class="built_in">arguments</span>);</span><br></pre></td></tr></table></figure><h4 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a><strong>函数调用</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   foo()</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   fn()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">f()</span><br></pre></td></tr></table></figure><blockquote><p>函数调用会在内存中形成一个 调用记录（<code>调用帧</code>），保存着调用位置和内部变量等信息。<br>函数 <code>f</code>内部调用 <code>foo</code>函数，<code>f</code>调用帧的上方会形成 <code>foo</code>的调用帧， <code>foo</code>运行接受并且将结果返回给 <code>f</code>，<code>foo</code>的调用帧才会消失，同理，<code>foo</code>函数 内部调用<code>fn</code>函数，还会有 <code>fn</code> 的调用帧，以此类推，形成一个<code>调用栈</code>。</p></blockquote><h4 id="尾调用"><a href="#尾调用" class="headerlink" title="尾调用"></a><strong>尾调用</strong></h4><blockquote><p>指某个函数的最后一步是调用另一个函数。<br>不一定出现在函数尾部，只要是最后一步操作即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尾调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fn(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//不属于尾调用</span></span><br><span class="line"><span class="comment">// 情况一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> y = g(x);</span><br><span class="line">  <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况二</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> g(x) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况三</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  g(x);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  g(x);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><h3 id="Array-Extend"><a href="#Array-Extend" class="headerlink" title="Array Extend"></a>Array Extend</h3><h4 id="扩展运算-…"><a href="#扩展运算-…" class="headerlink" title="扩展运算 (…)"></a><strong>扩展运算 (…)</strong></h4><blockquote><p>主要用于函数调用， 将一个数组，变为参数序列。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(... [<span class="number">1</span>,<span class="number">2</span>]) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p></blockquote><h5 id="clone数组"><a href="#clone数组" class="headerlink" title="clone数组"></a><strong>clone数组</strong></h5> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//es5 </span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = arr.concat();</span><br><span class="line"></span><br><span class="line"> <span class="comment">//es6</span></span><br><span class="line"><span class="keyword">let</span> [...arr2] = arr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr];</span><br></pre></td></tr></table></figure><h5 id="合并数组"><a href="#合并数组" class="headerlink" title="合并数组"></a><strong>合并数组</strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="keyword">let</span> arr3 = arr.concat(arr1,arr2);</span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="keyword">let</span> arr4 = [...arr,...arr1,...arr2];</span><br></pre></td></tr></table></figure><p>合并和clone 都是浅拷贝；</p><h5 id="配合解构赋值"><a href="#配合解构赋值" class="headerlink" title="配合解构赋值"></a><strong>配合解构赋值</strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">first <span class="comment">// 1</span></span><br><span class="line">rest  <span class="comment">// [2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [];</span><br><span class="line">first <span class="comment">// undefined</span></span><br><span class="line">rest  <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="string">"foo"</span>];</span><br><span class="line">first  <span class="comment">// "foo"</span></span><br><span class="line">rest   <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展运算符，只能放在参数的最后一位，否则会报错。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...middle, last] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">//error</span></span><br></pre></td></tr></table></figure><h5 id="将伪数组-内部实现了Iterator-转化伪数组"><a href="#将伪数组-内部实现了Iterator-转化伪数组" class="headerlink" title="将伪数组(内部实现了Iterator)转化伪数组"></a><strong>将伪数组(内部实现了Iterator)转化伪数组</strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//内部实现Iterator</span></span><br><span class="line"><span class="comment">//字符串， Set, Map, Generator, NodeList, htmlcollection, classList ,argument内部都实现了迭代接口</span></span><br><span class="line"><span class="keyword">let</span> nodes = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> divs = [...nodes];</span><br><span class="line"></span><br><span class="line"><span class="comment">//内部未实现Iterator</span></span><br><span class="line"><span class="keyword">let</span> objs = &#123;</span><br><span class="line">  <span class="string">'0'</span>: <span class="string">'a'</span>,</span><br><span class="line">  <span class="string">'1'</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="string">'2'</span>: <span class="string">'c'</span>,</span><br><span class="line">  length: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> arr =[...objs];<span class="comment">//error</span></span><br><span class="line"><span class="comment">//可通过 Array.from方法转化</span></span><br><span class="line"><span class="keyword">let</span> arr1 = <span class="built_in">Array</span>.from(objs)</span><br></pre></td></tr></table></figure><h4 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h4><blockquote><p>将伪数组转化为数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrLike = &#123;</span><br><span class="line">  <span class="string">'0'</span>: <span class="string">'a'</span>,</span><br><span class="line">  <span class="string">'1'</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="string">'2'</span>: <span class="string">'c'</span>,</span><br><span class="line">  length: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(arrLike)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*第二个参数</span></span><br><span class="line"><span class="comment"> 遍历每个元素并返回运算结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">Array</span>.from(arrLike, x =&gt; x * x);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">Array</span>.from(arrLike).map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], (x) =&gt; x * x)</span><br><span class="line"><span class="comment">// [1, 4, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将布尔值为false的成员转为0</span></span><br><span class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>, , <span class="number">2</span>, , <span class="number">3</span>], (n) =&gt; n || <span class="number">0</span>)</span><br><span class="line"><span class="comment">// [1, 0, 2, 0, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取DOM 节点的文本内容。</span></span><br><span class="line"><span class="built_in">Array</span>.from</span><br><span class="line">(<span class="built_in">document</span>.querySelectorAll(<span class="string">'span.name'</span>);, s =&gt; s.textContent)</span><br><span class="line"><span class="comment">//第三个参数 绑定第二个参数中回调函数的this</span></span><br></pre></td></tr></table></figure><h4 id="find-and-findIndex"><a href="#find-and-findIndex" class="headerlink" title="find and findIndex"></a><strong>find and findIndex</strong></h4><blockquote><p>回调函数遍历所有成员，返回符合条件的值， 没有则返回 undefined<br>find 返回值为，第一个符合条件的成员<br>findIndex ，没有则返回 -1<br>回调函数接受三个参数（成员，位置，原数组）<br>第二个参数 绑定回调函数 this<br>可以识别NaN<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].find(<span class="function"><span class="keyword">function</span>(<span class="params">v,i,arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v&lt;<span class="number">0</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// -5</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].findIndex(<span class="function">(<span class="params">n</span>) =&gt;</span> n &lt; <span class="number">0</span>)</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="fill"><a href="#fill" class="headerlink" title="fill"></a><strong>fill</strong></h4><blockquote><p>填充数组,修改原数组<br>第一个参数为填充值，第二个参数为开始填充的位置，第三个参数为结束位置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.fill(<span class="string">'Owen'</span>);</span><br><span class="line"><span class="comment">//["Owen","Owen","Owen"]</span></span><br><span class="line">arr.fill(<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">//[1,1,3]</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Interator"><a href="#Interator" class="headerlink" title="Interator"></a><strong>Interator</strong></h4><blockquote><p>keys,values,entries 对应属性遍历<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// keys</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'o'</span>,<span class="string">'w'</span>,<span class="string">'e'</span>,<span class="string">'n'</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> arr.keys())&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(key);</span><br><span class="line">   <span class="comment">//0 1 2 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr.values())&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(item);</span><br><span class="line">   <span class="comment">//o w e n</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [i,item] <span class="keyword">of</span> arr.entries())&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(i,item)</span><br><span class="line"><span class="comment">//1 "w"</span></span><br><span class="line"><span class="comment">//2 "e"</span></span><br><span class="line"><span class="comment">//3 "n"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="includes"><a href="#includes" class="headerlink" title="includes"></a><strong>includes</strong></h4><blockquote><p>返回一个Boolean ,数组是否包含给定的值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].includes(<span class="number">3</span>)<span class="comment">//true</span></span><br><span class="line"><span class="comment">//第二个参数为搜索的起始位置</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].includes(<span class="number">3</span>,<span class="number">4</span>)<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 是否支持 */</span></span><br><span class="line"><span class="keyword">const</span> contains = <span class="function">(<span class="params">(</span>) =&gt;</span></span><br><span class="line">  <span class="built_in">Array</span>.prototype.includes</span><br><span class="line">    ? <span class="function">(<span class="params">arr, value</span>) =&gt;</span> arr.includes(value)</span><br><span class="line">    : <span class="function">(<span class="params">arr, value</span>) =&gt;</span> arr.some(<span class="function"><span class="params">el</span> =&gt;</span> el === value)</span><br><span class="line">)();</span><br><span class="line">contains([<span class="string">'foo'</span>, <span class="string">'bar'</span>], <span class="string">'baz'</span>); <span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="flat-flatMap"><a href="#flat-flatMap" class="headerlink" title="flat ,flatMap"></a><strong>flat ,flatMap</strong></h4><blockquote><p>将二维数组变成一位数组，并返回新数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>]].flat()</span><br><span class="line"><span class="comment">//[1,2,3,4]</span></span><br><span class="line"><span class="comment">//默认拉平1层</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,[<span class="number">4</span>]]].flat(<span class="number">2</span>)</span><br><span class="line"><span class="comment">//[1,2,3,4]</span></span><br><span class="line"><span class="comment">//将所有维度变成一维</span></span><br><span class="line">array.flat(Infinty)</span><br><span class="line"><span class="comment">//会忽略空位</span></span><br><span class="line">[<span class="number">1</span>,,[<span class="number">3</span>,<span class="number">4</span>]].flat()</span><br><span class="line"><span class="comment">//[1,3,4]</span></span><br></pre></td></tr></table></figure></p></blockquote><hr><h3 id="Object-extend"><a href="#Object-extend" class="headerlink" title="Object extend"></a>Object extend</h3><h4 id="对象中的简写"><a href="#对象中的简写" class="headerlink" title="对象中的简写"></a>对象中的简写</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数</span></span><br><span class="line"><span class="keyword">const</span> obj =&#123;</span><br><span class="line">  methode()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Owen'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  * m() &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'hello world'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">const</span> obj =&#123;</span><br><span class="line">  methode:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Owen'</span></span><br><span class="line">  &#125;</span><br><span class="line">  m:<span class="function"><span class="keyword">function</span>* (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'hello world'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用变量定义对象</span></span><br><span class="line">  <span class="comment">//默认情况下会自动将对象转为字符串[object Object]，这一点要特别小心。</span></span><br><span class="line"><span class="keyword">let</span> lastWord = <span class="string">'last word'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="string">'first word'</span>: <span class="string">'hello'</span>,</span><br><span class="line">  [lastWord]: <span class="string">'world'</span>,</span><br><span class="line">  [<span class="string">'h'</span> + <span class="string">'ello'</span>]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hi'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj[<span class="string">'first word'</span>] <span class="comment">// "hello"</span></span><br><span class="line">obj[lastWord] <span class="comment">// "world"</span></span><br><span class="line">obj[<span class="string">'last word'</span>] <span class="comment">// "world"</span></span><br><span class="line">obj.hello() <span class="comment">// hi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象中 函数 name属性</span></span><br><span class="line"><span class="comment">//对象的方法是一个 Symbol 值，那么name属性返回的是这个 Symbol 值的描述。</span></span><br><span class="line"><span class="keyword">const</span> key1 = <span class="built_in">Symbol</span>(<span class="string">'description'</span>);</span><br><span class="line"><span class="keyword">const</span> key2 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [key1]() &#123;&#125;,</span><br><span class="line">  [key2]() &#123;&#125;,</span><br><span class="line">  sayName() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Owen'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">get</span> foo() &#123;&#125;,</span><br><span class="line">  <span class="keyword">set</span> foo(x) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj[key1].name <span class="comment">// "[description]"</span></span><br><span class="line">obj[key2].name <span class="comment">// ""</span></span><br><span class="line">obj.sayName.name   <span class="comment">// "sayName"</span></span><br><span class="line"><span class="keyword">const</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">'foo'</span>);</span><br><span class="line"></span><br><span class="line">descriptor.get.name <span class="comment">// "get foo"</span></span><br><span class="line">descriptor.set.name <span class="comment">// "set foo"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过构造函数创立的函数</span></span><br><span class="line">(<span class="keyword">new</span> <span class="built_in">Function</span>()).name <span class="comment">// "anonymous"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过 bind 绑定的函数</span></span><br><span class="line"><span class="keyword">var</span> doSomething = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line">doSomething.bind().name <span class="comment">// "bound doSomething"</span></span><br></pre></td></tr></table></figure><h4 id="枚举和遍历"><a href="#枚举和遍历" class="headerlink" title="枚举和遍历"></a>枚举和遍历</h4><blockquote><p>Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name:<span class="string">'Owen'</span></span><br><span class="line">&#125;</span><br><span class="line">Objct.getOwnPropertyDescriptor(obj,<span class="string">'name'</span>);</span><br><span class="line"><span class="comment">//  &#123;</span></span><br><span class="line"><span class="comment">//    value: Owen,</span></span><br><span class="line"><span class="comment">//    writable: true,</span></span><br><span class="line"><span class="comment">//    enumerable: true, //可枚举</span></span><br><span class="line"><span class="comment">//    configurable: true</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br></pre></td></tr></table></figure><h5 id="如果-enumerable-为-false"><a href="#如果-enumerable-为-false" class="headerlink" title="如果 enumerable 为 false"></a><strong>如果 enumerable 为 false</strong></h5><p>有些操作会忽略，当前属性</p><ul><li>for…in循环：只遍历对象自身的和继承的可枚举的属性。</li><li>Object.keys()：返回对象自身的所有可枚举的属性的键名。</li><li>JSON.stringify()：只串行化对象自身的可枚举的属性。</li><li>(ES6) Object.assign()： 忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。</li></ul><blockquote><p>共有 5 种方法可以遍历对象的属性。</p><ul><li>for…in</li></ul></blockquote><p>for…in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。</p><ul><li>Object.keys(obj)</li></ul><p>Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。</p><ul><li>Object.getOwnPropertyNames(obj)</li></ul><p>Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。</p><ul><li>Object.getOwnPropertySymbols(obj)</li></ul><p>Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性的键名。</p><ul><li>Reflect.ownKeys(obj)<br>Reflect.ownKeys返回一个数组，包含对象自身的所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。</li></ul><h5 id="都遵守同样的属性遍历的次序规则。"><a href="#都遵守同样的属性遍历的次序规则。" class="headerlink" title="都遵守同样的属性遍历的次序规则。"></a><strong>都遵守同样的属性遍历的次序规则。</strong></h5><ul><li>首先遍历所有数值键，按照数值升序排列。</li><li>其次遍历所有字符串键，按照加入时间升序排列。</li><li>最后遍历所有 Symbol 键，按照加入时间升序排列。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Reflect</span>.ownKeys(&#123; [<span class="built_in">Symbol</span>()]:<span class="number">0</span>, <span class="attr">b</span>:<span class="number">0</span>, <span class="number">10</span>:<span class="number">0</span>, <span class="number">2</span>:<span class="number">0</span>, <span class="attr">a</span>:<span class="number">0</span> &#125;)</span><br><span class="line"><span class="comment">// ['2', '10', 'b', 'a', Symbol()]</span></span><br></pre></td></tr></table></figure></li></ul><p>上面代码中，Reflect.ownKeys方法返回一个数组，包含了参数对象的所有属性。这个数组的属性次序是这样的，首先是数值属性2和10，其次是字符串属性b和a，最后是 Symbol 属性。</p><p><strong>super</strong></p><blockquote><p><code>this</code> 总是指向函数所在的当前对象<br><code>super</code> 指向当前对象的原型对象。<br>super关键字表示原型对象时，<code>只能用在对象的方法之中</code>，用在其他地方都会报错。<br>目前，只有对象<label>方法的简写法可以让 JavaScript 引擎确认，定义的是对象的方法。</label><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proto = &#123;</span><br><span class="line">  foo: <span class="string">'hello'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  foo: <span class="string">'world'</span>,</span><br><span class="line">  find() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.foo;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, proto);</span><br><span class="line">obj.find() <span class="comment">// "hello"</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="对象扩展运算符"><a href="#对象扩展运算符" class="headerlink" title="对象扩展运算符"></a>对象扩展运算符</h4><blockquote><p>ES2018 将这个运算符引入了对象。<br>解构赋值的拷贝是浅拷贝<br>不能复制继承自原型对象的属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 解构</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//必须保证右方为对象，否则报错</span></span><br><span class="line"><span class="keyword">let</span> &#123; x, y, ...z &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br><span class="line">z <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//与函数参数扩展运算类似，解构赋值须最后一个参数</span></span><br><span class="line"><span class="keyword">let</span> &#123; ...x, y, z &#125; = someObject; <span class="comment">// 句法错误</span></span><br><span class="line"><span class="keyword">let</span> &#123; x, ...y, ...z &#125; = someObject; <span class="comment">// 句法错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//无法继承原型</span></span><br><span class="line"><span class="keyword">let</span> o1 = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> o2 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line">o2.__proto__ = o1;</span><br><span class="line"><span class="keyword">let</span> &#123; ...o3 &#125; = o2;</span><br><span class="line">o3 <span class="comment">// &#123; b: 2 &#125;</span></span><br><span class="line">o3.a <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展运算</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组是特殊的对象，所以对象的扩展运算符也可以用于数组</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123; ...[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>] &#125;;</span><br><span class="line">foo</span><br><span class="line"><span class="comment">// &#123;0: "a", 1: "b", 2: "c"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展运算符后面是一个空对象，无效果</span></span><br><span class="line">&#123;...&#123;&#125;, <span class="attr">a</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="comment">// &#123; a: 1 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展运算符后面不是对象，则会自动将其转为对象 </span></span><br><span class="line">&#123;..<span class="number">.1</span>&#125; <span class="comment">// &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展运算符后面是字符串，它会自动转成一个类似数组的对象</span></span><br><span class="line">&#123;...<span class="string">'Owen'</span>&#125;</span><br><span class="line"><span class="comment">//&#123;0: "O", 1: "w", 2: "e", 3: "n"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ab = &#123; ...a, ...b &#125;;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> ab = <span class="built_in">Object</span>.assign(&#123;&#125;, a, b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//完整克隆一个对象，还拷贝对象原型的属性，可以采用下面的写法。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法一 非浏览器环境不一定部署 __proto__</span></span><br><span class="line"><span class="keyword">const</span> clone1 = &#123;</span><br><span class="line">  __proto__: <span class="built_in">Object</span>.getPrototypeOf(obj),</span><br><span class="line">  ...obj</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">const</span> clone2 = <span class="built_in">Object</span>.assign(</span><br><span class="line">  <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.getPrototypeOf(obj)),</span><br><span class="line">  obj</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法三</span></span><br><span class="line"><span class="keyword">const</span> clone3 = <span class="built_in">Object</span>.create(</span><br><span class="line">  <span class="built_in">Object</span>.getPrototypeOf(obj),</span><br><span class="line">  <span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象的扩展运算符后面可以跟表达式</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  ...(x &gt; <span class="number">1</span> ? &#123;<span class="attr">a</span>: <span class="number">1</span>&#125; : &#123;&#125;),</span><br><span class="line">  b: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展运算符的参数对象之中，如果有取值函数get，这个函数是会执行let aWithXGetter = &#123;</span></span><br><span class="line">  ...a,</span><br><span class="line">  <span class="keyword">get</span> x() &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'not throw yet'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 会抛出错误，因为 x 属性被执行了</span></span><br><span class="line"><span class="keyword">let</span> runtimeError = &#123;</span><br><span class="line">  ...a,</span><br><span class="line">  ...&#123;</span><br><span class="line">    <span class="keyword">get</span> x() &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'throw now'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><hr><h3 id="New-method-for-objects"><a href="#New-method-for-objects" class="headerlink" title="New method for objects"></a>New method for objects</h3><h4 id="Object-is-比较两个值是否严格相等"><a href="#Object-is-比较两个值是否严格相等" class="headerlink" title="Object.is() 比较两个值是否严格相等"></a>Object.is() 比较两个值是否严格相等</h4><blockquote><p>和 <code>===</code> 的区别<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">0</span> === <span class="number">-0</span> <span class="comment">//true</span></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.is(+<span class="number">0</span>, <span class="number">-0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>) <span class="comment">// true</span></span><br><span class="line">es5 实现</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>,<span class="string">'is'</span>,&#123;</span><br><span class="line">  value: <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x === y) &#123;</span><br><span class="line">      <span class="comment">// 针对+0 不等于 -0的情况</span></span><br><span class="line">      <span class="keyword">return</span> x !== <span class="number">0</span> || <span class="number">1</span> / x === <span class="number">1</span> / y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 针对NaN的情况</span></span><br><span class="line">    <span class="keyword">return</span> x !== x &amp;&amp; y !== y;</span><br><span class="line">  &#125;,</span><br><span class="line">  configurable: <span class="literal">true</span>,</span><br><span class="line">  enumerable: <span class="literal">false</span>,</span><br><span class="line">  writable: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h4><blockquote><p>浅拷贝对象，无法拷贝原型,也不拷贝不可枚举的属性。<br>总是拷贝一个属性的值，而不会拷贝它背后的赋值方法或取值方法。<br>同属性后面的覆盖前面的值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(&#123;<span class="attr">b</span>: <span class="string">'c'</span>&#125;,</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(&#123;&#125;, <span class="string">'invisible'</span>, &#123;</span><br><span class="line">    enumerable: <span class="literal">false</span>,</span><br><span class="line">    value: <span class="string">'hello'</span></span><br><span class="line">  &#125;) )</span><br><span class="line"><span class="comment">// &#123; b: 'c' &#125;</span></span><br><span class="line"><span class="built_in">Object</span>.assign([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="comment">//[4,5,3]</span></span><br></pre></td></tr></table></figure><h4 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors()"></a>Object.getOwnPropertyDescriptors()</h4><blockquote><p>返回目标对象所有自身属性（非继承） 的描述对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  foo: <span class="number">123</span>,</span><br><span class="line">  <span class="keyword">get</span> bar() &#123; <span class="keyword">return</span> <span class="string">'Owen'</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span><br><span class="line"><span class="comment">// &#123; foo:</span></span><br><span class="line"><span class="comment">//    &#123; value: 123,</span></span><br><span class="line"><span class="comment">//      writable: true,</span></span><br><span class="line"><span class="comment">//      enumerable: true,</span></span><br><span class="line"><span class="comment">//      configurable: true &#125;,</span></span><br><span class="line"><span class="comment">//   bar:</span></span><br><span class="line"><span class="comment">//    &#123; get: [Function: get bar],</span></span><br><span class="line"><span class="comment">//      set: undefined,</span></span><br><span class="line"><span class="comment">//      enumerable: true,</span></span><br><span class="line"><span class="comment">//      configurable: true &#125; &#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>主要是为了解决Object.assign()无法正确拷贝get属性和set属性的问题。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source = &#123;</span><br><span class="line">  <span class="keyword">set</span> foo(value) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> shallowMerge = <span class="function">(<span class="params">target, source</span>) =&gt;</span> <span class="built_in">Object</span>.defineProperties(</span><br><span class="line">  target,</span><br><span class="line">  <span class="built_in">Object</span>.getOwnPropertyDescriptors(source)</span><br><span class="line">);</span><br><span class="line">shallowMerge(target,source)</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(target, <span class="string">'foo'</span>)</span><br><span class="line"><span class="comment">// &#123; get: undefined,</span></span><br><span class="line"><span class="comment">//   set: [Function: set foo],</span></span><br><span class="line"><span class="comment">//   enumerable: true,</span></span><br><span class="line"><span class="comment">//   configurable: true &#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>配合Object.create()方法，将对象属性克隆到一个新对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shallowClone = <span class="function">(<span class="params">obj</span>) =&gt;</span> <span class="built_in">Object</span>.create(</span><br><span class="line">  <span class="built_in">Object</span>.getPrototypeOf(obj),</span><br><span class="line">  <span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>实现一个对象继承另一个对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一</span></span><br><span class="line"><span class="keyword">const</span> obj1 = <span class="built_in">Object</span>.create(prot);</span><br><span class="line">obj.foo = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二</span></span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="built_in">Object</span>.assign(</span><br><span class="line">  <span class="built_in">Object</span>.create(prot),</span><br><span class="line">  &#123;</span><br><span class="line">    foo: <span class="number">123</span>,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//三</span></span><br><span class="line"><span class="keyword">const</span>  obj3 = <span class="built_in">Object</span>.create(prot,<span class="built_in">Object</span>.getOwnPropertyDescriptors(&#123;</span><br><span class="line">  name:<span class="string">'Owen'</span></span><br><span class="line">&#125;))</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>实现<code>Mixin</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mix = <span class="function">(<span class="params">obj</span>) =&gt;</span> (</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">with</span>:<span class="function">(<span class="params">...mixins</span>) =&gt;</span> mixins.reduce(</span><br><span class="line">      (c,mixin) =&gt; <span class="built_in">Object</span>.create(  c, <span class="built_in">Object</span>.getOwePropertyDescriptors( minxin )), obj</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="keyword">let</span> a = &#123;<span class="attr">a</span>: <span class="string">'a'</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> b = &#123;<span class="attr">b</span>: <span class="string">'b'</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> c = &#123;<span class="attr">c</span>: <span class="string">'c'</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> d = mix(c).with(a, b);</span><br><span class="line"></span><br><span class="line">d.c <span class="comment">// "c"</span></span><br><span class="line">d.b <span class="comment">// "b"</span></span><br><span class="line">d.a <span class="comment">// "a"</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="proto属性，Object-setPrototypeOf-，Object-getPrototypeOf"><a href="#proto属性，Object-setPrototypeOf-，Object-getPrototypeOf" class="headerlink" title="proto属性，Object.setPrototypeOf()，Object.getPrototypeOf()"></a><strong>proto</strong>属性，Object.setPrototypeOf()，Object.getPrototypeOf()</h4><blockquote><p>设置，和 获取原型<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//set</span></span><br><span class="line"><span class="keyword">let</span> proto = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">x</span>: <span class="number">10</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, proto);</span><br><span class="line"></span><br><span class="line">proto.y = <span class="number">20</span>;</span><br><span class="line">proto.z = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">obj.x <span class="comment">// 10</span></span><br><span class="line">obj.y <span class="comment">// 20</span></span><br><span class="line">obj.z <span class="comment">// 40</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//get</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rec = <span class="keyword">new</span> Rectangle();</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(rec) === Rectangle.prototype</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(rec, <span class="built_in">Object</span>.prototype);</span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(rec) === Rectangle.prototype</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Object-keys-，Object-values-，Object-entries"><a href="#Object-keys-，Object-values-，Object-entries" class="headerlink" title="Object.keys()，Object.values()，Object.entries()"></a>Object.keys()，Object.values()，Object.entries()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//keys</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;; <span class="comment">//es5</span></span><br><span class="line"><span class="built_in">Object</span>.keys(obj)</span><br><span class="line"><span class="comment">// ["foo", "baz"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//values</span></span><br><span class="line"><span class="built_in">Object</span>.values(obj)</span><br><span class="line"><span class="comment">//['bar,42]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.entries(obj)</span><br><span class="line"><span class="comment">// [['foo', 'bar'],  ['baz', 42]]</span></span><br></pre></td></tr></table></figure><h4 id="Object-fromEntries"><a href="#Object-fromEntries" class="headerlink" title="Object.fromEntries()"></a>Object.fromEntries()</h4><blockquote><p> Object.entries 方法的逆操作<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.fromEntries([</span><br><span class="line">  [<span class="string">'foo'</span>, <span class="string">'bar'</span>],</span><br><span class="line">  [<span class="string">'baz'</span>, <span class="number">42</span>]</span><br><span class="line">])</span><br><span class="line"><span class="comment">// &#123; foo: "bar", baz: 42 &#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><p>目前谷歌版本 Chrome/72.0.3626.121 Safari/537.36  及以下不支持</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;String-Extend&quot;&gt;&lt;a href=&quot;#String-Extend&quot; class=&quot;headerlink&quot; title=&quot;String Extend&quot;&gt;&lt;/a&gt;String Extend&lt;/h3&gt;&lt;h4 id=&quot;被-for-of-遍历&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="Extend Methods" scheme="http://yoursite.com/tags/Extend-Methods/"/>
    
  </entry>
  
  <entry>
    <title>Map</title>
    <link href="http://yoursite.com/2019/03/19/map/"/>
    <id>http://yoursite.com/2019/03/19/map/</id>
    <published>2019-03-19T10:48:52.000Z</published>
    <updated>2019-03-19T12:28:53.145Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><blockquote><p>键值对的集合 键名的范围不限制于字符串</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>: <span class="string">'Owen'</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="comment">//设值</span></span><br><span class="line">m.set(obj,<span class="string">"boy"</span>); <span class="comment">//将 obj 作为键名， 给它赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以是对象，数组，甚至是函数，任何数据类型都可以当作属性名（键名）</span></span><br><span class="line">m.set(fn,<span class="number">1</span>) </span><br><span class="line"><span class="comment">//对同一个键名赋值，后面的将覆盖前面的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获值</span></span><br><span class="line">m.get(obj) <span class="comment">// 'boy'</span></span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line">m.has(obj) <span class="comment">// true</span></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">m.delete(obj)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="Map-参数"><a href="#Map-参数" class="headerlink" title="Map 参数"></a>Map 参数</h3><blockquote><p>任何 <code>Iterator</code> 接口，并且每个成员都是双元素数组的数据结构 都可以作为参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">3</span>]];</span><br><span class="line"><span class="keyword">const</span> ma = <span class="keyword">new</span> <span class="built_in">Map</span>(arr); <span class="comment">//Map(2) &#123;1 =&gt; 2, 2 =&gt; 3&#125;</span></span><br><span class="line">ma.get(<span class="number">1</span>) <span class="comment">//2</span></span><br><span class="line">ma.get(<span class="number">2</span>) <span class="comment">//3</span></span><br><span class="line"><span class="comment">//如果几组双元素成员相同那么只会生成一个值</span></span><br><span class="line">arr = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>]];</span><br><span class="line">mss = <span class="keyword">new</span> <span class="built_in">Map</span>(arr); <span class="comment">//Map(1) &#123;1 =&gt; 2&#125;</span></span><br><span class="line">ma.size<span class="comment">//2</span></span><br><span class="line">mss.size<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// keys 键名</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> ma.keys())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key)</span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">    <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//values 值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> ma.values())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val)</span><br><span class="line">    <span class="comment">//2</span></span><br><span class="line">    <span class="comment">//3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//entries  键值 等同于 遍历 ma 默认遍历的是entries </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key,val] <span class="keyword">of</span> ma.entries())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key,val)</span><br><span class="line">    <span class="comment">//1,2</span></span><br><span class="line">    <span class="comment">//2,3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//转化为数组</span></span><br><span class="line"></span><br><span class="line">[... ma.keys() ] <span class="comment">//[1,2]</span></span><br><span class="line"></span><br><span class="line">[... ma.values() ] <span class="comment">//[2,3]</span></span><br><span class="line"></span><br><span class="line">[... ma] <span class="comment">//[[1,2],[2,3]]</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Map&quot;&gt;&lt;a href=&quot;#Map&quot; class=&quot;headerlink&quot; title=&quot;Map&quot;&gt;&lt;/a&gt;Map&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;键值对的集合 键名的范围不限制于字符串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;
      
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="Map" scheme="http://yoursite.com/tags/Map/"/>
    
  </entry>
  
  <entry>
    <title>Set</title>
    <link href="http://yoursite.com/2019/03/15/set/"/>
    <id>http://yoursite.com/2019/03/15/set/</id>
    <published>2019-03-15T13:20:20.000Z</published>
    <updated>2019-04-02T03:25:16.481Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><blockquote><p>ES6 提供的数据结构类似于数组，值是唯一的，通过 <code>Set</code> 构造函数来生成</p></blockquote> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="comment">//参数可以是一个可以迭代的数据结构</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = new Set(arr); //Set(5)&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">[...set] <span class="comment">//[1,2,3,4,5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> set1 = <span class="keyword">new</span> <span class="built_in">Set</span>(<span class="string">'12343333433225'</span>);  <span class="comment">//Set(5) &#123;"1", "2", "3", "4", "5"&#125;</span></span><br><span class="line">set1.size <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组去重</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [... new <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>])];</span><br><span class="line"><span class="keyword">const</span> arr2 = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]));</span><br></pre></td></tr></table></figure><h3 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">  s.constructor <span class="comment">//指向 Set 函数 </span></span><br><span class="line">  s.size <span class="comment">//成员总数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作方法 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以通过 add()方法添加 只有一个参数</span></span><br><span class="line"><span class="keyword">const</span> set2 =<span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">set2.add(<span class="number">1</span>) <span class="comment">//Set(1) &#123;1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不会发生类型转换  NaN 会 = NaN </span></span><br><span class="line">set2.add(<span class="string">"1"</span>) <span class="comment">//Set(2) &#123;1,"1"&#125;</span></span><br><span class="line"></span><br><span class="line">set2.add(<span class="literal">NaN</span>).add(<span class="literal">NaN</span>)<span class="comment">// Set(3) &#123;1,"1",NaN&#125;  链式调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//两个对象不相等</span></span><br><span class="line">set2.add(&#123;&#125;)</span><br><span class="line">set2.size <span class="comment">//4</span></span><br><span class="line">set2.add(&#123;&#125;)</span><br><span class="line">set2.size <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过 delete() 删除某个值 返回 Boolean 值 </span></span><br><span class="line">set2.delete(<span class="number">1</span>) <span class="comment">//true</span></span><br><span class="line">set2.delete(&#123;&#125;) <span class="comment">//false </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//has()  是否存在某个值 </span></span><br><span class="line">set2.has(<span class="literal">NaN</span>) <span class="comment">//true</span></span><br><span class="line">set2.has(&#123;&#125;) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//clear() 清除所有成员</span></span><br><span class="line">set2.clear() <span class="comment">//Set(0) &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 遍历方法 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   keys 返回键名的迭代器， values 返回 键值的迭代器， 由于 Set 键名和键值 相同 所以</span></span><br><span class="line"><span class="comment"> * keys 和 values 方法返回值相同</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">const</span> sK = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]).keys()   <span class="comment">//SetIterator &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"> <span class="keyword">const</span> sV= <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]).values()   <span class="comment">//SetIterator &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//enters 返回键值对</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]).entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [1, 1]</span></span><br><span class="line"><span class="comment">// [2, 2]</span></span><br><span class="line"><span class="comment">// [3, 3]</span></span><br><span class="line"><span class="comment">// [4, 4]</span></span><br><span class="line"><span class="comment">// [5, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//推荐使用for of </span></span><br><span class="line"><span class="keyword">const</span> sI = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> sI) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(key); <span class="comment">//1 2 3 4 5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Set的遍历顺序就是插入顺序。使用 Set 保存一个回调函数列表，调用时能保证按照添加顺序调用。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//forEach</span></span><br><span class="line">sI.forEach(<span class="function">(<span class="params">value, key</span>) =&gt;</span> <span class="built_in">console</span>.log(key + <span class="string">' : '</span> + value))</span><br><span class="line"><span class="comment">// 1 : 1</span></span><br><span class="line"><span class="comment">// 2 : 2</span></span><br><span class="line"><span class="comment">// 3 : 3</span></span><br><span class="line"><span class="comment">// 4 : 4</span></span><br><span class="line"><span class="comment">// 5 : 5</span></span><br></pre></td></tr></table></figure><h3 id="weakSet"><a href="#weakSet" class="headerlink" title="weakSet"></a>weakSet</h3><blockquote><p>和Set 类似 但是只能存储对象，不可遍历<br>如果其他对象未应用该对象，垃圾回收机制会自动收回所占用的内存<br>适合存储临时对象和绑定对应对象的信息</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]]); <span class="comment">//WeakSet &#123;[1, 2], [3, 4]&#125;</span></span><br><span class="line"><span class="comment">//a 的成员自动成为 weakSet 的成员</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//add 方法</span></span><br><span class="line"><span class="keyword">let</span> arr =[[<span class="number">1</span>]];</span><br><span class="line">ws.add(arr);</span><br><span class="line"><span class="comment">//delete 删除对应成员</span></span><br><span class="line">ws.delete(arr); <span class="comment">//true</span></span><br><span class="line"><span class="comment">// has 是否包含</span></span><br><span class="line">ws.has(arr) <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>由于 WeakSet 的成员都是弱引用随时可能被回收，因此可以存储DOM节点，不用担心节点移除时，发生内存泄漏。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="keyword">new</span> <span class="built_in">WeakSet</span>()</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">   <span class="keyword">constructor</span>()&#123;</span><br><span class="line">     foo.add(<span class="keyword">this</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   method ()&#123;</span><br><span class="line">     <span class="keyword">if</span>(!foo.has (<span class="keyword">this</span>))&#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"method 只能在Foo 实例上使用"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Set&quot;&gt;&lt;a href=&quot;#Set&quot; class=&quot;headerlink&quot; title=&quot;Set&quot;&gt;&lt;/a&gt;Set&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;ES6 提供的数据结构类似于数组，值是唯一的，通过 &lt;code&gt;Set&lt;/code&gt; 构造函数来生成&lt;/p
      
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="Set" scheme="http://yoursite.com/tags/Set/"/>
    
  </entry>
  
  <entry>
    <title>symbol</title>
    <link href="http://yoursite.com/2019/03/15/symbol/"/>
    <id>http://yoursite.com/2019/03/15/symbol/</id>
    <published>2019-03-15T11:19:04.000Z</published>
    <updated>2019-03-15T10:22:09.615Z</updated>
    
    <content type="html"><![CDATA[<h2 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h2><blockquote><p>ES6 引入的原始数据类型，表示独一无二的值<br>通过 <code>Symbol</code>函数生成的原始值，不是对象，所以无法添加属性和方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> s1 = <span class="keyword">new</span> <span class="built_in">Symbol</span>(<span class="string">'s'</span>); <span class="comment">//TypeError</span></span><br><span class="line"><span class="comment">// 不能通过 new Symbol 否则会报错</span></span><br><span class="line"></span><br><span class="line">s.toString()<span class="comment">//"Symbol()"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>();</span><br><span class="line">s == s2 <span class="comment">// false</span></span><br><span class="line"><span class="comment">//独一无二的特性</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Boolean</span>(s) <span class="comment">//true</span></span><br><span class="line">!s <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">s + s1 <span class="comment">//error </span></span><br><span class="line">s + <span class="number">1</span>  <span class="comment">//error </span></span><br><span class="line">s + <span class="string">"1"</span> <span class="comment">// error </span></span><br><span class="line"><span class="comment">//symbol 不能参与任何值的运算</span></span><br></pre></td></tr></table></figure></p></blockquote><p>对象中的 symbol 无法通过 <code>.</code> 点运算访问<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sm = <span class="built_in">Symbol</span>()</span><br><span class="line"><span class="keyword">const</span> s =&#123;</span><br><span class="line">    [sm]: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line">s.sm <span class="comment">//undefined</span></span><br><span class="line">s[sm]<span class="comment">//1</span></span><br></pre></td></tr></table></figure></p><h3 id="消除魔术字符串"><a href="#消除魔术字符串" class="headerlink" title="消除魔术字符串"></a>消除魔术字符串</h3><blockquote><p>代码中多次出现，与代码形成强耦合的某一个具体的字符串或者数值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDate</span>(<span class="params">num,options</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">switch</span> (num)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        data = num + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span> :</span><br><span class="line">        data = num * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// case 右边的 1， 2 就是魔术数值</span></span><br><span class="line"><span class="comment">//一般把魔术字符串 变成变量来消除</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj =&#123;</span><br><span class="line">    one:<span class="built_in">Symbol</span>(),</span><br><span class="line">    two:<span class="built_in">Symbol</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDate</span>(<span class="params">num,options</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">switch</span> (num)&#123;</span><br><span class="line">        <span class="keyword">case</span> obj.one:</span><br><span class="line">        data = options + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> obj.two :</span><br><span class="line">        data =  options * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br><span class="line">getDate(obj.one,<span class="number">3</span>)</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="作为对象属性名"><a href="#作为对象属性名" class="headerlink" title="作为对象属性名"></a>作为对象属性名</h3><ul><li><code>for...in</code>、<code>for...of</code>，<code>Object.keys()</code> , <code>Object.getOwnPropertyNames()</code>,<code>JSON.stringify()</code>返回。</li><li>不是私有属性，可以通过 <code>Object.getOwnPropertySymbols()</code>获取指定symbol名<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="built_in">Symbol</span>(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Symbol</span>(<span class="string">'b'</span>);</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">   [a]:<span class="string">'hello'</span>,</span><br><span class="line">   [b]:<span class="string">'word'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(obj)) <span class="comment">//(2) [Symbol(a), Symbol(b)]</span></span><br></pre></td></tr></table></figure></li></ul><p>-可以通过 <code>Reflect.ownKeys()</code> 返回所有类型的属性名<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="built_in">Symbol</span>(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Symbol</span>(<span class="string">'b'</span>);</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">   [a]:<span class="string">'hello'</span>,</span><br><span class="line">   [b]:<span class="string">'word'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Reflect</span>.ownKeys(obj) <span class="comment">// ["a", Symbol(a), Symbol(b)]</span></span><br></pre></td></tr></table></figure></p><h3 id="Symbol-for-与Symbol"><a href="#Symbol-for-与Symbol" class="headerlink" title="Symbol.for()与Symbol()"></a><code>Symbol.for()</code>与<code>Symbol()</code></h3><blockquote><p>Symbol(‘a’) 和 Symbol.for():两种方法都会生成新的 <code>Symbol</code> 值<br>Symbol(‘a’) 使用10次，会生成10个新的 Symbol<br>Symbol.for(‘a’)，使用10次，会生成一个 Symbol 并创建一个key值<br>Symbol.keyFor(Symbol.for(‘a’)),会返回一个全局 key 值，可以在不同的iframe 或 service worker 获取同一个key</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>.for(<span class="string">'s'</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>.for(<span class="string">'s'</span>);</span><br><span class="line">s == s1 <span class="comment">//false</span></span><br><span class="line">s1 == s2 <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> key = <span class="built_in">Symbol</span>.keyFor(s2) <span class="comment">//s</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;含义&quot;&gt;&lt;a href=&quot;#含义&quot; class=&quot;headerlink&quot; title=&quot;含义&quot;&gt;&lt;/a&gt;含义&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;ES6 引入的原始数据类型，表示独一无二的值&lt;br&gt;通过 &lt;code&gt;Symbol&lt;/code&gt;函数生成的原始值，
      
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="Symbol" scheme="http://yoursite.com/tags/Symbol/"/>
    
  </entry>
  
  <entry>
    <title>pormise</title>
    <link href="http://yoursite.com/2019/03/14/pormise/"/>
    <id>http://yoursite.com/2019/03/14/pormise/</id>
    <published>2019-03-14T10:27:09.000Z</published>
    <updated>2019-03-14T10:28:22.959Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="async" scheme="http://yoursite.com/tags/async/"/>
    
  </entry>
  
  <entry>
    <title>异步操作原理（二）</title>
    <link href="http://yoursite.com/2019/03/13/eventLoop/"/>
    <id>http://yoursite.com/2019/03/13/eventLoop/</id>
    <published>2019-03-13T14:19:05.000Z</published>
    <updated>2019-03-14T10:27:54.323Z</updated>
    
    <content type="html"><![CDATA[<h3 id="事件循环-eventLoop-详解"><a href="#事件循环-eventLoop-详解" class="headerlink" title="事件循环(eventLoop) 详解"></a>事件循环(<code>eventLoop</code>) 详解</h3><p><strong>并行和并发：</strong></p><p>并行性是指两个或多个事件在同一时刻发生；<br>并发性是指两个或多个事件在同一时间段内发生。</p><h4 id="任务队列-和-事件循环"><a href="#任务队列-和-事件循环" class="headerlink" title="任务队列 和 事件循环"></a>任务队列 和 事件循环</h4><blockquote><p>JS 将变量存储在 <label>堆 <code>heap</code></label> 和 <label> 栈 <code>stack</code></label>中<br>堆中存放对象比如 ：数组，对象，函数<br>栈中存放变量和对象的指针<br>运行时同步任务会排好队，依次执行，而排队的地方就叫执行栈（先进后出）</p></blockquote><ul><li><p>JS运行时，除了有一个主线程运行，引擎还提供任务队列 <code>task queue</code> , 里面是各种需要当前程序处理的异步任务。（不止一个任务队列）</p></li><li><p>异步任务通常是一个回调函数；如果一个异步任务没有回调函数，是不会放入异步任务队列中，同样也不会进入主线程中执行。</p></li></ul><p><strong>执行过程：</strong></p><ol><li>主线程会先执行完所有同步任务</li><li>同步任务结束，查看任务队列（<label>先进先出的数据结构，排在前面的事件，优先被主线程读取。</label>）里面的异步任务</li><li>查看所有满足执行条件的异步任务，放入主线程中变成同步任务，执行对应的回调函数。</li><li>执行完毕再将下一个满足执行条件的异步任务放入主线程中执行。</li><li>不断重复前三步操作</li></ol><p>只要同步任务执行完毕，JS引擎会不停的监测检查任务队列中的异步任务，将满足执行条件且最先进入的任务加入到执行栈中去执行，如此往复。这种检查机制就叫事件循环 <code>Event Loop</code><br><img src="/static/img/eventLoop.png" alt="event loop"></p><h4 id="微任务与宏任务"><a href="#微任务与宏任务" class="headerlink" title="微任务与宏任务"></a>微任务与宏任务</h4><p>异步任务还会分两层：</p><ul><li>微任务(<code>micro task</code>) </li><li>宏任务(<code>macro task</code>)</li></ul><p><label>主线程会先查看微任务 <code>micro task</code></label>；<br>如果没有满足条件的任务，再去宏任务中查找；<br>如果有则将所有满足条件的微任务按顺序依次加入到主进程中；<br>执行完毕后再去红任务队列中查找，往复循环。<br>常见宏任务：</p><ul><li>定时器 I/O（输入/输出）操作 </li></ul><p>微任务(<code>jobs</code>)： </p><ul><li>Promise async/await<h4 id="nodeJS"><a href="#nodeJS" class="headerlink" title="nodeJS"></a>nodeJS</h4>nodeJS 中任务队列 加入了 <code>process.nextTick</code> 和 <code>setImmediate</code>。<br>前者比后者先执行<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  process.nextTick(<span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">2</span>);&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">setImmediate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  setImmediate(<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    setImmediate(<span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">4</span>);&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'TIMEOUT FIRED'</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// TIMEOUT FIRED</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">//这个结果是不确定的可能是 1234  TIMEOUT FIRED  ||   12  TIMEOUT FIRED 34</span></span><br></pre></td></tr></table></figure></li></ul><p>其二者的调用顺序取决于当前event loop的上下文，如果他们在异步i／o callback之外调用，其执行先后顺序是不确定的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line">fs.readFile(__filename, () =&gt; &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timeout'</span>)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">  setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'immediate'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//immediate</span></span><br><span class="line"><span class="comment">//timeout</span></span><br></pre></td></tr></table></figure></p><p>这是因为<code>fs.readFile</code> callback执行完后，程序设定了<code>timer</code> 和 <code>setImmediate</code>，因此poll阶段不会被阻塞进而进入check阶段先执行setImmediate，后进入timer阶段执行setTimeout。<a href="https://juejin.im/post/5aab2d896fb9a028b86dc2fd#comment" target="_blank" rel="noopener">setTimeout和setImmediate的差异</a></p><p>process.nextTick在最新版nodejs中不被推荐使用，推荐使用setImmediate ，原因在于nextTick是在当前帧介绍后立即执行，会阻断I/O并且有最大数量限制；而setImmediate不会阻断I/O，更像是setTimeout(func, 0) </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;事件循环-eventLoop-详解&quot;&gt;&lt;a href=&quot;#事件循环-eventLoop-详解&quot; class=&quot;headerlink&quot; title=&quot;事件循环(eventLoop) 详解&quot;&gt;&lt;/a&gt;事件循环(&lt;code&gt;eventLoop&lt;/code&gt;) 详解&lt;/h
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="async" scheme="http://yoursite.com/tags/async/"/>
    
  </entry>
  
  <entry>
    <title>异步操作原理(一)</title>
    <link href="http://yoursite.com/2019/03/11/async/"/>
    <id>http://yoursite.com/2019/03/11/async/</id>
    <published>2019-03-11T11:50:34.000Z</published>
    <updated>2019-03-14T10:28:10.883Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h3><blockquote><ul><li><code>javascript</code> 只再一个线程上<label>运行</label>，同时只能执行一个任务</li><li>javascript 运行在单线程上，并不代表 JavaScript引擎就是单线程的，其实它有多个线程，单个脚本只能在一个线程上运行（主线程），其他线程在后台配合运行。</li><li>为了利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程，但是子线程完全受主线程控制，且不得操作 DOM。所以，这个新标准并没有改变 JavaScript 单线程的本质。</li></ul></blockquote><p>这种模式好处在于， 实现起来简单，环境单纯。 但是 耗时较长，后面的任务必须等待前面的任务执行完毕。</p><h3 id="同步和异步任务"><a href="#同步和异步任务" class="headerlink" title="同步和异步任务"></a>同步和异步任务</h3><ul><li>同步<br>未被引擎挂起、在主线程上排队执行的任务。需要前面的任务执行完后才能执行。</li><li>异步<ol><li>被引擎挂起，暂不处理的任务,不进入主线程、而进入任务队列;</li><li><label>只有达到某个条件，异步任务才会进入主线程，不会堵塞异步任务后面的代码 （ajax 是最具代表性的异步任务）</label></li></ol></li></ul><h3 id="异步操作模式"><a href="#异步操作模式" class="headerlink" title="异步操作模式"></a>异步操作模式</h3><h4 id="回调函数-Callback"><a href="#回调函数-Callback" class="headerlink" title="回调函数 Callback"></a>回调函数 <code>Callback</code></h4><blockquote><p>把函数的指针（地址）作为参数传递给另一个函数，并通过一定的条件调用。<br>回调函数是异步操作最基本的方法</p></blockquote><p>容易出现回调地狱（<code>Callback hell</code>)<br>比如多个 ajax 嵌套请求<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ajax(url, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 处理逻辑</span></span><br><span class="line">    ajax(url1, () =&gt; &#123;</span><br><span class="line">        <span class="comment">// 处理逻辑</span></span><br><span class="line">        ajax(url2, () =&gt; &#123;</span><br><span class="line">            <span class="comment">// 处理逻辑</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这种方式容易理解和简单，但是不利于<label>维护和阅读</label>；<br>耦合度高，结构混乱，错误较难追踪，而且每个任务只能指定一个回调。</p><h4 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h4><blockquote><p>采用事件驱动。</p></blockquote><p>   类似 jQuery写法<br>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fn.on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//do someing</span></span><br><span class="line">        fn.trigger(<span class="string">'done'</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>   这种方法比较容易理解，可以绑定多个事件，每个事件可以指定多个回调函数，可以去“耦合”(<code>decoupling</code>),便于实现模块化。 但是整个程序都会变成事件驱动，流程不清晰。</p><h4 id="发布-订阅"><a href="#发布-订阅" class="headerlink" title="发布/订阅"></a>发布/订阅</h4><blockquote><p>可以把事件理解成“信号”,如果存在一个“信号中心”；<br> 某个任务执行完成，就向信号中心“发布” (<code>publish</code>) 一个信号，其他任务可以向信号中心“订阅”(<code>subscribe</code>)这个信号，从而知道什么时候自己开始执行</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//订阅</span></span><br><span class="line">jQuery.subscribe(<span class="string">"done"</span>,fn);</span><br><span class="line"><span class="comment">// 发布</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//do someing</span></span><br><span class="line">        jQuery.publish(<span class="string">'done'</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取消订阅</span></span><br><span class="line">jQuery.unsubscribe(<span class="string">'done'</span>,fn)</span><br></pre></td></tr></table></figure><p>当 <code>foo</code> 执行完毕后，想消息纵向发布 <code>done</code>信号，引发执行<code>fn</code></p><h3 id="异步操作的流程控制（多个异步操作如何确定异步操作的执行顺序，如何保证这种顺序执行）"><a href="#异步操作的流程控制（多个异步操作如何确定异步操作的执行顺序，如何保证这种顺序执行）" class="headerlink" title="异步操作的流程控制（多个异步操作如何确定异步操作的执行顺序，如何保证这种顺序执行）"></a>异步操作的流程控制（多个异步操作如何确定异步操作的执行顺序，如何保证这种顺序执行）</h3><h4 id="串行执行"><a href="#串行执行" class="headerlink" title="串行执行"></a>串行执行</h4><blockquote><p>一个任务执行完毕后，再执行另一个<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"> <span class="keyword">let</span> results = [];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="function">(<span class="params">arg,callback</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`参数：<span class="subst">$&#123;arg&#125;</span>，1秒后返回`</span>);</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>callback(arr*<span class="number">2</span>)&#125;,<span class="number">1000</span>);</span><br><span class="line">  &#125; </span><br><span class="line"><span class="keyword">const</span> final = <span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`完成：`</span>,res);</span><br><span class="line"><span class="keyword">const</span> series = <span class="function"><span class="params">item</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(item)&#123;</span><br><span class="line">        <span class="keyword">async</span>(item,result=&gt;&#123;</span><br><span class="line">            results.push(result);</span><br><span class="line">            <span class="keyword">return</span> serise(items.shift();)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> final(results[results.length<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">series(items.shift());</span><br></pre></td></tr></table></figure></p></blockquote><p>上面代码 <code>series</code> 就是一个串行函数； 类似与同步任务</p><h4 id="并行执行"><a href="#并行执行" class="headerlink" title="并行执行"></a>并行执行</h4><blockquote><p>所有异步任务同时执行，全部执行完毕，再执行 最终 (<code>final</code>) 函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"> <span class="keyword">let</span> results = [];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="function">(<span class="params">arg,callback</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`参数：<span class="subst">$&#123;arg&#125;</span>，1秒后返回`</span>);</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>callback(arr*<span class="number">2</span>)&#125;,<span class="number">1000</span>);</span><br><span class="line">  &#125; </span><br><span class="line"><span class="keyword">const</span> final = <span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`完成：`</span>,res);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> items)&#123;</span><br><span class="line">     <span class="keyword">async</span>(item,(result) =&gt;&#123;</span><br><span class="line">         results.push(result)</span><br><span class="line">     &#125;)</span><br><span class="line">     <span class="keyword">if</span>(results.length == items.length)&#123;</span><br><span class="line">         final(results[results.length<span class="number">-1</span>]);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p> 上面代码，for 循环会同时执行5异步任务，等他们执行完毕再执行 <code>final</code> 函数。 过个并行任务较多，容易耗尽系统资源，拖慢运行</p><h4 id="并串结合"><a href="#并串结合" class="headerlink" title="并串结合"></a>并串结合</h4><blockquote><p>限制并行执行任务的数量，避免占用过多系统资源</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> items = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> results = [];</span><br><span class="line"><span class="keyword">let</span> running = <span class="number">0</span>,limit = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="function">(<span class="params">arg,callback</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`参数：<span class="subst">$&#123;arg&#125;</span>，1秒后返回`</span>);</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>callback(arr*<span class="number">2</span>)&#125;,<span class="number">1000</span>);</span><br><span class="line">  &#125; </span><br><span class="line"><span class="keyword">const</span> final = <span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`完成：`</span>,res);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> launcher = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (running &lt; limit &amp;&amp; items.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> item = items.shift()；</span><br><span class="line">        <span class="keyword">async</span> (item,(res)=&gt;&#123;</span><br><span class="line">            results.push(result);</span><br><span class="line">            running--;</span><br><span class="line">            items.length? launcher(): final(results);</span><br><span class="line">        &#125;)</span><br><span class="line">        running++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码，最多只能运行两个异步任务，当前 <code>running</code> 记录运行的任务数量，低于门槛 limit 就会新增一个任务，直到任务执行完毕。</p><h3 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hash = <span class="built_in">window</span>.location.hash;</span><br><span class="line"><span class="keyword">const</span> hashWatcher = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.location.hash != hash)&#123;</span><br><span class="line">        updatePage()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setInterval(hashWatcher,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p><code>setInterval</code> 时间 间隔是” 开始执行 “ 之间的间隔,不会考虑每次执行的任务时间，所以两次执行间隔会小于指定时间。比如 指定 100ms  任务本身消耗 105 ms，那么第一次执行完毕后，第二次会立即执行。</p><p>如果要固定间隔，可以使用 <code>setTimeout</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hash = <span class="built_in">window</span>.location.hash;</span><br><span class="line"><span class="keyword">const</span> hashWatcher = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.location.hash != hash)&#123;</span><br><span class="line">        updatePage()</span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(hashWatcher,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(hashWatcher,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong></p><blockquote><p>HTML标准规定 <code>setTimeout</code> 最大间隔 4ms<br> 由于定时器每执行一次,会返回一个整数，连续执行，返回值比上一次大1<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 每轮事件循环检查一次</span></span><br><span class="line">  <span class="keyword">var</span> gid = setInterval(clearAllTimeouts, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">clearAllTimeouts</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> id = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"g:"</span>+gid) </span><br><span class="line">    &#125;,<span class="number">0</span>);</span><br><span class="line">   <span class="keyword">while</span> (id &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (id !== gid) &#123;</span><br><span class="line">        clearTimeout(id);</span><br><span class="line">      &#125;</span><br><span class="line">      id--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="防抖（debounce）"><a href="#防抖（debounce）" class="headerlink" title="防抖（debounce）"></a>防抖（<code>debounce</code>）</h3><blockquote><p>在某些场景下不希望事件执行太频繁，我们可以设置一个阀门临界值，再一段时间内只执行一次,或者一段时间过后执完所有任务</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一段时间只执行一次</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> perform = <span class="function">(<span class="params">fn,time</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span>  flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span>  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> self = <span class="keyword">this</span>,arg = <span class="built_in">arguments</span>;</span><br><span class="line">         <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">             flag = <span class="literal">false</span>;</span><br><span class="line">             fn.apply(self,arg);</span><br><span class="line">               setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">                flag = <span class="literal">true</span></span><br><span class="line">             &#125;,time)</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">setInterval(perform(fn,<span class="number">2000</span>),<span class="number">500</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 经过一段时间再执行所有要执行的任务</span></span><br><span class="line"> <span class="keyword">let</span> debounce = <span class="function">(<span class="params">fn,delay</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> self = <span class="keyword">this</span>,arg = <span class="built_in">arguments</span>;</span><br><span class="line">         timer &amp;&amp; clearTimeout(timer);</span><br><span class="line">         timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">             fn.apply(self,arg)</span><br><span class="line">         &#125;,delay)</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">setInterval(perform(fn,<span class="number">2500</span>),<span class="number">500</span>);</span><br></pre></td></tr></table></figure><hr><p><a href="http://wangdoc.com/javascript/async/general.html#%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF" target="_blank" rel="noopener">参考原文链接： http://wangdoc.com</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;单线程&quot;&gt;&lt;a href=&quot;#单线程&quot; class=&quot;headerlink&quot; title=&quot;单线程&quot;&gt;&lt;/a&gt;单线程&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&lt;/code&gt; 只再一个线程上&lt;label&gt;运行&lt;/label
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="async" scheme="http://yoursite.com/tags/async/"/>
    
  </entry>
  
  <entry>
    <title>模块化开发(二)</title>
    <link href="http://yoursite.com/2019/03/07/modularization/"/>
    <id>http://yoursite.com/2019/03/07/modularization/</id>
    <published>2019-03-07T14:07:50.000Z</published>
    <updated>2019-03-13T02:58:51.881Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是模块化"><a href="#什么是模块化" class="headerlink" title="什么是模块化"></a>什么是模块化</h3><blockquote><p>将一组模块（及其依赖项）以正确的顺序拼接到一个文件（或一组文件）中的过程。</p></blockquote><h3 id="ES6-详解"><a href="#ES6-详解" class="headerlink" title="ES6 详解"></a>ES6 详解</h3><blockquote><p>ES6 的模块自动采用严格模式，不管你有没有在模块头部加上”use strict”。<br> 顶层的this指向undefined，即不应该在顶层代码使用this。</p></blockquote><p>严格模式主要有以下限制：</p><ol><li>变量必须声明后再使用</li><li>函数的参数不能有同名属性，否则报错</li><li>不能使用<code>with</code>语句</li><li>不能对只读属性赋值，否则报错</li><li>不能使用前缀 0 表示八进制数，否则报错</li><li>不能删除不可删除的属性，否则报错</li><li>不能删除变量<code>delete prop</code>，会报错，只能删除属性<code>delete global[prop]</code></li><li><code>eval</code>不会在它的外层作用域引入变量</li><li><code>eval</code>和<code>arguments</code>不能被重新赋值</li><li>arguments不会自动反映函数参数的变化</li><li>不能使用<code>arguments.callee</code></li><li>不能使用<code>arguments.caller</code></li><li>禁止this指向全局对象</li><li>不能使用<code>fn.caller</code>和<code>fn.arguments</code>获取函数调用的堆栈</li><li><p>增加了保留字（比如<code>protected</code>、<code>static</code>和<code>interface</code>）<br>上面这些限制，模块都必须遵守。</p><h4 id="export命令"><a href="#export命令" class="headerlink" title="export命令"></a>export命令</h4></li></ol><ul><li><p><code>export</code>除了输出变量，还可以输出函数或类（class）,还可以通过 <code>as</code> 更改输出名。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> obj =&#123;<span class="attr">name</span>:  <span class="string">"Owen"</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> multiply = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x * y;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    age,</span><br><span class="line">    obj <span class="keyword">as</span> monicker, <span class="comment">//改变量名</span></span><br><span class="line">    multiply</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>导出的对象必须是对外的接口</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num =<span class="number">2</span>;</span><br><span class="line"><span class="keyword">export</span> num ; <span class="comment">//error 因为实际输出的是一个值，须放在对象中 &#123;num&#125;</span></span><br><span class="line"></span><br><span class="line">exprot <span class="number">2</span>  <span class="comment">//error  输出的是值 而不是一个对外接口 =&gt; 须改成 export let num =2；</span></span><br></pre></td></tr></table></figure><ul><li>不能放到局部作用域中导出， 因为导出的对象是动态绑定的<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="function">(<span class="params">r</span>) =&gt;</span> r++;</span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">export</span> <span class="keyword">default</span> foo; <span class="comment">//error</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="export-default"><a href="#export-default" class="headerlink" title="export default"></a>export default</h3><ul><li>全局只能有一个 <code>export default</code></li><li><code>export default</code>  后面不能有 变量声明的关键字</li><li>使用 <code>export default</code> ，import 就不需要使用 <code>{}</code>,只需要自定义一个变量即可</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">var</span> a=<span class="number">1</span>; <span class="comment">//error</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> obj =&#123;<span class="attr">name</span>:<span class="string">'Owen'</span>&#125;;</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">name</span>:<span class="string">"Owen"</span>&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;num, obj1&#125;</span><br></pre></td></tr></table></figure><h3 id="import"><a href="#import" class="headerlink" title="import"></a><code>import</code></h3><ul><li><p>配合 <code>from</code> 导入模块,  通过 <code>as</code> 修改导入接口, 接口不能重新赋值，但对象可以修改内部属性或方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;age, monicker <span class="keyword">as</span> obj, multiply&#125; <span class="keyword">from</span> <span class="string">'./preson.js'</span>;</span><br><span class="line">  age = <span class="number">0</span> ; <span class="comment">//error</span></span><br><span class="line">  obj.feature = <span class="string">"handsome Owen"</span>; </span><br><span class="line">  <span class="built_in">console</span>.log(age, obj。name, multiply(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">  <span class="keyword">import</span> * <span class="keyword">as</span> preson <span class="keyword">from</span> <span class="string">"./preson.js"</span> <span class="comment">//引入所有接口</span></span><br></pre></td></tr></table></figure></li><li><p><code>import</code> 具有提升的效果，会提升到作用域顶部执行，同一个模块多次引入只执行一次，并且不能再局部作用域中引入。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">multiply(<span class="number">2</span>,<span class="number">2</span>); <span class="comment">//4</span></span><br><span class="line"><span class="keyword">import</span> &#123;age, monicker <span class="keyword">as</span> obj, multiply&#125; <span class="keyword">from</span> <span class="string">'./preson.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">import</span> &#123;age, monicker <span class="keyword">as</span> obj, multiply&#125; <span class="keyword">from</span> <span class="string">'./preson.js'</span>; <span class="comment">//error</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="import-1"><a href="#import-1" class="headerlink" title="import()"></a><code>import()</code></h3><ul><li>因为require是运行时加载模块，import命令无法取代require的动态加载功能。因此，有一个提案，引入<code>import()</code>函数，完成动态加载。</li><li>import()函数可以用在任何地方，不仅仅是模块，非模块的脚本也可以使用。</li><li><p>和 <code>require</code>类似，不同之处在于 <code>import()</code>是同步加载 <code>require()</code>是异步加载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path =<span class="keyword">import</span>(<span class="string">'path'</span>);</span><br></pre></td></tr></table></figure></li><li><p>我们可以利用 <code>import()</code> 进行按需加载,动态加载，按条件加载:</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">'./a.js'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">        r.fn();</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">/* Error handling */</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="keyword">if</span>( x == <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> path =<span class="keyword">import</span>(<span class="string">'path'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>如果想同时加载多个模块，可以采用下面的写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">Promise</span>.all([</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./a.js'</span>),</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./b.js'</span>),</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./c.js'</span>),</span><br><span class="line">]) .then(<span class="function">(<span class="params">[a,b,c]</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line"> &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">/* Error handling */</span></span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是模块化&quot;&gt;&lt;a href=&quot;#什么是模块化&quot; class=&quot;headerlink&quot; title=&quot;什么是模块化&quot;&gt;&lt;/a&gt;什么是模块化&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;将一组模块（及其依赖项）以正确的顺序拼接到一个文件（或一组文件）中的过程。&lt;/p&gt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="moduleDevelop" scheme="http://yoursite.com/tags/moduleDevelop/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli 升级 webpack4 配置</title>
    <link href="http://yoursite.com/2019/03/07/webpack/"/>
    <id>http://yoursite.com/2019/03/07/webpack/</id>
    <published>2019-03-07T09:20:47.000Z</published>
    <updated>2019-03-15T01:55:07.325Z</updated>
    
    <content type="html"><![CDATA[<h3 id="升级webpack4-先删除之前的webpack"><a href="#升级webpack4-先删除之前的webpack" class="headerlink" title="升级webpack4  先删除之前的webpack"></a>升级webpack4  先删除之前的webpack</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D webpack  webpack-cli webpack-dev-server</span><br></pre></td></tr></table></figure><h3 id="build-base-conf-js"><a href="#build-base-conf-js" class="headerlink" title="build/base.conf.js"></a>build/base.conf.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>) <span class="comment">//node OS模块 可查看主机系统相关信息</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>) <span class="comment">//node path模块 c处理文件路径</span></span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>) <span class="comment">//vue-cli封装的公用模块</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)<span class="comment">//vue-cli封装的配置</span></span><br><span class="line"><span class="keyword">const</span> HappyPack = <span class="built_in">require</span>(<span class="string">"happypack"</span>)<span class="comment">//开启多个子进程去并发执行</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)<span class="comment">//webpack主要插件，可以简化HTML文件的创建</span></span><br><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);<span class="comment">//清空打包好的文件</span></span><br><span class="line"><span class="keyword">const</span> ProgressBarPlugin = <span class="built_in">require</span>(<span class="string">'progress-bar-webpack-plugin'</span>)<span class="comment">//查看进度</span></span><br><span class="line"><span class="keyword">const</span> vueLoaderConfig = <span class="built_in">require</span>(<span class="string">'./vue-loader.conf'</span>)<span class="comment">// 处理less,sass等样式配置文件 </span></span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> argv = <span class="built_in">require</span>(<span class="string">"yargs-parser"</span>)(process.argv.slice(<span class="number">2</span>))<span class="comment">//获取运行  scripts 里面的指令 --mode 后面参数 </span></span><br><span class="line"><span class="keyword">const</span> isPro = argv.mode == <span class="string">"production"</span></span><br><span class="line"><span class="keyword">const</span> resolve = <span class="function"><span class="params">dir</span> =&gt;</span> path.resolve(__dirname, <span class="string">".."</span>, dir)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    context: path.resolve(__dirname, <span class="string">'../'</span>),</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: <span class="string">"./src/main.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: config.build.assetsRoot,</span><br><span class="line">        filename: <span class="string">'[name].js'</span>,</span><br><span class="line">        publicPath: isPro ?</span><br><span class="line">            config.build.assetsPublicPath : config.dev.assetsPublicPath</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>],</span><br><span class="line">        alias: &#123;</span><br><span class="line">            <span class="string">'vue'</span>: <span class="string">'vue/dist/vue.esm.js'</span>,</span><br><span class="line">            <span class="string">'src'</span>: path.resolve(__dirname, <span class="string">'../src/common'</span>),</span><br><span class="line">            <span class="string">'@'</span>: resolve(<span class="string">'src'</span>),</span><br><span class="line">            <span class="string">'~'</span>: resolve(<span class="string">'src/components/common'</span>),</span><br><span class="line">            <span class="string">'static'</span>: path.resolve(__dirname, <span class="string">'../static'</span>),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">                test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">                loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">                options: vueLoaderConfig</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                loaders: <span class="string">'happypack/loader?id=babel'</span>,<span class="comment">//配合 happypack插件使用</span></span><br><span class="line">                exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">                include: [resolve(<span class="string">'src'</span>), resolve(<span class="string">'test'</span>)]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    limit: <span class="number">10000</span>,</span><br><span class="line">                    name: utils.assetsPath(<span class="string">'img/[name].[hash:7].[ext]'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/</span>,</span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    limit: <span class="number">10000</span>,</span><br><span class="line">                    name: utils.assetsPath(<span class="string">'media/[name].[hash:7].[ext]'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(woff2?|eot|ttf|otf)(\?.*)?$/</span>,</span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    limit: <span class="number">10000</span>,</span><br><span class="line">                    name: utils.assetsPath(<span class="string">'fonts/[name].[hash:7].[ext]'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    node: &#123;</span><br><span class="line">        setImmediate: <span class="literal">false</span>,</span><br><span class="line">        dgram: <span class="string">'empty'</span>,</span><br><span class="line">        fs: <span class="string">'empty'</span>,</span><br><span class="line">        net: <span class="string">'empty'</span>,</span><br><span class="line">        tls: <span class="string">'empty'</span>,</span><br><span class="line">        child_process: <span class="string">'empty'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> ProgressBarPlugin(),</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">        <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">            id: <span class="string">'babel'</span>,</span><br><span class="line">            loaders: [&#123;</span><br><span class="line">                loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    babelrc: <span class="literal">true</span>,</span><br><span class="line">                    cacheDirectory: <span class="literal">true</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                publicPath: <span class="string">"/"</span></span><br><span class="line">            &#125;],</span><br><span class="line">            <span class="comment">//共享进程池</span></span><br><span class="line">            threadPool: HappyPack.ThreadPool(&#123;</span><br><span class="line">                size: os.cpus().length <span class="comment">//cpu nunbers</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="comment">//允许 HappyPack 输出日志</span></span><br><span class="line">            verbose: <span class="literal">true</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">            <span class="string">'process.env'</span>: &#123;</span><br><span class="line">                <span class="string">'NODE_ENV'</span>: <span class="built_in">JSON</span>.stringify(argv.mode)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'index.html'</span>,</span><br><span class="line">            template: <span class="string">'index.html'</span>,</span><br><span class="line">            inject: <span class="literal">true</span>,</span><br><span class="line">            favicon: <span class="string">'./src/assets/img/favicon.ico'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> webpack.ProvidePlugin(&#123;<span class="comment">//引入全局变量</span></span><br><span class="line">            $: <span class="string">'jquery'</span>,</span><br><span class="line">            jQuery: <span class="string">'jquery'</span>, <span class="comment">// 加上这个</span></span><br><span class="line">        &#125;), <span class="keyword">new</span> VueLoaderPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="build-dev-conf-js"><a href="#build-dev-conf-js" class="headerlink" title="build/dev.conf.js"></a>build/dev.conf.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)<span class="comment">//可以合并 base.conf 配置文件</span></span><br><span class="line"><span class="keyword">const</span> baseWebpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.base.conf'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> FriendlyErrorsPlugin = <span class="built_in">require</span>(<span class="string">'friendly-errors-webpack-plugin'</span>)<span class="comment">//让日志更加友好</span></span><br><span class="line"><span class="keyword">const</span> portfinder = <span class="built_in">require</span>(<span class="string">'portfinder'</span>) <span class="comment">//查找开放端口或域接字的简单工具 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HOST = process.env.HOST</span><br><span class="line"><span class="keyword">const</span> PORT = process.env.PORT &amp;&amp; <span class="built_in">Number</span>(process.env.PORT)</span><br><span class="line"><span class="keyword">const</span> devWebpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class="line">  mode:<span class="string">'development'</span>,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: utils.styleLoaders(&#123; <span class="attr">sourceMap</span>: config.dev.cssSourceMap, <span class="attr">usePostCSS</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: config.dev.devtool,</span><br><span class="line"></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    clientLogLevel: <span class="string">'warning'</span>,</span><br><span class="line">    historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    host: HOST || config.dev.host,</span><br><span class="line">    port: PORT || config.dev.port,</span><br><span class="line">    open: config.dev.autoOpenBrowser,</span><br><span class="line">    overlay: config.dev.errorOverlay</span><br><span class="line">      ? &#123; <span class="attr">warnings</span>: <span class="literal">false</span>, <span class="attr">errors</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      : <span class="literal">false</span>,</span><br><span class="line">    publicPath: config.dev.assetsPublicPath,</span><br><span class="line">    proxy: config.dev.proxyTable,</span><br><span class="line">    quiet: <span class="literal">true</span>, <span class="comment">// necessary for FriendlyErrorsPlugin</span></span><br><span class="line">    watchOptions: &#123;</span><br><span class="line">      poll: config.dev.poll,</span><br><span class="line">    &#125;,</span><br><span class="line">    disableHostCheck: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  portfinder.basePort = process.env.PORT || config.dev.port</span><br><span class="line">  portfinder.getPort(<span class="function">(<span class="params">err, port</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      process.env.PORT = port</span><br><span class="line">      devWebpackConfig.devServer.port = port</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Add FriendlyErrorsPlugin</span></span><br><span class="line">      devWebpackConfig.plugins.push(<span class="keyword">new</span> FriendlyErrorsPlugin(&#123;</span><br><span class="line">        compilationSuccessInfo: &#123;</span><br><span class="line">          messages: [<span class="string">`Your application is running here: http://<span class="subst">$&#123;devWebpackConfig.devServer.host&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">        onErrors: config.dev.notifyOnErrors</span><br><span class="line">        ? utils.createNotifierCallback()</span><br><span class="line">        : <span class="literal">undefined</span></span><br><span class="line">      &#125;))</span><br><span class="line"></span><br><span class="line">      resolve(devWebpackConfig)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="pluguin"><a href="#pluguin" class="headerlink" title="pluguin"></a>pluguin</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D happypack html-webpack-plugin  clean-webpack-plugin progress-bar-webpack-plugin yargs-parser  friendly-errors-webpack-plugin  portfinder  webpack-merge extract-text-webpack-plugin@next optimize-css-assets-webpack-plugin  uglifyjs-webpack-plugin chalk rimraf</span><br></pre></td></tr></table></figure><h3 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a>babel-loader</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-loader @babel/cli  @babel/core @babel/  @babel/preset-env plugin-proposal-class-properties @babel/ plugin-proposal-decorators @babel/ plugin-syntax-dynamic-import @babel/plugin-transform-classes @babel/plugin-transform-runtime -D</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save   @babel/runtime   @babel/runtime-corejs2</span><br></pre></td></tr></table></figure><h3 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a>.babelrc</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [</span><br><span class="line">        [<span class="string">"@babel/preset-env"</span>, &#123;</span><br><span class="line">            <span class="attr">"useBuiltIns"</span>: <span class="string">"usage"</span></span><br><span class="line">        &#125;]</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"plugins"</span>: [</span><br><span class="line">        [<span class="string">"@babel/plugin-proposal-decorators"</span>, &#123;</span><br><span class="line">            <span class="attr">"legacy"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="string">"@babel/proposal-class-properties"</span>,</span><br><span class="line">        [<span class="string">"@babel/plugin-transform-runtime"</span>, &#123;</span><br><span class="line">            <span class="attr">"corejs"</span>: <span class="number">2</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="string">"@babel/plugin-syntax-dynamic-import"</span>,</span><br><span class="line">        <span class="string">"@babel/plugin-transform-classes"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="build-prod-conf-js"><a href="#build-prod-conf-js" class="headerlink" title="build/prod.conf.js"></a>build/prod.conf.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> baseWebpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.base.conf'</span>)</span><br><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>)<span class="comment">//复制文件和目录</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)<span class="comment">//提取样式文件，只有extract-text-webpack-plugin@^4.0.0-beta.0 才支持webpack4  </span></span><br><span class="line"><span class="comment">//或者使用 mini-css-extract-plugin  用法详见  ![GitHub](https://github.com/search?q=mini-css-extract-plugin)</span></span><br><span class="line"><span class="keyword">const</span> OptimizeCSSPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>) <span class="comment">//用于优化\最小化 CSS</span></span><br><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>) <span class="comment">// 压缩JS资源</span></span><br><span class="line"><span class="keyword">const</span> webpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class="line">    mode: <span class="string">'production'</span>,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: utils.styleLoaders(&#123;</span><br><span class="line">            sourceMap: config.build.productionSourceMap,</span><br><span class="line">            extract: <span class="literal">true</span>,</span><br><span class="line">            usePostCSS: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: config.build.productionSourceMap ? config.build.devtool : <span class="literal">false</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: config.build.assetsRoot,</span><br><span class="line">        filename: utils.assetsPath(<span class="string">'js/[name].[chunkhash].js'</span>),</span><br><span class="line">        chunkFilename: utils.assetsPath(<span class="string">'js/[id].[chunkhash].js'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">            chunks: <span class="string">'all'</span>,              <span class="comment">// initial、async和all</span></span><br><span class="line">            minSize: <span class="number">30000</span>,             <span class="comment">// 形成一个新代码块最小的体积</span></span><br><span class="line">            maxAsyncRequests: <span class="number">5</span>,        <span class="comment">// 按需加载时候最大的并行请求数</span></span><br><span class="line">            maxInitialRequests: <span class="number">3</span>,      <span class="comment">// 最大初始化请求数</span></span><br><span class="line">            automaticNameDelimiter: <span class="string">'~'</span>, <span class="comment">// 打包分割符</span></span><br><span class="line">            name: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        minimizer: [</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">                uglifyOptions: &#123;</span><br><span class="line">                    compress: &#123;</span><br><span class="line">                        warnings: <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                sourceMap: config.build.productionSourceMap,</span><br><span class="line">                parallel: <span class="literal">true</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="comment">// extract css into its own file</span></span><br><span class="line">            <span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">                filename: utils.assetsPath(<span class="string">'css/[name].[hash].css'</span>),</span><br><span class="line">                allChunks: <span class="literal">true</span>,</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> OptimizeCSSPlugin(&#123;</span><br><span class="line">                cssProcessorOptions: config.build.productionSourceMap ? &#123;</span><br><span class="line">                    safe: <span class="literal">true</span>,</span><br><span class="line">                    map: &#123;</span><br><span class="line">                        inline: <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; : &#123;</span><br><span class="line">                    safe: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">                filename: config.build.index,</span><br><span class="line">                template: <span class="string">'index.html'</span>,</span><br><span class="line">                inject: <span class="literal">true</span>,</span><br><span class="line">                favicon: <span class="string">'./src/assets/img/favicon.ico'</span>,</span><br><span class="line">                minify: &#123;</span><br><span class="line">                    removeComments: <span class="literal">true</span>,</span><br><span class="line">                    collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">                    removeAttributeQuotes: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line"></span><br><span class="line">                chunksSortMode: <span class="string">'dependency'</span></span><br><span class="line">            &#125;),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> webpack.optimize.ModuleConcatenationPlugin(),</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> CopyWebpackPlugin([&#123;</span><br><span class="line">                <span class="keyword">from</span>: path.resolve(__dirname, <span class="string">'../static'</span>),</span><br><span class="line">                to: config.build.assetsSubDirectory,</span><br><span class="line">                ignore: [<span class="string">'.*'</span>]</span><br><span class="line">            &#125;])</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = webpackConfig</span><br></pre></td></tr></table></figure><h3 id="build-js"><a href="#build-js" class="headerlink" title="build.js"></a>build.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./check-versions'</span>)()</span><br><span class="line"></span><br><span class="line">process.env.NODE_ENV = <span class="string">'production'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rm = <span class="built_in">require</span>(<span class="string">'rimraf'</span>)<span class="comment">//删除文件</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)<span class="comment">//终端字符串样式</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"><span class="keyword">const</span> webpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.prod.conf'</span>)</span><br><span class="line"></span><br><span class="line">rm(path.join(config.build.assetsRoot, config.build.assetsSubDirectory), err =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">  webpack(webpackConfig, (err, stats) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">    process.stdout.write(stats.toString(&#123;</span><br><span class="line">      colors: <span class="literal">true</span>,</span><br><span class="line">      modules: <span class="literal">false</span>,</span><br><span class="line">      children: <span class="literal">false</span>, </span><br><span class="line">      chunks: <span class="literal">false</span>,</span><br><span class="line">      chunkModules: <span class="literal">false</span></span><br><span class="line">    &#125;) + <span class="string">'\n\n'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (stats.hasErrors()) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(chalk.red(<span class="string">' 构建失败，错误.\n'</span>))</span><br><span class="line">      process.exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(chalk.cyan(<span class="string">'  Build success.\n'</span>))</span><br><span class="line">    <span class="built_in">console</span>.log(chalk.yellow(</span><br><span class="line">      <span class="string">' 打包文件应该通过HTTP服务器启用.\n'</span> </span><br><span class="line">    ))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;升级webpack4-先删除之前的webpack&quot;&gt;&lt;a href=&quot;#升级webpack4-先删除之前的webpack&quot; class=&quot;headerlink&quot; title=&quot;升级webpack4  先删除之前的webpack&quot;&gt;&lt;/a&gt;升级webpack4  先
      
    
    </summary>
    
      <category term="package" scheme="http://yoursite.com/categories/package/"/>
    
    
      <category term="webpack4" scheme="http://yoursite.com/tags/webpack4/"/>
    
  </entry>
  
  <entry>
    <title>模块化开发(一)</title>
    <link href="http://yoursite.com/2019/03/07/module/"/>
    <id>http://yoursite.com/2019/03/07/module/</id>
    <published>2019-03-06T16:41:22.000Z</published>
    <updated>2019-03-10T16:15:19.416Z</updated>
    
    <content type="html"><![CDATA[<h3 id="传统的模块化做法。"><a href="#传统的模块化做法。" class="headerlink" title="传统的模块化做法。"></a>传统的模块化做法。</h3><blockquote><p>模块是实现特定功能的一组属性和方法的封装。</p></blockquote><p>将模块写成一个对象，所有的模块成员都放到这个对象里面。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;</span><br><span class="line">  _count:<span class="number">0</span>,</span><br><span class="line">  f1:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">  f2:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line">module1.f1()</span><br><span class="line">module1.f2()</span><br></pre></td></tr></table></figure></p><p>上面的对象可以改变里面的属性和方法，不安全</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = （<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> count=<span class="number">0</span>;</span><br><span class="line"> <span class="keyword">return</span> &#123; </span><br><span class="line">   f1:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">  f2:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;&#125;</span><br><span class="line">&#125;());</span><br><span class="line">module1.f1()</span><br><span class="line">module1.f2()</span><br><span class="line">module1.count <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>使用<label>立即执行函数</label> 将相应的方法和属性封装在函数中,这样就不会暴露私有成员</p><h4 id="利用构造函数封装对象"><a href="#利用构造函数封装对象" class="headerlink" title="利用构造函数封装对象"></a>利用构造函数封装对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr =[];</span><br><span class="line">  <span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>)</span>&#123;</span><br><span class="line">       arr.push(val)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.join(<span class="string">''</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Father();</span><br><span class="line">a.add(<span class="number">1</span>);<span class="comment">//[1]</span></span><br><span class="line">a.toString();<span class="comment">//"1"</span></span><br><span class="line">a.arr <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>上面的函数将 <code>arr</code> 变成私有变量，在函数外部无法访问，但是形成了闭包，非常耗费内存；<br>违背了构造函数与实例对象在数据上相分离的原则（即实例对象的数据，不应该保存在实例对象以外）。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ToString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._buffer = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ToString.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: ToString,</span><br><span class="line">  add: function (str) &#123;</span><br><span class="line">    <span class="keyword">this</span>._buffer.push(str);</span><br><span class="line">  &#125;,</span><br><span class="line">  toString: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._buffer.join(<span class="string">''</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>虽然上面的构造函数未生成闭包，但是外部可以修改方法和属性，不安全</p><h4 id="放大模式"><a href="#放大模式" class="headerlink" title="放大模式"></a>放大模式</h4><p>如果一个模块很大或者一个模块需要继承另一个模块可以利用立即执行函数的特效来封装<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span>(<span class="params">m1</span>)</span>&#123;</span><br><span class="line">mod1.col=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> mod1;</span><br><span class="line">&#125;(<span class="built_in">window</span>.modlue2 ||&#123;&#125;)) <span class="comment">//有些模块可能是null 确保函数正常执行 采用兼容模式 window.modlue2 ||&#123;&#125;</span></span><br></pre></td></tr></table></figure></p><ul><li>独立性是模块的重要特点，模块内部最好不与程序的其他部分直接交互。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span> (<span class="params">$, Swiper</span>) </span>&#123;</span><br><span class="line">　<span class="comment">//...</span></span><br><span class="line">&#125;(jQuery, Swiper));</span><br></pre></td></tr></table></figure></li></ul><p>上面的 module1 引入 jQuery 和 Swiper 当做两个参数传入模块中，保证了模块的独立性，还使得模块之间的依赖关系变得明显。</p><p><strong>立即执行函数还可以起到命名空间的作用。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$, window, document</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleEvents</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">initialize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dieCarouselDie</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//attach to the global scope</span></span><br><span class="line">  <span class="built_in">window</span>.finalCarousel = &#123;</span><br><span class="line">    init : initialize,</span><br><span class="line">    destroy : dieCarouselDie</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;( jQuery, <span class="built_in">window</span>, <span class="built_in">document</span> ));</span><br></pre></td></tr></table></figure></p><p>以上都有一个共同点:使用单个全局变量箭头代码包装在函数中，使用闭包建立私有空间<br>但是都有缺点：</p><ul><li>不知道模块(库) 的加载顺序</li><li><p>还是有可能引起命名冲突，比如两个库都有相同的名称，或者使用哪个版本<br>有几种良好实施的方法：CommonJS、AMD和CMD。可以解决以上的缺陷</p><h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3></li><li><p><code>CommonJS</code> 是一种思想, 本质上是可复用的JavaScript,它导出特定的对象，提供其它程序使用。</p></li><li><p>由于 <code>JavaScript</code> 没有模块系统、标准库较少、缺乏包管理工具,因此<code>CommonJS</code>是为它的表现来制定规范。</p></li><li><p>每个JavaScript 文件 都将模块存储在自己独有的作用域中。</p></li><li><p>需要使用 <code>module.exports</code> 和 <code>exports.obj</code> 来导出对象，并在需要它的程序中使用 <code>require(&#39;module&#39;)</code> 加载</p></li></ul> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//文件1</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">myModule</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello!'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.goodbye = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'goodbye!'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = myModule;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//文件2</span></span><br><span class="line"> <span class="keyword">var</span> myModule = <span class="built_in">require</span>(<span class="string">'myModule'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myModuleInstance = <span class="keyword">new</span> myModule();</span><br><span class="line">myModuleInstance.hello(); <span class="comment">// 'hello!'</span></span><br><span class="line">myModuleInstance.goodbye(); <span class="comment">// 'goodbye!'</span></span><br></pre></td></tr></table></figure><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = &#123; </span><br><span class="line">  export1:&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">module,exports</span>)</span>&#123;</span><br><span class="line">   exports.add = functon(val)&#123;</span><br><span class="line">      <span class="keyword">return</span> val *<span class="number">10</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;(module1,module1.export1));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = module1.export1.add;</span><br><span class="line">fn(<span class="number">2</span>)<span class="comment">//20</span></span><br></pre></td></tr></table></figure><p>利用立即执行函数 接受两个参数 module 和 exports， 模块就通过立即执行函数赋值，然后导出模块，即可实现模块的加载<br><strong>这种方法的好处：</strong></p><ul><li>避免全局污染</li><li>明确依赖项目</li><li>语法清晰<br><strong>缺点：</strong></li><li><p>由于 <code>CommonJS</code> 采用服务器优先方法并且同步加载模块，因此在浏览器中使用它会阻止浏览器运行其他内容，直到加载完成。</p><p>我们可以使用 <code>AMD</code> 来异步加载</p><h3 id="AMD-Asynchromous-Module-Definition"><a href="#AMD-Asynchromous-Module-Definition" class="headerlink" title="AMD(Asynchromous Module Definition)"></a>AMD(Asynchromous Module Definition)</h3></li><li>定义了一套 JavaScript 模块依赖异步加载标准，来解决同步加载的问题。</li><li>AMD模块加载不影响后面语句的运行。所有依赖某些模块的语句均放置在回调函数中。</li><li>定义了一个函数 <code>define</code>，通过 <code>define</code> 方法定义模块。</li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> define([<span class="string">'myModule'</span>, <span class="string">'myOtherModule'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">myModule, myOtherModule</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(myModule.hello());</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的 <code>define</code> 函数将每个模块的依赖项，以数组的形式作为参数。</p><blockquote><p>这些依赖项会在后台异步加载，一旦加载完成，<code>define</code> 函数就调用模块给出的回调函数<br><code>myModule</code> 可能像下面一样定义：</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   define([], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    goodbye: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'goodbye'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="CMD-Common-Module-Definition"><a href="#CMD-Common-Module-Definition" class="headerlink" title="CMD(Common Module Definition)"></a>CMD(Common Module Definition)</h4><ul><li><code>CMD</code>由玉伯大佬提出并用于<a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="noopener">SeaJS</a> </li><li><p>CMD 和 AMD 很相似，都有 define 函数， 通过 require 加载 </p><p>CMD和AMD 不同点：</p><ul><li>对于依赖的模块 CMD 延迟执行， AMD 提前执行(requireJS 高版本也开始延迟执行)</li><li><p>CMD使用依赖就近原则（按需加载）：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">     define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;   </span><br><span class="line">       <span class="keyword">var</span> near = <span class="built_in">require</span>(<span class="string">'./a'</span>)   </span><br><span class="line">       near.doSomething()   </span><br><span class="line">       <span class="comment">// 此处略去 100 行  </span></span><br><span class="line">        <span class="keyword">var</span> nearOne = <span class="built_in">require</span>(<span class="string">'./b'</span>) <span class="comment">// 依赖可以就近书写   </span></span><br><span class="line">        nearOne.doSomething()   <span class="comment">// ...</span></span><br><span class="line">         &#125;)</span><br><span class="line">     <span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">- AMD使用依赖前置原则（必须先加载完依赖）：</span></span><br><span class="line"><span class="string">    `</span><span class="string">``</span>javascript</span><br><span class="line">    define([<span class="string">'./a'</span>, <span class="string">'./b'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">nearTow, nearThree</span>) </span>&#123; <span class="comment">// 必须一开始加载</span></span><br><span class="line">          nearTow.doSomething()</span><br><span class="line">          <span class="comment">// 此处略去 100 行</span></span><br><span class="line">          nearThree.doSomething()</span><br><span class="line">          ...</span><br><span class="line">          &#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>CMD</code> 里，没有全局 require，而是根据模块系统的完备性，提供 seajs.use 来实现模块系统的加载启动。CMD 里，每个 API 都简单纯粹。   <code>AMD</code> 的 API 默认是一个当多个用，CMD 的 API 严格区分，推崇职责单一。比如 AMD 里，require 分全局 require 和局部 require，都叫 require。 </p></li></ul></li></ul><h4 id="AMD-和-CommonJS-不同点："><a href="#AMD-和-CommonJS-不同点：" class="headerlink" title=" AMD 和 CommonJS 不同点："></a><label> <code>AMD</code> 和 <code>CommonJS</code> 不同点：</label></h4><p><code>AMD</code>：</p><ul><li>采用浏览器优先的方法，异步加载，主要用于浏览器</li><li>先加载依赖项</li><li>依赖项可以说 对象、函数、构造函数、字符串等等其他JS类型</li></ul><p><code>CommonJS</code>:</p><ul><li>采用服务器优先的方法，同步加载，主要用于服务器</li><li>支持对象作为模块<br>共同点： 先加载依赖项</li></ul><h3 id="通用模块定义-UMD"><a href="#通用模块定义-UMD" class="headerlink" title="通用模块定义 UMD"></a>通用模块定义 <code>UMD</code></h3><blockquote><p>同时支持 <code>AMD</code>和 <code>CommonJS</code><br>本质 创建了一种方法来使用两者的任何一种，同时支持全局变量定义，(JS兼容性的常用思想)所以 <code>UMD</code> 可以在客户端和服务器上工作<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">root, factory</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">      <span class="comment">// AMD</span></span><br><span class="line">    define([<span class="string">'myModule'</span>, <span class="string">'myOtherModule'</span>], factory);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> exports === <span class="string">'object'</span>) &#123;</span><br><span class="line">      <span class="comment">// CommonJS</span></span><br><span class="line">    <span class="built_in">module</span>.exports = factory(<span class="built_in">require</span>(<span class="string">'myModule'</span>),</span><br><span class="line">     <span class="built_in">require</span>(<span class="string">'myOtherModule'</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    root.returnExports = factory(root.myModule, root.myOtherModule);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params">myModule, myOtherModule</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">notHelloOrGoodbye</span>(<span class="params"></span>)</span>&#123;&#125;; </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>)</span>&#123;&#125;; </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">goodbye</span>(<span class="params"></span>)</span>&#123;&#125;; </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">      hello: hello,</span><br><span class="line">      goodbye: goodbye</span><br><span class="line">  &#125;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="ES6模块（即-ES2015-ECMAScript-6、ES6）"><a href="#ES6模块（即-ES2015-ECMAScript-6、ES6）" class="headerlink" title="ES6模块（即 ES2015/ECMAScript 6、ES6）"></a>ES6模块（即 <a href="http://es6.ruanyifeng.com/#docs/module#%E6%A6%82%E8%BF%B0" target="_blank" rel="noopener">ES2015/ECMAScript 6、ES6</a>）</h3><ul><li>使用 <code>import</code> 关键字引入模块，通过 <code>export</code> 关键字导出模块</li><li><p>ES6目前无法在浏览器中执行,只能通过babel将不被支持的import编译为当前受到广泛支持的 require。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> cun =<span class="number">1</span>; </span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  cun++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----------------</span></span><br><span class="line"><span class="keyword">import</span> &#123; cun, add &#125; <span class="keyword">from</span> <span class="string">'./a.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(cun); <span class="comment">// 1</span></span><br><span class="line">incCounter();</span><br><span class="line"><span class="built_in">console</span>.log(cun); <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> fo =<span class="string">'a'</span>;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> fo =<span class="string">'b'</span>,<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;fo&#125; <span class="keyword">from</span> <span class="string">'./a.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(fo);<span class="comment">//'a'</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> <span class="built_in">console</span>.log(fo),<span class="number">500</span>)<span class="comment">//'b'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6 输入的模块变量，只是一个“符号连接”，所以这个变量是只读的，对它进行重新赋值会报错。</span></span><br><span class="line">fo = <span class="string">'s'</span> <span class="comment">//error</span></span><br></pre></td></tr></table></figure></li><li><p>ES6 模块之中，顶层的this指向undefined，即不应该在顶层代码使用this。<br><code>CommonJS</code>、<code>AMD</code>和<code>CMD</code>相比:</p></li><li><code>ES6</code>模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</li><li>ES6 对外接口只是一种静态定义，在代码静态解析阶段就会生成。</li><li>ES6 module编译时输出接口(加载)，输出的是值的引用。(静态编译)</li><li>CommonJS 加载的是一个对象（即module.exports属性），该对象只有在脚本运行完才会生成。</li><li>CommonJS 模块运行时加载，输出的是一个值的拷贝。(动态编译)<br>一旦输出一个值，模块内部的变化就影响不到这个值。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib/counter.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrement</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  counter--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  counter: counter,</span><br><span class="line">  increment: increment,</span><br><span class="line">  decrement: decrement</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// src/main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> counter = <span class="built_in">require</span>(<span class="string">'../../lib/counter'</span>);</span><br><span class="line"></span><br><span class="line">counter.increment();</span><br><span class="line"><span class="built_in">console</span>.log(counter.counter); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;传统的模块化做法。&quot;&gt;&lt;a href=&quot;#传统的模块化做法。&quot; class=&quot;headerlink&quot; title=&quot;传统的模块化做法。&quot;&gt;&lt;/a&gt;传统的模块化做法。&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;模块是实现特定功能的一组属性和方法的封装。&lt;/p&gt;
&lt;/b
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="moduleDevelop" scheme="http://yoursite.com/tags/moduleDevelop/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript OOP(三)</title>
    <link href="http://yoursite.com/2019/03/05/oop3/"/>
    <id>http://yoursite.com/2019/03/05/oop3/</id>
    <published>2019-03-05T15:36:51.000Z</published>
    <updated>2019-03-14T08:40:46.907Z</updated>
    
    <content type="html"><![CDATA[<h3 id="对象继承"><a href="#对象继承" class="headerlink" title="对象继承"></a>对象继承</h3><p>A 对象通过继承 B 对象，就能直接拥有 B 对象的所有属性和方法。这对于<label>代码的复用</label>是非常有用的。</p><p>JavaScript 语言的继承不通过 class，而是通过“原型对象”<code>prototype</code>实现</p><h4 id="传统原型链式继承"><a href="#传统原型链式继承" class="headerlink" title="传统原型链式继承"></a>传统原型链式继承</h4><ul><li>过多的继承属性</li><li>比如一个函数用不到某个原型方法或属性，那么方法或属性就过剩了<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Grand</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">Grand.prototype.name=<span class="string">"grand"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> grand = <span class="keyword">new</span> Grand();</span><br><span class="line"></span><br><span class="line">Father.prototype=grand;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> father = <span class="keyword">new</span> Father();</span><br><span class="line"></span><br><span class="line">Son.prototype=father;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> Son();</span><br></pre></td></tr></table></figure></li></ul><h4 id="借用构造函数-使用call-appply"><a href="#借用构造函数-使用call-appply" class="headerlink" title="借用构造函数  使用call/appply"></a>借用构造函数  使用call/appply</h4><ul><li>不是真正继承，因为不能调用原型上的方法，而且每调用一次都会调用多次函数，实际上步骤没有变少</li><li>工业级推荐使用</li><li>缺点无法添加私有原型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Father.call(<span class="keyword">this</span>); <span class="comment">// 调用父类构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son.prototype.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Father.prototype.print.call(<span class="keyword">this</span>);<span class="comment">//只使用单个方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类继承父类的原型</span></span><br><span class="line">Son.prototype = <span class="built_in">Object</span>.create(Father.prototype);</span><br><span class="line">Son.prototype.constructor = Son;</span><br></pre></td></tr></table></figure><h4 id="共有原型"><a href="#共有原型" class="headerlink" title="共有原型"></a>共有原型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Father.prototype =&#123;</span><br><span class="line">    name:<span class="string">"common"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Son.prototype =  <span class="built_in">Object</span>.create(Father.prototype)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span> (<span class="params">Target,Origin</span>)</span>&#123;<span class="comment">//继承源</span></span><br><span class="line">  Target.prototype = Origin.prototype;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="圣杯模式"><a href="#圣杯模式" class="headerlink" title="圣杯模式"></a>圣杯模式</h4><blockquote><p>隐式附加的东西就私有化，可以公共定义的东西提取出来公有化<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> inherit =(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> Interim =<span class="function"><span class="keyword">function</span> <span class="title">Interim</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">   <span class="keyword">return</span>  <span class="function"><span class="keyword">function</span> (<span class="params">Target,Origin</span>)</span>&#123;<span class="comment">//继承源</span></span><br><span class="line">   Interim.prototype =<span class="built_in">Object</span>.create(Origin);</span><br><span class="line">   Target.prototype = Interim.prototype;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//现在 可以 制定自己的私有属性，但是 constuctor 不是 原函数所一手动赋值回来，如果想要知道函数真正继承那个原型需要保存它</span></span><br><span class="line">  Target.prototype.constuctor = Target;</span><br><span class="line">  Target.prototype.yliluokka =Origin;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;())</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h4><p>JavaScript 不提供多重继承功能，即不允许一个对象同时继承多个对象。但是，可以通过<code>Object.assign</code>，实现这个功能。这种模式称之为 Mixin (混入)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn1</span>(<span class="params"></span>)</span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn2</span>(<span class="params"></span>)</span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  F1.call(<span class="keyword">this</span>);</span><br><span class="line">  F2.call(<span class="keyword">this</span>);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//继承F1</span></span><br><span class="line">Son.prototype =<span class="built_in">Object</span>.create(Fn1.prototype);</span><br><span class="line"><span class="comment">//继承F2</span></span><br><span class="line"><span class="built_in">Object</span>.assign(Son.prototype,Fn2.prototype);</span><br><span class="line">Son.prototype.constructor =Son;</span><br><span class="line"><span class="keyword">let</span> a =<span class="keyword">new</span> Son();</span><br></pre></td></tr></table></figure></p><h3 id="call，apply-and-bind"><a href="#call，apply-and-bind" class="headerlink" title="call，apply and bind"></a>call，apply and bind</h3><blockquote><p>都可改变函数内部this的指向（即函数执行时所在的作用域），然后在所指定的作用域中，调用该函数。</p></blockquote><h4 id="call-and-apply"><a href="#call-and-apply" class="headerlink" title="call and apply"></a>call and apply</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;&#125; </span><br><span class="line"><span class="comment">//test() == test.call()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj =&#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(obj) <span class="comment">//"[object Object]"</span></span><br><span class="line"><span class="comment">//因为call 和 apply 会将函数中的this指向第一个参数</span></span><br><span class="line"><span class="comment">//相当于 obj.toString()</span></span><br></pre></td></tr></table></figure><p><code>call and apply</code> 二者区别在于传参：</p><ul><li>call 第二个参数开始单个单个参数传</li><li>apply 第二个参数为数组或类数组<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回数组中最大的数</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">15</span>];</span><br><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, a) <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将数组的空元素变为undefined</span></span><br><span class="line"><span class="built_in">Array</span>.apply(<span class="literal">null</span> [<span class="number">1</span>,,<span class="number">3</span>,,<span class="number">4</span>)<span class="comment">//[1,undefined,3,undefined,4];</span></span><br></pre></td></tr></table></figure></li></ul><p>空元素与undefined的差别</p><ul><li>forEach方法会跳过空元素，但是不会跳过undefined。因此，遍历内部元素的时候，会得到不同的结果。</li><li><label>转换类似数组的对象</label></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let obj=&#123;0: 1, length: 2&#125;</span><br><span class="line">Array.protetype.slice.apply(obj);//[1,undefined]</span><br></pre></td></tr></table></figure><label>被处理的对象必须有length属性，以及相对应的数字键。</label><h6 id="参数为空、null和undefined，则默认传入全局对象。"><a href="#参数为空、null和undefined，则默认传入全局对象。" class="headerlink" title="参数为空、null和undefined，则默认传入全局对象。"></a><label>参数为空、null和undefined，则默认传入全局对象。</label></h6><hr><p>bind方法用于将函数体内的this绑定到某个对象，然后返回一个新函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> counter = &#123;</span><br><span class="line">  count: <span class="number">0</span>,</span><br><span class="line">  inc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> func = counter.inc.bind(counter);</span><br><span class="line">func();</span><br><span class="line">counter.count <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * <span class="keyword">this</span>.m + y * <span class="keyword">this</span>.n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  m: <span class="number">2</span>,</span><br><span class="line">  n: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newAdd = add.bind(obj, <span class="number">5</span>); <span class="comment">//将x 绑定为 5 </span></span><br><span class="line">newAdd(<span class="number">5</span>) <span class="comment">// 20</span></span><br><span class="line">newAdd(<span class="number">1</span>,<span class="number">5</span>)<span class="comment">//12</span></span><br></pre></td></tr></table></figure><p> <label>第一个参数是null或undefined，等于将this绑定到全局对象</label></p><h4 id="bind方法使用注意点"><a href="#bind方法使用注意点" class="headerlink" title="bind方法使用注意点"></a>bind方法使用注意点</h4><ul><li><p>bind方法每运行一次，就返回一个新函数 需要一个变量接收</p></li><li><p>结合回调函数使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> counter = &#123;</span><br><span class="line">  count: <span class="number">0</span>,</span><br><span class="line">  inc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callIt</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  callback();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">callIt(counter.inc.bind(counter));</span><br><span class="line">counter.count <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li><li><p>结合call方法使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].slice(<span class="number">0</span>, <span class="number">1</span>) <span class="comment">// [1]</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.call([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">0</span>, <span class="number">1</span>) <span class="comment">// [1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将Array.prototype.slice变成Function.prototype.call方法所在的对象</span></span><br><span class="line"><span class="comment">//调用时就变成了Array.prototype.slice.call。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> slice = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Array</span>.prototype.slice);</span><br><span class="line"><span class="built_in">Function</span>.prototype.slice.call([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">0</span>, <span class="number">1</span>) <span class="comment">// [1]</span></span><br><span class="line"><span class="comment">//slice([1, 2, 3], 0, 1) </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> push = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Array</span>.prototype.push);</span><br><span class="line"><span class="keyword">let</span> pop = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Array</span>.prototype.pop);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span> ,<span class="number">2</span> ,<span class="number">3</span>];</span><br><span class="line">push(a, <span class="number">4</span>)</span><br><span class="line">a <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">pop(a)</span><br><span class="line">a <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure></li><li><p>将Function.prototype.bind方法变成Function.prototype.call的方法，就意味着bind的调用形式也可以被改写</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o = &#123; <span class="attr">v</span>: <span class="number">123</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> bind = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Function</span>.prototype.bind);</span><br><span class="line">bind(f, o)() <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><h3 id="Object-系统默认方法"><a href="#Object-系统默认方法" class="headerlink" title="Object 系统默认方法"></a><code>Object 系统默认方法</code></h3><ul><li><p><code>getPrototypeOf</code> 获取对象原型,只有一个参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> Foo ();</span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(obj) <span class="comment">// Foo.prototype</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//空对象原型</span></span><br><span class="line"> <span class="built_in">Object</span>.getPrototypeOf(&#123;&#125;) <span class="comment">// Object.prototype</span></span><br><span class="line"><span class="comment">// Object.prototype 原型</span></span><br><span class="line"> <span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">Object</span>.prototype) <span class="comment">//null</span></span><br><span class="line"><span class="comment">// Foo</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(Foo) <span class="comment">// Function.prototype</span></span><br></pre></td></tr></table></figure></li><li><p><code>setPrototypeOf</code> 设置对象原型<br>有两个参数：</p><ol><li>现有对象</li><li>继承的原型对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> now = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> pro = &#123;<span class="attr">name</span>:<span class="string">"Owen"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(now,pro);</span><br><span class="line">now.name <span class="comment">//"Owen"</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h4 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a><code>Object.create()</code></h4><blockquote><p>生成实例对象的常用方法 参数必须为对象 或 null</p><ul><li>参数为 <code>null</code> 会生成一个不会继承任何属性和方法的对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">obj.toString()<span class="comment">// Error</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//会继承第二个参数的属性和方法</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(&#123;&#125;, &#123;</span><br><span class="line">    p1: &#123;</span><br><span class="line">      value: <span class="number">123</span>,</span><br><span class="line">      enumerable: <span class="literal">true</span>,</span><br><span class="line">      configurable: <span class="literal">true</span>,</span><br><span class="line">      writable: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    p2: &#123;</span><br><span class="line">      value: <span class="string">'Owen'</span>,</span><br><span class="line">      enumerable: <span class="literal">true</span>,</span><br><span class="line">      configurable: <span class="literal">true</span>,</span><br><span class="line">      writable: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(&#123;&#125;);</span><br><span class="line">obj.p1 = <span class="number">123</span>;</span><br><span class="line">obj.p2 = <span class="string">'Owen'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成的对象会继承它的原型对象的构造函数。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Object</span>.create(f);</span><br><span class="line"></span><br><span class="line">b.constructor === Foo <span class="comment">// true</span></span><br><span class="line">b <span class="keyword">instanceof</span> Foo <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><h4 id="object-isPrototypeOf"><a href="#object-isPrototypeOf" class="headerlink" title="object.isPrototypeOf"></a><code>object.isPrototypeOf</code></h4><blockquote><p>判断对象是否再参数对象的原型链上</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> F()</span><br><span class="line">F.prototype.isPrototypeOf(f) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h5 id="获取原型的三种方法"><a href="#获取原型的三种方法" class="headerlink" title="获取原型的三种方法"></a>获取原型的三种方法</h5><ol><li><code>obj.__proto__</code></li><li><code>obj.constructor.prototype</code></li><li><code>Object.getPrototypeOf(obj)</code></li></ol><ul><li><p>前两种不可靠，都个一手动修改， 而且 <code>__proto__</code> 只有浏览器才需要部署</p><h4 id="getOwnPropertyNames-和-keys"><a href="#getOwnPropertyNames-和-keys" class="headerlink" title="getOwnPropertyNames 和 keys"></a><code>getOwnPropertyNames</code> 和 <code>keys</code></h4><blockquote><p>以数组形式返回参数对象所有属性名(不包含继承属性)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不管可不可遍历都会返回出来</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(<span class="built_in">Date</span>);<span class="comment">//["length", "name", "prototype", "now", "parse", "UTC"]</span></span><br><span class="line"><span class="comment">//返回可遍历属性</span></span><br><span class="line"><span class="built_in">Object</span>.keys(<span class="built_in">Date</span>)<span class="comment">// []</span></span><br></pre></td></tr></table></figure></blockquote></li></ul><h4 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty"></a><code>hasOwnProperty</code></h4><blockquote><p>判断参数是否是自身的属性，唯一一个不会遍历原型链的方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.hasOwnProperty(<span class="string">'length'</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="拷贝对象"><a href="#拷贝对象" class="headerlink" title="拷贝对象"></a>拷贝对象</h3><p>拷贝对象需要确保两件事情：</p><ul><li>与原对象具有同样的原型。</li><li>与原对象具有同样的实例属性。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyOwn</span> (<span class="params">target,origin</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.getOwnPropertyNames(origin).forEach(<span class="function">(<span class="params">key</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> desc =<span class="built_in">Object</span>.getOwnPropertyDescriptor(origin,key);</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(target,origin,desc);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">origin</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> clone = <span class="built_in">Object</span>.create (<span class="built_in">Object</span>.getPrototypeOf(origin));</span><br><span class="line">    copyOwn(clone,origin)</span><br><span class="line">  <span class="keyword">return</span> clone</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//es8</span></span><br><span class="line"><span class="keyword">const</span> copyTwo = <span class="function"><span class="params">origin</span> =&gt;</span><span class="built_in">Object</span>.create( <span class="built_in">Object</span>.getPropertyOf(origin),<span class="built_in">Object</span>.getOwnPropertyDescriptor(origin) );</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;对象继承&quot;&gt;&lt;a href=&quot;#对象继承&quot; class=&quot;headerlink&quot; title=&quot;对象继承&quot;&gt;&lt;/a&gt;对象继承&lt;/h3&gt;&lt;p&gt;A 对象通过继承 B 对象，就能直接拥有 B 对象的所有属性和方法。这对于&lt;label&gt;代码的复用&lt;/label&gt;是非常有用
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="OOP" scheme="http://yoursite.com/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript OOP(二)</title>
    <link href="http://yoursite.com/2019/03/05/opp2/"/>
    <id>http://yoursite.com/2019/03/05/opp2/</id>
    <published>2019-03-05T13:55:38.000Z</published>
    <updated>2019-03-14T08:40:55.499Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原型对象-prototype"><a href="#原型对象-prototype" class="headerlink" title="原型对象 prototype"></a>原型对象 <code>prototype</code></h3><blockquote><p>原型对象的所有属性和方法,都能被实例对象共享</p></blockquote><p>JavaScript 通过构造函数生成新对象，因此构造函数可以视为对象的模板。实例对象的属性和方法，可以定义在构造函数内部。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span> (<span class="params">name, color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">'小明'</span>, <span class="string">'白色'</span>);</span><br><span class="line"></span><br><span class="line">cat1.name <span class="comment">// '小明'</span></span><br><span class="line">cat1.color <span class="comment">// '白色'</span></span><br></pre></td></tr></table></figure></p><p><strong>构造函数缺点：</strong></p><ul><li>一个构造函数的多个实例之间，无法共享属性，从而造成对系统资源的浪费。</li></ul><p>解决方法，就是 JavaScript 的<label style="color:#409eff; padding: 0 8px;">原型对象</label> <code>prototype</code>，因为原型对象的所有属性和方法，都能被实例对象共享。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span> (<span class="params">name, color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Cat.prototype.color =<span class="string">"白色"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">'巧克力'</span>);</span><br><span class="line"><span class="keyword">var</span> cat2 = <span class="keyword">new</span> Cat(<span class="string">'布丁'</span>);</span><br><span class="line">cat1.color <span class="comment">//白色</span></span><br><span class="line">cat2.color<span class="comment">//白色</span></span><br></pre></td></tr></table></figure><h5 id="JavaScript规定，每个函数都有一个prototype属性，指向一个对象。"><a href="#JavaScript规定，每个函数都有一个prototype属性，指向一个对象。" class="headerlink" title="JavaScript规定，每个函数都有一个prototype属性，指向一个对象。"></a>JavaScript规定，每个函数都有一个<code>prototype</code>属性，指向一个对象。</h5><ul><li>对于构造函数来说，生成实例的时候，该属性会自动成为实例对象的原型。</li><li>实例对象自身就有某个属性或方法，它就不会再去原型对象寻找这个属性或方法。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">typeof</span> f.prototype <span class="comment">// "object"</span></span><br></pre></td></tr></table></figure><p>每个 JS 对象都有 <code>__proto__</code> 属性，这个属性可以访问到  原型（<code>[[prototype]]</code>） 内部属性。这个属性在现在来说已经不推荐直接去使用它了。</p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><blockquote><p>任何对象，都可以充当其他对象的原型；原型对象也有自己的原型。<br>对象到原型，再到原型的原型，一层层向上找到<code>Object.prototype</code>。</p></blockquote><p>可以说 <label>基本上所有对象都继承了<code>Object.prototype</code>的属性；</label>而 <code>Object.prototype</code> 的原型是 <code>null</code><br>通过 <code>getPrototypeOf</code> 方法返回参数对象原型<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">Object</span>.prototype) <span class="comment">//null</span></span><br></pre></td></tr></table></figure></p><label>读取对象属性时，引擎会先在自身属性上查找，没有就查找原型，一级级向上查找，如果到<code>Object.prototype</code>还是没有，则返回<code>undefined</code>。<br><br><strong>一级级向上，对性能有影响，寻找的层级越多，性能影响越大</strong><br><br> <strong>原型链：</strong><br><br><img src="/static/img/prototype.png" alt="原型链"><br>- 实例 F1 通过<code>__proto__</code> 访问对应构造函数的原型 -&gt;  <code>FOO.prototype</code><br><br>- 函数原型再通过<code>__proto__</code> 访问Object的原型 -&gt;  <code>Object.prototype</code><br><br>- Object的原型的<code>__proto__</code>  指向 <code>null</code><br><br>- 构造函数  <code>Foo.prototype</code> 通过<code>constructor</code>访问构造函数本身<br>- <code>Object.constructo</code> 指向 <code>Function</code><br>- <code>Function.constructo</code> 指向 本身<br>- <code>Function.__proto__</code>  指向一个匿名函数<br>- 每个构造函数通过 <code>prototype</code> 访问原型<br><br><strong>只有函数才拥有<code>prototype</code>属性,<label>基本上</label>所有函数都有这个属性</strong><br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fun = <span class="built_in">Function</span>.prototype.bind()</span><br></pre></td></tr></table></figure><br><br>当声明一个函数时自动创建 <code>prototype</code> 属性，<br>这个属性的值是一个对象（也就是原型），且只有一个属性 <code>constructor</code><br><br><br>### <code>constructor</code><br> <code>prototype</code> 有一个属性 <code>constructor</code>，默认指向原型所在的构造函数<br><br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Fn ();</span><br><span class="line">f.constructor == Fn <span class="comment">//true</span></span><br><span class="line">f.constructor == <span class="built_in">Function</span> <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以从实例对象新建另一个实例</span></span><br><span class="line"><span class="keyword">var</span> b =<span class="keyword">new</span> f.constructor();</span><br><span class="line">b.constructor == Fn <span class="comment">//true</span></span><br></pre></td></tr></table></figure><br><br> <code>constructor</code>是一个公有且不可枚举的属性。一旦我们改变了函数的 prototype ，那么新对象就没有这个属性了,如果修改了原型对象，一般会同时修改constructor属性，防止引用的时候出错。<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(A.prototype) <span class="comment">// &#123;constructor: ƒ&#125;constructor: ƒ A()__proto__: Object</span></span><br><span class="line">A.prototype=<span class="string">"a"</span></span><br><span class="line"><span class="built_in">console</span>.log(A.prototype) <span class="comment">//"a"</span></span><br></pre></td></tr></table></figure><br><br>constructor作用：<br>- 让实例对象知道是什么函数构造了它<br> &gt; 可以得知某个实例对象，是哪一个构造函数产生的。<br>- 如果想给某些类库中的构造函数增加一些自定义的方法，就可以通过 xx.constructor.method 来扩展<br><br>###  __proto__<br>基本上每个对象都有的隐式原型属性，指向创建该对象的构造函数的原型，实际指向<code>[[prototype]]</code>， 内部属性，我们并不能访问到，所以使用 <em>proto</em> 来访问。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(&#123;&#125;)</span><br><span class="line"><span class="comment">//__proto__: Objectconstructor: ƒ Object()hasOwnProperty: ....</span></span><br></pre></td></tr></table></figure><br><br>当我们使用 new 操作符时，生成的实例对象拥有了 <code>__proto__</code>属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 这个函数是 Function 的实例对象</span></span><br><span class="line"><span class="comment">// function 就是一个语法糖</span></span><br><span class="line"><span class="comment">// 内部调用了 new Function(...)</span></span><br><span class="line"><span class="keyword">const</span> a =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> fn = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"console.log(a)"</span>) <span class="comment">// Function 的this始终指向 全局对象，除非手动改变this指向</span></span><br><span class="line">fn()<span class="comment">//1</span></span><br></pre></td></tr></table></figure><br><br>&gt; 所有对象都可以通过原型链最终找到 Object.prototype ，虽然 Object.prototype 也是一个对象，但是这个对象却不是 Object 创造的，而是引擎自己创建了 <code>Object.prototype</code> 。<br>可以这样说，<label style="color:#409eff; padding: 0 8px;">所有实例都是对象，但是对象不一定都是实例。</label><p>-首先引擎创建了 Object.prototype ，然后创建了 Function.prototype ，并且通过<strong>proto</strong> 将两者联系了起来。</p><ul><li><p>Function.prototype 以后才有了 function Function() ，然后其他的构造函数都是 function Function() 生成的。</p></li><li><p>函数通过 <code>new Function()</code> 生成,</p><label style="color:#409eff; padding: 0 8px;">不是所有函数都是 <code>new Function()</code>产生的。</label></li></ul><blockquote><ol><li>Object 是所有对象的爸爸，所有对象都可以通过<strong>proto</strong> 找到它</li><li>Function 是所有函数的爸爸，所有函数都可以通过<strong>proto</strong> 找到它</li><li>Function.prototype 和 Object.prototype 是两个特殊的对象，他们由引擎来创建</li><li>除了以上两个特殊对象，其他对象都是通过构造器 new 出来的</li><li>函数的 prototype 是一个对象，也就是原型<br>对象的<strong>proto</strong> 指向原型，<strong>proto</strong>将对象和原型连接起来组成了原型链</li></ol></blockquote></label>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;原型对象-prototype&quot;&gt;&lt;a href=&quot;#原型对象-prototype&quot; class=&quot;headerlink&quot; title=&quot;原型对象 prototype&quot;&gt;&lt;/a&gt;原型对象 &lt;code&gt;prototype&lt;/code&gt;&lt;/h3&gt;&lt;blockquote&gt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="OOP" scheme="http://yoursite.com/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/03/05/hello-world/"/>
    <id>http://yoursite.com/2019/03/05/hello-world/</id>
    <published>2019-03-05T03:01:34.651Z</published>
    <updated>2019-03-05T03:01:34.651Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript OOP(一)</title>
    <link href="http://yoursite.com/2019/03/04/opp1/"/>
    <id>http://yoursite.com/2019/03/04/opp1/</id>
    <published>2019-03-04T15:25:54.000Z</published>
    <updated>2019-03-06T01:57:13.278Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h3><p><link href="../static/css/index.css" rel="stylesheet"><br>对象是单个实物的抽象，通常需要一个模板，表示某一类实物的共同特征，然后对象根据这个模板生成。<br>   面向对象编程的第一步，就是要生成对象。<br> 对象是一个容器，封装了属性（property）和方法（method），属性是对象的状态，方法是对象的行为（完成某种任务）。<br>比如，我们可以把动物抽象为animal对象，使用“属性”记录具体是那一种动物，使用“方法”表示动物的某种行为（奔跑、捕猎、休息等等）。</p><blockquote><p>典型的面向对象编程语言（比如 C++ 和 Java），都有“类”（class）这个概念。所谓“类”就是对象的模板，对象就是“类”的实例。</p></blockquote><p>JavaScript 语言的对象体系，不是基于“类”的，而是基于构造数<code>constructor</code>和原型链<code>prototype</code>；<br>所以JS <label>专门使用构造函数作为对象模板</label>；一个构造函数，可生成多个实列对象，它们有相同的结构</p><h4 id="构造函数与普通函数区别"><a href="#构造函数与普通函数区别" class="headerlink" title="构造函数与普通函数区别"></a>构造函数与普通函数区别</h4><ul><li>构造函数就是一个普通的函数，但是有自己的特征和用法。</li><li>函数体内部使用了this关键字，代表了所要生成的对象实例。</li><li>生成对象的时候，必须使用new命令。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//constructor </span></span><br><span class="line"><span class="keyword">var</span> Bird = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'lai fu'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> bird1 = <span class="keyword">new</span> Bird(); <span class="comment">// 也可以使用 new Bird; 推荐使用前者</span></span><br><span class="line"><span class="built_in">console</span>.log(bird1.name) <span class="comment">// "lai fu"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ordinary</span></span><br><span class="line"><span class="keyword">var</span> a =Bird();</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(a.name) <span class="comment">// typeError</span></span><br><span class="line">name <span class="comment">// 'laifu'</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="防止把构造函数constructor当普通函数使用"><a href="#防止把构造函数constructor当普通函数使用" class="headerlink" title="防止把构造函数constructor当普通函数使用"></a>防止把构造函数<code>constructor</code>当普通函数使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//使用 严格模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fubar</span>(<span class="params">foo, bar</span>)</span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="keyword">this</span>._foo = foo;</span><br><span class="line">  <span class="keyword">this</span>._bar = bar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Fubar()<span class="comment">// TypeError</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断 this 不是构造函数（constructor）的实列对象 那么手动返回自身constructor</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Far</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Far)) <span class="keyword">return</span> <span class="keyword">new</span> Far(a);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>._a=a;</span><br><span class="line">&#125;</span><br><span class="line">Far(<span class="number">1</span>)._a</span><br></pre></td></tr></table></figure><h3 id="new命令的原理"><a href="#new命令的原理" class="headerlink" title="new命令的原理"></a><code>new</code>命令的原理</h3><ul><li>创建一个空对象，作为将要返回的对象实例。</li><li>将这个空对象的原型，指向构造函数的prototype属性。</li><li>将这个空对象赋值给函数内部的this关键字。</li><li>开始执行构造函数内部的代码。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*新生成一个空对象</span></span><br><span class="line"><span class="comment">*链接到原型</span></span><br><span class="line"><span class="comment">*绑定 this</span></span><br><span class="line"><span class="comment">*返回新对象</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_new</span>(<span class="params">constuctor,param</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 获得构造函数</span></span><br><span class="line">    <span class="keyword">let</span> Con = [].shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="comment">// 链接到原型</span></span><br><span class="line">  <span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(Con.prototype);</span><br><span class="line">    <span class="comment">// 绑定 this，执行构造函数</span></span><br><span class="line">    <span class="keyword">let</span> result = Con.apply(obj, <span class="built_in">arguments</span>)</span><br><span class="line">    <span class="comment">// 确保 new 出来的是个对象</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">typeof</span>(result) === <span class="string">'object'</span> &amp;&amp; result != <span class="literal">null</span>)  ? result : obj</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">var</span> fn = _new(</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.name =name; <span class="keyword">this</span>.age=age</span><br><span class="line">    &#125;, <span class="string">'张三'</span>, <span class="number">28</span>);</span><br><span class="line">fn.name <span class="comment">// '张三'</span></span><br></pre></td></tr></table></figure><h3 id="new-target"><a href="#new-target" class="headerlink" title="new.target"></a>new.target</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">new</span>.target === f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f() <span class="comment">// false</span></span><br><span class="line"><span class="keyword">new</span> f() <span class="comment">// true </span></span><br><span class="line"><span class="comment">//可利用 它来判断是否使用 new 命令</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">new</span>.target) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请使用 new 命令调用！'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f() <span class="comment">// Uncaught Error: 请使用 new 命令调用！</span></span><br></pre></td></tr></table></figure><hr><h3 id="this实质"><a href="#this实质" class="headerlink" title="this实质"></a><code>this</code>实质</h3><blockquote><p>原始的对象以字典结构保存，每一个属性名都对应一个属性描述对象。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>:  <span class="number">1</span> &#125;;</span><br></pre></td></tr></table></figure><p>JavaScript 存储变量实际上是以下面的形式保存的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  a: &#123;</span><br><span class="line">    [[value]]: <span class="number">1</span> <span class="comment">//函数的地址</span></span><br><span class="line">    [[writable]]: <span class="literal">true</span> <span class="comment">//是否可赋值</span></span><br><span class="line">    [[enumerable]]: <span class="literal">true</span><span class="comment">//是否可枚举</span></span><br><span class="line">    [[configurable]]: <span class="literal">true</span><span class="comment">//是否可配置</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><label>属性的值保存在属性描述对象的value属性里面。</label><br> 如果 a 属性的值是<label>引用值</label> 那么属性将以下面的形式保存的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">fn</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125; &#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  fn: &#123;</span></span><br><span class="line"><span class="comment">    [[value]]: </span></span><br><span class="line"><span class="comment">    [[writable]]: true </span></span><br><span class="line"><span class="comment">    [[enumerable]]: true </span></span><br><span class="line"><span class="comment">    [[configurable]]: true </span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>由于函数是一个单独的值，所以它可以在不同的环境（上下文）执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f n= <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">f</span>: fn &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单独执行</span></span><br><span class="line"> fn()</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj 环境执行</span></span><br><span class="line">obj.f()</span><br></pre></td></tr></table></figure><blockquote><p>JavaScript 允许在函数体内部，引用当前环境的其他变量。</p></blockquote><p>由于函数可以在不同的运行环境执行，所以需要有一种机制，能够在函数体内部获得当前的运行环境（context）。所以，this就出现了，它的设计目的就是在函数体内部，指代<label>函数当前的运行环境</label>。</p><p>下面这几种用法，都会改变this的指向。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(obj.fn = obj.fn)() <span class="comment">// window</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="literal">false</span> || obj.fn)() <span class="comment">// window</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">(<span class="literal">false</span> || <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="number">4</span>, obj.fn)() <span class="comment">// window</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">(<span class="number">4</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><p>数组调用forEach 方法时函数内部this 指向window ，将父级上下文传递给forEach 改变this指向<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  v: <span class="string">'hello'</span>,</span><br><span class="line">  p: [ <span class="string">'a1'</span>, <span class="string">'a2'</span> ],</span><br><span class="line">  f: <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.p.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.v + <span class="string">'-'</span> + item);</span><br><span class="line">    &#125;, <span class="keyword">this</span>); <span class="comment">//将外层的this传递给forEach方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">o.f() <span class="comment">// hello-a1 hello-a2</span></span><br></pre></td></tr></table></figure></p><p>end</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是对象&quot;&gt;&lt;a href=&quot;#什么是对象&quot; class=&quot;headerlink&quot; title=&quot;什么是对象&quot;&gt;&lt;/a&gt;什么是对象&lt;/h3&gt;&lt;p&gt;&lt;link href=&quot;../static/css/index.css&quot; rel=&quot;stylesheet&quot;&gt;&lt;br&gt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="OOP" scheme="http://yoursite.com/tags/OOP/"/>
    
  </entry>
  
</feed>
