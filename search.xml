<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据库基础（Database Basis) (二)</title>
      <link href="/2019/09/05/database_basis_2/"/>
      <url>/2019/09/05/database_basis_2/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库系统的结构"><a href="#数据库系统的结构" class="headerlink" title="数据库系统的结构"></a>数据库系统的结构</h2><p>在一个DBS中有着不同类型的用户，每个用户都从不同的角度以各自的观点看待数据库，从而形成了DBS不同的视图结构。因此DBS的结构可以有多种不同的层次或不同的视角。</p><label>从数据库管理员（DBA）视角来看，DBS分为内部系统结构和外部体系结构，其中内部系统结构通常采用<code>三级模式结构</code>，外部体系结构通常表现为 <code>集中式结构</code>、<code>分布式结构</code>和<code>并行结构</code>等；</label><label>从数据库用户角度分为客户/服务器结构和浏览器/服务器结构，也就是DBS整体的运行与应用结构</label><h3 id="三级模式结构"><a href="#三级模式结构" class="headerlink" title="三级模式结构"></a>三级模式结构</h3><p>从DBA角度审视数据库系统，其内部基本遵循美国 <code>ANSI/SPAPRC</code> DBMS研究组提出的三体系结构（用户、概念级和物理级）。各个DBMS产品在体系结构上通常具有相同的特征（三级模式结构），并提供两层映像功能。DBS三模式结构是指 模式（Schema）、外模式（External Schema）和 内模式（Internal Schema）。</p><pre class="mermaid">graph LRA(数据库) --> B(内模式)B --内模式/模式映像--> C(模式)C -->  C1(外模式1)C --外模式/模式映像-->  C2(外模式2)C -->  C3(外模式3)C1 --> D1(应用1)C1 --> D2(应用2)C2 --> D3(应用3)C2 --> D4(应用4)C3 --> D5(应用5)C3 --> D6(应用6)</pre><p>外模式的描述向客户提供数据，内模式的描述存储数据，模式是两者的中间层，机不涉及数据的物理存储和硬件环境，也与具体应用程序、开发工具及设计语言无关。</p><p></p><h4>模式</h4><p></p><label>模式也称为概念模式或逻辑模式，是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图，即数据在逻辑上的视图（又称概念视图）</label><p>DBA必须考虑整个数据库的全局概念视图，它不包含任何的数据库实现细节，如何种D是BMS、文件组织、存取方法及设备特征等；而是定义数据库的逻辑结构、数据之间的联系，及数据相关的安全性、完整性等要求（由DBMS提供模式描述语言（Schema DDL）），同时一个数据库只有有个模式，且相对稳定。</p><h4 id="外模式"><a href="#外模式" class="headerlink" title="外模式"></a>外模式</h4><label>  外模式也称为子模式（Subschema）或用户模式,是数据库用户能看见和使用的局部数据的逻辑结构和特征的描述，是与某一应用有关数据的逻辑表示。（DBMS提供子模式描述语言（Subschema DDL）来严格定义子模式）<br>通常其用于满足不同数据库用户需求的数据视图（用户视图），是模式的子集，对数据库整体数据的局部重构。<br>不同用户在看待数据的方式、应用需求、对数据保密的要求等方面存在差异，对应外模式描述就不同，且模式中同样的数据，在外模式中的结构、类型、长度、保密级别等都可以不同</label><p>外模式是保证数据库安全的重要措施，每个用户只能看见和访问所对应的外模式中的数据，简化了DBS的用户接口，便于用户使用，并有效支持数据独立性和共享性。</p><h4 id="内模式"><a href="#内模式" class="headerlink" title="内模式"></a>内模式</h4><p>内模式也称存储模式（Storage Schema）, 是对数据库中的物理结构和存储方式的描述，是数据在数据库内部的表现形式。是整个数据库的最底层表示，它不同于物理层，是DBA所见到的，特定的DBMS所处理的数据库的内部结构（内部视图或存储视图）。</p><label>和模式一样，内模式在一个数据库中只有一个，它不存储设备上的物理记录或物理快，也不涉及任何具体设备限制。</label><h4 id="两层映像与数据独立性-重点"><a href="#两层映像与数据独立性-重点" class="headerlink" title="两层映像与数据独立性 重点"></a>两层映像与数据独立性 <label style="color:red; ">重点</label></h4><p>总体而言，三个模式的对数据的三级抽象，其特点如下：</p><ul><li>一个数据库的整理逻辑结构和特征的描述（概念模式）是独立于数据库其他层次结构（内/外模式）的描述，其是数据库的核心，也是数据库设计的关键。</li><li>一个数据库的内部存储模式依赖于概念模式，并且独立于外部模式和具体的存储设备。</li><li>用户逻辑结构（外模式）是在全局逻辑结构描述的基础上定义的，它面向具体的应用程序，独立于内部模式和存储设备。</li><li>应用程序是在外模式的逻辑结构上编写，依赖于特定的外模式，与数据库的模式和存储结构独立。</li></ul><label>用户不必考虑数据的物理存储细节，将其交给DBMS负责管理，同时为有效支撑数据库的三级抽象及它们之前的联系和相互转换，DBMS通过提供两层映像来实现（外模式/模式 和 模式/内模式）</label>]]></content>
      
      
      
        <tags>
            
            <tag> Database_basis_2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库基础（Database Basis) (一)</title>
      <link href="/2019/09/04/database_basis_1/"/>
      <url>/2019/09/04/database_basis_1/</url>
      
        <content type="html"><![CDATA[<h2 id="概叙"><a href="#概叙" class="headerlink" title="概叙"></a>概叙</h2><p>数据库技术是对数据进行管理的技术，能有科学地管理各类信息资源。数据、数据库、数据库管理系统和数据库系统是数据库常用的基本概念。</p><h2 id="数据库基本概念"><a href="#数据库基本概念" class="headerlink" title="数据库基本概念"></a>数据库基本概念</h2><h3 id="数据（Data）"><a href="#数据（Data）" class="headerlink" title="数据（Data）"></a>数据（Data）</h3><label>数据是描述事物的符号记录，指用物理符号记录下来的、可鉴别的信息。</label><p><strong>数据有多种表现类型：</strong></p><ul><li>文本数据：数字、字母、特殊字母、文字等组成</li><li>多媒体数据：图像、图形、动画、影像、声音、语言等组成</li></ul><p>各种类型的数据经过数字化处理后存入计算机，便于进一步加工、处理、使用</p><p>人们通常只抽取感兴趣的事物特征或属性来描述事物。例如，人们关注客户的姓名、性别、年龄、籍贯、所在地区、联系方式等特征，（张三，男，26，北京，上海，1383838444；）这些具体的特征值就构成一组数据，就是一条记录</p><label> 数据记录往往不能完全表达其内容的含义，还需经过解释才能表达明确含义;</label>如： 张三，男，26岁，北京人，住在上海，联系电话是1383838444；而不了解数据含义的人难以从北京、上海的地名上理解所表达的意思<br>因此数据及关于该数据的解释密切相关，数据的解释是对数据的含义说明，也称数据的语义，即数据所蕴含的信息，没有语义的数据是没有意义和不完整的。<br><br>数据是信息存在的一直形式，只有通过解释或处理的数据才能成为有用的信息。<br><br><br> <h3> 数据库（Database）</h3><br><label>数据库是存储数据的仓库，是有组织的、可共享的数据集合，且数据库中的数据按一定的数据模型组织、描述和永久存储，具有较小的冗余度、较高的数据独立性，系统易于扩展，并可以被多个用户共享</label><h3 id="数据库管理系统（Database-Management-System，DBMS）"><a href="#数据库管理系统（Database-Management-System，DBMS）" class="headerlink" title="数据库管理系统（Database Management System，DBMS）"></a>数据库管理系统（Database Management System，DBMS）</h3><label><br>是一套建立和管理数据库的软件，介于应用程序和操作系统之间。负责科学有效地组织和存储数据，并帮助使用者从大量的数据中快速地获取所需数据，提供必要的安全性和完整性等</label><p><strong>主要功能：</strong></p><ul><li>数据定义功能：通过系统提供的数据定义语言（Data Definition Language, DDL），定义数据库中的数据对象，包括表、视图、存储过程、触发器等</li><li>数据操纵功能：通过系统提供的数据操作语言（Data Manipulation Language, DML），对数据库增、删、改、查等</li><li>数据库运行管理功能：由于数据库具有共享性，为保证数据的安全性、可靠性，系统提供了统一的控制和管理机制，实现数据在不被相互干扰的情况下并发使用，并且发生故障时能对数据库进行正确的恢复</li><li>数据库建立和维护功能：主要包括创建数据库及对数据库空间的维护、数据库的备份与回复功能、数据库的重组织功能和性能监视、分析等，一般通过系统提供的一些实用工具实现。</li><li>数据组织、存储和管理功能：为提高数据的存取效率，系统需对数据进行分类存储和管理，根据具体组织和存储方式提供多种数据存取方法，如索引查找、顺序查找等</li><li>其他功能：主要于其他软件的网络通信、不同数据库管理系统之间的数据传输及相互访问功能等。</li></ul><h3 id="数据库系统（Database-System，-DBS）"><a href="#数据库系统（Database-System，-DBS）" class="headerlink" title="数据库系统（Database System， DBS）"></a>数据库系统（Database System， DBS）</h3><p>指计算机中引入数据库技术之后的系统。通常一个完成的数据库系统包括 数据库、数据库管理系统及相关实用工具、应用程序、数据库管理员和用户。</p><p>数据库管理员（Database Administrator, DBA）不同于普通数据库用户，他们专门负责对数据库进行维护，并保证数据库正常、高效运行</p><p>用户则是数据库系统的服务对象，通常包括程序员和数据库终端用户，程序员通过高级程序设计语言（JAVA,PHP等）和数据库语言（SQL）编写数据库应用程序。</p><p>一般不引起混淆，常将数据库系统简称数据库。</p><hr><p></p><h2 style="text-align:center">数据库管理技术的发展</h2><br><strong>数据库管理可从两方面理解：</strong><p></p><ul><li>针对组织业务管理：负责制定并执行整个组织中关于数据的定义、组织、保护与有效使用的策略、过程和计划</li><li>依靠技术：负责实现数据作为一种资源的集中控制管理</li></ul><p><strong>数据组织：</strong>以便于处理的某种方式收集数据，并将记录在纸介文件上的数据转换成计算机可处理的形式；然后将收集的数据进行适当的构造</p><p><strong>数据组织分为两种：</strong></p><ul><li>逻辑组织：用户或应用程序所使用的数据结构形式</li><li>物理组织：数据在物理存储设备上的结构形式</li></ul><p>检索：存储的数据能方便的被选择提取</p><label>数据管理的任务是进行数据的收集、组织、控制、存储、选取、维护，实现在适当的时候，以适当的形式，给适当的人提供适当的数据；是数据处理的中心问题</label><p><strong>数据处理：</strong>指对各种数据进行收集、存储、加工、和传播的一系列活动的总和</p><h3 id="管理技术的发展阶段"><a href="#管理技术的发展阶段" class="headerlink" title="管理技术的发展阶段"></a>管理技术的发展阶段</h3><h4 id="人工管理阶段"><a href="#人工管理阶段" class="headerlink" title="人工管理阶段"></a>人工管理阶段</h4><p>20世纪50年代中期以前，计算机主要用于科学计算，所涉及的数据处理工作基本上都是靠手工方式进行</p><p><strong>主要特点：</strong></p><ul><li>数据不会保存：由于计算机软件和硬件发展刚刚起步，存储容量有限且价格昂贵，通常一组数据对应一个程序，数据随程序一起输入计算机，处理完毕后即将出结果，数据空间随着程序空间一起被释放</li><li>应用程序管理数据：当时没有专门的数据管理软件，应用程序的数据由程序自行负责，因而数据的组织方式必须由程序员自己设计、定义和管理。所有包括逻辑结构、物理结构、存取方法等数据库设计工作都由应用程序的编写人员来完成，程序员的工作负担十分繁重</li><li>数据面向应用：一组数据对应一个程序，多个应用程序涉及某些相同的数据时必须各自定义，不能共享，因此程序与程序之前存在大量冗余数据，数据独立性差</li></ul><h4 id="文件系统阶段"><a href="#文件系统阶段" class="headerlink" title="文件系统阶段"></a>文件系统阶段</h4><p>20世纪50年代中期到60年代中期，计算机软、硬件发展到一定阶段。其中，硬件方面配置了磁盘、磁鼓等直接存储设备；软件则在操作系统中配备了专门的数据管理软件，即文件系统</p><p>文件系统是将数据的逻辑结构和物理结构分离，由“存放方法”实现逻辑结构与物理结构执行的映射。应用程序只涉及数据的逻辑结构，系统决定数据的物理结构，两者直接可以由差别，这样不会相互影响（数据的物理独立性），使得使用性提高，同时程序员不必关心数据的物理存储细节，生产效率大大提高</p><p><strong>主要特点：</strong></p><ul><li>数据可长期保存和专门管理：磁盘、磁鼓等直接存储设备；软件则在操作系统中配备了专门的数据管理软件</li><li>物理数据独立性：应用程序与数据的具体物理存储结构分离</li><li>文件级数据共享：通过数据的抽取、排序、合并等为应用提供新的文件，不能实现数据项级的普通共享；文件的逻辑结构是根据它的应用而设计，数据的逻辑结构与应用程序之间相互依赖。不同应用程序必须构造各自的文件，数据项大部分相同时还是存在大量的数据冗余。</li></ul><h4 id="数据库系统阶段"><a href="#数据库系统阶段" class="headerlink" title="数据库系统阶段"></a>数据库系统阶段</h4><p>数据库技术是应数据管理任务的需要而产生。20世纪60年代末以来，计算机技术与工业迅速发展，计算机开始广泛应用于企业管理，并对计算机数据管理提出更高的<strong>要求：</strong></p><ul><li>数据作为企业组织的公共资源而集中管理控制，能为企业各类用户共享，须大量地消除数据冗余，节省存储空间；</li><li>当数据变更时，能节省对多个数据副本的多次变更操作，从而缩小计算机运算时间，不会遗漏某些副本的变更而使系统出现不一致的数据</li><li>数据要具有更高的独立性，不但具有物理独立性，而且具有逻辑独立性，当数据逻辑结构改变时，不影响那些不须改变的用户应用程序，节省开发和维护的代价</li></ul><p><strong>数据库系统的特点</strong></p><ul><li>数据集成：数据库管理系统的主要目的就说数据集成。在数据库中，通过相关联数据间定义的逻辑联系，数据被组成统一的逻辑结构，与数据的物理组织与定位分离，应用的修改、增加只与数据的逻辑结构发生关系。</li><li>数据共享性高：在数据库中，一个数据可为多个不同用户共同使用，各个用户可以为了不同的目的来存取相同的数据，他们从各种不同的角度来看待数据库，即<label>一个数据库有多种不同的用户视图</label>。这些用户视图简化了数据的共享，它们可以给每个用户提供执行其业务职能所要求的数据的准确视图，使用户无须知道数据库的全部复杂组成。<label>共享不仅是同一数据被不同用户存取，还包含并发共享，不同用户可同时存取同一的数据</label></li><li>数据冗余小：将独立而又冗余的数据文件集成为单一的逻辑结构，每个数据项的值可以理想地只存储一次，从而节约空间，避免数据的重复存储。<label>并非所有的冗余都可以被消除，有时业务或技术上的原因，如数据的合法性检验、数据存储效率等方法，同一数据可能在数据库种保持多个副本，因此数据库系统种，冗余是受控的，系统知道冗余，保留必要的冗余是系统预定的</label></li><li>数据一致性：通过消除或控制数据冗余，可在一定范围内避免数据的不一致性。</li><li>数据独立性高：数据定义与使用数据的应用程序分离，一方的修改不会影响另一方的修改。<br><strong>数据库提供了两层数据独立：</strong></li></ul><ol><li><strong>逻辑独立：</strong>不同的应用程序对同样的数据可以使用不同的视图，即应用程序一定范围内修改它的数据库视图，而不修改数据本身的定义；而数据定义的修改，在一定范围内不会引起应用的修改</li><li><strong>物理独立：</strong>改变数据的存储结构或存取方法以响应变化的需求而无需修改现有的应用程序</li></ol><ul><li><p>实施统一管理与控制：主要包括数据的安全性、完整性、并发控制与故障恢复等（数据库包含）</p><ol><li>数据安全性（Security）：指保护数据，防止非法使用造成数据泄密和破坏，每个用户只能按规定对某些数据以某些方式进行使用和处理，保证数据只有赋予权限的用户才能访问数据。</li><li>数据完整性（Integrity）：对数据的正确性、有效性和相容性的校验，即控制数据在一定范围内有效或要求数据之前满足一定的关系，保证输入到数据库中的数据满足相应的约束条件，确保数据<label>有效、正确</label></li><li>并发控制（Concurrency）：多个用户的并发进程同时存储、修改数据库时，可能发生相互干扰，而得到错误结果，使得数据库的完整性糟到破坏，因此对多用户的并发操作加以控制和协调。如用户网上订购火车票，系统必须确保不会由于多个用户同时购买相同的车票而造成冲突。</li><li>故障恢复：计算机产生的硬件故障、操作员的失误以及人为的破坏都会影响数据库中数据的正确性，DBMS必须具有将数据库从错误状态恢复到某一已知的正确状态的功能。</li></ol></li><li><p>减少应用程序开发与维护的工作量：<label>由于数据库中的数据具有共享性、独立性，使得程序员不在需要承担基本数据文件的设计、建造与维护等繁重负担</label></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Database basis (a) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>访问媒体设备</title>
      <link href="/2019/08/12/mediaDevices/"/>
      <url>/2019/08/12/mediaDevices/</url>
      
        <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><blockquote><p>mediaDevices 是 Navigator 对象的只读属性，一个单列对象，可以连接访问相机和麦克风，屏幕共享等媒体输入设备</p></blockquote><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="enumerateDevices"><a href="#enumerateDevices" class="headerlink" title="enumerateDevices"></a>enumerateDevices</h3><blockquote><p>请求一个可用的媒体输入和输出设备列表，如麦克风、相机、耳机等。返回的 <code>Promise</code>完成状态中是一个带有 <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo" target="_blank" rel="noopener">MediaDeviceInfo</a> 的数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mediaDevices = navigator.mediaDevices</span><br><span class="line"><span class="keyword">if</span>(!mediaDevices || !mediaDevices.enumerateDevices) <span class="keyword">return</span> <span class="built_in">console</span>.erorr(<span class="string">'浏览器不支持enumerateDevices API'</span>)</span><br><span class="line">navigator.mediaDevices.enumerateDevices()</span><br><span class="line">.then(<span class="function">(<span class="params">devices</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> device <span class="keyword">of</span> devices)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(device.kind + <span class="string">': '</span> +device.lable + <span class="string">' id = '</span>+ device.deviceId );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">audioinput: undefined id = default</span></span><br><span class="line"><span class="comment">audioinput: undefined id = communications</span></span><br><span class="line"><span class="comment">audioinput: undefined id = ac67d348685a08c75e5017f9a449b3d85f08dcb774c88ab95de82bbf2c0fc820</span></span><br><span class="line"><span class="comment">videoinput: undefined id = e41039bcfbc84d926a0b73cdc1d8b1daf3d67d36c62588202191d918fb076426</span></span><br><span class="line"><span class="comment">audiooutput: undefined id = default</span></span><br><span class="line"><span class="comment">audiooutput: undefined id = communications</span></span><br><span class="line"><span class="comment">audiooutput: undefined id = 015d73652e57bffb21679b937675d32c4d4a43862aba3774aaf0b5f1e983151f</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h4><p><img src="/static/img/enumerateDevices.png" alt="enumerateDevices"></p><h3 id="getSupportedConstraints"><a href="#getSupportedConstraints" class="headerlink" title="getSupportedConstraints"></a>getSupportedConstraints</h3><blockquote><p>返回一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MediaTrackSupportedConstraints" target="_blank" rel="noopener">MediaTrackSupportedConstraints</a> 对象，其属性都是客户端所支持约束的属性,值为 Boolean 类型</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> supportedConstraints = navigator.mediaDevices.getSupportedConstraints()</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> constraint <span class="keyword">of</span> <span class="built_in">Object</span>.keys(supportedConstraints))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(constraint)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">aspectRatio</span></span><br><span class="line"><span class="comment">autoGainControl</span></span><br><span class="line"><span class="comment">brightness</span></span><br><span class="line"><span class="comment">channelCount</span></span><br><span class="line"><span class="comment">colorTemperature</span></span><br><span class="line"><span class="comment">contrast</span></span><br><span class="line"><span class="comment">deviceId</span></span><br><span class="line"><span class="comment">echoCancellation</span></span><br><span class="line"><span class="comment">exposureCompensation</span></span><br><span class="line"><span class="comment">exposureMode</span></span><br><span class="line"><span class="comment">exposureTime</span></span><br><span class="line"><span class="comment">facingMode</span></span><br><span class="line"><span class="comment">focusDistance</span></span><br><span class="line"><span class="comment">focusMode</span></span><br><span class="line"><span class="comment">frameRate</span></span><br><span class="line"><span class="comment">groupId</span></span><br><span class="line"><span class="comment">height</span></span><br><span class="line"><span class="comment">iso</span></span><br><span class="line"><span class="comment">latency</span></span><br><span class="line"><span class="comment">noiseSuppression</span></span><br><span class="line"><span class="comment">pointsOfInterest</span></span><br><span class="line"><span class="comment">resizeMode</span></span><br><span class="line"><span class="comment">sampleRate</span></span><br><span class="line"><span class="comment">sampleSize</span></span><br><span class="line"><span class="comment">saturation</span></span><br><span class="line"><span class="comment">sharpness</span></span><br><span class="line"><span class="comment">torch</span></span><br><span class="line"><span class="comment">volume</span></span><br><span class="line"><span class="comment">whiteBalanceMode</span></span><br><span class="line"><span class="comment">width</span></span><br><span class="line"><span class="comment">zoom</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="兼容性-1"><a href="#兼容性-1" class="headerlink" title="兼容性"></a>兼容性</h4><p><img src="/static/img/supportedConstraints.png" alt="supportedConstraints"></p><h3 id="getDisplayMedia"><a href="#getDisplayMedia" class="headerlink" title="getDisplayMedia"></a>getDisplayMedia</h3><blockquote><p>提示用户选择和授予权限来捕获显示或部分的内容，(如分屏共享时分享哪一屏的内容)然后使用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_Recording_API" target="_blank" rel="noopener">medieaStream Recording API</a> 记录生成的 stream，或作为 <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API" target="_blank" rel="noopener">webRTC</a> 会话的一部分进行传输。</p></blockquote><p>可以传递一个<a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints" target="_blank" rel="noopener">MediaStreamConstraints</a> 对象指定返回要求的 <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream" target="_blank" rel="noopener">mediaStream</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">startCapture</span>(<span class="params">displayMediaOptions</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> captureStream = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    captureStream = <span class="keyword">await</span> navigator.mediaDevices.getDisplayMedia(displayMediaOptions);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">"Error: "</span> + err);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> captureStream;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="兼容性-2"><a href="#兼容性-2" class="headerlink" title="兼容性"></a>兼容性</h4><p><img src="/static/img/displayMedia.png" alt="displayMedia"></p><h3 id="getUserMedia"><a href="#getUserMedia" class="headerlink" title="getUserMedia"></a>getUserMedia</h3><blockquote><p>提示用户给予使用媒体输入的许可（如麦克风，摄像机）,当媒体输入时产生一个 <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream" target="_blank" rel="noopener">mediaStream</a>包含所请求的媒体类型的轨道。该流可以包括视频轨道（摄像机，视频记录设备，共屏等硬件或虚拟视频流源）、音频轨道（来自麦克风、A/D转换器等硬件或虚拟音频源），也可能是其它轨道类型</p></blockquote><p>该方法返回一个<code>Promise</code>对象,成功时 <code>resolve</code> 回调函数带有<code>mediaStream</code>对象。如果用户拒绝授予使用权限，或是媒体源不可用，则返回 <code>reject</code>回调</p><p><strong> <code>Promise</code> 可能既不会 <code>resolve</code> 也不会<code>reject</code>,因为用户不必做出选择，可能只是忽略请求</strong></p><p><img src="/static/img/microphone.png" alt="microphone"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 想要获取一个最接近 1280x720 的相机分辨率</span></span><br><span class="line"><span class="keyword">let</span> constraints = &#123; <span class="attr">audio</span>: <span class="literal">true</span>, <span class="attr">video</span>: &#123; <span class="attr">width</span>: <span class="number">1280</span>, <span class="attr">height</span>: <span class="number">720</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line">navigator.mediaDevices.getUserMedia(constraints)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">mediaStream</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> video = <span class="built_in">document</span>.querySelector(<span class="string">'video'</span>);</span><br><span class="line">  video.srcObject = mediaStream;</span><br><span class="line">  video.onloadedmetadata = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    video.play();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123; <span class="built_in">console</span>.log(err.name + <span class="string">": "</span> + err.message); &#125;);</span><br></pre></td></tr></table></figure><h4 id="参数-constraints"><a href="#参数-constraints" class="headerlink" title="参数 constraints"></a>参数 constraints</h4><blockquote><p>一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MediaStreamConstraints" target="_blank" rel="noopener">mediaStreamConstraints</a>对象指定请求的媒体类型和相对应参数，该对象包含 <code>video</code> 和 <code>audio</code> 两个属性，必须一个或两个同时被指定，如果无法找到指定的媒体类型或无法满足对于的参数要求，<code>Promise</code>将返回 <code>rejected</code></p></blockquote><h4 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h4><h5 id="1"><a href="#1" class="headerlink" title="1"></a>1</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">audio</span>:<span class="literal">true</span>,<span class="attr">video</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>属性设置为 Truthy 则生成的<code>stream</code> 必须具有该类型的轨道，否则调用 <code>getUserMedia</code>会抛出错误</strong></p><h5 id="2"><a href="#2" class="headerlink" title="2"></a>2</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  audio: <span class="literal">true</span>,</span><br><span class="line">  video: &#123; <span class="attr">width</span>: <span class="number">1280</span>, <span class="attr">height</span>: <span class="number">720</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>表示<code>video</code>的分辨率应为 1280x720 浏览器将试着满足这个请求参数，如果无法满足要求或选择覆盖，则可能返回其它的分辨率</strong></p><h5 id="3"><a href="#3" class="headerlink" title="3"></a>3</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  audio: <span class="literal">true</span>,</span><br><span class="line">  video: &#123;</span><br><span class="line">    width: &#123; <span class="attr">min</span>: <span class="number">1280</span> &#125;,</span><br><span class="line">    height: &#123; <span class="attr">min</span>: <span class="number">720</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>此配置要求了最低分辨率，如果达不到要求，<code>promise</code> 将返回 <code>reject</code>;还可配置 max、exact(min == max),而且用户将不会得到要求授权的提示</strong></p><h5 id="4"><a href="#4" class="headerlink" title="4"></a>4</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  audio: <span class="literal">true</span>,</span><br><span class="line">  video: &#123;</span><br><span class="line">    width: &#123; <span class="attr">min</span>: <span class="number">1024</span>, <span class="attr">ideal</span>: <span class="number">1280</span>, <span class="attr">max</span>: <span class="number">1920</span> &#125;,</span><br><span class="line">    height: &#123; <span class="attr">min</span>: <span class="number">776</span>, <span class="attr">ideal</span>: <span class="number">720</span>, <span class="attr">max</span>: <span class="number">1080</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果使用<code>ideal</code>,浏览器将尝试找到（如果相机有多个的话）最接近指定值的理想值的设备或相机</strong><br>意味着上方的第一个分辨率例子可简写为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  audio: <span class="literal">true</span>,</span><br><span class="line">  video: &#123;</span><br><span class="line">    width: &#123; <span class="attr">ideal</span>: <span class="number">1280</span> &#125;,</span><br><span class="line">    height: &#123; <span class="attr">ideal</span>: <span class="number">720</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="5"><a href="#5" class="headerlink" title="5"></a>5</h5><p><strong>并不是所有的 <code>constraint</code> 都说数字，如在移动设备上优先使用前置相机</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">audio</span>: <span class="literal">true</span>, <span class="attr">video</span>: &#123; <span class="attr">facingMode</span>: <span class="string">"user"</span> &#125; &#125;</span><br></pre></td></tr></table></figure></p><p><strong>强制使用后置相机</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">audio</span>: <span class="literal">true</span>,</span><br><span class="line"> video: &#123;</span><br><span class="line">  facingMode: &#123; <span class="attr">exact</span>: <span class="string">"environment"</span> &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="APP权限配置"><a href="#APP权限配置" class="headerlink" title="APP权限配置"></a>APP权限配置</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">"permissions": &#123;</span><br><span class="line">  "audio-capture": &#123;</span><br><span class="line">    "description": "Required to capture audio using getUserMedia()"</span><br><span class="line">  &#125;,</span><br><span class="line">  "video-capture": &#123;</span><br><span class="line">    "description": "Required to capture video using getUserMedia()"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>作为可能涉及重大隐私问题的API，getUserMedia()规范规定了浏览器有义务满足的各种隐私和安全要求。</strong><br>getUserMedia()是一个强大的功能，只能在安全的环境中使用; 在不安全的情境中，<code>navigator.mediaDevices</code> 是undefined，阻止访问<code>getUserMedia()</code>。<br><strong>简而言之，安全上下文是使用<code>HTTPS</code>或 <code>file:///URL</code> 方案加载的页面，或者是从中加载的页面<code>localhost</code>。</strong></p><h4 id="在旧的浏览器中使用新的API"><a href="#在旧的浏览器中使用新的API" class="headerlink" title="在旧的浏览器中使用新的API"></a>在旧的浏览器中使用新的API</h4><p><strong>推荐使用处理了约束的 <a href="https://github.com/webrtc/adapter" target="_blank" rel="noopener">adapter.js</a><code>polyfill</code>  来替代。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 老的浏览器可能根本没有实现 mediaDevices，所以我们可以先设置一个空的对象</span></span><br><span class="line"><span class="keyword">let</span> mediaDevices = navigator.mediaDevices</span><br><span class="line"><span class="keyword">if</span> (mediaDevices === <span class="literal">undefined</span>) &#123;</span><br><span class="line">  mediaDevices = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一些浏览器部分支持 mediaDevices。我们不能直接给对象设置 getUserMedia</span></span><br><span class="line"><span class="comment">// 因为这样可能会覆盖已有的属性。这里我们只会在没有getUserMedia属性的时候添加它。</span></span><br><span class="line"><span class="keyword">if</span> (mediaDevices.getUserMedia === <span class="literal">undefined</span>) &#123;</span><br><span class="line">  mediaDevices.getUserMedia = <span class="function"><span class="keyword">function</span>(<span class="params">constraints</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 首先，如果有getUserMedia的话，就获得它</span></span><br><span class="line">    <span class="keyword">var</span> getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一些浏览器根本没实现它 - 那么就返回一个error到promise的reject来保持一个统一的接口</span></span><br><span class="line">    <span class="keyword">if</span> (!getUserMedia) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'getUserMedia is not implemented in this browser'</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 否则，为老的navigator.getUserMedia方法包裹一个Promise</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      getUserMedia.call(navigator, constraints, resolve, reject);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">mediaDevices.getUserMedia(&#123; <span class="attr">audio</span>: <span class="literal">true</span>, <span class="attr">video</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">stream</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> video = <span class="built_in">document</span>.querySelector(<span class="string">'video'</span>);</span><br><span class="line">  <span class="comment">// 旧的浏览器可能没有srcObject</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="string">"srcObject"</span> <span class="keyword">in</span> video) &#123;</span><br><span class="line">    video.srcObject = stream;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 防止在新的浏览器里使用它，应为它已经不再支持了</span></span><br><span class="line">    video.src = <span class="built_in">window</span>.URL.createObjectURL(stream);</span><br><span class="line">  &#125;</span><br><span class="line">  video.onloadedmetadata = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    video.play();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err.name + <span class="string">": "</span> + err.message);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="兼容性-3"><a href="#兼容性-3" class="headerlink" title="兼容性"></a>兼容性</h4><p><img src="/static/img/getUserMedia.png" alt="getUserMedia"></p>]]></content>
      
      
      
        <tags>
            
            <tag> mediaDevices </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redux 学习</title>
      <link href="/2019/08/04/redux/"/>
      <url>/2019/08/04/redux/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>Redux 是一个可以预测的JavaScript 状态控制器，专注于状态管理，有store,state, action,reducer 等API（类似 vue 中的 vux）</p></blockquote><p>Redux 可编写构建行为状态一致的应用，可运行在客户端、服务的 和 原生应用 环境中，并且容易测试。 最重要的是，它提供很好的开发体验，编译后的代码可通过devtools实时预览调试。</p><p>Redux 可以和 React 一起使用，也可以和其他视图库（如 <a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">Vue</a>）使用。它很小（2K大小 包含依赖 ），并且有一个庞大的插件生态系统。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用 npm<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install redux -S</span><br></pre></td></tr></table></figure></p><p>使用 yarn</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add redux -P</span><br></pre></td></tr></table></figure><h3 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 redux</span></span><br><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ADD_NUM = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> SUB_NUM = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 redecer</span></span><br><span class="line"><span class="keyword">const</span> counter = <span class="function">(<span class="params">state = <span class="number">6</span>,action</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(action.type)&#123;</span><br><span class="line">        <span class="keyword">case</span> ADD_NUM:</span><br><span class="line">            <span class="keyword">return</span> ++state</span><br><span class="line">        <span class="keyword">case</span> SUB_NUM:</span><br><span class="line">            <span class="keyword">return</span> --state</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建 store</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(counter)</span><br><span class="line"><span class="comment">// 获取state</span></span><br><span class="line"><span class="keyword">const</span> num = store.getState()</span><br><span class="line"><span class="comment">// 发布信息更改state</span></span><br><span class="line">store.dispatch(&#123;<span class="attr">type</span>:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅 获取state</span></span><br><span class="line">store.subscrible(lister)  <span class="comment">// 没执行一次dispatch （改变state) 就执行一次 lister 方法</span></span><br><span class="line"><span class="comment">// 设置每次state变化 后的行为</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lister</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(store.getState())</span><br><span class="line">&#125;</span><br><span class="line">store.dispatch(&#123;<span class="attr">type</span>:<span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><blockquote><p>更新state中的数据，须通过action（就是一个普通对象） 来更改,这样可清晰的知道应用中发生了什么，数据为什么变动，怎样变动。而核心想法是如何根据这些 action 对象来更新 state。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">type</span>:<span class="number">1</span>&#125;</span><br><span class="line">&#123;<span class="attr">type</span>:<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>将state和action结合成函数，这就是reducer。它只接受 state和action 两个参数，并返回新的state函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">console</span>.log(store.getState())<span class="comment">// 6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然一个应用不单单只有一个reducer,我们可以通过redux来将它们合并。</p><h2 id="Redux-三大原则"><a href="#Redux-三大原则" class="headerlink" title="Redux 三大原则"></a>Redux 三大原则</h2><h3 id="单一数据源-（Single-source-of-truth）"><a href="#单一数据源-（Single-source-of-truth）" class="headerlink" title="单一数据源 （Single source of truth）"></a>单一数据源 （Single source of truth）</h3><blockquote><p>整个应用程序的 state 存储在一个单一 store 的对象树（object tree）中</p></blockquote><p>这样更容易创建创建通用应用，来自服务端的 state 可以在无需编写更多代码的情况下被序列化并注入到客户端中。这样单一的 state 树更容易调试和检查。它还能在开发过程中保持应用程序的状态，从而加快开发周期。一些在传统上难以实现的功能（撤销/重做），将其state 存储在树中，从而变得更加简单。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(&#123;</span><br><span class="line">  type: <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.dispatch(&#123;</span><br><span class="line">  type: <span class="number">2</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="State-是只读的-（State-is-read-only）"><a href="#State-是只读的-（State-is-read-only）" class="headerlink" title="State 是只读的 （State is read-only）"></a>State 是只读的 （State is read-only）</h3><blockquote><p>改变state的唯一方法是触发 action, action是描述发生什么事件的对象</p></blockquote><p>这样确保视图和网络请求不会直接修改state，反而，它们明确表达想要修改的意图。因为所有的变化都被集中处理，且按照严格的顺序一个接一个执行。所以没有细微的竞争条件需要注意。 Action是一个普通对象，所以可以对它们进行打印、序列化、存储，然后后期调试和测试。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(&#123;</span><br><span class="line">  type: <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.dispatch(&#123;</span><br><span class="line">  type: <span class="number">2</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="使用纯函数进行更改"><a href="#使用纯函数进行更改" class="headerlink" title="使用纯函数进行更改"></a>使用纯函数进行更改</h3><blockquote><p>要如何通过 action改变指定的state tree ,需要编写 Reducers 函数</p></blockquote><p>Reducer 只是一些纯函数，他接收 state 和 action 两个参数，并且返回新的state ,<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers, createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="comment">// 创建 redecer</span></span><br><span class="line"><span class="keyword">const</span> counter = <span class="function">(<span class="params">state = <span class="number">6</span>,action</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(action.type)&#123;</span><br><span class="line">        <span class="keyword">case</span> ADD_NUM:</span><br><span class="line">            <span class="keyword">return</span> ++state</span><br><span class="line">        <span class="keyword">case</span> SUB_NUM:</span><br><span class="line">            <span class="keyword">return</span> --state</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> counter1 = <span class="function">(<span class="params">state = <span class="number">6</span>,action</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(action.type)&#123;</span><br><span class="line">        <span class="keyword">case</span> ADD_NUM:</span><br><span class="line">            <span class="keyword">return</span> ++state</span><br><span class="line">        <span class="keyword">case</span> SUB_NUM:</span><br><span class="line">            <span class="keyword">return</span> --state</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> reducers = combineReducers(&#123; counter, counter1 &#125;) <span class="comment">// 通过 combineReducers 合并reducer</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducers)</span><br></pre></td></tr></table></figure></p><h2 id="基础教程"><a href="#基础教程" class="headerlink" title="基础教程"></a>基础教程</h2><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><blockquote><p>Actions 是将数据从应用程序发送到 store 的有效负载。它们是store 的唯一数据来源，通过 <code>store.dispatch()</code> 传递给 store<br>example:</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ADD_TODO = <span class="string">'ADD_TODO'</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  type: ADD_TODO,</span><br><span class="line">  text: <span class="string">'Build my first Redux app'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Actions 本质上是普通对象。并且该对象必须有一个<code>type</code> 属性来表示将要执行的动作，通常 <code>type</code> 被定义成字符串常量。当规模变大时，可以存放到单独的文件种管理。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ADD_TODO, REMOVE_TODO &#125; <span class="keyword">from</span> <span class="string">'../actionTypes'</span></span><br></pre></td></tr></table></figure></p><blockquote><p>注意：使用单独的模块或文件定义 常量<code>type</code>不是必须的，对于小应用来说，使用字符串<code>type</code>方便。而在大型项目种定义常量利大于弊。</p></blockquote><p>出了<code>type</code>属性外其他属性可自行定义，对于规范参考<a href="https://github.com/redux-utilities/flux-standard-action" target="_blank" rel="noopener">Flux Standard Action</a></p><h4 id="创建-Action-的生产函数"><a href="#创建-Action-的生产函数" class="headerlink" title="创建 Action 的生产函数"></a>创建 Action 的生产函数</h4><blockquote><p>即生成action 的方法，函数返回一个 action 对象这样更容易被移植和测试<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type:ADD_TODO,</span><br><span class="line">        text</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>在<a href="http://facebook.github.io/flux/" target="_blank" rel="noopener">传统的Flux</a>实现中调用 action 实现方法时，一般会触发一个<code>dispatch</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">const</span> action= &#123;</span><br><span class="line">        type:ADD_TODO,</span><br><span class="line">        text</span><br><span class="line">    &#125;</span><br><span class="line">    dispatch(action)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Redux 中只需把action 函数传递给<code>dispatch()</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type:ADD_TODO,</span><br><span class="line">        text</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">store.dispatch(addTodo(text))</span><br></pre></td></tr></table></figure></p><h4 id="异步-Action"><a href="#异步-Action" class="headerlink" title="异步 Action"></a>异步 Action</h4><blockquote><p>当调用异步 API时，发送请求和响应（可能超时），都可能会更改 state；因此需要 同步地 <code>dispatch</code> 由<code>reduce</code> 处理的操作<br>通常需要对应三种 action:</p><ul><li>通知 reducer 请求开始的action：reducer 可能会切换state中的 <code>flag</code>,来更改UI状态。</li><li>通知 reducer 请求成功的action：reducer 可能会将接收到的数据合并到 state 中，并更改 <code>flag</code>,控制 UI。</li><li>通知 reducer 请求失败的action：reducer 可能会重置 <code>flag</code>,并将一些失败在UI中信息显示出来</li></ul></blockquote><p>至于<code>flag</code>如何定义完全取决于开发者，使用多个type会降低出错几率。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">type</span>: <span class="string">'FETCH_POSTS_REQUEST'</span> &#125;</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">'FETCH_POSTS_FAILURE'</span>, <span class="attr">error</span>: <span class="string">'Oops'</span> &#125;</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">'FETCH_POSTS_SUCCESS'</span>, <span class="attr">response</span>: &#123; ... &#125; &#125;</span><br></pre></td></tr></table></figure></p><p><strong>注意：在实际应用中，网络请求失败时也需要 dispatch action。</strong></p><p>待续。。。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ReactDOM API</title>
      <link href="/2019/08/02/reactDomAPI/"/>
      <url>/2019/08/02/reactDomAPI/</url>
      
        <content type="html"><![CDATA[<h2 id="react-dom"><a href="#react-dom" class="headerlink" title="react-dom"></a>react-dom</h2><ul><li><code>react-dom</code> 的 <code>package</code> 提供了可在应用顶层使用的DOM方法，所有的顶层 API 都可调用</li></ul><p><code>React</code> 支持所有的现代浏览器，IE9及以上版本，但是需要引用相关 <a href="https://zh-hans.reactjs.org/docs/javascript-environment-requirements.html" target="_blank" rel="noopener">polyfills</a>,那些在不兼容ES5语法的浏览器中奋斗的同志需要孤军奋战了。</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="render"><a href="#render" class="headerlink" title="render()"></a>render()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line">ReactDOM.render(element,container[, callback])</span><br></pre></td></tr></table></figure><p>在提供的<code>container</code>里渲染一个 <code>React 元素</code>，并返回该组件的<a href="https://zh-hans.reactjs.org/docs/refs-and-the-dom.html" target="_blank" rel="noopener">引用</a>, 对于 <a href="https://zh-hans.reactjs.org/docs/components-and-props.html#functional-and-class-components" target="_blank" rel="noopener">无状态组件</a>返回 null。<br>如果 <code>React 元素</code> 已经在 <code>container</code>中渲染过，那么将会更新里面的元素，并仅会在必要的时候改变DOM 映射新的 React 元素。<br>callback将在组件被渲染或更新后执行</p><blockquote><p>当首次调用时，container节点中所有DOM元素都会被替换，后续的调用则使用 React 的 DOM diff 算法 进行高效更新。<br><code>rend()</code>不会修改container节点，之后修改子节点，可以在不覆盖现有子节点的情况下，将组件插入已有的DOM节点中。对服务端渲染容器进行 <code>hydrate</code>操作的方式已被废弃，且会在 1<br><code>rend()</code>目前会返回对根组件 <code>ReactComponent</code> 实例的引用。但应该避免使用它，因为历史遗留下来的内容，在未来版本中，组件渲染某些情况下可能会是异步的。对服务端渲染容器进行 <code>hydrate</code>操作的方式已被废弃，且会在 1<br>如果需要根组件 <code>ReactComponent</code> 实例的引用，推荐使用<a href="https://zh-hans.reactjs.org/docs/refs-and-the-dom.html" target="_blank" rel="noopener">callback ref</a>。<br>使用<code>rend()</code>对服务端渲染容器进行 <code>hydrate</code>操作的方式已被废弃，且会在 17版中被 <a href="https://zh-hans.reactjs.org/docs/react-dom.html#hydrate" target="_blank" rel="noopener">hydrate()</a></p></blockquote><h3 id="hydrate"><a href="#hydrate" class="headerlink" title="hydrate()"></a>hydrate()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.hydrate(element,container[, callback])</span><br></pre></td></tr></table></figure><p>此方法和 <code>render()</code>相同，区别在于 <a href="https://zh-hans.reactjs.org/docs/react-dom-server.html" target="_blank" rel="noopener">ReactDOMServer</a> 渲染的容器中对HTML的内容进行 <code>hydrate</code> 操作。React 会尝试在已有的标记上绑定事件监听器。</p><h3 id="unmountComponentAtNode"><a href="#unmountComponentAtNode" class="headerlink" title="unmountComponentAtNode()"></a>unmountComponentAtNode()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.unmountComponentAtNode(container)</span><br></pre></td></tr></table></figure><p>此方法将卸载 DOM 中的组件，会将事件处理器和 state 一并清除。如果指定的 container 中没有对应已挂在的组件，那么此方法什么也不会做，如果组件被移除将会返回 true，如果未移除将返回false</p><h3 id="findDOMNode"><a href="#findDOMNode" class="headerlink" title="findDOMNode()"></a>findDOMNode()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.findDOMNode(component)</span><br></pre></td></tr></table></figure><p>如果组件已被挂载到DOM上，此方法会返回浏览器中x相应的原生DOM，不能用于函数组件，对于在未挂载的组件中调用将发生异常。对于读取DOM中的值很有用，一般<strong>推荐使用 <code>ref</code>来获取DOM元素</strong></p><p><strong>此方法是访问底层DOM节点的应急方案，严格模式中被弃用</strong></p><h3 id="createPortal"><a href="#createPortal" class="headerlink" title="createPortal()"></a>createPortal()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.createPortal(child,container)</span><br></pre></td></tr></table></figure><p>创建<a href="https://zh-hans.reactjs.org/docs/portals.html" target="_blank" rel="noopener">portal</a>，它提供一种将子节点渲染到DOM节点中的方式，该节点存在于DOM组件的乘此结构之外。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReactDOM API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React API</title>
      <link href="/2019/07/31/reactAPI/"/>
      <url>/2019/07/31/reactAPI/</url>
      
        <content type="html"><![CDATA[<h2 id="createElement"><a href="#createElement" class="headerlink" title="createElement()"></a>createElement()</h2><blockquote><p>创基并返回指定类型的 <a href="https://zh-hans.reactjs.org/docs/rendering-elements.html" target="_blank" rel="noopener">React元素</a>。其中类型参数既可以是DOM标签字符串，也可以是<a href="https://zh-hans.reactjs.org/docs/components-and-props.html" target="_blank" rel="noopener">React组件类型</a>,或是<a href="https://zh-hans.reactjs.org/docs/react-api.html#reactfragment" target="_blank" rel="noopener">React fragment</a>类型</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">React.createElement(type,[props],[...children])</span><br></pre></td></tr></table></figure><p> JSX 编写的代码将会被转换成使用 React.createElement() 的形式。</p><h2 id="cloneElement"><a href="#cloneElement" class="headerlink" title="cloneElement()"></a>cloneElement()</h2><blockquote><p>以 element 元素为样板克隆并返回新的React元素，返回元素的props将新的props与原始的prosp浅合并。新的子元素取代现有的子元素，原始元素的 key 和 ref 将被保留</p></blockquote><p>通过 ref 获取子节点时，将不会意外地从祖先节点上窃取它。相同的 ref 将添加到克隆后的新元素中。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">React.cloneElement(element,[props],[...children])</span><br></pre></td></tr></table></figure></p><h2 id="isValidElement"><a href="#isValidElement" class="headerlink" title="isValidElement()"></a>isValidElement()</h2><blockquote><p>验证对象是否为React元素，返回值为 true or false</p></blockquote><h2 id="React-children"><a href="#React-children" class="headerlink" title="React.children"></a>React.children</h2><blockquote><p>提供用于处理 <code>this.props.children</code> 不透明数据结构的方用方法。</p></blockquote><h3 id="React-Children-map"><a href="#React-Children-map" class="headerlink" title="React.Children.map"></a>React.Children.map</h3><ul><li>在每个直接子节点上调用一个函数，并将 <code>this</code>(执行期上下文) 设置为 <code>thisArg</code>。</li><li>如果<code>Children</code> 是一个数值，它将被遍历并为数组中的每个子节点调用该函数。</li><li>如果子节点为<code>null</code> 或 <code>undefined</code>,则返回对应的 null 或 undefined。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">React.Children.map(children,function[(thisArg)])</span><br></pre></td></tr></table></figure><p><strong>如果children 是一个Frgment对象，它将被视为单一子节点的情况处理，不被遍历</strong></p><h3 id="React-Children-forEach"><a href="#React-Children-forEach" class="headerlink" title="React.Children.forEach"></a>React.Children.forEach</h3><blockquote><p>和 <code>React.Children.map</code> 类似，但是不会返回数组<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">React.Children.forEach(children,function[(thisArg)] )</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="React-Children-count"><a href="#React-Children-count" class="headerlink" title="React.Children.count"></a>React.Children.count</h3><blockquote><p>返回 children 中组件总数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">React.Children.count(children)</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="React-Children-only"><a href="#React-Children-only" class="headerlink" title="React.Children.only"></a>React.Children.only</h3><blockquote><p>验证children是否只有一个React元素，有则返回它，无则抛出错误</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">React.Children.only(children)</span><br></pre></td></tr></table></figure><p>**此方法不接受<code>React.Children.map</code>的返回值，因为它是一个数组</p><h3 id="React-Children-toArray"><a href="#React-Children-toArray" class="headerlink" title="React.Children.toArray"></a>React.Children.toArray</h3><blockquote><p>将children 这个复杂的数据结构以数组的形式扁平展开并返回，且为每个子节点分配一个key.想要在渲染函数中操作子节点的集合时，非常实用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">React.Children.toArray(children)</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>注意：此方法在拉平展开节点列表时，更改key值以保留嵌套数组的语言。即 toArray 会为返回数组中的每个key添加前缀，使每个元素key的范围都限定在此函数入参数组的对象内</strong></p><h2 id="React-Fragment"><a href="#React-Fragment" class="headerlink" title="React.Fragment"></a>React.Fragment</h2><blockquote><p><code>React.Fragment</code> 能在不额外创建DOM元素情况下，让 render方法返回多个元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;React.Fragment&gt;</span><br><span class="line">          &lt;ChildA /&gt;</span><br><span class="line">          &lt;ChildB /&gt;</span><br><span class="line">          &lt;ChildC /&gt;</span><br><span class="line">        &lt;<span class="regexp">/React.Fragment&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 简写</span></span><br><span class="line"><span class="regexp">render()&#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">        &lt;&gt;</span></span><br><span class="line"><span class="regexp">          &lt;ChildA /</span>&gt;</span><br><span class="line">          &lt;ChildB /&gt;</span><br><span class="line">          &lt;ChildC /&gt;</span><br><span class="line">        &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><a href="https://zh-hans.reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html" target="_blank" rel="noopener">更多信息</a></p><h2 id="React-createRef"><a href="#React-createRef" class="headerlink" title="React.createRef"></a>React.createRef</h2><blockquote><p>创建一个能通过 ref 属性附加到 React元素的 <a href="https://zh-hans.reactjs.org/docs/refs-and-the-dom.html" target="_blank" rel="noopener">ref</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Componet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">this</span>.inputRef = React.createRef();</span><br><span class="line">    &#125;</span><br><span class="line">    reder()&#123;</span><br><span class="line">        <span class="keyword">return</span> &lt;input type="text" ref= &#123;this.inputRef&#125; /&gt;；</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        this.inputRef.current.focus()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="React-forwardRef"><a href="#React-forwardRef" class="headerlink" title="React.forwardRef"></a>React.forwardRef</h2><blockquote><p><code>React.forwardRef</code> 会创建一个React组件，能将其接受的<code>ref</code> 属性转发到其组件树下的另一个组件中。</p><ul><li><a href="https://zh-hans.reactjs.org/docs/forwarding-refs.html#forwarding-refs-to-dom-components" target="_blank" rel="noopener">转发refs到DOM组件</a></li><li><a href="https://zh-hans.reactjs.org/docs/forwarding-refs.html#forwarding-refs-in-higher-order-components" target="_blank" rel="noopener">在高阶组件中转发 refs</a></li></ul></blockquote><p><strong><code>React.forwardRef</code>接受渲染函数作为参数。使用props和ref z作为参数调用此函数，返回 React节点</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Example = React.forwardRef(<span class="function">(<span class="params">props,ref</span>)=&gt;</span> ( &lt;button ref=&#123;ref&#125; className="FancyButton"&gt;</span><br><span class="line">    &#123;props.children&#125;</span><br><span class="line">  &lt;/button&gt;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// You can now get a ref directly to the DOM button:</span></span><br><span class="line"><span class="keyword">const</span> ref = React.createRef();</span><br><span class="line">&lt;FancyButton ref=&#123;ref&#125;&gt;Click me!&lt;/FancyButton&gt;;</span><br></pre></td></tr></table></figure><h2 id="React-lazy"><a href="#React-lazy" class="headerlink" title="React.lazy"></a>React.lazy</h2><blockquote><p>React.lazy()允许你定义一个动态加载组件。有助于减少 bundle的体积，并提高首屏加载效率</p></blockquote><p><strong>此特性需要支持 <code>promise</code></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> component = React.lazy(<span class="function"><span class="params">()</span>=&gt;</span> <span class="keyword">import</span>(<span class="string">'./component'</span>)) <span class="comment">// 动态加载</span></span><br></pre></td></tr></table></figure></p><p><a href="https://zh-hans.reactjs.org/docs/code-splitting.html#reactlazy" target="_blank" rel="noopener">参考文章</a></p><h2 id="React-Suspense"><a href="#React-Suspense" class="headerlink" title="React.Suspense"></a>React.Suspense</h2><blockquote><p>React.Suspense 可以指定加载指示器（loading indicator），以防其组件树中的某些子组件尚未具备渲染条件。目前，懒加载组件是 &lt;React.Suspense&gt; 支持的唯一用例：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该组件是动态加载的</span></span><br><span class="line"><span class="keyword">const</span> OtherComponent = React.lazy(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./OtherComponent'</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// 显示 &lt;Spinner&gt; 组件直至 OtherComponent 加载完成</span></span><br><span class="line">    &lt;React.Suspense fallback=&#123;&lt;Spinner /&gt;&#125;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;OtherComponent /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>React.Suspense&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，<code>lazy</code> 组件可以位于 <code>Suspense</code> 组件树的深处——它不必包装树中的每一个延迟加载组件。最佳实践是将 <code>&lt;Suspense&gt;</code> 置于你想展示加载指示器（loading indicator）的位置，而 <code>lazy()</code> 则可被放置于任何你想要做代码分割的地方。</p><p>虽然目前尚未支持其它特性，但未来我们计划让 Suspense 支持包括数据获取在内的更多场景。可以在<a href="https://zh-hans.reactjs.org/blog/2018/11/27/react-16-roadmap.html" target="_blank" rel="noopener">roadmap</a> 中了解相关信息。</p><p><strong><code>React.lazy()</code> 和 <code>&lt;React.Suspense&gt;</code> 尚未在 <code>ReactDOMServer</code> 中支持。这是已知问题，将会在未来解决。</strong></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 生命周期函数</title>
      <link href="/2019/07/29/reactLifeCycle/"/>
      <url>/2019/07/29/reactLifeCycle/</url>
      
        <content type="html"><![CDATA[<h2 id="组件生命周期函数"><a href="#组件生命周期函数" class="headerlink" title="组件生命周期函数"></a>组件生命周期函数</h2><blockquote><p>React 主动调用的方法，也可重写这些方法</p></blockquote><p><a href="http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/" target="_blank" rel="noopener">生命周期图谱</a></p><h3 id="当组件实例被创建并插入-DOM-中时，其生命周期调用顺序如下："><a href="#当组件实例被创建并插入-DOM-中时，其生命周期调用顺序如下：" class="headerlink" title="当组件实例被创建并插入 DOM 中时，其生命周期调用顺序如下："></a>当组件实例被创建并插入 <code>DOM</code> 中时，其生命周期调用顺序如下：</h3><h4 id="constructor-props"><a href="#constructor-props" class="headerlink" title="constructor(props)"></a>constructor(props)</h4><blockquote><p>如果不需要初始化 state 或 不进行方法绑定，则不需要使用该方法</p></blockquote><p>在组件挂载之前会先调用该方法，在实现构造函数时必须先调用<code>super(props)</code>方法，否则会出现BUG<br><strong>通常，构造函数仅用于两种情况：1. 初始化 <code>state</code> 2. 为事件处理函数绑定实例</strong><br><strong>在该方法中不要使用 <code>setState()</code> 方法,在其他方法中使用<code>setState()</code>改变 state</strong><br><a href="https://zh-hans.reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html" target="_blank" rel="noopener">为什么 props 复制给 state 会产生 bug</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">  <span class="keyword">super</span>(props);</span><br><span class="line">  <span class="comment">// 不要在这里调用 this.setState()</span></span><br><span class="line">  <span class="keyword">this</span>.state = &#123;</span><br><span class="line">    counter: <span class="number">0</span>,</span><br><span class="line">    name:props.name <span class="comment">// 严禁这样赋值，props.name值更新时 state.name并不会更新</span></span><br><span class="line">   &#125;;</span><br><span class="line">  <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="static-getDerivedStateFromProps-（此方法不常用）"><a href="#static-getDerivedStateFromProps-（此方法不常用）" class="headerlink" title="static getDerivedStateFromProps() （此方法不常用）"></a>static getDerivedStateFromProps() （此方法不常用）</h4><blockquote><p>此方法会在 <code>render</code> 方法之前调用，并且初始化和数据更新时都会调用，它返回一个对象更新 state，如果返回null 则不更新任何内容。</p></blockquote><p>此方法适用于 state 值在任何时候都取决于props 的情况。</p><h4 id="render"><a href="#render" class="headerlink" title="render()"></a>render()</h4><blockquote><p>render 是 class 组件必须实现的方法</p></blockquote><p>当该方法被调用时，它会监测 props 和 state 的变化，并且返回以下类型之一：</p><ul><li><code>React 元素</code>：通过JSX创建，渲染成对应的DOM节点或自定义组件</li><li><strong>数组或fragments：</strong> 使render方法可以返回多个元素 <a href="https://zh-hans.reactjs.org/docs/fragments.html" target="_blank" rel="noopener">frgments</a></li><li><code>Portals</code>：可以渲染子节点到不同的DOM子树汇中<a href="https://zh-hans.reactjs.org/docs/portals.html" target="_blank" rel="noopener">portals</a></li><li><strong>字符串或数值类型：</strong> 在DOM中会被渲染为文本节点、</li><li><code>Boolean 或 null</code>：什么都不渲染</li></ul><p><strong>render方法最好为纯函数，即在不修改组件 <code>state</code>情况下，每次调用时都返回相同的结果，并且不会直接与浏览器交互</strong></p><blockquote><p>如果要和浏览器交互，可以在其他生命周期函数中执行，<strong>注意：<code>shoouldComponentUpdate</code>方法中返回false,将不会调用render方法</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> <span class="title">extemds</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">shouldComponentUpdate(nextProps, nextState)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">render()&#123; <span class="comment">// 不会执行</span></span><br><span class="line">  &lt;div&gt;owen&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="componentDIdMount"><a href="#componentDIdMount" class="headerlink" title="componentDIdMount()"></a>componentDIdMount()</h4><blockquote><p>此方法会在组件挂载后（插入DOM树中）调用，初始化的数据的好地方</p></blockquote><h3 id="组件的-props-或-state-发生变化会触发更新。组件更新的生命周期调用顺序如下："><a href="#组件的-props-或-state-发生变化会触发更新。组件更新的生命周期调用顺序如下：" class="headerlink" title="组件的 props 或 state 发生变化会触发更新。组件更新的生命周期调用顺序如下："></a>组件的 <code>props</code> 或 <code>state</code> 发生变化会触发更新。组件更新的生命周期调用顺序如下：</h3><h4 id="static-getDerivedStateFromProps-（此方法不常用）-已解释"><a href="#static-getDerivedStateFromProps-（此方法不常用）-已解释" class="headerlink" title="static getDerivedStateFromProps() （此方法不常用）(已解释)"></a>static getDerivedStateFromProps() （此方法不常用）(已解释)</h4><h4 id="shouldComponentUpdate-nextProps-nextState-（此方法不常用）"><a href="#shouldComponentUpdate-nextProps-nextState-（此方法不常用）" class="headerlink" title="shouldComponentUpdate(nextProps, nextState) （此方法不常用）"></a>shouldComponentUpdate(nextProps, nextState) （此方法不常用）</h4><blockquote><p>当state 或 props 变化时该方法会在渲染执行前调用默认返回值为true,首次加载不会被调用</p></blockquote><p><strong>根据该方法的返回值判断组件输出是否受当前 state 或 props 更改的影响。默认为 state 每次更新重新渲染</strong></p><p>此方法进仅做为性能优化的方式存在，不要企图依靠此方法来“阻止”渲染，因为这可能会产生 bug。你应该考虑使用内置的 PureComponent 组件，而不是手动编写 shouldComponentUpdate()。PureComponent 会对 props 和 state 进行浅层比较，并减少了跳过必要更新的可能性。</p><h4 id="render-已解释"><a href="#render-已解释" class="headerlink" title="render()(已解释)"></a>render()(已解释)</h4><h4 id="getSnapshotBeforeUpdate-（此方法不常用）"><a href="#getSnapshotBeforeUpdate-（此方法不常用）" class="headerlink" title="getSnapshotBeforeUpdate() （此方法不常用）"></a>getSnapshotBeforeUpdate() （此方法不常用）</h4><blockquote><p>此方法在最近一次渲染输出（提交到DOM节点）之前调用。使组件能在发送更改前从DOM中捕获一些信息（如 位置）。此生命周期的返回值将作为参数传递给 <code>componentDidUpdate()</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrollingList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.listRef = React.createRef();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getSnapshotBeforeUpdate(prevProps, prevState) &#123;</span><br><span class="line">    <span class="comment">// 我们是否在 list 中添加新的 items ？</span></span><br><span class="line">    <span class="comment">// 捕获滚动​​位置以便我们稍后调整滚动位置。</span></span><br><span class="line">    <span class="keyword">if</span> (prevProps.list.length &lt; <span class="keyword">this</span>.props.list.length) &#123;</span><br><span class="line">      <span class="keyword">const</span> list = <span class="keyword">this</span>.listRef.current;</span><br><span class="line">      <span class="keyword">return</span> list.scrollHeight - list.scrollTop;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate(prevProps, prevState, snapshot) &#123;</span><br><span class="line">    <span class="comment">// 如果我们 snapshot 有值，说明我们刚刚添加了新的 items，</span></span><br><span class="line">    <span class="comment">// 调整滚动位置使得这些新 items 不会将旧的 items 推出视图。</span></span><br><span class="line">    <span class="comment">//（这里的 snapshot 是 getSnapshotBeforeUpdate 的返回值）</span></span><br><span class="line">    <span class="keyword">if</span> (snapshot !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> list = <span class="keyword">this</span>.listRef.current;</span><br><span class="line">      list.scrollTop = list.scrollHeight - snapshot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div ref=&#123;<span class="keyword">this</span>.listRef&#125;&gt;&#123;<span class="comment">/* ...contents... */</span>&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><p>上述示例中，重点是从 getSnapshotBeforeUpdate 读取 scrollHeight 属性，因为 “render” 阶段生命周期（如 render）和 “commit” 阶段生命周期（如 getSnapshotBeforeUpdate 和 componentDidUpdate）之间可能存在延迟。</p><h4 id="componentDidUpdate-prevProps-prevState-snapshot"><a href="#componentDidUpdate-prevProps-prevState-snapshot" class="headerlink" title="componentDidUpdate(prevProps, prevState, snapshot)"></a>componentDidUpdate(prevProps, prevState, snapshot)</h4><blockquote><p>此方法会在数据更新后立即调用，首次加载不会被调用,在此方法中使用 <strong><code>setState</code>必须将它放到条件语句中</strong>，否则会导致死循环。还会导致额外的重新渲染，影响性能</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">componentDidUpdate(prevProps) &#123;</span><br><span class="line">  <span class="comment">// 典型用法（不要忘记比较 props）：</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.props.userID !== prevProps.userID) &#123;</span><br><span class="line">    <span class="keyword">this</span>.fetchData(<span class="keyword">this</span>.props.userID);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：如果 shouldComponentUpdate() 返回值为 false，则不会调用 componentDidUpdate()。</strong></p><h3 id="当组件从-DOM-中移除时会调用如下方法："><a href="#当组件从-DOM-中移除时会调用如下方法：" class="headerlink" title="当组件从 DOM 中移除时会调用如下方法："></a>当组件从 <code>DOM</code> 中移除时会调用如下方法：</h3><h4 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount()"></a>componentWillUnmount()</h4><blockquote><p>此方法会在组件卸载销毁前调用，可以执行必要的清理操作，如 定时器，取消网络请求，或清除componentDidMount() 中创建的订阅等。</p></blockquote><h3 id="当渲染过程，生命周期，或子组件的构造函数中抛出错误时，会调用如下方法："><a href="#当渲染过程，生命周期，或子组件的构造函数中抛出错误时，会调用如下方法：" class="headerlink" title="当渲染过程，生命周期，或子组件的构造函数中抛出错误时，会调用如下方法："></a>当渲染过程，生命周期，或子组件的构造函数中抛出错误时，会调用如下方法：</h3><p><strong>Error boundaries</strong>：捕获渲染期间及整个树的函数发送的错误，渲染降级 UI，但自身的错误无法捕获 <a href="https://zh-hans.reactjs.org/blog/2017/07/26/error-handling-in-react-16.html" target="_blank" rel="noopener">React 16中的错误处理</a></p><h4 id="static-getDerivedStateFromError-error-（此方法不常用）"><a href="#static-getDerivedStateFromError-error-（此方法不常用）" class="headerlink" title="static getDerivedStateFromError(error) （此方法不常用）"></a>static getDerivedStateFromError(error) （此方法不常用）</h4><blockquote><p>次生命周期会在后代组件抛出错误后调用，将错误作为参数，返回一个值更新state，在渲染期间不允许出现副作用，建议使用 componentDidCatch()</p></blockquote><h4 id="componentDidCatch-error-info-（此方法不常用）"><a href="#componentDidCatch-error-info-（此方法不常用）" class="headerlink" title="componentDidCatch(error, info) （此方法不常用）"></a>componentDidCatch(error, info) （此方法不常用）</h4><blockquote><p>此方法在后代组件抛出错误后被调用</p></blockquote><p>如果发生错误，可以通过调用 <code>setState</code> 使用 <code>componentDidCatch()</code> 渲染降级 UI，但在未来的版本中将不推荐这样做。 可以使用静态 <code>getDerivedStateFromError()</code> 来处理降级渲染。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrorBoundary</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">hasError</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> getDerivedStateFromError(error) &#123;</span><br><span class="line">    <span class="comment">// 更新 state 使下一次渲染可以显降级 UI</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">hasError</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidCatch(error, info) &#123;</span><br><span class="line">    <span class="comment">// "组件堆栈" 例子:</span></span><br><span class="line">    <span class="comment">//   in ComponentThatThrows (created by App)</span></span><br><span class="line">    <span class="comment">//   in ErrorBoundary (created by App)</span></span><br><span class="line">    <span class="comment">//   in div (created by App)</span></span><br><span class="line">    <span class="comment">//   in App</span></span><br><span class="line">    logComponentStackToMyService(info.componentStack);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.hasError) &#123;</span><br><span class="line">      <span class="comment">// 你可以渲染任何自定义的降级  UI</span></span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Something went wrong.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.children;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      value:<span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> getDerivedStateFromProps(props, state) &#123;</span><br><span class="line">    <span class="comment">// 实例化组件之后以及在重新呈现组件之前调用新的静态生命周期。它可以返回要更新的对象state，或null指示新对象props不需要任何state更新。</span></span><br><span class="line">  &#125;</span><br><span class="line">   componentDidMount() &#123; <span class="comment">// 组件被渲染到 DOM 中后运行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'DidMount: 1'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  shouldComponentUpdate()&#123;</span><br><span class="line">    <span class="comment">// 更新前</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getSnapshotBeforeUpdate()&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">  &#125;</span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    <span class="comment">// 更新后</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> getDerivedStateFromError() &#123;</span><br><span class="line">      <span class="comment">// 出错时</span></span><br><span class="line">  &#125;</span><br><span class="line">  componentDidCatch()&#123;</span><br><span class="line">    <span class="comment">// capture error</span></span><br><span class="line">  &#125;</span><br><span class="line">  compoentwillUnmount()&#123; <span class="comment">// 组件被删除的时候</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'UnMount: end'</span>)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button className=<span class="string">"square"</span> onClick = &#123;()=&gt;&#123;<span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>:<span class="string">'X'</span>&#125;)&#125;</span><br><span class="line">      &#125;&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.state.value&#125;</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><a href="https://zh-hans.reactjs.org/docs/react-component.html" target="_blank" rel="noopener">参考资料</a></h2>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React life cycle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React.Component API</title>
      <link href="/2019/07/29/react.Component/"/>
      <url>/2019/07/29/react.Component/</url>
      
        <content type="html"><![CDATA[<h2 id="React-Component"><a href="#React-Component" class="headerlink" title="React.Component"></a>React.Component</h2><blockquote><p>使用ES6 classes 方式定义React组件的基类<br><strong>最好不要建立自己的组件基类，因为，在React组件中，代码重用的主要方式是组合而不是继承</strong></p></blockquote><h3 id="setState-updater-callback"><a href="#setState-updater-callback" class="headerlink" title="setState(updater[, callback])"></a>setState(updater[, callback])</h3><blockquote><p>用于更新用户界面以响应事件处理器和处理服务器数据的主要方法</p></blockquote><p>此方法不会总数立即更新组件，他会批量推迟更新，如果需要使用<code>setState</code> 后立即读取 <code>state</code>可能会是旧值。<br>使用 <code>componentDidMount</code> 方法或使用 <code>setState</code>的回调函数可解决旧值问题。<br>注意 <strong>shouldComponentUpdate 方法返回false，将不会重新渲染页面</strong></p><h4 id="参数一-updater函数-或者对象"><a href="#参数一-updater函数-或者对象" class="headerlink" title="参数一 updater函数 或者对象"></a>参数一 updater函数 或者对象</h4><blockquote><p>带有连个形参的函数 或者一个对象类型<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// updater function</span></span><br><span class="line"><span class="keyword">this</span>.setState(<span class="function">(<span class="params">state,props</span>)=&gt;</span>(&#123;<span class="attr">name</span>:state.name+props.name&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// object type</span></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;<span class="attr">name</span>:<span class="keyword">this</span>.state.name&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><p>updater 函数中 <code>state</code> 是对应组件 <code>state</code> 的引用，它不应直接被修改；须返回一个对象，会与state进行浅合并</p><p>object 类型中 <code>setState</code> 也是异步的，并在<strong>同一周期</strong>内对多个 <code>setState</code> 进行处理,如果后续状态取决于当前状态，建议使用 updater 函数的形式代替。<br><strong>example：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(</span><br><span class="line">  previousState,</span><br><span class="line">  &#123;<span class="attr">count</span>: state.count + <span class="number">1</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">count</span>: state.count + <span class="number">1</span>&#125;,</span><br><span class="line">  ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p><a href="https://stackoverflow.com/questions/48563650/does-react-keep-the-order-for-state-updates/48610973#48610973" target="_blank" rel="noopener">深入学习：何时以及为什么 setState() 会批量执行？</a><br><a href="https://github.com/facebook/react/issues/11527#issuecomment-360199710" target="_blank" rel="noopener">深入：为什么不直接更新 this.state？</a></p><p><code>setState</code>的第二个参数为可选的回调函数，它将在<code>setState</code> 完成合并并重新渲染组件后执行，通常建议使用<code>componentDidMount</code>方法代替。</p><h3 id="forceUpdate-callback"><a href="#forceUpdate-callback" class="headerlink" title="forceUpdate(callback)"></a>forceUpdate(callback)</h3><blockquote><p>默认情况下，组件数据发生变化就会重新渲染，如果 render 方法依赖其他数据，可以使用 <code>forceUpdate</code> 强制让组件刷新</p></blockquote><p><strong>此方法会跳过 <code>shouldComponentUpdate</code>方法。但是子组件会正常触发。通常应该避免使用forceUpdate方法，尽量在render方法中使用 state 和 props。</strong></p><h3 id="Class属性"><a href="#Class属性" class="headerlink" title="Class属性"></a>Class属性</h3><h4 id="defaultProps"><a href="#defaultProps" class="headerlink" title="defaultProps"></a>defaultProps</h4><p>此属性可以给对应的组件添加 props,通常用于 prop未赋值且不能为null。<br><strong>example：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"> render()&#123;</span><br><span class="line">   <span class="keyword">return</span> (</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &lt;h3&gt;&#123;<span class="keyword">this</span>.props.name&#125;&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">            &lt;main&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Text text ='null'/</span>&gt; <span class="comment">// props.text 将是 null</span></span><br><span class="line">            &lt;<span class="regexp">/main&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">Example.defaultProps = &#123;</span><br><span class="line">  name:<span class="string">'Owen'</span>,</span><br><span class="line">  text:<span class="string">'Owen is a programmer '</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h3><h4 id="props-类似-vue中的-props"><a href="#props-类似-vue中的-props" class="headerlink" title="props 类似 vue中的 props"></a>props 类似 vue中的 props</h4><p><code>this.props</code> 包括被该组件调用者定义的 props。其中<code>this.props.children</code> 是一个特殊的 prop，通常由 JSX 表达式中的子组件组成，而非组件本身定义。</p><h4 id="state-类似-vue-中的data"><a href="#state-类似-vue-中的data" class="headerlink" title="state 类似 vue 中的data"></a>state 类似 vue 中的data</h4><p>组件中 state 包含随时可能发生变化的数据。由用户自定义，是一个普通的对象，<strong>永远不要直接改变 this.state，因为后续调用的 setState() 可能会替换掉你的改变。请把 this.state 看作是不可变的。</strong></p><h2 id="React-PureComponent"><a href="#React-PureComponent" class="headerlink" title="React.PureComponent"></a>React.PureComponent</h2><blockquote><p>React.PureComponent 与 React.Component 相似二者区别于 <code>shouldComponentUpdate</code>的实现</p><ul><li>React.Component 并未实现 <code>shouldComponentUpdate</code>方法</li><li>React.PureComponent 中以层对比 prop 和state 的方式实现<code>shouldComponentUpdate</code>方法</li></ul></blockquote><p>在某些情况下使用<code>React.PureComponent</code>可提高性能<br><strong>注意：如果对象中包含赋值的数据结构，可能因无法监测深层次的差别，产生错误的对比结果。所以仅在props和state较为简单时使用<code>React.PureComponent</code>。此外，<code>shouldComponentUpdate</code>方法会跳过所以子组件树的prop 更新</strong></p><h2 id="React-memo"><a href="#React-memo" class="headerlink" title="React.memo"></a>React.memo</h2><blockquote><p><code>React.memo</code> 是高级函数组件，它与 React.pureComponent 相似，但不支持class组件。此方法仅做为<a href="https://zh-hans.reactjs.org/docs/optimizing-performance.html" target="_blank" rel="noopener">性能优化</a>的方式存在<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyMemo = <span class="function">(<span class="params">props</span>) =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;li&gt;/* ... */&lt;/li&gt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> MemoComponent = React.memo(MyMemo)</span><br></pre></td></tr></table></figure></p></blockquote><p>如果函数组件在给定相同的 props 情况下渲染结果相同，就可将其保证在 <code>React.memo</code>中调用，这样就可通过记忆组件渲染结果的方式来提高组件的性能，意味着React 将跳过渲染组件的操作并直接复用最近一次渲染的结果。</p><p><strong>默认情况下其只会对复杂对象做浅层对比，如果你想要控制对比过程，那么请将自定义的比较函数通过第二个参数传入来实现。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyComponent</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* 使用 props 渲染 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">areEqual</span>(<span class="params">prevProps, nextProps</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  如果把 nextProps 传入 render 方法的返回结果与</span></span><br><span class="line"><span class="comment">  将 prevProps 传入 render 方法的返回结果一致则返回 true，</span></span><br><span class="line"><span class="comment">  否则返回 false</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.memo(MyComponent, areEqual);</span><br></pre></td></tr></table></figure></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><a href="https://zh-hans.reactjs.org/docs/react-component.html#setstate" target="_blank" rel="noopener">参考资料</a></h2>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 基础学习</title>
      <link href="/2019/07/23/react/"/>
      <url>/2019/07/23/react/</url>
      
        <content type="html"><![CDATA[<h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><blockquote><p><code>React</code> 是一个声明式，高效且灵活的用于构建用户界面的 <code>JavaScript</code>库。可以将一些简短、独立的代码片段组合成复杂的UI界面，这些片段被称为“组件”。</p></blockquote><p><strong>React 大体包含下面这些概念：</strong></p><ul><li>组件</li><li>JSX</li><li>Virtual DOM</li><li>Data Flow</li></ul><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><blockquote><p> 可以将UI 拆分为独立且复用的代码片段，每部分都可独立维护。<br>组件，从概念上类似于 <code>JavaScript</code> 函数。它接受任意的参数（即 “props”），并返回用于描述页面展示内容的<code>React 元素</code>。<br><strong>自定义组件命名：必须以大写字母开头，React 会将以小写字母开头的组件视为原生DOM标签。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>; <span class="comment">// React 的核心库</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>; <span class="comment">// 提供与 DOM 相关的功能</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoppingList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"shopping-list"</span>&gt;</span><br><span class="line">        &lt;h1&gt;Shopping List <span class="keyword">for</span> &#123;<span class="keyword">this</span>.props.name&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">          &lt;li&gt;Instagram&lt;/</span>li&gt;</span><br><span class="line">          &lt;li&gt;WhatsApp&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">          &lt;li&gt;Oculus&lt;/</span>li&gt;</span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;ShoppingList name=<span class="string">"Mark"</span> /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p></blockquote><p>React 应用都是构建在组件之上。<code>ShoppingList</code>就是一个React 组件类型，<code>ReactDOM.render</code> 函数会将组件方到页面上的某个节点元素中。(<code>render</code> 返回了一个 <code>React 元素</code> ，这是一种对渲染内容的轻量级描述。)<br><strong>大多数 <code>React</code>应用只会调用一次 <code>ReactDOM.render()</code>。</strong></p><p><strong>其中<code>props</code>（是 properties 的简写） 是组件包含的两个核心概念之一，另一个是<code>state</code>。</strong></p><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p><code>props</code>接收一些其他组件的参数（比如上方的 name )，来配置组件，<strong>所有 <code>React</code> 组件都必须像纯函数一样保护它们的 <code>props</code> 不被更改</strong>。</p><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><p><code>state</code> 来实现所谓“记忆”的功能。可以通过 <code>React</code> 组件的构造函数中设置 <code>this.state</code>;<code>this.state</code> 应该被视为一个组件的私有属性。<br><strong>修改<code>this.state</code>值需要通过<code>this.setState</code>方法赋值,有些 <code>props</code> 值或 <code>state</code> 值可能是异步更新的，使用对象赋值的方式更改 <code>state</code> 可能无效，可使用回调传参方式更新</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(  <span class="function">(<span class="params">state,props</span>)=&gt;</span> (&#123;<span class="attr">count</span>:state.count + props.count&#125;) );</span><br></pre></td></tr></table></figure></p><h3 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h3><blockquote><p>通过 <code>class</code> 语法来定义组件，必须包含<code>render()</code> 方法,并且继承于 <code>React.Component</code>。<br><strong>类组件必须包含<code>render()</code>，并且return 只能返回一个父元素（类似vue中的template中必须要有一个父元素）。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @name constructor</span></span><br><span class="line"><span class="comment">   * @param &#123;*&#125; props</span></span><br><span class="line"><span class="comment">   * 每次定义子类的构造函数时，都必须调用 super 方法。</span></span><br><span class="line"><span class="comment">   * 因此，在所有含有构造函数的React组件中，构造函数必须以super(props)开头</span></span><br><span class="line"><span class="comment">   * state 保存着组件中的数据 类似 vue 中的 data 属性</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      value:<span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button className=<span class="string">"square"</span> onClick = &#123;()=&gt;&#123;<span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>:<span class="string">'X'</span>&#125;)&#125;</span><br><span class="line">      &#125;&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.state.value&#125;</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><p>render方法中的<code>onClick</code> 事件监听函数中调用<code>this.setState</code>方法，可以设置<code>this.state</code> 中的属性<br>推荐使用箭头函数，避免<a href="https://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/" target="_blank" rel="noopener">this 造成困扰</a>。</p><h3 id="简单组件-函数组件"><a href="#简单组件-函数组件" class="headerlink" title="简单组件(函数组件)"></a>简单组件(函数组件)</h3><p>简单组件是一个函数，不需要使用<code>class</code>关键字，当然就没有<code>constructor和state</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Square =  <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">return</span>  (<span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>= <span class="string">"square"</span></span></span></span><br><span class="line"><span class="xml">   onClick= &#123; props.onClick&#125; &gt;&#123; props.value  &#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h3><p><code>input</code>、<code>&lt;select&gt;</code>、<code>&lt;textarea&gt;</code> 等表单的状态发生改变，都得同时通过<code>onChange</code>事件改变组件中的<code>state</code>值，否则表单不会发生变化。通过这种方式控制取值的表单叫做<code>受控组件</code>。<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Input</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      value:<span class="string">'3s'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render ()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span> = <span class="string">&#123;this.state.value&#125;</span> /&gt;</span>   // 用户在表单中输入任何信息都是无效的</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 使用事件来改变</span></span><br><span class="line"><span class="xml"> render ()&#123;</span></span><br><span class="line"><span class="xml">    return (</span></span><br><span class="line">      &lt;input</span><br><span class="line">          type="text"</span><br><span class="line">          value = &#123;this.state.value&#125;</span><br><span class="line">          onChange = &#123;(&#123;target&#125;) =&gt;&#123;</span><br><span class="line">            this.setState(&#123;</span><br><span class="line">              value:target.value</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p><strong>React受控组件更新state的流程:</strong></p><ul><li>通过在初始化state中设置表单默认值；</li><li>每当表单值发生变化时，调用<code>onChange</code>事件</li><li>事件通过合成的事件对象来改变状态更新 <code>state</code></li><li>setState触发视图渲染更新，完成表单组件值的更新</li></ul><h3 id="渲染多个组件"><a href="#渲染多个组件" class="headerlink" title="渲染多个组件"></a>渲染多个组件</h3><p>将组件变成数组集合放入花括号中即可渲染多个组件,通常使用数组的<code>map()</code>方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Lis = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> lis = props.list.map(<span class="function">(<span class="params">val,key</span>)=&gt;</span> &lt;li key=&#123;key&#125;&gt;&#123;key+<span class="number">1</span>&#125;&lt;<span class="regexp">/li&gt;);</span></span><br><span class="line"><span class="regexp">    return &lt;ul&gt;&#123;lis&#125;&lt;/u</span>l&gt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> list = <span class="built_in">Array</span>(<span class="number">7</span>).fill(<span class="literal">null</span>);</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Lis list = &#123;list&#125; /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h3 id="状态提升"><a href="#状态提升" class="headerlink" title="状态提升"></a>状态提升</h3><p>当多个组件发生数据联动时，建议将共享状态提升到最近的共同父组件中去。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Owen</span></span><br><span class="line"><span class="comment"> * @Date: 2019-07-23 23:55:17</span></span><br><span class="line"><span class="comment"> * @Last Modified by: Owen</span></span><br><span class="line"><span class="comment"> * @Last Modified time: 2019-07-29 16:06:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React,&#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 温度转化器</span></span><br><span class="line"><span class="keyword">let</span> toConvert = <span class="function">(<span class="params">temperature,callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> num = <span class="built_in">parseInt</span>(temperature);</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">Number</span>.isNaN(num)) <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">   num = callback(num)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.round(num*<span class="number">1000</span>)/<span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BoilingVerdict = <span class="function">(<span class="params">props</span>) =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> text = props.temperature &gt; <span class="number">100</span>?<span class="string">''</span>:<span class="string">' not'</span>;</span><br><span class="line">  <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    The water would&#123;text&#125; boil.</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公共input组件只接收行为和状态</span></span><br><span class="line"><span class="keyword">const</span> TemperatureInput = <span class="function">(<span class="params">props</span>) =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;input</span><br><span class="line">    value =&#123;props.temperature&#125;</span><br><span class="line">    onChange = &#123;props.valueChange&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父组件设置行为和状态</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      temperature:<span class="string">''</span>,</span><br><span class="line">      scale:<span class="string">'C'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  toFahrenheit(&#123;target&#125;) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      temperature:target.value,</span><br><span class="line">      scale:<span class="string">'F'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  toCelsius(&#123;target&#125;) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      temperature:target.value,</span><br><span class="line">      scale:<span class="string">'C'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;temperature,scale&#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">let</span> celsius = scale === <span class="string">'F'</span>?toConvert(temperature,(val)=&gt;(val - <span class="number">32</span>)*<span class="number">5</span>/<span class="number">9</span>):temperature;</span><br><span class="line">    <span class="keyword">let</span> fahrenheit = scale === <span class="string">'C'</span>?toConvert(temperature,(val)=&gt;val*<span class="number">9</span>/<span class="number">5</span>+<span class="number">32</span>):temperature;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          Celsius：</span><br><span class="line">          &lt;TemperatureInput</span><br><span class="line">          scale =<span class="string">'C'</span></span><br><span class="line">          temperature = &#123;celsius&#125;</span><br><span class="line">          valueChange = &#123;<span class="keyword">this</span>.toCelsius.bind(<span class="keyword">this</span>)&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">          Fahrenheit：</span></span><br><span class="line"><span class="regexp">          &lt;TemperatureInput</span></span><br><span class="line"><span class="regexp">          scale ='F'</span></span><br><span class="line"><span class="regexp">          temperature = &#123;fahrenheit&#125;</span></span><br><span class="line"><span class="regexp">          valueChange = &#123;this.toFahrenheit.bind(this)&#125;</span></span><br><span class="line"><span class="regexp">        /</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;&lt;BoilingVerdict temperature = &#123;this.state.temperature&#125; /</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">render(&lt;Calculator /</span>&gt;,<span class="built_in">document</span>.querySelector(<span class="string">'#root'</span>))</span><br></pre></td></tr></table></figure></p><p>在就<code>React</code> 应用中，任何科比数据应当只有一个相对应的数据源，通常，多个组件需要相同数据，可以将数据提升到这些组件的共同父组件中。依靠自上而下的数据流，去控制组件，而不是尝试在不同组件同步 <code>state</code>。<strong>这样会减少将来排查和隔离BUG所需要的工作量</strong></p><h3 id="组合（类似vue中的-slot）"><a href="#组合（类似vue中的-slot）" class="headerlink" title="组合（类似vue中的 slot）"></a>组合（类似vue中的 slot）</h3><p>有些组件无法提前知晓它们子组件的具体内容，需要留坑，那么也可以通过 <code>props</code>来占位。</p><h4 id="默认坑位props-children"><a href="#默认坑位props-children" class="headerlink" title="默认坑位props.children"></a>默认坑位<code>props.children</code></h4><p>件起始标签和结束标签之间的内容都会被将<code>{props.children}</code>替换。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FancyBorder</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;<span class="string">'FancyBorder FancyBorder-'</span> + props.color&#125;&gt;</span><br><span class="line">      &#123;props.children&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">function WelcomeDialog() &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;FancyBorder color="blue"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;h1 className="Dialog-title"&gt;</span></span><br><span class="line"><span class="regexp">        Welcome</span></span><br><span class="line"><span class="regexp">      &lt;/</span>h1&gt;</span><br><span class="line">      &lt;p className=<span class="string">"Dialog-message"</span>&gt;</span><br><span class="line">        Thank you <span class="keyword">for</span> visiting our spacecraft!</span><br><span class="line">      &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>FancyBorder&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="自定义坑位"><a href="#自定义坑位" class="headerlink" title="自定义坑位"></a>自定义坑位</h4><p>因为 <code>React元素</code> 本质就是对象，所以可以将它当中参数像其他数据一样传递。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SplitPane</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"SplitPane"</span>&gt;</span><br><span class="line">      &lt;div className=<span class="string">"SplitPane-left"</span>&gt;</span><br><span class="line">        &#123;props.left&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div className="SplitPane-right"&gt;</span></span><br><span class="line"><span class="regexp">        &#123;props.right&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function App() &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;SplitPane</span></span><br><span class="line"><span class="regexp">      left=&#123;</span></span><br><span class="line"><span class="regexp">        &lt;Contacts /</span>&gt;</span><br><span class="line">      &#125;</span><br><span class="line">      right=&#123;</span><br><span class="line">        &lt;Chat /&gt;</span><br><span class="line">      &#125; /&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><blockquote><p>每个 JSX 元素都是调用 React.createElement() 的语法糖。一般来说，如果你使用了 JSX，就不再需要调用<code>createElement()</code>或<code>createFactory()</code>方法。<br>React 提出的一种叫 JSX 的语法，这应该是最开始接触 React 最不能接受的设定之一,因为前端被“表现和逻辑层分离”这种思想“洗脑”太久了。实际上组件的 HTML 是组成一个组件不可分割的一部分，能够将 HTML 封装起来才是组件的完全体.</p></blockquote><blockquote><p>JSX是一个JavaScript语法扩展。它类似于模板语言，但它具有JavaScript 的全部能力。它最终会被编译为<code>React.createElement()</code>函数调用，返回称为 <code>React元素</code>的普通JavaScript`对象。</p></blockquote><p>推荐使用箭头函数，避免<a href="https://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/" target="_blank" rel="noopener">this 造成困扰</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Square</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt; button className = <span class="string">"square"</span></span><br><span class="line">             onClick = &#123; props.onClick &#125; &gt;</span><br><span class="line">      &#123; props.value &#125;</span><br><span class="line">    &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class Board extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  constructor(props)&#123;</span></span><br><span class="line"><span class="regexp">    super(props)</span></span><br><span class="line"><span class="regexp">    this.state = &#123;</span></span><br><span class="line"><span class="regexp">      squares: Array(9).fill(null),</span></span><br><span class="line"><span class="regexp">      xIsNext:true, /</span><span class="regexp">/ 先落子，并确认该哪位玩家落子</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  /</span>**</span><br><span class="line">   * 只接受一个squares副本，而不直接修改本身数据</span><br><span class="line">   * <span class="number">1.</span> 这样可以简化复杂的功能，不可变性使得复杂的特性更容易实现。</span><br><span class="line">   * <span class="number">2.</span> 可以跟踪数据的改变，如果直接修改源数据就很难跟踪变化的数据。</span><br><span class="line">   * <span class="number">3.</span> 可以帮助我们在 React 中创建 purecomponents。可以轻松的确定不可变数据是否发生了改变，</span><br><span class="line">   *    从而确定何时对组件进行重新渲染。</span><br><span class="line">   * @param &#123;*&#125; i</span><br><span class="line">   * @memberof Board</span><br><span class="line">   *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">  handleClick(i) &#123;</span></span><br><span class="line"><span class="regexp">    const squares = this.state.squares.slice();</span></span><br><span class="line"><span class="regexp">    squares[i] = this.state.xIsNext? "X":"O";</span></span><br><span class="line"><span class="regexp">    this.setState(&#123; squares,xIsNext:!this.state.xIsNext &#125;)</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  renderSquare(i) &#123; /</span><span class="regexp">/ 返回一个 Square 组件</span></span><br><span class="line"><span class="regexp">    return ( &lt; Square</span></span><br><span class="line"><span class="regexp">              value = &#123; this.state.squares[i] &#125;/</span><span class="regexp">/ 给子组件传递 value数据</span></span><br><span class="line"><span class="regexp">              onClick = &#123;()=&gt; this.handleClick(i)&#125; /</span><span class="regexp">/ 给子组件传递 onClick事件</span></span><br><span class="line"><span class="regexp">        /</span>&gt;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;state&#125; = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> status = <span class="string">`Next player: <span class="subst">$&#123;state.xIsNext?<span class="string">'X'</span>:<span class="string">'O'</span>&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div className=<span class="string">"status"</span>&gt;&#123;status&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div className="board-row"&gt;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(0)&#125;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(1)&#125;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(2)&#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">        &lt;div className=<span class="string">"board-row"</span>&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.renderSquare(<span class="number">3</span>)&#125;</span><br><span class="line">          &#123;<span class="keyword">this</span>.renderSquare(<span class="number">4</span>)&#125;</span><br><span class="line">          &#123;<span class="keyword">this</span>.renderSquare(<span class="number">5</span>)&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div className="board-row"&gt;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(6)&#125;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(7)&#125;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(8)&#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>在 JSX 中你可以任意使用JavaScript表达式，只需要用一个<strong>大括号({})</strong>括起来；<br>事实上每个 React 元素都是一个<code>JavaScript</code> 对象，可以把它保存在变量中或者作为参数传递。</p><p>为避免遇到自动插入分号陷阱，<strong>最好将内容包裹在小括号中，如果只有一行代码则不需要括号</strong>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加括号</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"shopping-list"</span>&gt;</span><br><span class="line">        &lt;h1&gt;Shopping List <span class="keyword">for</span>&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">          &lt;li&gt;Instagram&lt;/</span>li&gt;</span><br><span class="line">          &lt;li&gt;WhatsApp&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">          &lt;li&gt;Oculus&lt;/</span>li&gt;</span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不用加括号</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Instagram<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JSX 语法更接近于 JavaScript，所以 ReactDom 使用cameCase(小驼峰命名)来定义属性名称,并且不要使用引号将大括号包裹，两者是不能并存的。对于字符串值使用引号，对于表达式使用大括号</strong></p><p><strong><code>React</code> 中无法通过 <code>return false</code> 的方式阻止默认行为，必须使用<code>e.preventDefault()</code>阻止默认事件。但是不用担心<code>event事件</code>的兼容问题</strong></p><p><strong>JSX 本身就能防止<a href="https://en.wikipedia.org/wiki/Cross-site_scripting" target="_blank" rel="noopener">XSS</a>攻击</strong><br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原生DOM</span></span><br><span class="line">&lt;a href=<span class="string">"#"</span> onclick=<span class="string">"console.log('The link was clicked.'); return false"</span>&gt;</span><br><span class="line">  Click me</span><br><span class="line">&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ JSX</span></span><br><span class="line"><span class="regexp">class App extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">        &lt;a href="#" onclick=&#123;(e)=&gt;this.handleClick(e)&#125;&gt; /</span><span class="regexp">/每次渲染时都会创建不同的回调函数。该回调函数作为 prop 传入子组件时，这些组件可能会进行额外的重新渲染。</span></span><br><span class="line"><span class="regexp">            Click me</span></span><br><span class="line"><span class="regexp">        &lt;/</span>a&gt;;</span><br><span class="line">        &lt;a href=<span class="string">"#"</span> onclick=&#123;(e)=&gt;<span class="keyword">this</span>.handleClick(id,e)&#125;&gt; <span class="comment">// 向事件处理程序传递参数</span></span><br><span class="line">            Click me</span><br><span class="line">        &lt;<span class="regexp">/a&gt;;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="事件处理程序回调函数中的-this"><a href="#事件处理程序回调函数中的-this" class="headerlink" title="事件处理程序回调函数中的 this"></a><strong>事件处理程序回调函数中的 this</strong></h3><ul><li>在 <code>JavaScript</code> 中，<code>class</code> 的方法默认不会绑定 <code>this</code>。如果你忘记绑定 <code>this.handleClick</code> 并把它传入了 <code>onClick</code>，当你调用这个函数的时候 <code>this</code>的值为 <code>undefined</code>。<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 此语法确保 `handleClick` 内的 `this` 已被绑定。</span></span><br><span class="line">    <span class="comment">// 注意: 这是 **实验性** 语法。 使用 Create React App 默认会启用此语法</span></span><br><span class="line">    handleClick = <span class="function">(<span class="params">e</span>)=&gt;</span> &#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        <span class="built_in">console</span>.log(e)</span><br><span class="line">    &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;a href=<span class="string">"#"</span> onclick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;</span><br><span class="line">            Click me</span><br><span class="line">        &lt;<span class="regexp">/a&gt;;</span></span><br><span class="line"><span class="regexp">         &lt;a href="#" onclick=&#123;this.handleClick。bind(this,id)&#125;&gt; /</span><span class="regexp">/ 向事件处理程序传递参数, 事件对象会被隐式传递</span></span><br><span class="line"><span class="regexp">            Click me</span></span><br><span class="line"><span class="regexp">        &lt;/</span>a&gt;;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Virtual-DOM"><a href="#Virtual-DOM" class="headerlink" title="Virtual DOM"></a>Virtual DOM</h2><blockquote><p>当组件状态<code>state</code>有更改的时候，<code>React</code>会自动调用组件的<code>render</code>方法重新渲染整个组件的<code>UI</code>。</p></blockquote><p><code>React</code>实现了一个<code>Virtual DOM</code>，组件 DOM 结构就是映射到这个<code>Virtual DOM</code> 上，<code>React</code> 在这个<code>Virtual DOM</code> 上实现了一个<code>diff</code>算法，<strong>当要重新渲染组件的时候，会通过<code>diff</code> 寻找到要变更的DOM 节点，再把这个修改更新到浏览器实际的DOM 节点上</strong>，所以实际上不是真的渲染整个<code>DOM</code>树(<code>React DOM</code> 只会更新实际改变了的内容)。这个 <code>Virtual DOM</code> 是一个纯粹的 JS 数据结构，所以性能会比原生 DOM 快很多。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 单例模式 （Singleton Pattern）</title>
      <link href="/2019/07/21/singletonPattern/"/>
      <url>/2019/07/21/singletonPattern/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>确保只有一个实例，并提供全局访问。</p></blockquote><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>一个类能返回对象一个引用（永远是同一个）和一个获得该实例的方法（必须是静态方法，通常命名为<code>getIntance</code>）；当我们调用这个方法时，类持有的引用不为空则返回这个引用，如果为空须创建该类实例并将实例的引用赋予该类保持的引用；同时将该类的构造函数定义为私有方法，那么其他环境就无法通过调用该类的构造函数来实例化该类的对象，只能通过该类提供的静态方法得到该类唯一的实例。</p><h3 id="实现-Java-语言中的单例模式"><a href="#实现-Java-语言中的单例模式" class="headerlink" title="实现 Java 语言中的单例模式"></a>实现 Java 语言中的单例模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Singleton getInstance &#123;</span><br><span class="line">            <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span>(Singleton.class) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(INSTANCE = <span class="keyword">null</span>) &#123;</span><br><span class="line">                       INSTANCE = <span class="keyword">new</span> Singleton()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> INSTANCE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现-JavaScript-语言中的单例模式"><a href="#实现-JavaScript-语言中的单例模式" class="headerlink" title="实现 JavaScript 语言中的单例模式"></a>实现 JavaScript 语言中的单例模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Singleton = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Singleton.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line">Singleton.getInstance = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">let</span> instance;</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(instance) <span class="keyword">return</span> instance;</span><br><span class="line">       <span class="keyword">return</span> instance = <span class="keyword">new</span> Singleton(name)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="keyword">let</span> s1 = Singleton.getInstance(<span class="string">'owen'</span>); <span class="comment">// Singleton &#123;name: "owen"&#125;</span></span><br><span class="line"><span class="keyword">let</span> s2 = Singleton.getInstance(<span class="string">'guowen'</span>); <span class="comment">// Singleton.getInstance('guowen');</span></span><br><span class="line">s1 === s2 <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>JavaScript中单例作为一个命名空间提供者，从全局命名空间里提供一个唯一的访问点来访问该对象。</p></blockquote><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>使用命名空间可以降低全局变量带来的命名污染；<br>最简单的方法是对象字面量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> globalWeb = &#123;</span><br><span class="line">    a() &#123;&#125;,</span><br><span class="line">    b() &#123;&#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>或者使用闭包<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Singleton = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> instance;</span><br><span class="line">    <span class="keyword">let</span> init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">'owen'</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            name,</span><br><span class="line">            data()&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            method:&#123; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getInstance() &#123;</span><br><span class="line">            <span class="keyword">if</span>(instance) <span class="keyword">return</span> instance;</span><br><span class="line">            <span class="keyword">return</span> instance = init()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;())</span><br><span class="line"><span class="keyword">let</span> app = Singleton.getInstance() <span class="comment">// &#123;name: "owen", data: ƒ, method: &#123;…&#125;&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="惰性单例"><a href="#惰性单例" class="headerlink" title="惰性单例"></a>惰性单例</h3><blockquote><p>惰性单例指在需要的时候才创建对象实例，在实现开发中非常有用，即目标对象只有在使用的时候才被创建，而不是页面加载好时创建。</p></blockquote><h4 id="模态框示例"><a href="#模态框示例" class="headerlink" title="模态框示例"></a>模态框示例</h4><p> 点击一个按钮弹窗一个模态框，很明显页面是唯一的，一次不会弹窗多个模态框的情况</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>modal box<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    * &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">   html&#123;</span></span><br><span class="line"><span class="css">   <span class="selector-tag">width</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line"><span class="css">   <span class="selector-tag">height</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line"><span class="undefined">   &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.Owen</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:30</span>%;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:30</span>%;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">margin</span><span class="selector-pseudo">:10</span>% <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#modal</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">position</span><span class="selector-pseudo">:fixed</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">left</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.52</span>);</span></span><br><span class="line"><span class="css">        <span class="selector-tag">display</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.main</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:30</span>%;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:30</span>%;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">margin</span><span class="selector-pseudo">:10</span>% <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="undefined">        text-align: center;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#b0e8ff</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Owen"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>Owen<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"modal"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                我是弹框</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> openModal = <span class="built_in">document</span>.querySelector(<span class="string">"button"</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> modal = <span class="built_in">document</span>.querySelector(<span class="string">"#modal"</span>)</span></span><br><span class="line"><span class="javascript">    openModal.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">       modal.style.display = <span class="string">'block'</span></span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 第一种方法是在页面加载完成时创建好这个弹框，一开始就是隐藏的，只有点击按钮的时候才显示，这种方式有一个问题，就是我们进入页面，只是看看其他内容，不做任何操作；这样就造成资源浪费</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>modal box<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    * &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">   html&#123;</span></span><br><span class="line"><span class="css">   <span class="selector-tag">width</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line"><span class="css">   <span class="selector-tag">height</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line"><span class="undefined">   &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.Owen</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:30</span>%;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:30</span>%;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">margin</span><span class="selector-pseudo">:10</span>% <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#modal</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">position</span><span class="selector-pseudo">:fixed</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">left</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.52</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.main</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:30</span>%;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:30</span>%;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">margin</span><span class="selector-pseudo">:10</span>% <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">padding</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line"><span class="undefined">        text-align: right;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#b0e8ff</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">position</span><span class="selector-pseudo">:relative</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.main</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="undefined">        text-align: center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.main</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="undefined">        display: inline-block;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">padding</span><span class="selector-pseudo">:5px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">cursor</span><span class="selector-pseudo">:pointer</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Owen"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">    init()</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> openModal = <span class="built_in">document</span>.querySelector(<span class="string">"button"</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> createModal =( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> flag;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 生成 Modal 容器</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span></span><br><span class="line"><span class="javascript">        div.id = <span class="string">"modal"</span></span></span><br><span class="line"><span class="javascript">        div.style.display = <span class="string">"none"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(flag) <span class="keyword">return</span> div;</span></span><br><span class="line"><span class="javascript">            flag = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> fra = <span class="built_in">document</span>.createDocumentFragment();</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 添加 Modal 内容</span></span></span><br><span class="line"><span class="xml">            els = `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span></span><br><span class="line"><span class="javascript">                    &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"close"</span>&gt;×&lt;<span class="regexp">/span&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">                            我是弹框</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">                    `</span></span><br><span class="line"><span class="undefined">            div.innerHTML = els;</span></span><br><span class="line"><span class="undefined">            fra.appendChild(div)</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.body.appendChild(fra)</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 关闭 Modal</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> close = <span class="built_in">document</span>.querySelector(<span class="string">'.close'</span>)</span></span><br><span class="line"><span class="javascript">            close.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                flag = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.body.removeChild(div)</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> div</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;())</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 显示 Modal</span></span></span><br><span class="line"><span class="javascript">    openModal.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">       createModal().style.display = <span class="string">"block"</span>;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二种方法，只执行一次DOM的创建修改操作，不用频繁的创建和删除节点，提高资源利用率；</p><p><strong>参考资料</strong></p><p>《JavaScript设计模式与开发实践》<br><a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">基维</a></p><p><a href="https://www.cnblogs.com/TomXu/archive/2012/02/20/2352817.html" target="_blank" rel="noopener">大叔</a></p>]]></content>
      
      
      <categories>
          
          <category> design patterns </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Singleton </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 高阶函数（Heigher-order function）</title>
      <link href="/2019/07/12/designPatterns3/"/>
      <url>/2019/07/12/designPatterns3/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是高阶函数"><a href="#什么是高阶函数" class="headerlink" title="什么是高阶函数"></a>什么是高阶函数</h1><blockquote><p>《javascript设计模式和开发实践》中定义 函数既可作为参数被传递，也可以作为返回值输出</p></blockquote><p><strong>满足以下条件:</strong></p><ul><li>接受一个或多个函数作为输入</li><li>输出一个函数</li></ul><p>高阶函数一般是那些函数型包含多于函数。在函数式编程中，返回另一个函数的高阶函数被称为Curry化的函数。</p><h2 id="函数作为参数传递"><a href="#函数作为参数传递" class="headerlink" title="函数作为参数传递"></a>函数作为参数传递</h2><blockquote><p>将函数作为参数传递，我们就可以抽离以部分容易变化的业务逻辑，这样可以分离业务代码中变与不变的部分</p></blockquote><p><strong>回调函数：</strong></p><blockquote><p>将函数传进一个方法中，函数不会立即执行，等待出来结果之后在执行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> func = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n === <span class="string">'owen'</span>)&#123;</span><br><span class="line">        callback() <span class="comment">//回调函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">say</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'Hello Word'</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> func(say)</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>Array 对象常用的方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].forEach(iteration)</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">iteration</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(v)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="作为返回值输出"><a href="#作为返回值输出" class="headerlink" title="作为返回值输出"></a>作为返回值输出</h2><blockquote><p>让函数继续返回一个可执行的函数，意味着运行过程是可延续的。</p></blockquote><p><strong>判断数据类型</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> type = <span class="function"><span class="params">type</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">`[object <span class="subst">$&#123;type&#125;</span>]`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> isArray = type(<span class="string">'Array'</span>),isString = type(<span class="string">'String'</span>),isNumber = type(<span class="string">'Number'</span>),isObject = type(<span class="string">'Object'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">let</span> Type = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> type = &#123;&#125;,types = [<span class="string">'Object'</span>,<span class="string">'Array'</span>,<span class="string">'Number'</span>,<span class="string">'String'</span>]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span>  types) &#123;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">            type[<span class="string">`is<span class="subst">$&#123;str&#125;</span>`</span>] = <span class="function">(<span class="params">obj</span>) =&gt;</span> <span class="built_in">Object</span>.prototype.toString.call( obj ) === <span class="string">`[object <span class="subst">$&#123;str&#125;</span>]`</span></span><br><span class="line">        &#125;(val))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(type)</span><br><span class="line">    <span class="keyword">return</span> type</span><br><span class="line">&#125;())</span><br><span class="line">Type.isNumber(<span class="number">2</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><h3 id="实现AOP（面向切片编程）"><a href="#实现AOP（面向切片编程）" class="headerlink" title="实现AOP（面向切片编程）"></a>实现AOP（面向切片编程）</h3><blockquote><p>AOP 通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。<br>JAVA 语言中 AOP 将一些跟核心业务逻辑模块无关的功能抽离出来，通常包括日志统计、安全控制、异常处理灯。再通过“动态织入”的方式掺入业务逻辑中。<br><strong>好处：</strong> 可以保持业务逻辑模块的纯净和高内聚，方便复用日志统计等功能模块。</p></blockquote><p>JavaScript中实现AOP是指把一个函数“动态织入”到另一个函数之中<br><strong>具体实现：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.before = <span class="function"><span class="keyword">function</span>(<span class="params">beforeFn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> that = <span class="keyword">this</span>; <span class="comment">// 谁调用指向谁 下面是由 func 函数调用所以是指向 func</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"> ...args</span>)</span>&#123;</span><br><span class="line">        beforeFn.apply(<span class="keyword">this</span>,args) <span class="comment">// 执行回调函数 beforeFn</span></span><br><span class="line">        <span class="keyword">return</span> that.apply(<span class="keyword">this</span>,args) <span class="comment">// 执行原函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.after = <span class="function"><span class="keyword">function</span>(<span class="params">afterFn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> that = <span class="keyword">this</span>; <span class="comment">// 谁调用指向谁 下面是由befor函数调用所以是指向 befor</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"> ...args</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> ret = that.apply(<span class="keyword">this</span>,args) <span class="comment">// 执行并接收原对象</span></span><br><span class="line">        afterFn.apply(<span class="keyword">this</span>,args) <span class="comment">//  执行回调函数 beforeFn</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line">func = func.before(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;).after(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br><span class="line">func()</span><br><span class="line"><span class="comment">// 1 2 3</span></span><br></pre></td></tr></table></figure></p><h3 id="函数柯里化-（function-currying）"><a href="#函数柯里化-（function-currying）" class="headerlink" title="函数柯里化 （function currying）"></a>函数柯里化 （function currying）</h3><blockquote><p>在数学和计算机科学中，柯里化是将多个参数的函数转换成一系列使用一个参数的函数，且返回接受余下的参数的新函数</p></blockquote><p><strong>curring 又称部分求值；一个 curring 函数首先会接收一些参数，该函数并不会立即求值，而是继续返回另外一个函数，而刚传入的参数会被保存在形成的闭包中，待函数真正需要求值的时候，之前的所以参数都会被一次性用于求值</strong></p><p><strong>简单示例：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果柯里化</span></span><br><span class="line">add(<span class="number">1</span>)(<span class="number">2</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p><p>接下来使用 currying 实现一个几天之内消费总和的函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通方法</span></span><br><span class="line"><span class="keyword">var</span> cost = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = [];</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">arguments</span>.length)&#123;</span><br><span class="line">            <span class="keyword">let</span> money = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> args )&#123;</span><br><span class="line">                money += val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> money</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            [].push.apply(args,<span class="built_in">arguments</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line">cost(<span class="number">100</span>);</span><br><span class="line">cost(<span class="number">100</span>);</span><br><span class="line">cost(<span class="number">100</span>);</span><br><span class="line">cost(); <span class="comment">// 300</span></span><br><span class="line"></span><br><span class="line">cost(<span class="number">100</span>)(<span class="number">100</span>)(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// currying</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存原函数参数返回到新函数中使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  func(100,100,100) //300</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span> (<span class="params">...args</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">if</span>(args.length&gt;<span class="number">1</span>)&#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> args)&#123;</span><br><span class="line">             num +=v</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> num</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> args[<span class="number">0</span>]</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span>  curry = <span class="function"><span class="keyword">function</span>(<span class="params">func</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> args = []</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">...Args</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Args.length)&#123;</span><br><span class="line">            [].push.apply(args,Args)</span><br><span class="line">            <span class="keyword">return</span> fn</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> func.apply(<span class="keyword">this</span>,args)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">cost = curry(count);</span><br><span class="line"></span><br><span class="line">cost(<span class="number">100</span>);</span><br><span class="line">cost(<span class="number">100</span>);</span><br><span class="line">cost(<span class="number">100</span>);</span><br><span class="line">cost(); <span class="comment">// 300</span></span><br></pre></td></tr></table></figure></p><h3 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h3><p>JavaScript 中大多数情况都是用户主动出发函数，除非函数本身的实现不合理，否则一般不会遇到跟性能相关的问题，少数情况下，函数不是由用户直接触发控制，可能被频繁调用造成严重的性能问题。<br>比如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// do something...</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// do something...</span></span><br><span class="line">&#125;);</span><br><span class="line">Dom.addEventListener(<span class="string">'mousemove'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// do something...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// progress</span></span><br><span class="line">xhr.upload.addEventListener(<span class="string">"progress"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something...</span></span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure></p><p><strong>上述事件1秒种触发很多次，并且常常操作DOM节点，非常损耗性能，浏览器会因此吃不消而卡顿；实际我们不需要触发如此高的频率因此我们可以在一段时间内忽略掉一些执行次数</strong></p><h4 id="节流原理："><a href="#节流原理：" class="headerlink" title="节流原理："></a>节流原理：</h4><blockquote><p>如果持续触发事件，可每隔一段时间只执行一次。</p></blockquote><h5 id="使用定时器实现节流"><a href="#使用定时器实现节流" class="headerlink" title="使用定时器实现节流"></a>使用定时器实现节流</h5><blockquote><p>将即将被执行的函数用 <code>setTimeout</code> 函数延迟一段时间执行，如果该定时器未执行完成则忽略接下下来的需被执行的函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func,wait</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> timer, firstFlag = <span class="literal">true</span>; <span class="comment">//第一次立即执行</span></span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(timer)  <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 如果存在定时器这不执行</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">let</span> that = <span class="keyword">this</span>;</span><br><span class="line">          <span class="keyword">if</span>(firstFlag)&#123;</span><br><span class="line">              firstFlag = <span class="literal">false</span>;</span><br><span class="line">             <span class="keyword">return</span> func.apply(that,args);</span><br><span class="line">          &#125;</span><br><span class="line">          timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               clearTimeout(timer);</span><br><span class="line">               timer = <span class="literal">null</span>;</span><br><span class="line">               func.apply(that,args);</span><br><span class="line">            &#125;,wait)</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, throttle(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;,<span class="number">1000</span>));</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h3><blockquote><p>和节流一定时间段内只调用一次事件处理函数不同，防抖是一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。（用户不再触发对应事件才执行一次事件）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func,wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> that = <span class="keyword">this</span>;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            func.apply(that,args)</span><br><span class="line">        &#125;,wait)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, debounce(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;,<span class="number">1000</span>));</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>参考资料</strong></p><p>《JavaScript设计模式与开发实践》</p><p><a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1" target="_blank" rel="noopener">基维 AOP</a></p><p><a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">基维 高阶函数</a></p><p><a href="https://github.com/mqyqingfeng/Blog/issues/26" target="_blank" rel="noopener">JavaScript专题之跟着 underscore 学节流</a></p>]]></content>
      
      
      <categories>
          
          <category> design patterns </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Heigher-order </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript  设计模式基础（二）</title>
      <link href="/2019/07/09/designPatterns2/"/>
      <url>/2019/07/09/designPatterns2/</url>
      
        <content type="html"><![CDATA[<h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><p>在以类为中心的面向对象编程语言中，类和对象的关系就像铸模和铸件的关系，对象总是从类中创建。而原型编程中，类不是必须的，对象未必从类中创建而来，可以拷贝另一个对象而变成新对象</p><blockquote><p>从设计模式角度讲，原型模式是用于创建对象的一种模式，找到一个对象，不需要关心对象的具体类型，通过克隆来创建一个一模一样的对象。 原型不单是一种设计模式，也被称为编程泛型</p></blockquote><p>原型模式实现的关键是语言本身是否提供了 clone 方法， ECMAScript 5 提供了 <code>Object.create</code> 方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Plane</span> (<span class="params">propertys</span>)</span>&#123; <span class="comment">//工厂方法</span></span><br><span class="line">    <span class="keyword">this</span>.blood = propertys.blood;</span><br><span class="line">    <span class="keyword">this</span>.attackLevel = propertys.attackLevel;</span><br><span class="line">    <span class="keyword">this</span>.defenseLevel = propertys.defenseLevel;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> plane = <span class="keyword">new</span> Plane(&#123;</span><br><span class="line">    blood :<span class="number">100</span>,</span><br><span class="line">    attackLevel :<span class="number">10</span>,</span><br><span class="line">    defenseLevel :<span class="number">10</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> clonePlane = <span class="built_in">Object</span>.create(plane);</span><br><span class="line"><span class="built_in">console</span>.log(clonePlane.__proto__) <span class="comment">// Plane &#123;blood: 100, attackLevel: 10, defenseLevel: 10&#125;</span></span><br></pre></td></tr></table></figure></p><p>通过克隆 <code>plane 对象</code>得到 <code>clonePlane 对象</code>,那么 plane 就被称为 clonePlane 的原型；而 plane 中所有的属性和方法都将挂载到<code>__proto__</code> 原型属性上</p><p>每个 JS 对象都有 <code>__proto__</code> 属性(隐式原型属性)，指向创建该对象的构造函数的原型,这个属性可以访问到原型（<code>[[prototype]]</code>） 内部属性。这个属性在现在来说已经不推荐直接去使用它了。</p><p><strong>由于 JavaScript 作为一门基于原型的语言，没有类的概念，每一个对象都是基于另一个对象的克隆，因此语言最初只有一个根对象 <code>Object.prototype</code>,如果A对象是从B对象克隆而来，那么B就是A的原型，如果C又是B的原型。它们之间就形成了一条原型链</strong></p><label> <strong>原型编程中有一个重要特性：访问对象中某个属性或方法，而对象本身没有对应属性和方法，那么它会从自己的原型链上查找，一直查到根对象为止</strong><br></label><br><strong>一级级向上，对性能有影响，寻找的层级越多，性能影响越大</strong><br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(clonePlane) <span class="comment">// Plane &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(clonePlane.blood) <span class="comment">// 100</span></span><br><span class="line"><span class="built_in">console</span>.log(clonePlane.color) <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(clonePlane.__proto__) <span class="comment">//原型 Plane &#123;blood: 100, attackLevel: 10, defenseLevel: 10&#125;</span></span><br></pre></td></tr></table></figure><br><br>上述代码中的<code>clonePlane 对象</code> 本身是没有 blood 和 color 属性，却能访问到blood的值而访问不到color的值，是因为 <code>clonePlane 对象</code> 原型链中有 blood 属性而没有color属性。<br><br><strong>原型编程基本规则：</strong><br>1. 所有数据都是对象<br>2. 对象会记住它的原型（类似于继承）<br>3. 要得到一个对象，需要将另一个对象作为原型并克隆它<br>4. 访问不到对象的某个属性或方法，那么它会从自己的原型链上查找，一直查到根对象为止<br><br>## 原型继承<br><br>在JavaScript中我们遇到的每一个对象都是从 <code>Object.prototype</code>克隆而来，通过<code>Object.getPrototypeOf</code>来判断对象的原型从属关系。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(obj) === <span class="built_in">Object</span>.prototype) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(obj1) === <span class="built_in">Object</span>.prototype) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><br><br>由于引擎内部会自动实现对 <code>Object.prototype</code> 的克隆，所有我们执行显示的使用<code>let obj = new Object(); let obj1 = {};</code><br> <code>prototype</code> 有一个属性 <code>constructor</code>，默认指向原型所在的构造函数<br>,<code>constructor</code>是一个公有且不可枚举的属性。一旦我们改变了函数的 prototype ，那么新对象就没有这个属性了,如果修改了原型对象，一般会同时修改constructor属性，防止引用的时候出错。<br><br>下面我们来看<code>new</code> 运算符<br><br> <label> <strong>JavaScript中没有类的概念，所以 <code>Object</code> 是一个构造函数，JavaScript 中的函数即可作为普通函数调用，又可作为构造器调用,当使用 new 运算调用函数时，函数就是构造器。</strong></label><h3 id="new命令的原理"><a href="#new命令的原理" class="headerlink" title="new命令的原理"></a><code>new</code>命令的原理</h3><ol><li>创建一个空对象，作为返回的对象实例</li><li>将构造函数指向原型<code>prototype</code>属性（继承构造函数）</li><li>绑定作用域（ this 指向空对象 ）</li><li>执行构造函数,如果构造函数return 为对象则使用该对象，否则 return 创建的空对象</li></ol><p>模拟 <code>new</code> 运算<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__new</span> (<span class="params">fun,args</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 获取构造函数</span></span><br><span class="line">  <span class="keyword">let</span> arr =[...arguments]</span><br><span class="line">  <span class="keyword">let</span> Con = arr.shift()</span><br><span class="line">  <span class="comment">// 创建对象，将构造函数的原型指向它</span></span><br><span class="line">  <span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(Con.prototype)</span><br><span class="line">  <span class="comment">// 绑定 this</span></span><br><span class="line">  <span class="keyword">let</span> ret = Con.apply(obj,arr)</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">typeof</span> ret === <span class="string">'object'</span> &amp;&amp; ret !== <span class="literal">null</span> )? ret : obj</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = __new(<span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">&#123; name,sex,age &#125;</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;,&#123;<span class="attr">name</span>:<span class="string">'owen'</span>,<span class="attr">sex</span>:<span class="string">'man'</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(person) <span class="comment">// Person &#123;name: "owen", sex: "man", age: 18&#125;</span></span><br></pre></td></tr></table></figure></p><p><strong>new.target：</strong>  可利用 它来判断是否使用 new 命令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">new</span>.target) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请使用 new 命令调用！'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func() <span class="comment">// Uncaught Error: 请使用 new 命令调用！</span></span><br></pre></td></tr></table></figure><h3 id="call，apply-and-bind"><a href="#call，apply-and-bind" class="headerlink" title="call，apply and bind"></a>call，apply and bind</h3><p>Javascript 编程中 <code>call，apply 和 bind</code> 方法被广泛运用，在学习设计模式前先理解这几个概念</p><blockquote><p>三者都可改变函数内部this的指向（即函数执行时所在的作用域）</p></blockquote><h4 id="call-and-apply"><a href="#call-and-apply" class="headerlink" title="call and apply"></a>call and apply</h4><blockquote><p>都是在改变this 指向后调用该函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">//test() == test.call()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj =&#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(obj) <span class="comment">//"[object Object]"</span></span><br><span class="line"><span class="comment">//因为call 和 apply 会将函数中的this指向第一个参数</span></span><br><span class="line"><span class="comment">//相当于 obj.toString()</span></span><br></pre></td></tr></table></figure></p></blockquote><p><strong><code>call and apply</code> 二者区别在于传参：</strong></p><ul><li>call 第二个参数开始单个单个参数传</li><li>apply 第二个参数为数组或类数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回数组中最大的数</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">15</span>];</span><br><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, arr) <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将数组的空元素变为undefined</span></span><br><span class="line"><span class="built_in">Array</span>.apply(<span class="literal">null</span>,[<span class="number">1</span>,,<span class="number">3</span>,,<span class="number">4</span>])<span class="comment">//[1,undefined,3,undefined,4];</span></span><br></pre></td></tr></table></figure><p>空元素与undefined的差别</p><ul><li>forEach方法会跳过空元素，但是不会跳过undefined。因此，遍历内部元素的时候，会得到不同的结果。</li><li><label>转换类似数组的对象</label></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj=&#123;<span class="number">0</span>: <span class="number">1</span>, <span class="attr">length</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">Array</span>.protetype.slice.apply(obj);<span class="comment">//[1,undefined]</span></span><br></pre></td></tr></table></figure><label>被处理的对象必须有length属性，以及相对应的数字键。</label><h6 id="参数为空、null和undefined，则默认传入全局对象。"><a href="#参数为空、null和undefined，则默认传入全局对象。" class="headerlink" title="参数为空、null和undefined，则默认传入全局对象。"></a><label>参数为空、null和undefined，则默认传入全局对象。</label></h6><hr><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><p><strong>bind方法用于将函数体内的this绑定到某个对象，然后返回一个新函数。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> counter = &#123;</span><br><span class="line">  count: <span class="number">0</span>,</span><br><span class="line">  func: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> func = counter.func.bind(counter);</span><br><span class="line">func(); <span class="comment">// 相当于 count++</span></span><br><span class="line">counter.count <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * <span class="keyword">this</span>.m + y * <span class="keyword">this</span>.n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  m: <span class="number">2</span>,</span><br><span class="line">  n: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newAdd = add.bind(obj, <span class="number">5</span>); <span class="comment">//将x 绑定为 5</span></span><br><span class="line">newAdd(<span class="number">5</span>) <span class="comment">// 20</span></span><br><span class="line">newAdd(<span class="number">1</span>,<span class="number">6</span>)<span class="comment">//12 6为起作用 相当于 5*2+1*2</span></span><br></pre></td></tr></table></figure><label>第一个参数是null或undefined，等于将this绑定到全局对象</label><h4 id="bind方法使用注意点"><a href="#bind方法使用注意点" class="headerlink" title="bind方法使用注意点"></a>bind方法使用注意点</h4><ul><li>bind方法每运行一次，就返回一个新函数 需要一个变量接收</li></ul><h4 id="模拟-bind"><a href="#模拟-bind" class="headerlink" title="模拟 bind"></a>模拟 bind</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params">...Args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">"function"</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Function.prototype.bind - what is trying to be bound is not callable"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> that = <span class="keyword">this</span>, <span class="comment">//保存原函数</span></span><br><span class="line">  target = Args.shift(), <span class="comment">//提取须绑定的对像</span></span><br><span class="line">  func =  <span class="function">(<span class="params">...args</span>) =&gt;</span>that.apply(target ? <span class="keyword">this</span> : target || <span class="built_in">window</span>, aArgs.concat(args));  <span class="comment">//  aArgs.concat(args) 合并参数</span></span><br><span class="line">  func.prototype = <span class="built_in">Object</span>.create(<span class="keyword">this</span>.prototype); <span class="comment">// 继承原函数的原型</span></span><br><span class="line">  <span class="keyword">return</span> func;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>结合回调函数使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> counter = &#123;</span><br><span class="line">  count: <span class="number">0</span>,</span><br><span class="line">  inc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callIt</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  callback();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">callIt(counter.inc.bind(counter));</span><br><span class="line">counter.count <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li><li><p>结合call方法使用</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].slice(<span class="number">0</span>, <span class="number">1</span>) <span class="comment">// [1]</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.call([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">0</span>, <span class="number">1</span>) <span class="comment">// [1]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//将Array.prototype.slice变成Function.prototype.call方法所在的对象</span></span><br><span class="line"><span class="comment">//调用时就变成了Array.prototype.slice.call。</span></span><br><span class="line"><span class="keyword">let</span> slice = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Array</span>.prototype.slice);</span><br><span class="line"><span class="built_in">Function</span>.prototype.slice.call([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">0</span>, <span class="number">1</span>) <span class="comment">// [1]</span></span><br><span class="line"><span class="comment">//slice([1, 2, 3], 0, 1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> push = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Array</span>.prototype.push);</span><br><span class="line"><span class="keyword">let</span> pop = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Array</span>.prototype.pop);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span> ,<span class="number">2</span> ,<span class="number">3</span>];</span><br><span class="line">push(a, <span class="number">4</span>)</span><br><span class="line">a <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">pop(a)</span><br><span class="line">a <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><ul><li>将Function.prototype.bind方法变成Function.prototype.call的方法，就意味着bind的调用形式也可以被改写</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o = &#123; <span class="attr">v</span>: <span class="number">123</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> bind = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Function</span>.prototype.bind);</span><br><span class="line">bind(f, o)() <span class="comment">// 123</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> design patterns </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pattern intro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 设计模式基础（一）</title>
      <link href="/2019/07/08/designPatterns1/"/>
      <url>/2019/07/08/designPatterns1/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是设计模式？"><a href="#什么是设计模式？" class="headerlink" title="什么是设计模式？"></a>什么是设计模式？</h1><blockquote><p><code>模式</code> 起源于建筑学。20世纪70年代，哈佛大学建筑学博士<code>Christopher Alexander</code>和他的团队花大约20年，来研究为解决同一个问题而设计出的不同建筑结构，从中发现那些高质量设计中的相似性，并且用<code>模式</code>来指代这种相似性；</p></blockquote><p>受<code>Christopher Alexander</code>观点的启发，<code>Erich Gamma, Richard Helm, Ralph Johnson和 John Vlissides</code>(人称Gang Of Four, GoF),将这种 <code>模式</code> 观点应用于面向对象的软件设计中，并总结了23种常见的软件开发设计模式， 于 1995 年发布一本名叫《Design Patterns: Elements Of Reusable Object-Oriented Software》的书</p><blockquote><p>设计模式的定义：在面向对象软件设计过程种针对特定的问题的简洁而优雅的解决方案。就是给面向对象软件开发中一些 好的设计取个名。</p></blockquote><h2 id="为什么要给好设计取名？"><a href="#为什么要给好设计取名？" class="headerlink" title="为什么要给好设计取名？"></a>为什么要给好设计取名？</h2><p>在开发中，一些稍有经验的程序员也许在不知不觉中使用过设计模式，于是他向别人描述它时会遇到困难，沟通成本高、效率低。而 GoF 将这些好的设计从面向对象中挑选出来，这些都是久经考验的反应了开发者的经验和见解的使用模式来定义的技术，给它们一个好听又好记的名字，这样就方便我们更好的传播和学习，当遇到一个问题时，知道这是哪种设计模式，就能很快想出几种解决方案，提高工作效率。</p><p><strong>好处：</strong></p><ol><li>提供固定的解决方法来解决在软件开发中出现的问题。</li><li>很容易地重用，防止在应用程序开发过程中出现的一些可能导致重大问题的小问题，提高工作效率。</li><li>避免重复代码来减小我们文件大小。</li><li>模式善于表达，交流更快速，降低沟通成本。</li></ol><p> <strong>所有设计模式的实现都遵循一条原则：找出程序中变化的地方，将变化封装起来</strong>。一个程序的设计总是可以分为 可变部分和不变的部分；找出可变部分，将其封装，剩下的不变和稳定部分就非常容易复用。<br><strong>作用：</strong> 让人写出可复用和可维护的程序。<br>JavaScript是一门<code>面向对象语言</code><a href="https://www.ibm.com/developerworks/cn/web/1304_zengyz_jsoo/" target="_blank" rel="noopener">[1]</a><a href="https://www.infoq.cn/article/3*8POPcRSClQh1Cp9Sqg" target="_blank" rel="noopener">[2]</a><a href="https://zhuanlan.zhihu.com/p/33658346" target="_blank" rel="noopener">[3]</a>，设计模式通过对面向对象的特征<label><strong>封装、继承、组合、多态</strong></label>等技术的反复使用，提炼出可复用的面向对象设计技巧。</p><hr><h1 id="设计模式基础"><a href="#设计模式基础" class="headerlink" title="设计模式基础"></a>设计模式基础</h1><blockquote><p>JavaScript 在语言层面没有抽象类和接口的支持，没有类式继承，而是通过原型委托的方式来实现对象与对象之间的继承。</p></blockquote><h2 id="编程语言类型"><a href="#编程语言类型" class="headerlink" title="编程语言类型"></a>编程语言类型</h2><p><strong>编程语言按数据类型大体可分两大类：静态类型语言和动态类型语言</strong> 。静态类型语言在编译时就已经确定变量的类型，动态类型语言只有在程序运行的时候才能确定变量的类型。而JavaScript就是动态类型语言。</p><p><strong>静态语言优点：</strong></p><ol><li>编译时就能发现类型不匹配的错误，可以避免程序运行时有可能发生的错误。</li><li>编译器可针对对应变量的类型进行优化，提高程序运行速度。</li></ol><p><strong>静态语言缺点：</strong></p><ol><li>迫使程序员按照对应的规则来写程序，为每个变量规定数据类型分散程序员注意力，增加代码量。</li></ol><p><strong>动态语言优点：</strong></p><ol><li>代码简洁，程序员可以把更多精力放在业务逻辑处理上，更加专注</li><li>无需类型检测，灵活性高，只关注须对象的行为，无需关注对象本身</li><li>不必借助超类型来实现”面向接口编程”</li></ol><p><strong>动态语言缺点：</strong></p><ol><li>无法保证变量的类型，程序可能发生意想不到的bug.</li></ol><h2 id="面向对象的特征-参考JAVA"><a href="#面向对象的特征-参考JAVA" class="headerlink" title="面向对象的特征(参考JAVA)"></a>面向对象的特征(参考JAVA)</h2><p><strong>多态、继承、封装</strong></p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><blockquote><p>定义：同一操作作用于不同对象，产生不同的解释和不同的执行结果</p></blockquote><p>给不同对象发送同一个消息时，这些对象会根据这个消息分别给出不同的回应。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sendInfo = <span class="function"><span class="params">target</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ( target <span class="keyword">instanceof</span> ObjOne) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> ObjOne)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (target <span class="keyword">instanceof</span> ObjTwo) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> ObjTwo)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">ObjOne</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">ObjTwo</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"> sendInfo(<span class="keyword">new</span> ObjOne())</span><br><span class="line"> sendInfo(<span class="keyword">new</span> ObjTwo())</span><br></pre></td></tr></table></figure><p>上述代码段就体现了<code>多态性</code>,当发送 <code>sendInfo</code> 消息时每个对象做出不同的回应，但是这样的<code>多态性</code>很糟糕，如果再这个家一个对象 ObjThere 就得改动代码，对象越来越多时，<strong>修改的代码越多，出错的可能性越大。</strong></p><p>多态背后的思想是将 <code>做什么</code> 和 <code>谁去做以及怎样做</code>分开，也就是将 <code>不变的事物和可能变化的事</code> 分开。上述代码段中，每个对象都会打印日志,这是不变的，而各个对象输出哪些信息是变化的，将不变的隔离出来，把变化的封装起来，这样程序就又了扩展能力，是可生长的，这样就符合 <code>开发-封闭</code> 原则。<br><strong>下面是修改后的代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sendInfo = <span class="function"><span class="params">target</span> =&gt;</span> &#123;</span><br><span class="line">  target.log()</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">ObjOne</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">ObjOne.prototype.log = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>)&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ObjTwo</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">ObjTwo.prototype.log = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>)&#125;;</span><br><span class="line"></span><br><span class="line"> sendInfo(<span class="keyword">new</span> ObjOne())</span><br><span class="line"> sendInfo(<span class="keyword">new</span> ObjTwo())</span><br></pre></td></tr></table></figure><p>现在我们增加一个对象就不需要修改 <code>sendInfo</code>里的代码了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ObjThere</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">ObjThere.prototype.log = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>)&#125;;</span><br><span class="line">sendInfo(<span class="keyword">new</span> ObjThere())</span><br></pre></td></tr></table></figure><h4 id="类型检查和多态"><a href="#类型检查和多态" class="headerlink" title="类型检查和多态"></a>类型检查和多态</h4><p>类型检查是再表现出对象多态性之前一个绕不开的话题，<code>JavaScript</code> 是一门不必进行类型检查的动态类型语言，为了真正了解多态的目的，须从静态语言说起。</p><p>以JAVA为例，由于在编译时会进行类型检查，所有不能给变量赋予不同类型的值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str;</span><br><span class="line"></span><br><span class="line">str = <span class="string">'ab'</span></span><br><span class="line">str =<span class="number">2</span> <span class="comment">// error</span></span><br></pre></td></tr></table></figure></p><p>将之前的例子换成 Java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjOne</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">'a'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjTwo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">'b'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendInfo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span> <span class="params">(ObjOne objOne)</span> </span>&#123;</span><br><span class="line">      objOne.log()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String args[] )</span> </span>&#123;</span><br><span class="line">        SendInfo sendInfo = <span class="keyword">new</span> SnedInfo();</span><br><span class="line">        ObjOne objOne = <span class="keyword">new</span> ObjOne()</span><br><span class="line">        sendInfo(objOne) <span class="comment">// 'a'</span></span><br><span class="line">        ObjTwo objTwo = <span class="keyword">new</span> objTwo()</span><br><span class="line">        sendInfo(objTwo) <span class="comment">// error</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码段中 <code>sendInfo(objOne)</code> 可以顺利输出，而<code>sendInfo(objTwo)</code>因为传入的类不同而报错，为了解决这一问题，静态类性的面向对象通常被设计为可向上转型：<strong>当给一个类变量赋值时，这个变量的类型既可以用这个类本身，也可以用这个类的超类</strong> 就像描述一只咖啡猫在跑、一只波斯猫在跑，如果忽略它们具体类型，可以说 一只猫在跑。</p><p>同理，当 ObjOne 和 ObjTwo 对象的类型都被隐藏在超类 Objects 身后时， ObjOne 和 ObjTwo就能被交换使用，这就让对象表现出多态性，这种表现正是实现众多设计模式的目标。<br><strong>要实现多态归根结底得先要消除类型之间的耦合关系。一个JavaScript对象即可表示<code>ObjOne</code>又可表示<code>ObjThere</code>,这意味着JavaScript对象的多态性是与生俱来的</strong></p><h4 id="多态在面向对象程序设计中的作用"><a href="#多态在面向对象程序设计中的作用" class="headerlink" title="多态在面向对象程序设计中的作用"></a>多态在面向对象程序设计中的作用</h4><p><code>Martin Fowler</code> 在重构一书中写到：</p><blockquote><p>  多态的最根本好处在于，你不必再向对象询问“你是什么类” 而后根据得到的答案调用对象的某个行为————你只管调用该行为就是了，其他的一切多态机制都会为你安排妥当。</p></blockquote><p><strong>多态最根本的作用就是把过程化的条件分支语句转化为对象的多态性，从而消除条件分支语句</strong></p><p>就好比如在电影拍摄现场，导演喊出“action”时，每个人都做自己应该做的事，而不用导演走到每个人面前确认他们的职责，然后告诉他们该做什么。<strong>对象应该做什么并不是临时决定的，而是事先约定排练好的，每个对象该做什么，已经成为该对象的一个方法，被安装在对像内部，每个对像负责自己的行为，然后这些对象通过同一个消息，有条不紊的工作</strong><br>将行为分布在各个对象中，让他们各自负责自己的行为，这便是面向对象设计的优点。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p><strong>使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。</strong>通过继承创建的新类称为“子类”或“派生类”,被继承的类称为“基类”、“父类”或“超类”。继承的过程，就是从一般到特殊的过程。</p><blockquote><p>使用继承来得到多态效果,是让对象表现出多态性最常用的手段。继承通常包括<strong>实现继承(使用基类的属性和方法而无需额外编码的能力)和接口继承( 接口继承是指仅使用属性和方法的名称、但是子类必须提供实现的能力)和可视继承(子窗体（类）使用基窗体（类）的外观和实现代码的能力)</strong></p></blockquote><p><strong>注意：</strong> 使用继承时,两个类之间的关系应该是“属于”关系。</p><p>将上述JAVA例子进一步封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Objects</span> </span>&#123; <span class="comment">//抽象出一个超类</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjOne</span> <span class="keyword">extends</span> <span class="title">Objects</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">'a'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjTwo</span> <span class="keyword">extends</span> <span class="title">Objects</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">'b'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendInfo</span> </span>&#123; <span class="comment">//让 log 方法接收 Objects 类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span> <span class="params">(Objects objects)</span> </span>&#123;</span><br><span class="line">      objects.log()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String args[] )</span> </span>&#123;</span><br><span class="line">        SendInfo sendInfo = <span class="keyword">new</span> SnedInfo();</span><br><span class="line">        Objects  objOne = <span class="keyword">new</span> ObjOne();</span><br><span class="line">        Objects  objTwo = <span class="keyword">new</span> objTwo();</span><br><span class="line">        sendInfo(objOne) <span class="comment">// 'a'</span></span><br><span class="line">        sendInfo(objTwo) <span class="comment">// 'b'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码段中 ObjOne 和 ObjTwo 继承自 Objects 类即可通过这个桥梁来使用对应的方法。</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装是实现面向对象程序设计的第一步，将数据或函数等集合在一个个单元中（在java中称之为类，JavaScript中就是一个函数对象）</p><blockquote><p>封装是隐藏数据、实现细节、设计细节以及对象的类型等，是代码模块化；是把过程和数据包围起来，只能通过已定义的方法访问数据。<strong>把客观事物封装成抽象的类，并且只对可信的类或对象来操作这个类的数据和方法，而对不可信的对象进行信息隐藏</strong></p></blockquote><p><strong>封装的意义：</strong></p><ol><li>保护数据成员，不然其他对象或类直接访问或修改，只能通过提供的接口访问，防止用户无意破坏（数据封装）</li><li>方法的细节对外是隐藏的，只要接口不变，内容的修改不会影响到外部的调用这（封装实现）</li></ol><h3 id="封装数据"><a href="#封装数据" class="headerlink" title="封装数据"></a>封装数据</h3><p>在许多语言的对象系统中，封装数据是由语法解析来实现的比如 JAVA 提供了 public 、private、protected等关键字来设置不同的访问权限。</p><p><strong>JavaScript 中并没有提供这些关键字，只能依赖作用域来实现封装特性，而且只能模拟出 public、和private</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myObject=<span class="function">(<span class="params">(</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> __name = <span class="string">"owen"</span>; <span class="comment">// private</span></span><br><span class="line">    <span class="keyword">return</span> &#123;  <span class="comment">// publice 对象</span></span><br><span class="line">        getName()&#123;</span><br><span class="line">            <span class="keyword">return</span> __name</span><br><span class="line">        &#125;,</span><br><span class="line">        setName(value)&#123;</span><br><span class="line">            <span class="keyword">return</span> __name = value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line">myObject.getName() <span class="comment">// "owen"</span></span><br><span class="line">myObject.setName(<span class="string">'gao'</span>)</span><br><span class="line">myObject.getName() <span class="comment">// "gao"</span></span><br></pre></td></tr></table></figure></p><p>ES6 中除了 let 、const 外还可使用 Symbol 类型建立私有属性</p><h3 id="封装实现"><a href="#封装实现" class="headerlink" title="封装实现"></a>封装实现</h3><p>封装使对象内部的变化对其他对象或类而言是透明不可见的，对象对他自己的行为负责，其他对象或类不用关心他内部的实现，对象之间只通过暴露 API接口来通信。</p><p>比如 Array中的forEach 方法遍历一个聚合对象，我们不用关心 forEach 内部是争议实现的，只要它提供的功能正确就行，即使修改它内部的代码，只要调用方式没有变化就不用关系它内部实现的改变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.forEach(<span class="function"><span class="params">val</span> =&gt;</span> <span class="built_in">console</span>.log(val))</span><br></pre></td></tr></table></figure><p>封装在更重要的层面体现为封装变化《设计模式》一书曾提到：</p><blockquote><p>考虑你的设计中哪些地方可能变法，这种方式与关注会导致重新设计的原因相反。它不是考虑什么时候会迫使你的设计改变，而是考虑你怎么样才能够在不重新设计的情况下进行改变。这里的关键在于封装发送变化的概念，这是许多设计模式的主题</p></blockquote><p>《设计模式》一书中归纳总结了23种设计模式，从意图上可将这些模式划分为 <code>创建型模式</code>、<code>结构型模式</code>和<code>行为型模式</code>。</p><p>通过封装变化的方式，把系统中稳定不变的部分和容易变化的部分隔离开来，在系统演变过程中，只需替换哪些容易变化的部分，如果这些部分是已经封装好的，替换起来也相对容易；这样可以很大程度的保证程序的稳定性或可扩展性。</p><h2 id="面向对象基本原则"><a href="#面向对象基本原则" class="headerlink" title="面向对象基本原则"></a>面向对象基本原则</h2><h3 id="单一职责原则（Single-Responsibility-Prunciple）"><a href="#单一职责原则（Single-Responsibility-Prunciple）" class="headerlink" title="单一职责原则（Single Responsibility Prunciple）"></a>单一职责原则（Single Responsibility Prunciple）</h3><blockquote><p>一个类只允许有一个职责，即只有一个导致该类变更的原因。</p></blockquote><p>简单来说一个类只专注做一件事。并不是说一个类只有一个函数，而是说这个类中的函数所做的工作必须高度相关（高内聚）</p><p><strong>不过这个原则很容易违背，因为可能由于某种原因，原来功能单一的类需要被细化成颗粒更小的职责1跟职责2，不过这个拆的粒度可能因人而已，有时候并不需要拆的过细，不要成了为设计而设计。所以在每次迭代过程中可能需要重新梳理重构之前编写的代码，将不同的职责封装到不同的类或者模块中。</strong></p><p><strong>优点：</strong></p><ol><li>类的复杂性降低，实现什么职责都有清晰明确的定义,可读性提高，可维护性提高；</li><li>变更引起的风险降低，变更是必不可少的，如果接口的单一职责做得好，一个接口修改只对相应的实现类有影响，对其他的接口无影响，这对系统的扩展性、维护性都有非常大的帮助。</li></ol><h3 id="开发关闭原则（Open-Closed-Principle）"><a href="#开发关闭原则（Open-Closed-Principle）" class="headerlink" title="开发关闭原则（Open Closed Principle）"></a>开发关闭原则（Open Closed Principle）</h3><blockquote><p>一个软件实体应该是可以扩展的，但是不可修改。</p></blockquote><p><strong>在软件开发过程中，永远不变的就是变化。因此当软件需要变化时，我们应该尽量通过扩展的方式来实现变化，而不是通过修改已有的代码来实现。封装变化，是实现开放封闭原则的重要手段，对于经常发生变化的状态，一般将其封装为一个抽象，拒绝滥用抽象，只将经常变化的部分进行抽象。</strong><br><strong>优点：</strong></p><ol><li>增加稳定性。</li><li>可扩展性高。</li></ol><h3 id="里氏替换原则-（Liskov-Substitution-Principle）"><a href="#里氏替换原则-（Liskov-Substitution-Principle）" class="headerlink" title="里氏替换原则 （Liskov Substitution Principle）"></a>里氏替换原则 （Liskov Substitution Principle）</h3><blockquote><p>子类必须能够替换掉它们的基类，而程序执行效果不变。</p></blockquote><p><strong>所有使用基类代码的地方，如果换成子类对象的时候还能够正常运行，则满足这个原则，否则就是继承关系有问题，应该废除两者的继承关系，这个原则可以用来判断我们的对象继承关系是否合理。</strong>尽量把父类设计为抽象类或者接口，让子类继承父类或实现父接口，并实现在父类中声明的方法.</p><p><strong>优点：</strong></p><ol><li>提高代码的重用性；</li><li>代码共享，减少创建类的工作量，每个子类都拥有父类的方法和属性；</li><li>提高代码的可扩展性，实现父类的方法就可以“为所欲为”了，很多开源框架的扩展接口都是通过继承父类来完成的；</li><li>可以用来判断我们的对象继承关系是否合理,约束继承在使用上的泛滥。</li></ol><p><strong>缺点：</strong></p><ol><li>降低代码的灵活性。子类必须拥有父类的属性和方法，让子类自由的世界中多了些约束；</li><li>增强了耦合性。当父类的常量、变量和方法被修改时，必需要考虑子类的修改，而且在缺乏规范的环境下，这种修改可能带来非常糟糕的结果——大片的代码需要重构。</li></ol><h3 id="依赖倒置原则-（Dependence-Inversion-Principle）"><a href="#依赖倒置原则-（Dependence-Inversion-Principle）" class="headerlink" title="依赖倒置原则 （Dependence Inversion Principle）"></a>依赖倒置原则 （Dependence Inversion Principle）</h3><blockquote><p>高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。</p></blockquote><p>我们经常说“针对接口编程”，这里的接口就是抽象，我们应该依赖接口，而不是依赖具体的实现来编程。<br>假设B是较A低的模块，但B需要使用到A的功能，这个时候，B不应当直接使用A中的具体类；而应当由B定义一抽象接口，并由A来实现这个抽象接口，B只使用这个抽象接口；这样就达到了依赖倒置的目的，B也解除了对A的依赖，反过来是A依赖于B定义的抽象接口。通过上层模块难以避免依赖下层模块，假如B也直接依赖A的实现，那么就可能造成循环依赖</p><p><strong>高低应该是从开发者当前的角度来看的，不过DIP原则从不同角度来看它都适合且需要被遵守。假如我们高层模块直接依赖于底层模块，带来的后果是每次底层模块改动，高层模块就会受到影响，整个系统就变得不稳定，这也违反了开放关闭原则。</strong></p><p> <strong>通常我们会通过引入中间层的方式来解决这个问题，这个中间层相当于一个抽象接口层，高层模块和底层模块都依赖于这个中间层来交互，这样只要中间抽象层保持不变，底层模块改变不会影响到高层模块，这就满足了开放关闭原则；而且假如高层模块跟底层模块同时处于开发阶段，这样有了中间抽象层之后，每个模块都可以针对这个抽象层的接口同时开发，高层模块就不需要等到底层模块开发完毕才能继续了。</strong></p><p><strong>优点：</strong> 通过抽象来搭建框架，建立类和类的关联，以减少类间的耦合性。而且以抽象搭建的系统要比以具体实现搭建的系统更加稳定，扩展性更高，同时也便于维护。</p><h3 id="接口隔离原则-（Interface-Segregation-Principle）"><a href="#接口隔离原则-（Interface-Segregation-Principle）" class="headerlink" title="接口隔离原则 （Interface Segregation Principle）"></a>接口隔离原则 （Interface Segregation Principle）</h3><blockquote><p>多个特定的客户端接口要好于一个通用性的总接口。</p></blockquote><p><strong>应当为客户端提供尽可能小的单独的接口，而不是提供大的总的接口。</strong></p><p><strong>需要注意的是：</strong>接口的粒度也不能太小。如果过小，则会造成接口数量过多，使设计复杂化。<br><strong>优点：</strong> 避免同一个接口里面包含不同类职责的方法，接口责任划分更加明确，符合高内聚低耦合的思想。<br>接口是设计时对外部设定的约定，通过分散定义多个接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。</p><h3 id="迪米特法则-（Law-Of-Demeter）-或-最少知识原则（Least-Knowledge-Principle）"><a href="#迪米特法则-（Law-Of-Demeter）-或-最少知识原则（Least-Knowledge-Principle）" class="headerlink" title="迪米特法则 （Law Of Demeter） 或 最少知识原则（Least Knowledge Principle）"></a>迪米特法则 （Law Of Demeter） 或 最少知识原则（Least Knowledge Principle）</h3><blockquote><p>一个对象应该对其他对象有最少的了解;一个类应该对自己需要耦合或调用的类知道得最少。<br><strong>类的内部如何实现、如何复杂都与调用者或者依赖者没关系，调用者或者依赖者只需要知道他需要的方法即可，其他的我一概不关心。类与类之间的关系越密切，耦合度越大，当一个类发生改变时，对另一个类的影响也越大。</strong><br><strong>优点：</strong></p><ol><li>降低复杂度；降低耦合度；增加稳定性。</li><li>减少类与类之间的关联程度，让类与类之间的协作更加直接。</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> design patterns </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pattern intro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 学习</title>
      <link href="/2019/07/05/nginx/"/>
      <url>/2019/07/05/nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是-Nginx"><a href="#什么是-Nginx" class="headerlink" title="什么是 Nginx"></a>什么是 Nginx</h1><p>  Nginx 是一款轻量级高性能的web 和 反向代理服务器，类似于<code>Apache</code>，也是一个 IMAP/POP3/SMTP （电子邮件）代理服务器。，由俄罗斯程序设计师 <code>Igor Sysoev</code>开发；<br>在高连接并发的情况下，Nginx能够支持高达 50000 个并发连接数的响应，是 Apache 服务器不错的替代品。</p><p><strong>nginx做为HTTP服务器，有以下几项基本特性：</strong></p><pre><code>1. 处理静态文件，索引文件以及自动索引；打开文件描述符缓冲．2. FastCGI和反向代理加速(无缓存)，简单的负载均衡和容错．3. 模块化的结构。包括gzipping, byte ranges, chunked responses,以及 SSI-filter等filter。如果由FastCGI或其它代理服务器处理单页中存在的多个SSI，则这项处理可以并行运行，而不需要相互等待。4. 支持SSL 和 TLSSNI．</code></pre><p>Nginx支持热部署。它的启动特别容易, 并且几乎可以做到7*24不间断运行，即使运行数个月也不需要重新启动。你还能够在不间断服务的情况下，对软件版本进行进行升级。<br>nginx是异步的，多个连接（万级别）可以对应一个进程。 apache是同步多进程模型，一个连接对应一个进程；<br><strong>nginx的优势是处理静态请求，cpu内存使用率低，apache适合处理动态请求，所以现在一般前端用nginx作为反向代理抗住压力，apache 作为后端处理动态请求。</strong></p><p><strong>正向代理：</strong> 服务器代理客户端向服务端发送请求，并将数据分发给客户端，服务端无法知道客户端的信息<br><strong>反向代理：</strong> 服务器代理服务端接收客户端的请求，并分发给服务器（分布式部署），反向代理隐藏了服务器的信息。<br><strong>负载均衡：</strong>  客户端发送的、Nginx反向代理服务器接收到的请求数量，就是负载量。请求数量按照一定的规则进行分发到不同的服务器处理的规则，就是一种均衡规则，即代理服务器将请求按一定的规则分发的过程就是负载均衡。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>下载</strong><br><a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">点击进入官网下载</a> Windows版本,解压至 C盘</p><p><strong>启动</strong><br>双击 <code>nginx.exe</code> 或者 打开 CMD 进入 nginx 目录 输入 <code>start nginx</code>,如果启用防火墙，允许访问即可</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>须使用CMD 进入跟目录才能使用 nginx<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nginx -h //查看帮助</span><br><span class="line">nginx -v // 查看版本</span><br><span class="line">nginx -s stop  //停用</span><br><span class="line">nginx -s reload //重载配置，重启进程</span><br><span class="line">nginx -s reopen //重启日志</span><br></pre></td></tr></table></figure></p><h2 id="代理配置"><a href="#代理配置" class="headerlink" title="代理配置"></a>代理配置</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"><span class="comment">#开启进程数 &lt;=CPU数   </span></span><br><span class="line">worker_processes  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"><span class="comment">#进程号保存文件  </span></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    <span class="comment">#每个进程最大连接数（最大连接=连接数x进程数）每个worker允许同时产生多少个链接，默认1024 </span></span><br><span class="line">    worker_connections  <span class="number">1024</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    <span class="comment">#文件扩展名与文件类型映射表  </span></span><br><span class="line">    include       mime.types;</span><br><span class="line">    <span class="comment">#默认文件类型  </span></span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#日志文件输出格式 这个位置相对于全局设置  </span></span><br><span class="line">    <span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">    <span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">    <span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#请求日志保存位置</span></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#打开发送文件 </span></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#连接超时时间  </span></span><br><span class="line">    keepalive_timeout  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#打开gzip压缩  </span></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        <span class="comment">#监听端口，默认是80端口  </span></span><br><span class="line">        <span class="keyword">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="comment">#监听域名 </span></span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line">        <span class="comment">#nginx访问日志放在logs/host.access.log下，并且使用main格式（可以自定义格式）</span></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#如果没有location更明确的匹配访问路径的话，访问请求都会被该location处理</span></span><br><span class="line">        location / &#123;</span><br><span class="line">            <span class="comment">#root指定nginx的根目录为/usr/local/nginx/html  </span></span><br><span class="line">            root   html;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#默认访问文件，欢迎页先去html目录下找index.html，如果找不到再去找index.htm</span></span><br><span class="line">            <span class="keyword">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#错误页面及其返回地址，错误码为500、502、503、504都会返回50.html错误页面</span></span><br><span class="line">        error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /<span class="number">50</span>x.html;</span><br><span class="line">        <span class="comment">#location后面是"="的话，说明是精确匹配  </span></span><br><span class="line">        location = <span class="regexp">/50x.html &#123;</span></span><br><span class="line"><span class="regexp">            root   html;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line"><span class="regexp">        #</span></span><br><span class="line"><span class="regexp">        #location ~ \.php$ &#123;</span></span><br><span class="line"><span class="regexp">        #    proxy_pass   http:/</span><span class="regexp">/127.0.0.1;</span></span><br><span class="line"><span class="regexp">        #&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line"><span class="regexp">        #</span></span><br><span class="line"><span class="regexp">        #location ~ \.php$ &#123;</span></span><br><span class="line"><span class="regexp">        #    root           html;</span></span><br><span class="line"><span class="regexp">        #    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line"><span class="regexp">        #    fastcgi_index  index.php;</span></span><br><span class="line"><span class="regexp">        #    fastcgi_param  SCRIPT_FILENAME  /scripts</span>$fastcgi_script_name;</span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache's document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx's one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要监听多个端口和域名 可配置多个 <code>server</code>。</p><p><strong>参考文章:</strong><br><a href="http://www.nginx.cn/doc/" target="_blank" rel="noopener">Nginx 中文文档</a><br><a href="https://www.cnblogs.com/wcwnina/p/8728391.html" target="_blank" rel="noopener">Nginx 相关介绍</a><br><a href="https://www.jianshu.com/p/5eab0f83e3b4" target="_blank" rel="noopener">深入浅出Nginx</a></p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>for,for...of, for...in, array iteration 运行速度测试</title>
      <link href="/2019/07/03/performance/"/>
      <url>/2019/07/03/performance/</url>
      
        <content type="html"><![CDATA[<h1 id="for-for…of-for…in-array-iteration-运行速度测试"><a href="#for-for…of-for…in-array-iteration-运行速度测试" class="headerlink" title="for,for…of, for…in, array iteration 运行速度测试"></a>for,for…of, for…in, array iteration 运行速度测试</h1><ul><li>由于不同浏览器，不同版本性能不一，且控制台本质是是套用了一大堆<a href="https://www.zhihu.com/question/29352114/answer/44050599" target="_blank" rel="noopener">eval</a>，沙盒化程度高,所以需使用<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node</a>环境测试来提高准确性<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 准备待测数组</span></span><br><span class="line"><span class="keyword">const</span> NUM = <span class="number">1e7</span>;</span><br><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(NUM).fill(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// for 测试</span></span><br><span class="line"><span class="keyword">let</span> arr1 =[];</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'for'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  arr1.push(arr[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'for'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Chrome/75.0.3770.100 Safari/537.36 环境</span></span><br><span class="line"><span class="comment">//VM1324:10 for: 576.733154296875ms</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// node v10.11.0 环境</span></span><br><span class="line"><span class="comment">// for:  412.087ms</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="for-几种写法"><a href="#for-几种写法" class="headerlink" title="for 几种写法"></a>for 几种写法</h2><ul><li><p><strong>常规写法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = []</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'one'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++ )&#123;</span><br><span class="line">    arr1.push(arr[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'one'</span>)</span><br></pre></td></tr></table></figure><p>   数组长度是会动态变化，每次循环会重新计算length长度，可能会出现死循环</p></li><li><p><strong>cache arr.length</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++ )&#123;</span><br><span class="line">     arr1.push(arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   缓存length 值，无需重新计算length</p></li><li><p><strong>倒序</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = arr.length<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">     arr1.push(arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   比第二种方法更简洁</p></li><li><p><strong>倒叙简洁版</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = arr.length<span class="number">-1</span>; i--;)&#123;</span><br><span class="line">     arr1.push(arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  两个分号之间的表达式为 true 会一直执行直到 判断为 false (i = 0)</p></li><li><p><strong>正序简洁版</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len;len = arr[i++]; )&#123;</span><br><span class="line">     arr1.push(arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   当 i 大于等于数组长度或arr[i++]值为false时 将停指循环，同时由于arr.length动态变化时可能会造成死循环</p></li></ul><h2 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> arr)&#123;</span><br><span class="line">     arr1.push(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>es6推出的迭代器，最简洁，可以是用 break，continue和return 终止循环</p><h2 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> arr)&#123;</span><br><span class="line">     arr1.push(arr[key])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for…in 一般用于遍历对象，他会将本身属性和原型链上的属性（除系统内置属性）全部遍历出来即便是不可枚举属性（enumerable:false), 可以通过 <code>items.hasOwnProperty</code>来遍历本身属性,由于查询到自己的原型链上，所以性能方面比较差</p><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    arr1.push(value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>数组的迭代方法，没有返回值</p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span>  arr1.push(value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>浅拷贝原数组，并且返回一个新数组</p><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><table><thead><tr><th>测试次数</th><th>常规for</th><th>cache for</th><th>倒序 for</th><th>倒叙简版 for</th><th>正序简版 for</th><th>for..of</th><th>for..in</th><th>forEach</th><th>map</th></tr></thead><tbody><tr><td>1</td><td>542.121ms</td><td>573.618ms</td><td>764.181ms</td><td>755.961ms</td><td>571.464ms</td><td>945.199ms</td><td>4077.020ms</td><td>625.859ms</td><td>3573.946ms</td></tr><tr><td>2</td><td>430.008ms</td><td>541.933ms</td><td>524.474ms</td><td>668.276ms</td><td>553.475ms</td><td>897.442ms</td><td>4402.246ms</td><td>605.271ms</td><td>2732.859ms</td></tr><tr><td>3</td><td>409.531ms</td><td>661.765ms</td><td>534.167ms</td><td>655.481ms</td><td>600.939ms</td><td>1141.093ms</td><td>3806.704ms</td><td>584.712ms</td><td>2779.192ms</td></tr><tr><td>4</td><td>412.972ms</td><td>643.868ms</td><td>536.026ms</td><td>674.081ms</td><td>725.149ms</td><td>930.655ms</td><td>3201.387ms</td><td>599.780ms</td><td>3152.499ms</td></tr><tr><td>5</td><td>417.034ms</td><td>624.323ms</td><td>520.674ms</td><td>799.568ms</td><td>574.713ms</td><td>943.449ms</td><td>3261.512ms</td><td>587.182ms</td><td>2954.195ms</td></tr><tr><td>6</td><td>525.771ms</td><td>955.737ms</td><td>526.208ms</td><td>771.443ms</td><td>531.962ms</td><td>954.199ms</td><td>4351.009ms</td><td>608.264ms</td><td>2888.752ms</td></tr><tr><td>7</td><td>498.039ms</td><td>602.703ms</td><td>555.588ms</td><td>531.464ms</td><td>541.599ms</td><td>916.678ms</td><td>3264.334ms</td><td>596.168ms</td><td>2834.663ms</td></tr><tr><td>8</td><td>431.694ms</td><td>523.381ms</td><td>544.974ms</td><td>527.472ms</td><td>517.833ms</td><td>1049.283ms</td><td>3744.972ms</td><td>600.286ms</td><td>3467.499ms</td></tr><tr><td>9</td><td>417.521ms</td><td>518.093ms</td><td>547.404ms</td><td>611.024ms</td><td>594.503ms</td><td>767.059ms</td><td>4979.348ms</td><td>601.420ms</td><td>3638.023ms</td></tr><tr><td>10</td><td>424.806ms</td><td>557.961ms</td><td>535.541ms</td><td>837.561ms</td><td>541.882ms</td><td>772.686ms</td><td>3284.424ms</td><td>602.443ms</td><td>3599.642ms</td></tr><tr><td>11</td><td>409.402ms</td><td>521.131ms</td><td>534.265ms</td><td>517.709ms</td><td>551.397ms</td><td>752.101ms</td><td>3228.123ms</td><td>629.625ms</td><td>3535.545ms</td></tr><tr><td>12</td><td>425.362ms</td><td>532.882ms</td><td>406.637ms</td><td>522.287ms</td><td>570.259ms</td><td>914.135ms</td><td>3449.256ms</td><td>800.857ms</td><td>3429.123ms</td></tr><tr><td>平均值</td><td>439.2738ms</td><td>578.3565ms</td><td>553.1468ms</td><td>651.7057ms</td><td>507.8718ms</td><td>909.0785ms</td><td>3,686.96ms</td><td>605.6298ms</td><td>3,221.5056ms</td></tr><tr><td>堆值差</td><td>357245536 Byte</td><td>357245808 Byte</td><td>357245624 Byte</td><td>357245872 Byte</td><td>357246824 Byte</td><td>199268080 Byte</td><td>757187208 Byte</td><td>357244456 Byte</td><td>437247640 Byte</td></tr></tbody></table><p><strong>测试总结</strong></p><ol><li><strong>运行效率:</strong> <code>常规for</code> &gt; <code>正序简版 for</code>&gt; <code>倒序 for</code> &gt; <code>cache for</code> &gt; <code>倒叙简版 for</code>&gt; <code>forEach</code> &gt; <code>for..of</code>    &gt; <code>map</code> &gt; <code>for..in</code></li><li>几种普通 for 循环占用内存相差不大, 而 <code>for..of</code> 占用运行内存最小</li><li><code>for..in</code> 性能最差，内存占用高，速度很慢</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Iteration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript定时器</title>
      <link href="/2019/06/28/timer/"/>
      <url>/2019/06/28/timer/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是定时器"><a href="#什么是定时器" class="headerlink" title="什么是定时器"></a>什么是定时器</h1><ul><li>在一段时间间隔后执行一个函数或执行一段代码的方法</li><li>JavaScript 原生提供几种定时器 <code>setInterval</code>、<code>setTimeout</code> 、<code>requestAnimationFrame</code></li><li>执行函数中的作用域未全局作用域this指向全局，可通过 <code>bind</code> 方法给执行函数传递参数或指定作用域 (严格模式下，setTimeout( )的回调函数里面的this仍然默认指向window对象， 并不是undefined)</li></ul><h2 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h2><ul><li>每相隔一段时间间隔执行一个函数或执行一段代码的方法</li><li>通过<code>clearInterval</code>方法来取消定时器<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timerInterID =  <span class="built_in">window</span>.setInterval(callback,delay[,param...])</span><br><span class="line"> setTimeout( clearInterval.bind(<span class="literal">null</span>,timerInterID),<span class="number">1000</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>callback</strong> 重复执行的函数或代码段（不推荐使用一段字符串构成的代码，应为这样做不安全，会被不法分子利用）</li><li><strong>delay</strong> 时间间隔，单位为毫秒（ms）实际间隔可能会稍长（最小间隔是4ms）</li><li><strong>timerInterID</strong> 每次调用<code>setInterval</code>方法返回的唯一 ID，可通过调用 <code>clearInterval</code>方法来清除<code>setInterval</code>方法</li><li><strong>param1, …, paramN</strong> 传递给执行函数（callback）的参数 (<label>IE9 及更早的 IE 浏览器不支持向回调函数传递额外参数。如果你想要在IE中达到同样的功能,你必须使用一种兼容代码</label> )</li></ul><h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h2><ul><li>在一段时间间隔后执行一个函数或执行一段代码的方法</li><li>通过<code>clearTimeout</code>方法来清除定时器<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timerTimeID = setTimeout(callback,delay[,param1, ..., paramN ])</span><br></pre></td></tr></table></figure></li></ul><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>callback</strong> 重复执行的函数或代码段（不推荐使用一段字符串构成的代码，应为这样做不安全，会被不法分子利用）</li><li><strong>delay</strong> 时间间隔，单位为毫秒（ms），默认为0实际间隔可能会稍长（最小间隔为 4ms ）</li><li><strong>timerTimeID</strong> 每次调用<code>setTimeout</code>方法返回的唯一 ID，可通过调用 <code>clearTimeout</code>方法来清除<code>setTimeout</code>方法</li><li><strong>param1, …, paramN</strong> 传递给执行函数（callback）的参数 (<label>IE9 及更早的 IE 浏览器不支持向回调函数传递额外参数。如果你想要在IE中达到同样的功能,你必须使用一种兼容代码</label> )</li></ul><h2 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h2><ul><li>类似于<code>setInterval</code>方法，执行动画时推荐使用</li><li>会在浏览器下次重绘前执行函数</li><li>执行间隔通常是每秒60次，当运行在后台标签页或隐藏在 <code>iframe</code>时，会暂停调用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> frameID = <span class="built_in">window</span>.requestAnimationFrame(callback)</span><br><span class="line">setTimeout(cancelAnimationFrame.bind(<span class="literal">null</span>,FrameID),<span class="number">1000</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>callback</strong> 更新动画帧所调用的函数</li><li>一帧大约 16.7ms</li></ul><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p><img src="/static/img/requestAnimationFrame.png" alt="requestAnimationFrame"></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> timer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包（closure）</title>
      <link href="/2019/06/27/closure/"/>
      <url>/2019/06/27/closure/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是闭包（closure）？"><a href="#什么是闭包（closure）？" class="headerlink" title="什么是闭包（closure）？"></a>什么是闭包（closure）？</h1><p>在理解闭包前，须理解变量<a href="https://zh.wikipedia.org/zh-hans/%E4%BD%9C%E7%94%A8%E5%9F%9F" target="_blank" rel="noopener">作用域</a>。作用域分全局和局部作用域，是指代码中定义变量的区域。(变量有效访问的范围。)</p><p><strong>静态作用域</strong></p><blockquote><p>静态作用域又叫做词法作用域，采用词法作用域的变量叫词法变量。词法变量有一个在编译时静态确定的作用域。(JavaScript 采用的是词法作用域) 词法变量的作用域可以是一个函数或一段代码，该变量在这段代码区域内可见（visibility）；在这段区域以外该变量不可见（或无法访问）。词法作用域里，取变量的值时，会检查函数定义时的文本环境，捕捉函数定义时对该变量的绑定。</p></blockquote><p><strong>动态作用域</strong></p><blockquote><p>动态作用域的变量叫做动态变量。程序正在执行定义了动态变量的代码段，那么在这段时间内，该变量一直存在；代码段执行结束，该变量便消失。(函数的作用域在函数调用时才决定。)动态作用域里，取变量的值时，会由内向外逐层检查函数的调用链，并打印第一次遇到的那个绑定的值。显然，最外层的绑定即是全局状态下的那个值。</p></blockquote><p>变量无权访问子作用域，只能访问自己和父级以上的作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"Owen"</span>; <span class="comment">// 全局变量</span></span><br><span class="line"><span class="keyword">var</span> sex = <span class="string">"Man"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name) <span class="comment">// "Owen"</span></span><br><span class="line">    <span class="keyword">var</span> age = <span class="string">"18"</span></span><br><span class="line">    <span class="keyword">var</span> sex = <span class="string">"man"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(sex) <span class="comment">// "man"  优先访问 局部变量 sex</span></span><br><span class="line">&#125;</span><br><span class="line">person()</span><br><span class="line"><span class="built_in">console</span>.log(age) <span class="comment">//   age is not defined  无法访问 person 中的 age 局部变量</span></span><br></pre></td></tr></table></figure><h2 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h2><p>当函数执行时，会创建一个执行期上下文(即作用域)的对象AO(存储在<code>[[scope]]</code>中), 一个新的AO指向 定义了一个函数执行时的环境。<br>函数执行时对应的AO, 是独一无二的，每次调用函数就创建一个OA， 函数执行完毕 AO的指向就会销毁</p><p><code>[[scope]]</code>: 每个函数都是对象，对象中有些属性可访问，有些不可以，<code>[[scope]]</code>就不可访问，它存储了运行期上下文的集合(<code>[GO,AO]</code>)。<br>作用域链：就是<code>[[scope]]</code>中所存储的AO对象集合，呈链式链接</p><h3 id="查找变量："><a href="#查找变量：" class="headerlink" title="查找变量："></a>查找变量：</h3><p>函数刚定义就存储了 所在环境的执行期上下文,执行时 创建自己的AO</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);<span class="comment">// function</span></span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">123</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">      <span class="built_in">console</span>.log(a)<span class="comment">// 123  函数声明已提升所以不用管</span></span><br><span class="line">    <span class="keyword">var</span> b =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(b);<span class="comment">//function 因为是函数表达式，只提升了 变量b， 这样的函数体不会提升</span></span><br><span class="line">&#125;</span><br><span class="line">fun(<span class="number">1</span>); <span class="comment">//函数 123 123 函数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">代码执行</span></span><br><span class="line"><span class="comment">1. 会创建 一个（全局为GO）AO(Activation  Object)对象（执行期上下文/作用域）一个存储空间库</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2. 找形参和变量声明，将形参和变量名作为AO的属性名，值为undefined,重复的只用写一个</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3. 将实参值和形参统一</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4. 在函数体里找函数声明，值为函数体</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">5. if/return 不用管 声明还是会提升</span></span><br><span class="line"><span class="comment">AO&#123;</span></span><br><span class="line"><span class="comment">   a:function a ()&#123;&#125;;</span></span><br><span class="line"><span class="comment">   b:undefined</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">记住函数是一等公民权限最高</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>函数内部声明变量的时候，一定要使用var，let or const命令。如果不用的话，你实际上声明了一个全局变量！</strong></p><h3 id="变量的生命周期"><a href="#变量的生命周期" class="headerlink" title="变量的生命周期"></a>变量的生命周期</h3><p><strong>内存生命周期：</strong></p><ol><li><p>分配你所需要的内存</p></li><li><p>使用分配到的内存（读, 写）</p></li><li><p>不需要时将其释放/归还</p></li></ol><p><strong>全局变量可永久访问，除非主动销毁，而局部变量在函数运行结束时就会随之销毁，当局部变量还能被外界访问时，将会保留，不被销毁</strong></p><h2 id="闭包简单理解："><a href="#闭包简单理解：" class="headerlink" title="闭包简单理解："></a>闭包简单理解：</h2><p>在Javascript语言中，只有函数内部的子函数才能访问该函数的变量，而定义在一个函数内部的函数并且外部能接收到这个函数，那么这个函数就是闭包。(能够读取其他函数内部变量的函数。)</p><ul><li>闭包是由函数以及创建该函数的词法环境组合而成。这个环境包含了这个闭包创建时所能访问的所有局部变量。</li></ul><p><strong>特点：</strong></p><ol><li>函数套函数，并且外部能访问嵌套函数。</li><li>父函数被销毁 的情况下，子函数的<code>[[scope]]</code>中仍然保留着父级的变量对象和作用域链，因此可以继续访问父级的变量对象,进而改变父作用域内部的变量值</li><li>占用内存，过多使用会产生性能问题，在IE中可能会导致内存泄漏。（可在销毁函数前，将无用的变量删除）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">  B = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"><span class="title">A</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"><span class="title">B</span>(<span class="params"></span>) // 1</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//例二</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"> <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">A()()<span class="comment">//1</span></span><br></pre></td></tr></table></figure><h3 id="闭包与内存泄漏"><a href="#闭包与内存泄漏" class="headerlink" title="闭包与内存泄漏"></a>闭包与内存泄漏</h3><blockquote><p><strong>内存泄漏是指，页面随着时间的延长使用的内存越来越多而没有及时释放。</strong></p></blockquote><p>javascript中 不需要开发人员像C语言一样手动使用 <code>malloc()</code>分配内存，也不需要用完后使用<code>free()</code>回收；而是使用垃圾回收策略来自动管理内存，即找出那些不再使用的值，然后释放所占用的内存。</p><p><strong>垃圾回收只针对局部变量进行回收销毁，全局变量只有网页关闭才会消除。垃圾回收有两种方法引用计数和标记清除</strong><br>垃圾回收算法主要依赖于引用的概念</p><blockquote><p>什么是引用：在内存管理的环境中，一个对象如果有访问另一个对象的权限（隐式或者显式），叫做一个对象引用另一个对象。</p></blockquote><p><strong>引用计数</strong></p><blockquote><p>引用计数是跟踪记录每个值被引用的次数。即看一个对象是否有指向它的引用。如果没有其他对象指向它（零引用），说明该对象已经不再需要了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name:<span class="string">'owen'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此时 对象 &#123; name:'owen' &#125; 被创建并引用一次</span></span><br><span class="line">obj = <span class="literal">null</span></span><br><span class="line"><span class="comment">// 此时 对象引用次数为零，将被回收机制销毁</span></span><br></pre></td></tr></table></figure></p></blockquote><p><strong>引用计数有一个循环引用的问题：如果两个对象互相引用，它们的引用次数永远不会为零，将永远不会被回收，从而占据内存</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">obj</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    name:<span class="string">'owen'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时 对象 &#123; name:'owen' &#125; 被创建并引用一次</span></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;&#125;</span><br><span class="line"></span><br><span class="line">obj2.name = obj1</span><br><span class="line">obj1.name = obj2</span><br><span class="line"><span class="comment">// 此时 两个对象相互引用 ，俩个对象引用次数为二，永远也不会被收回</span></span><br><span class="line">&#125;</span><br><span class="line">obj()</span><br></pre></td></tr></table></figure></p><p><strong>标记清除</strong></p><blockquote><p>现代浏览器常用的方法，当变量进入环境时（例如，在函数中声明一个变量），这个变量标记为“进入环境”；而当变量离开环境时，则将其标记为“离开环境”。</p></blockquote><p>把”对象是否不再需要”简化定义为”对象是否可以获得”。如把JavaScript想象一个树，每个JS都存在一个根(浏览器中为window对象,Node中为global对象 )，每当一个函数执行，就会生成一个节点。嵌套的函数调用就会有子节点。当函数执行完时，内部的变量都是无法被其他代码访问的，所以它就被标记为“无法被访问”。GC 时，JS 引擎统一对所有这些状态的对象进行回收。<br><strong>当进行一轮垃圾回收时，主线程会被阻塞，各个浏览器的时间不同可能是10ms、50ms、1s</strong></p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="封装变量"><a href="#封装变量" class="headerlink" title="封装变量"></a>封装变量</h3><p>将不需要暴露在全局的变量封装成”私有变量”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 乘积</span></span><br><span class="line"><span class="keyword">let</span> mult = <span class="function">(<span class="params">...args</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> args )&#123;</span><br><span class="line">          num *= val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 由于每次运行函数都会完全遍历所以形参，效率较低下，我们可以加入缓存机制提供函数性能</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mult1 = <span class="function">(<span class="params">(</span>)=&gt;</span>&#123;</span><br><span class="line"> <span class="keyword">let</span> cache = &#123;&#125;;</span><br><span class="line"> <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">if</span>(cache[args.join(<span class="string">','</span>)])  <span class="keyword">return</span> cache[args.join (<span class="string">','</span>)];</span><br><span class="line">        <span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> args )&#123;</span><br><span class="line">          num *= val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cache[args.join(<span class="string">','</span>)]= num; <span class="comment">// 缓存数值</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们看到 cache 变量仅仅在 mult 函数中使用，我们可以将它封装在函数内部，减少全局变量，变量发生不必要的错误</span></span><br></pre></td></tr></table></figure><p><strong>如果一个大函数中有些代码块能够独立出来，我们常常把这些代码块封装在独立的小函数里并有个良好的命名，将有助于复用，和注释作用；如果小函数不需要在其他程序中使用，最好使用闭包封装起来</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mult1 = <span class="function">(<span class="params">(</span>)=&gt;</span>&#123;</span><br><span class="line"> <span class="keyword">let</span> cache = &#123;&#125;;</span><br><span class="line"> <span class="keyword">let</span> calculate = <span class="function">(<span class="params">...args</span>)=&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> args )&#123;</span><br><span class="line">            num *= val;</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">        &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> property = args.join(<span class="string">','</span>)</span><br><span class="line">        <span class="keyword">if</span>(cache[property])  <span class="keyword">return</span> cache[property];</span><br><span class="line">        <span class="keyword">return</span> cache[property]= calculate.apply(<span class="literal">null</span>,args); <span class="comment">// 缓存数值</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><h3 id="延续变量"><a href="#延续变量" class="headerlink" title="延续变量"></a>延续变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// img案例</span></span><br><span class="line"><span class="keyword">let</span> imgSrc = <span class="function">(<span class="params">src</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">  img.src = src;</span><br><span class="line">&#125;</span><br><span class="line">imgSrc(<span class="string">'http://xxxx.com/img'</span>)</span><br><span class="line"><span class="comment">// 在一些低版本浏览器中使用 imgSrc 函数，会丢失一些数据，因为当函数调用结束后 img变量会随之销毁，此时可能未及时发出HTTP请求</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用闭包解决数据丢失问题</span></span><br><span class="line"><span class="keyword">let</span> imgSrc = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> imgs = [];</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">src</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">  imgs.push(img)</span><br><span class="line">  img.src = src;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">imgSrc(<span class="string">'http://xxxx.com/img'</span>)</span><br></pre></td></tr></table></figure><h3 id="三种方法解决循环中-var-定义函数的问题"><a href="#三种方法解决循环中-var-定义函数的问题" class="headerlink" title="三种方法解决循环中 var 定义函数的问题"></a>三种方法解决循环中 var 定义函数的问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//one 利用闭包</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(j);</span><br><span class="line">    &#125;, j * <span class="number">1000</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//two 设置第三个参数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params">j</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(j)</span><br><span class="line">  &#125;, i * <span class="number">1000</span>,i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//three  利用 let</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;, i * <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为 <code>setTimeout</code> 是个异步函数，所以会先把循环全部执行完毕，这时候<code>i</code> 就是 固定了，所以会输出一堆 固定值。</p><h2 id="函数中的this对象"><a href="#函数中的this对象" class="headerlink" title="函数中的this对象"></a>函数中的this对象</h2><h3 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h3><p>this 指向取决于 调用它时处在的执行上下文</p><h3 id="对于new-的方式来说，this-被永远绑定在了赋值变量上面，不会被任何方式改变-this"><a href="#对于new-的方式来说，this-被永远绑定在了赋值变量上面，不会被任何方式改变-this" class="headerlink" title="对于new 的方式来说，this 被永远绑定在了赋值变量上面，不会被任何方式改变 this"></a>对于new 的方式来说，this 被永远绑定在了赋值变量上面，不会被任何方式改变 this</h3><p><strong>箭头函数</strong><br>箭头函数中的 this 只取决包裹箭头函数的<code>第一个普通函数</code>的 this 否则指向全局。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> closure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fetch</title>
      <link href="/2019/06/24/fetch/"/>
      <url>/2019/06/24/fetch/</url>
      
        <content type="html"><![CDATA[<h1 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h1><ul><li>一个获取资源的接口，类似于<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/AJAX" target="_blank" rel="noopener">ajax</a></li><li>是基于 <code>Promise</code>之上设计，旧版本IE 完全不支持，须借助 <a href="https://github.com/stefanpenner/es6-promise" target="_blank" rel="noopener">polyfill</a>来兼容</li><li>提供了对 Request 和 Response （以及其他与网络请求有关的）对象的通用定义</li><li>发送请求或者获取资源，需要使用 window.fetch or WindowOrWorkerGlobalScope.fetch 方法。</li></ul><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><h3 id="资源路径（url-string）"><a href="#资源路径（url-string）" class="headerlink" title="资源路径（url string）"></a>资源路径（url string）</h3><ul><li>他必须接收一个需要请求的资源路径，返回一个<code>promise</code>对象，请求成功的数据返回到<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Response/Response" target="_blank" rel="noopener">Responese</a>回调中，请求失败的信息返回到 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Request" target="_blank" rel="noopener">Request</a>中。</li><li>当接收到一个代表错误的 HTTP状态码时，<code>fetch</code>返回的<code>promise</code>不会被标记为 <code>reject</code>而会被标记为<code>resolve</code>，比如状态码为 404，500.只有网络故障或请求被阻止时才被标记为<code>reject</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'https://api.apiopen.top/musicDetails1'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> response.json();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">myJson</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(myJson); <span class="comment">//&#123;code: 400, message: "404 Not Found", result: "https://api.apiopen.top/musicDetails1"&#125;</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><ul><li><code>fetch</code> 默认是不会从服务端发送接收或发送任何 <code>cookie</code>,如果需要则必须设置 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WindowOrWorkerGlobalScope/fetch#%E5%8F%82%E6%95%B0" target="_blank" rel="noopener">credentials</a>,自 2017/8 起默认的credentials政策变更为same-originFirefox也在61.0b13中改变默认值</li></ul><h3 id="config"><a href="#config" class="headerlink" title="[, config]"></a>[, config]</h3><ul><li>配置项对象，包括所有对请求的设置</li></ul><ol><li><p><code>method</code>: 请求使用的方法，如 GET、POST。</p></li><li><p><code>headers</code>: 请求的头信息，形式为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Headers" target="_blank" rel="noopener">Headers</a> 的对象或包含 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ByteString" target="_blank" rel="noopener">ByteString</a>值的对象字面量。</p></li><li><p><code>body</code>:<br> 请求的 <code>body</code>信息：<br> 可能是:<br>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob" target="_blank" rel="noopener">Blob</a>（ 表示一个不可变、原始数据的类文件对象）、<code>BufferSource</code> （ 用于表示自身为ArrayBuffer或者TypedArray提供对象的对象ArrayBufferView。）、<br>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FormData" target="_blank" rel="noopener">FormData</a>（表示表单数据的键值对的构造方式，经过它的数据可以使用<code>XMLHttpRequest.send()</code> 方法送出，本接口和此方法都相当简单直接。如果送出时的编码类型被设为 “multipart/form-data”，它会使用和表单一样的格式。）、<br>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams" target="_blank" rel="noopener">URLSearchParams</a> （接口定义了一些实用的方法来处理 URL 的查询字符串）<br>  或者 <code>USVString</code> 对象。</p>   <label>注意<code>GET</code> 或<code>HEAD</code>方法的请求不能包含 body 信息。</label></li><li><p><code>mode</code>: 请求的模式，如 <code>cors、 no-cors</code> 或者 <code>same-origin</code>。</p></li><li><p><code>credentials</code>: 请求的 <code>credentials</code>，如 <code>omit、same-origin</code> 或者 <code>include</code>。为了在当前域名内自动发送 cookie ， 必须提供这个选项， 从 Chrome 50 开始， 这个属性也可以接受 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FederatedCredential" target="_blank" rel="noopener">FederatedCredential</a> 实例或是一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/PasswordCredential" target="_blank" rel="noopener">PasswordCredential</a> 实例。</p><ul><li>如果需要跨域请求需设置为 “include”</li><li>如果只在同域内发送cookie 则设置为 “same-origin”</li><li>如果任何情况都不发送cookie 则设置为 “omit”</li></ul></li><li><p><code>cache</code>:  请求的 <code>cache</code> 模式: <code>default 、 no-store 、 reload 、 no-cache 、 force-cache</code> 或者 <code>only-if-cached</code> 。</p></li><li><p><code>redirect</code>: 可用的<code>redirect</code> 模式:<code>follow</code>(自动重定向), <code>error</code> (如果产生重定向将自动终止并且抛出一个错误), 或者<code>manual</code> (手动处理重定向). 在Chrome中，Chrome 47之前的默认值是 <code>follow</code>，从 Chrome 47开始是<code>manual</code>。</p></li><li><p><code>referrer</code>: 一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/USVString" target="_blank" rel="noopener">USVString</a> 可以是 <code>no-referrer、client</code>或一个<code>URL</code>。默认是<code>client</code>。</p></li><li><p><code>referrerPolicy</code>:指定引用HTTP头的值。可能是一个 <code>no-referrer、 no-referrer-when-downgrade、 origin、 origin-when-cross-origin、 unsafe-url 。</code></p></li><li><p><code>integrity</code>: 包括请求的<a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/%E5%AD%90%E8%B5%84%E6%BA%90%E5%AE%8C%E6%95%B4%E6%80%A7" target="_blank" rel="noopener">subresource integrity</a>值（例如：  sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=）。</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Fetch = <span class="function"><span class="keyword">function</span> (<span class="params">url,config</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span>(config) !== <span class="string">'object'</span> || config === <span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">throw</span> <span class="string">`Config needs to pass an object type`</span></span><br><span class="line">  <span class="keyword">let</span> data = config || &#123;&#125; ;</span><br><span class="line">  <span class="keyword">let</span> &#123;method = <span class="string">'GET'</span>, param = <span class="literal">null</span>, mode = <span class="string">"cors"</span>, cache = <span class="string">"no-cache"</span>,headers = &#123;<span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span>,</span><br><span class="line">    <span class="string">'content-type'</span>: <span class="string">'application/json'</span>&#125;, redirect = <span class="string">"follow"</span>, credentials = <span class="string">"include"</span>, referrer = <span class="string">"no-referrer"</span>&#125; = data;</span><br><span class="line">  <span class="comment">/*  // 传输 JSON 数据 需将 param 转换 </span></span><br><span class="line"><span class="comment">    JSON.stringify(param)</span></span><br><span class="line"><span class="comment">    //上传文件 需传输 formData 格式</span></span><br><span class="line"><span class="comment">    let formData = new FormData()</span></span><br><span class="line"><span class="comment">    let fileField = document.querySelector("#myFile")</span></span><br><span class="line"><span class="comment">    formData.append('title',"My File")</span></span><br><span class="line"><span class="comment">    formData.append('fileField ',fileField .files[0])</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span>  fetch(url,&#123;</span><br><span class="line">   method:method.toUpperCase(),</span><br><span class="line">   body:param,</span><br><span class="line">   mode,</span><br><span class="line">   cache,</span><br><span class="line">   headers,</span><br><span class="line">   redirect,</span><br><span class="line">   credentials,</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(res.ok) <span class="keyword">return</span> res.json() </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Network response fail："</span>+res.status)</span><br><span class="line">&#125;</span><br><span class="line">).catch(<span class="function"><span class="params">err</span>=&gt;</span><span class="built_in">console</span>.error(err))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Fetch(<span class="string">'https://api.apiopen.top/musicDetails1'</span>,&#123;<span class="attr">credentials</span>:<span class="string">'omit'</span>&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span><span class="built_in">console</span>.log(res)).catch(<span class="function"><span class="params">err</span>=&gt;</span><span class="built_in">console</span>.error(err))</span><br></pre></td></tr></table></figure><h3 id="Headers-constructor"><a href="#Headers-constructor" class="headerlink" title="Headers constructor"></a>Headers constructor</h3><ul><li>创建一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Headers" target="_blank" rel="noopener">headers</a> 对象</li></ul><h4 id="一个-headers-对象是一个简单的多名值对："><a href="#一个-headers-对象是一个简单的多名值对：" class="headerlink" title="一个 headers 对象是一个简单的多名值对："></a>一个 headers 对象是一个简单的多名值对：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> content = <span class="string">"Hello World"</span>;</span><br><span class="line"><span class="keyword">let</span> myHeaders = <span class="keyword">new</span> Headers();</span><br><span class="line">myHeaders.append(<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>);</span><br><span class="line">myHeaders.append(<span class="string">"Content-Length"</span>, content.length.toString());</span><br><span class="line">myHeaders.append(<span class="string">"X-Custom-Header"</span>, <span class="string">"ProcessThisImmediately"</span>);</span><br></pre></td></tr></table></figure><h4 id="可以传一个多维数组或者对象字面量："><a href="#可以传一个多维数组或者对象字面量：" class="headerlink" title="可以传一个多维数组或者对象字面量："></a>可以传一个多维数组或者对象字面量：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> content = <span class="string">"Hello World"</span>;</span><br><span class="line"><span class="keyword">let</span> myHeaders = <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">  <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>,</span><br><span class="line">  <span class="string">"Content-Length"</span>: content.length.toString(),</span><br><span class="line">  <span class="string">"X-Custom-Header"</span>: <span class="string">"ProcessThisImmediately"</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取和设置</span></span><br><span class="line"><span class="built_in">console</span>.log(myHeaders.has(<span class="string">"Content-Type"</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(myHeaders.has(<span class="string">"Set-Cookie"</span>)); <span class="comment">// false</span></span><br><span class="line">myHeaders.set(<span class="string">"Content-Type"</span>, <span class="string">"text/html"</span>);</span><br><span class="line">myHeaders.append(<span class="string">"X-Custom-Header"</span>, <span class="string">"AnotherValue"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(myHeaders.get(<span class="string">"Content-Length"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(myHeaders.getAll(<span class="string">"X-Custom-Header"</span>)); <span class="comment">// ["ProcessThisImmediately", "AnotherValue"]</span></span><br><span class="line"> </span><br><span class="line">myHeaders.delete(<span class="string">"X-Custom-Header"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myHeaders.getAll(<span class="string">"X-Custom-Header"</span>)); <span class="comment">// [ ]</span></span><br></pre></td></tr></table></figure><p>如果使用了一个不合法的HTTP Header属性名，那么Headers的方法通常都抛出 TypeError 异常。如果不小心写入了一个不可写的属性，也会抛出一个 TypeError 异常。除此以外的情况，失败了并不抛出异常。</p><h4 id="检查-content-type-是否正确"><a href="#检查-content-type-是否正确" class="headerlink" title="检查 content type 是否正确"></a>检查 content type 是否正确</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fetch(myRequest).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(response.headers.get(<span class="string">"content-type"</span>) === <span class="string">"application/json"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> response.json().then(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// process your JSON further</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Oops, we haven't got JSON!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Response-对象"><a href="#Response-对象" class="headerlink" title="Response 对象"></a>Response 对象</h3><ul><li><code>fetch</code> 返回的对象</li></ul><h4 id="对象中常用的属性"><a href="#对象中常用的属性" class="headerlink" title="对象中常用的属性"></a>对象中常用的属性</h4><ol><li>status： 响应状态码 如 200 404 等</li><li>statusText：返回和状态码对应信息</li><li>ok 检查状态码是否 在 200-299之间，返回true or false</li></ol><h2 id="检查环境支持度"><a href="#检查环境支持度" class="headerlink" title="检查环境支持度"></a>检查环境支持度</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.fetch) &#123;</span><br><span class="line">    <span class="comment">// run my fetch request here</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// do something with XMLHttpRequest?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p><img src="/static/img/fetch.png" alt="fetch"></p><p><a href="https://fetch.spec.whatwg.org/" target="_blank" rel="noopener">Fetch规范</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fetch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>filter</title>
      <link href="/2019/06/21/filter/"/>
      <url>/2019/06/21/filter/</url>
      
        <content type="html"><![CDATA[<h1 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h1><ul><li>将模糊或者颜色偏移等图像效果用于元素，通常用于调整图像，背景和边框的渲染</li><li>css 标准中已内置一些预定义效果的函数，也可通过url使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Element/filter" target="_blank" rel="noopener">SVG滤镜</a></li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* URL to SVG filter */</span></span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">url</span>(<span class="selector-tag">filter</span><span class="selector-class">.svg</span><span class="selector-id">#id</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &lt;filter-function&gt; values */</span></span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">blur</span>(5<span class="selector-tag">px</span>);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">brightness</span>(0<span class="selector-class">.4</span>);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">contrast</span>(200%);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">drop-shadow</span>(16<span class="selector-tag">px</span> 16<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> <span class="selector-tag">blue</span>);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">grayscale</span>(50%);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">hue-rotate</span>(90<span class="selector-tag">deg</span>);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">invert</span>(75%);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">opacity</span>(25%);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">saturate</span>(30%);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">sepia</span>(60%);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Multiple filters */</span></span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">contrast</span>(175%) <span class="selector-tag">brightness</span>(3%);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Global values */</span></span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">inherit</span>;</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">initial</span>;</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">unset</span>;</span><br></pre></td></tr></table></figure><h2 id="滤镜属性"><a href="#滤镜属性" class="headerlink" title="滤镜属性"></a>滤镜属性</h2><ul><li>需要设定某一函数的值。如果该值无效，函数返回“none“。</li></ul><h3 id="url"><a href="#url" class="headerlink" title="url()"></a>url()</h3><ul><li>url 函数接收一个XML文件，该文件是一个<code>SVG filter</code>，并且包含一个ID值 来指定哪一个滤镜<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span><span class="selector-pseudo">:url(resources.svg</span><span class="selector-id">#c1</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="blur"><a href="#blur" class="headerlink" title="blur()"></a>blur()</h3><ul><li>定义模糊度</li><li>可以接受css长度单位，不接受百分比<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span><span class="selector-pseudo">:blur(5px)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="brightness"><a href="#brightness" class="headerlink" title="brightness()"></a>brightness()</h3><ul><li>定义亮度</li><li>默认为1， 1-0 逐渐变暗，1以上逐渐变亮 </li><li>可以是百分比， 不能为负数</li></ul><h3 id="contrast"><a href="#contrast" class="headerlink" title="contrast()"></a>contrast()</h3><ul><li>定义对比度 </li><li>1-0 逐渐变成灰黑 1以上颜色逐渐变艳丽</li><li>可以是百分比， 不能为负数</li></ul><h3 id="drop-shadow"><a href="#drop-shadow" class="headerlink" title="drop-shadow()"></a>drop-shadow()</h3><ul><li>定义阴影效果，合成在图像下面，</li><li>参数 和 <code>shadow</code>, <code>box-shadow</code> 相似 </li><li>和<code>shadow</code>, <code>box-shadow</code>属性不同之处在于通过filter，一些浏览器为了提升性能会提供硬件加速。<br>  传参顺序从左至右：<ol><li>水平偏移距离正值右偏，负值左偏（offset-x）。<label>必传</label></li><li>垂直偏移距离正值向下偏，负值上偏（offset-y）。<label>必传</label></li><li>一个length值(表示距离尺寸的一种css数据格式) 值越大，越模糊阴影会变得更大更淡.）<label>不允许负值</label> 默认为0 （blur-radius）<label>可选</label></li><li>一个length值，正值会使阴影扩张和变大，负值会是阴影缩小，默认 0</li><li>color 色值，在Gecko (Firefox), Presto (Opera)和Trident (Internet Explorer)中， 会应用<code>color</code> 属性的值,颜色值省略，WebKit中阴影是透明的。</li></ol></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span><span class="selector-pseudo">:drop-shadow(16px</span> 16<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> <span class="selector-tag">black</span>)</span><br></pre></td></tr></table></figure><h3 id="grayscale"><a href="#grayscale" class="headerlink" title="grayscale()"></a>grayscale()</h3><ul><li>定义灰度</li><li>取值0 - 1的数值之间，可设置百分比，不可为负数<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span><span class="selector-pseudo">:grayscale(50</span>%);</span><br></pre></td></tr></table></figure></li></ul><h3 id="hue-rotate"><a href="#hue-rotate" class="headerlink" title="hue-rotate()"></a>hue-rotate()</h3><ul><li>定义颜色，色相旋转调整</li><li>单位 deg</li><li>可为负值</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">hue-rotate</span>(90<span class="selector-tag">deg</span>)</span><br></pre></td></tr></table></figure><h3 id="invert"><a href="#invert" class="headerlink" title="invert()"></a>invert()</h3><ul><li>反向输入图，定义转换比例</li><li>默认0  0%和100%之间，则是效果的线性乘子。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">invert</span>(100%)</span><br></pre></td></tr></table></figure></li></ul><h3 id="opacity"><a href="#opacity" class="headerlink" title="opacity()"></a>opacity()</h3><ul><li>转化图像的透明程度</li><li>类似于css的<code>opacity</code>属性 </li><li>1-0 逐渐变透明，支持百分比 ，不能为负数</li><li>和opacity属性不同之处在于通过filter，一些浏览器为了提升性能会提供硬件加速。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">opacity</span>(50%)</span><br></pre></td></tr></table></figure></li></ul><h3 id="saturate"><a href="#saturate" class="headerlink" title="saturate()"></a>saturate()</h3><ul><li>定义图像饱和度</li><li>1-0 至完全不包和，1为正常， 1以上饱和度更高，更艳丽，支持百分比</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span><span class="selector-pseudo">:saturate(369</span>%)</span><br></pre></td></tr></table></figure><h3 id="sepia"><a href="#sepia" class="headerlink" title="sepia()"></a>sepia()</h3><ul><li>定义深褐色的色度</li><li>0 - 1 逐渐变为深褐色 支持百分比，不支持负数</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">sepia</span>(100%)</span><br></pre></td></tr></table></figure><h3 id="组合函数"><a href="#组合函数" class="headerlink" title="组合函数"></a>组合函数</h3><ul><li>可以将任意数量的函数一起控制渲染，其中有一个不符合规范将全部失效<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span><span class="selector-pseudo">:sepia(100</span>%) <span class="selector-tag">saturate</span>(369%) <span class="selector-tag">opacity</span>(50%)</span><br></pre></td></tr></table></figure></li></ul><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p><img src="/static/img/filter.png" alt="filter"></p>]]></content>
      
      
      
        <tags>
            
            <tag> filter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>setProperty</title>
      <link href="/2019/06/18/setProperty/"/>
      <url>/2019/06/18/setProperty/</url>
      
        <content type="html"><![CDATA[<h1 id="css3-原生-var-变量"><a href="#css3-原生-var-变量" class="headerlink" title="css3 原生 var 变量"></a>css3 原生 var 变量</h1><ul><li>可以降低维护成本，有更高性能，文件更高压缩率。</li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ol><li><p>声明 <code>--*</code></p><ul><li><code>*</code> 表示变量名称，对于命名不能包含特殊字符（ $，[，^，(，%  ）等等</li><li>必须在块级（<code>{}</code>）区域内声明,且只能给属性名的值，设值，不能给属性设置<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">     <span class="attribute">--color</span>: purple; </span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用</p></li></ol><ul><li>通过<code>var(x,y)</code>函数调用</li><li>函数的可选第二个参数用作回退值。如果第一个参数引用的自定义属性无效，则该函数将使用第二个值。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="CSS变量不合法的缺省特性"><a href="#CSS变量不合法的缺省特性" class="headerlink" title="CSS变量不合法的缺省特性"></a>CSS变量不合法的缺省特性</h2><ul><li>CSS变量，只要语法是正确的，就会作为正常的声明解析</li><li>如果发现变量值是不合法的，就让默认值代替<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">--color</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--color, #000);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 等同于 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="CSS变量不合法的空格尾随特性"><a href="#CSS变量不合法的空格尾随特性" class="headerlink" title="CSS变量不合法的空格尾随特性"></a>CSS变量不合法的空格尾随特性</h2><ul><li>变量值后面会尾随空格,所以变量值最好加单位<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">--width</span>: <span class="number">20</span>;</span><br><span class="line"> <span class="attribute">width</span>: <span class="built_in">var</span>(--width)<span class="built_in">px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 等同于 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="comment">/* 宽度失效 */</span></span><br><span class="line"> <span class="attribute">width</span>: <span class="number">20</span> px; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="CSS变量的相互传递特性"><a href="#CSS变量的相互传递特性" class="headerlink" title="CSS变量的相互传递特性"></a>CSS变量的相互传递特性</h2><ul><li>声明CSS变量时候可以引入其他变量<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">--width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">--width</span>: <span class="built_in">var</span>(--width);</span><br><span class="line">  <span class="attribute">--height</span>: <span class="built_in">calc</span>( var(--width) / <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p><img src="/static/img/var.png" alt="var"></p><hr><h1 id="setProperty"><a href="#setProperty" class="headerlink" title="setProperty"></a>setProperty</h1><ul><li>给一个样式设置新值 <code>dom.style.setProperty(propertyName, value, priority);</code></li></ul><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ol><li>propertyName 必须是一个字符串，代表被更改的CSS属性。</li><li><code>value</code> 对应 <code>propertyName</code> css 属性值。如果未传，则为空字符串</li><li>priority 设置css 的权重 “important” ,”undefined”, “”</li><li>如果不设置权重 则可简写为 <code>dom.style.propertyName = &quot;value&quot;</code></li></ol><hr><h1 id="getPropertyPriority"><a href="#getPropertyPriority" class="headerlink" title="getPropertyPriority"></a>getPropertyPriority</h1><ul><li>获取一个样式属性的权重</li><li><code>dom.getPropertyPriority(&#39;property&#39;)</code></li><li>返回值 ‘important’ 或  ‘’</li></ul><hr><h1 id="removeProperty"><a href="#removeProperty" class="headerlink" title="removeProperty"></a>removeProperty</h1><ul><li>删除属性 <code>dom.getPropertyPriority(&#39;property&#39;)</code></li><li>返回被删除的属性值</li><li>多个单词组成的属性要用连字符连接各个单词，不接收驼峰命名法的形式。</li></ul><hr><h1 id="getComputedStyle"><a href="#getComputedStyle" class="headerlink" title="getComputedStyle"></a>getComputedStyle</h1><ul><li>兼容 IE9及以上</li><li>获取当前元素所以最终使用的 CSS属性值</li><li>返回一个实时的 <code>CSSStyleDeclaration</code> 对象，当元素的样式更改时，它会自动更新本身。</li></ul><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><ul><li><code>let styles = window.getComputedStyle(element, [pseudoElt]);</code></li><li><code>element</code>: Dom 元素</li><li><code>[pseudoElt]</code>: 可选指定一个伪元素 （在Gecko2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)之前版本，参数pseudoElt是必要的。如果为null，则不指定其他主要浏览器必须指定此参数。Gecko已经更改为匹配其他浏览器的行为。）</li></ul><h2 id="getComputedStyle-和-style-区别"><a href="#getComputedStyle-和-style-区别" class="headerlink" title="getComputedStyle 和 style 区别"></a><code>getComputedStyle</code> 和 <code>style</code> 区别</h2><ul><li><code>element.style</code> 同样可以获取 <code>css</code> 对象，可读写，而<code>getComputedStyle(el)</code> 只能读</li><li><code>element.style</code>返回已设置的样式属性,而 <code>getComputedStyle(el)</code> 会将所有属性给返回<br><code>getComputedStyle(el)</code><br><img src="/static/img/CSSStyleDeclaration.png" alt="CSSStyleDeclaration"><br><code>element.style</code><br><img src="/static/img/elStyle.png" alt="el.style"></li></ul><h2 id="defaultView"><a href="#defaultView" class="headerlink" title="defaultView"></a>defaultView</h2><ul><li>此属性只读。</li><li>在浏览器中，<code>document.defaultView</code> 返回window与文档关联的对象，或者null如果没有可用的对象。</li><li><code>getComputedStyle</code> 不仅挂载在 window对象上，而且还挂载在 <code>defaultView</code>对象上</li><li>因为在firefox3.6上访问（iframe)必须 <code>defaultView</code>对象上访问</li></ul><h2 id="css属性解析值（resolved-value），计算值（computed-value）-和-应用值（used-value）"><a href="#css属性解析值（resolved-value），计算值（computed-value）-和-应用值（used-value）" class="headerlink" title="css属性解析值（resolved value），计算值（computed value） 和 应用值（used value）"></a>css属性解析值（resolved value），计算值（computed value） 和 应用值（used value）</h2><ul><li>属于 <code>getComputedStyle</code>方法返回的值，大多数属性是一个计算值，有些是应用值</li></ul><h3 id="计算值（computed-value）"><a href="#计算值（computed-value）" class="headerlink" title="计算值（computed value）"></a>计算值（computed value）</h3><ul><li>子元素继承父元素的值，通过指定值计算出来</li><li>处理特殊的值 <code>inherit</code>(元素获取其父元素的计算值),<code>initial</code>(属性的初始默认值),<code>unset</code>(优先用 <code>inherit</code> 的样式，其次会应该用<code>initial</code>的样式)</li><li>进行计算，达到对应属性值的要求</li><li>计算值所需要的计算通常包括将相对值（em,rem %,)转换成绝对值（px）</li></ul><h3 id="应用值（used-value）"><a href="#应用值（used-value）" class="headerlink" title="应用值（used value）"></a>应用值（used value）</h3><ul><li>完成所有计算后最终使用的值</li></ul><p>计算出CSS属性的最终值有三个步骤</p><ol><li>指定值（Specified value） 从样式表中接收（按权重规则来接收）未设置将使用继承值或者默认值</li><li>按规范算出计算值（span 指定 position: absolute 后display 变为 block） </li><li>计算布局（尺寸比如 auto 或 百分数 换算为像素值） 最后就是应用值， 只能使用 <code>getComputedStyle</code>来获取最终的应用值</li></ol>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> setProperty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zoomAndScale</title>
      <link href="/2019/06/17/zoomAndScale/"/>
      <url>/2019/06/17/zoomAndScale/</url>
      
        <content type="html"><![CDATA[<h1 id="zoom"><a href="#zoom" class="headerlink" title="zoom"></a><code>zoom</code></h1><ul><li>不是标准属性</li><li>对文字最小缩到 12pX</li><li>缩放位置相对于左上角缩放</li><li>调整时改变了元素占据的空间大小、尺寸，等比例缩放元素</li><li><code>*zoom:1</code> 用来给老版本IE浏览器（IE6/7）清除浮动</li><li>由于缩小改变原来的空间尺寸，所以整个页面会重新渲染<h2 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h2></li></ul><ol><li>百分比 <code>zoom:50%</code> 缩小到原来的一半</li><li>数值 <code>zoom:0.5</code> 等同 <code>zoom:50%</code>，不能为负数</li><li><code>zoom:normal</code> 等同于 <code>zoom:1</code> </li></ol><h1 id="scale"><a href="#scale" class="headerlink" title="scale"></a>scale</h1><ul><li>等比例缩放元素  <code>transform: scale(1)</code></li><li>对文字等比缩放</li><li>改变时不会从新渲染页面</li><li>默认居中缩放,原始尺寸不变</li><li>属于 <code>w3c</code> 规范 IE9以上都支持此属性</li><li>使用 transform 会覆盖以前的 transform 属性，即 以前 transform 对应的属性将被全部替换</li><li>可控制方向 transform:scale(x,y), transform:scaleX(x)  or transform:scaleY(y)<h2 id="单位-1"><a href="#单位-1" class="headerlink" title="单位"></a>单位</h2></li></ul><ol><li>只能是数值</li><li>可以为负数</li></ol><h2 id="chrome-中-同时使用两者效果会叠加"><a href="#chrome-中-同时使用两者效果会叠加" class="headerlink" title="chrome 中  同时使用两者效果会叠加"></a>chrome 中  同时使用两者效果会叠加</h2><h1 id="transform-变换"><a href="#transform-变换" class="headerlink" title="transform 变换"></a>transform 变换</h1><ul><li>支持 3D 变换</li><li>可以 拉伸，压缩，旋转，偏移目标元素</li><li>只能转换由盒子模型定位的元素。根据经验，如果元素具有display: block，则由盒模型定位元素。（转换行内元素，须设置display样式属性）</li><li>支持 IE10以上 IE9 需加私有前缀 -ms-（IE） -webkit-(chrome，safari) -o-（opera）-moz- （Firefox)<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><h3 id="skew"><a href="#skew" class="headerlink" title="skew"></a>skew</h3></li><li>对目标对象进行歪斜变换 <code>transform: skew()</code></li></ul><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul><li>X,Y <code>transform: skew(X,Y)</code>  表示沿着 X轴和 Y轴 扭曲角度 默认为0</li></ul><h4 id="单位-2"><a href="#单位-2" class="headerlink" title="单位"></a>单位</h4><ol><li>degress (度)  <code>transform: skew(100deg,100deg)</code></li><li>grad (百分度)  <code>transform: skew(10grad,10grad)</code></li><li>rad（弧度）  一个完整的圆 为2π <code>transform: skew(10rad,10rad)</code></li><li>turn (圈数) 一个完整的圆 为1turn <code>transform: skew(0.25turn，1.2turn)</code></li><li>可以为负数</li></ol><h3 id="scale-1"><a href="#scale-1" class="headerlink" title="scale"></a>scale</h3><ul><li>等比例缩放元素 <code>transform: scale(1)</code><h4 id="单位-3"><a href="#单位-3" class="headerlink" title="单位"></a>单位</h4></li></ul><ol><li>只能是数值</li><li>可以为负数</li></ol><h3 id="rotate"><a href="#rotate" class="headerlink" title="rotate"></a>rotate</h3><ul><li>旋转元素 <code>transform: rotate(x,y)</code></li><li>默认以目标对象中心为圆点转动<h4 id="单位-4"><a href="#单位-4" class="headerlink" title="单位"></a>单位</h4>同 <code>skew</code></li></ul><h3 id="translate"><a href="#translate" class="headerlink" title="translate"></a>translate</h3><ul><li>平移目标元素 <code>transform: translate(x,y)</code></li></ul><h4 id="单位-5"><a href="#单位-5" class="headerlink" title="单位"></a>单位</h4><p>同 <code>skew</code></p><hr><h1 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h1><ul><li>平滑的改变CSS的值</li><li>只要CSS 属性值发生改变都会实现过渡效果</li><li>支持IE10 以上<h2 id="类型-1"><a href="#类型-1" class="headerlink" title="类型"></a>类型</h2></li></ul><h3 id="transition-property"><a href="#transition-property" class="headerlink" title="transition-property"></a>transition-property</h3><ul><li>指定过度属性 <code>transition-property:height</code>   height 就会参与过渡</li></ul><h3 id="transition-duration"><a href="#transition-duration" class="headerlink" title="transition-duration"></a>transition-duration</h3><ul><li>指定持续时间  <code>transition-duration:2s</code>  指过渡持续 2S</li></ul><h4 id="单位-6"><a href="#单位-6" class="headerlink" title="单位"></a>单位</h4><ul><li>s (秒) ms(毫秒)<h3 id="transition-delay"><a href="#transition-delay" class="headerlink" title="transition-delay"></a>transition-delay</h3></li><li>过渡开始作用之前需要等待的时间。 <code>transition-delay:0.2s</code> 等待0.2S 后执行过渡<h4 id="单位-7"><a href="#单位-7" class="headerlink" title="单位"></a>单位</h4></li><li>s (秒) ms(毫秒)<h3 id="transition-timing-function"><a href="#transition-timing-function" class="headerlink" title="transition-timing-function"></a>transition-timing-function</h3></li><li>指定动画运动时的节奏 <code>transition-timing-function:ease</code> 匀速运行</li></ul><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><ul><li>ease</li><li>ease-in 由慢到快</li><li>ease-out 由快到慢</li><li>ease-in-out 由慢到快在到慢</li><li>linear 线性过度</li><li>step-start </li><li>step-end</li><li>steps(5,end)</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/timing-function" target="_blank" rel="noopener">其它参数设置</a></li></ul><h2 id="transition-简写"><a href="#transition-简写" class="headerlink" title="transition 简写"></a>transition 简写</h2><ul><li>transition: property-color duration timing-function; <code>transition: height 0.3s ease;</code></li></ul><hr><h1 id="animations"><a href="#animations" class="headerlink" title="animations"></a>animations</h1><ul><li>用来指定一组或多组动画，每组之间用逗号相隔</li><li>支持IE10以上<h2 id="类型-2"><a href="#类型-2" class="headerlink" title="类型"></a>类型</h2></li></ul><h3 id="webkit-animation-name"><a href="#webkit-animation-name" class="headerlink" title="-webkit-animation-name;"></a>-webkit-animation-name;</h3><ul><li>指定应用的一系列动画，每个名称代表一个由@keyframes定义的动画序列</li></ul><h4 id="值"><a href="#值" class="headerlink" title="值"></a>值</h4><ul><li>none 默认静止</li><li>定义 @keyframes 后的 名字 </li><li>由大小写不敏感的字母a-z、数字0-9、下划线(_)和/或横线(-)组成。第一个非横线字符必须是字母，数字不能在字母前面，不允许两个横线出现在开始位置。<h5 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cylon_eye</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-animation-name</span>: resize;</span><br><span class="line">&#125;</span><br><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> resize &#123; <span class="selector-tag">from</span> &#123; <span class="attribute">margin-left</span>: -<span class="number">20%</span>; &#125; <span class="selector-tag">to</span> &#123; <span class="attribute">margin-left</span>: <span class="number">100%</span>; &#125;  &#125;</span><br><span class="line">        @<span class="keyword">keyframes</span> resize &#123; <span class="selector-tag">from</span> &#123; <span class="attribute">margin-left</span>: -<span class="number">20%</span>; &#125; <span class="selector-tag">to</span> &#123; <span class="attribute">margin-left</span>: <span class="number">100%</span>; &#125;  &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="webkit-animation-duration"><a href="#webkit-animation-duration" class="headerlink" title="-webkit-animation-duration"></a>-webkit-animation-duration</h3><ul><li>指定一个动画周期的时长</li><li>默认为 0 无动画</li></ul><h4 id="单位-8"><a href="#单位-8" class="headerlink" title="单位"></a>单位</h4><ul><li>s , ms <code>-webkit-animation-duration: 1.5s;</code></li></ul><h3 id="webkit-animation-iteration-count"><a href="#webkit-animation-iteration-count" class="headerlink" title="-webkit-animation-iteration-count"></a>-webkit-animation-iteration-count</h3><ul><li>定义动画运行的次数 <code>-webkit-animation-iteration-count:4</code></li></ul><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li>默认运行一次</li><li>infinite 无限循环</li><li>播放的次数 不可为负值. 可以用小数定义循环(0.5 将播放动画到关键帧的一半 </li></ul><h3 id="webkit-animation-direction"><a href="#webkit-animation-direction" class="headerlink" title="-webkit-animation-direction"></a>-webkit-animation-direction</h3><ul><li>指示动画是否反向播放 <code>-webkit-animation-direction: alternate;</code></li></ul><h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><ul><li>normal 默认 每个动画循环结束，动画重置到起点重新开始</li><li>alternate  动画交替反向运行，反向运行时，动画按步后退，同时，带时间功能的函数也反向 计数取决于开始时是奇数迭代还是偶数迭代</li><li>reverse 反向运行动画，每周期结束动画由尾到头运行。</li><li>alternate-reverse 动画第一次运行时是反向的，然后下一次是正向，后面依次循环。决定奇数次或偶数次的计数从1开始。<br>  -webkit-animation-timing-function: ease-in-out;<h3 id="animation-timing-function"><a href="#animation-timing-function" class="headerlink" title="animation-timing-function"></a>animation-timing-function</h3></li><li>每一个动画周期中执行的节奏，作用于一个关键帧周期而非整个动画周期<h4 id="值-1"><a href="#值-1" class="headerlink" title="值"></a>值</h4>同 <code>transition-timing-function</code> </li></ul><h2 id="简写语法"><a href="#简写语法" class="headerlink" title="简写语法"></a>简写语法</h2><ul><li>animation-name，animation-duration, animation-timing-function，animation-delay，animation-iteration-count，animation-direction，animation-fill-mode 和 animation-play-state 属性的一个简写属性形式<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cylon_eye</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right,</span><br><span class="line">      rgba(0, 0, 0, .9) <span class="number">25%</span>,</span><br><span class="line">      <span class="built_in">rgba</span>(0, 0, 0, .1) <span class="number">50%</span>,</span><br><span class="line">      <span class="built_in">rgba</span>(0, 0, 0, .9) <span class="number">75%</span>);</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line"><span class="comment">/* 调用动画 指定对应 持续时间 运动时的节奏 延迟时间 循环次数 对应动画 */</span></span><br><span class="line">  <span class="attribute">-webkit-animation</span>: <span class="number">4s</span> linear <span class="number">0s</span> infinite alternate move_eye;</span><br><span class="line">          <span class="attribute">animation</span>: <span class="number">4s</span> linear <span class="number">0s</span> infinite alternate move_eye;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 定义动画 */</span></span><br><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> move_eye &#123; <span class="selector-tag">from</span> &#123; <span class="attribute">margin-left</span>: -<span class="number">20%</span>; &#125; <span class="selector-tag">to</span> &#123; <span class="attribute">margin-left</span>: <span class="number">100%</span>; &#125;  &#125;</span><br><span class="line">        @<span class="keyword">keyframes</span> move_eye &#123; <span class="selector-tag">from</span> &#123; <span class="attribute">margin-left</span>: -<span class="number">20%</span>; &#125; <span class="selector-tag">to</span> &#123; <span class="attribute">margin-left</span>: <span class="number">100%</span>; &#125;  &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zoom and transform:scale </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vueNotes</title>
      <link href="/2019/06/13/vueNotes/"/>
      <url>/2019/06/13/vueNotes/</url>
      
        <content type="html"><![CDATA[<h2 id="vue-框架中遇到的问题"><a href="#vue-框架中遇到的问题" class="headerlink" title="vue 框架中遇到的问题"></a>vue 框架中遇到的问题</h2><p>###可以取到 data 中的数据，取不到 props 中的数据，可以通过 computed 或者 watch 属性监听变化</p><h3 id="如果想要组件或者原生HTML节点重新渲染可以使用-v-if"><a href="#如果想要组件或者原生HTML节点重新渲染可以使用-v-if" class="headerlink" title="如果想要组件或者原生HTML节点重新渲染可以使用 v-if"></a>如果想要组件或者原生HTML节点重新渲染可以使用 v-if</h3><h3 id="使用-prototype-挂载自定义方法或插件"><a href="#使用-prototype-挂载自定义方法或插件" class="headerlink" title="使用 prototype 挂载自定义方法或插件"></a>使用 prototype 挂载自定义方法或插件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$bus = Bus;</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">Vue.use(bus);</span><br></pre></td></tr></table></figure><h2 id="axios-问题"><a href="#axios-问题" class="headerlink" title="axios 问题"></a>axios 问题</h2><h3 id="接收二进制流文件乱码问题。"><a href="#接收二进制流文件乱码问题。" class="headerlink" title="接收二进制流文件乱码问题。"></a>接收二进制流文件乱码问题。</h3><p><strong>1. 须将axios 配置中的<code>responseType</code>设置为’arraybuffer’，这样就不会让表格出现乱码现象；</strong><br><strong>2. 如果要动态设置文件名则需要让后台将名字设置到响应头中，否则将是一个乱码的文件名；</strong><br><strong>3. 然后通过<code>&lt;a&gt;&lt;/a&gt;</code> 标签的特性来，自动点击下载文件；</strong><br><strong>4. 如果要兼容IE则需要利用<code>navigator.msSaveOrOpenBlob</code>方法；</strong><br><strong>5. 兼容Firefox 须将<code>&lt;a&gt;&lt;/a&gt;</code> 标签添加到<code>body</code>中，最后再移除<code>&lt;a&gt;&lt;/a&gt;</code> 标签</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// axios config</span></span><br><span class="line"> config = &#123;</span><br><span class="line">     responseType: <span class="string">'arraybuffer'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回数据处理</span></span><br><span class="line">getUserInfoExport(data).then(<span class="function">(<span class="params">&#123;data,headers&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> blob = <span class="keyword">new</span> Blob([data], &#123; <span class="attr">type</span>: <span class="string">'application/vnd.ms-excel'</span> &#125;) <span class="comment">// 将服务端返回的文件流（二进制）excel文件转化为blob</span></span><br><span class="line">        <span class="keyword">let</span> fileName = headers.filename</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.navigator &amp;&amp; <span class="built_in">window</span>.navigator.msSaveOrOpenBlob) &#123; <span class="comment">// IE10+</span></span><br><span class="line">          <span class="built_in">window</span>.navigator.msSaveOrOpenBlob(blob, fileName)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> objectUrl = (<span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL).createObjectURL(blob)</span><br><span class="line">          <span class="keyword">let</span> downFile = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">          downFile.style.display = <span class="string">'none'</span></span><br><span class="line">          downFile.href = objectUrl</span><br><span class="line">          downFile.download = fileName <span class="comment">// 下载后文件名</span></span><br><span class="line">          <span class="built_in">document</span>.body.appendChild(downFile)</span><br><span class="line">          downFile.click()</span><br><span class="line">          <span class="built_in">document</span>.body.removeChild(downFile) <span class="comment">// 下载完成移除元素</span></span><br><span class="line">          <span class="comment">// window.location.href = objectUrl</span></span><br><span class="line">          <span class="built_in">window</span>.URL.revokeObjectURL(objectUrl) <span class="comment">// 只要映射存在，Blob就不能进行垃圾回收，因此一旦不再需要引用，就必须小心撤销URL，释放掉blob对象。</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><p><a href="https://www.w3.org/TR/FileAPI/#url" target="_blank" rel="noopener">参考连接</a></p><h2 id="Node-中的问题"><a href="#Node-中的问题" class="headerlink" title="Node 中的问题"></a>Node 中的问题</h2><h3 id="获取本机-IP-地址"><a href="#获取本机-IP-地址" class="headerlink" title="获取本机 IP 地址"></a>获取本机 IP 地址</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>);</span><br><span class="line"><span class="keyword">const</span> ip = showObj(os.networkInterfaces());</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showObj</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="comment">/*     for (let devName in obj)&#123;</span></span><br><span class="line"><span class="comment">        let iface = obj[devName];</span></span><br><span class="line"><span class="comment">        for (let i = 0;i &lt; iface.length;i++)&#123;</span></span><br><span class="line"><span class="comment">            let alias = iface[i];</span></span><br><span class="line"><span class="comment">            if (alias.family === 'IPv4'</span></span><br><span class="line"><span class="comment">                &amp;&amp; alias.address !== '127.0.0.1'</span></span><br><span class="line"><span class="comment">                &amp;&amp; !alias.internal)&#123;</span></span><br><span class="line"><span class="comment">                return alias.address;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> devName <span class="keyword">in</span> obj)&#123;</span><br><span class="line">             <span class="keyword">let</span> iface = obj[devName];</span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">let</span> alias <span class="keyword">of</span> iface )&#123;</span><br><span class="line">                <span class="keyword">if</span> ( alias.family === <span class="string">'IPv4'</span>  &amp;&amp; alias.address !== <span class="string">'127.0.0.1'</span>  &amp;&amp; !alias.internal) <span class="keyword">return</span> alias.address;</span><br><span class="line">             &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开发方式"><a href="#开发方式" class="headerlink" title="开发方式"></a>开发方式</h2><p><strong>当我们确定组件层级时，最容易的方式就是先用已有的数据模型渲染一个不包含交互功能的UI。最好将渲染UI 和添加交互两个过程分开</strong></p><p>因为，编写一个应用的静态版本时，往往需要编写大量代码，不需要考虑太多交互细节；<br>添加交互细节功能时则需考虑大量细节，而不需要编写太多代码。<br>所以将两个过程分开进行更为合适。</p><h3 id="自上而下"><a href="#自上而下" class="headerlink" title="自上而下"></a>自上而下</h3><p>首先编写较高的组件，对于简单应用使用这种方式更加方便</p><h3 id="自下而上"><a href="#自下而上" class="headerlink" title="自下而上"></a>自下而上</h3><p>对于复杂应用先编写较为底层的组件，同时为底层组件编写测试的方式更加简单</p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue question </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>array method</title>
      <link href="/2019/05/20/array/"/>
      <url>/2019/05/20/array/</url>
      
        <content type="html"><![CDATA[<p>js 内置 7种类型</p><blockquote><p>基本类型: string number boolean null undefined symbol </p></blockquote><blockquote><p>引用类型: object</p></blockquote><hr><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><blockquote><p>es3/es5:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//改变原数组</span></span><br><span class="line"><span class="comment">//push :向数组尾部添加数据 可添加多位</span></span><br><span class="line"><span class="comment">//自定义push</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.push =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//pop :剪切尾部一项数据</span></span><br><span class="line"><span class="comment">//unshift : 向数组前方添加数据</span></span><br><span class="line"><span class="comment">//revesre : 翻转数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//splice : 第一个参数从第几位开始，第二个参数，截取几位，第三个参数覆盖截取的数据，返回截取的数据</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">sort :排序</span></span><br><span class="line"><span class="comment">一个函数为参数 ，同时 函数必须有两参数(a,b)</span></span><br><span class="line"><span class="comment">1. 函数返回值为正时 b在a前面</span></span><br><span class="line"><span class="comment">2. 为负数时 a在b前面</span></span><br><span class="line"><span class="comment">3. 0 时 不动</span></span><br><span class="line"><span class="comment">原理冒泡排序 */</span></span><br><span class="line"> <span class="keyword">var</span> obj = [&#123;<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">name</span>:<span class="string">'1'</span>&#125;,&#123;<span class="attr">age</span>:<span class="number">38</span>,<span class="attr">name</span>:<span class="string">'1'</span>&#125;,&#123;<span class="attr">age</span>:<span class="number">14</span>,<span class="attr">name</span>:<span class="string">'1'</span>&#125;,&#123;<span class="attr">age</span>:<span class="number">28</span>,<span class="attr">name</span>:<span class="string">'1'</span>&#125;], </span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.age - b.age;<span class="comment">//升序</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//打乱有序的数组</span></span><br><span class="line"></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random() - <span class="number">0.6</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//不改变原数组需要变量接收</span></span><br><span class="line">concat ： 拼接数组并返回 </span><br><span class="line"></span><br><span class="line">join : 将数组每一位以传进的参数链接</span><br><span class="line"></span><br><span class="line">slice : 第一个参数 开始截取为，第二个参数 截取到的位置</span><br><span class="line"></span><br><span class="line"><span class="comment">//将类数组转化为数组 </span></span><br><span class="line"><span class="keyword">var</span> arr=[].slice.call(<span class="built_in">arguments</span>)</span><br></pre></td></tr></table></figure></p></blockquote><hr><h4 id="string-methods"><a href="#string-methods" class="headerlink" title="string methods"></a>string methods</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str =<span class="string">'123'</span></span><br><span class="line">str.split(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//camelize: 连字符转驼峰</span></span><br><span class="line"><span class="keyword">const</span> camelizeRE = <span class="regexp">/-(\w)/g</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> camelize = cached((str: string): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> str.replace(camelizeRE, ( _, c) =&gt; c ? c.toUpperCase() : <span class="string">''</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//变量的值转换为 string 类型并返回</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">toString</span> (<span class="params">val: any</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val == <span class="literal">null</span></span><br><span class="line">    ? <span class="string">''</span></span><br><span class="line">    : <span class="keyword">typeof</span> val === <span class="string">'object'</span></span><br><span class="line">      ? <span class="built_in">JSON</span>.stringify(val, <span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line">      : <span class="built_in">String</span>(val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="interation-method"><a href="#interation-method" class="headerlink" title="interation method"></a>interation method</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">const</span> inventors = [</span><br><span class="line">      &#123; <span class="attr">first</span>: <span class="string">'Albert'</span>, <span class="attr">last</span>: <span class="string">'Einstein'</span>, <span class="attr">year</span>: <span class="number">1879</span>, <span class="attr">passed</span>: <span class="number">1955</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">first</span>: <span class="string">'Isaac'</span>, <span class="attr">last</span>: <span class="string">'Newton'</span>, <span class="attr">year</span>: <span class="number">1643</span>, <span class="attr">passed</span>: <span class="number">1727</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">first</span>: <span class="string">'Galileo'</span>, <span class="attr">last</span>: <span class="string">'Galilei'</span>, <span class="attr">year</span>: <span class="number">1564</span>, <span class="attr">passed</span>: <span class="number">1642</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">first</span>: <span class="string">'Marie'</span>, <span class="attr">last</span>: <span class="string">'Curie'</span>, <span class="attr">year</span>: <span class="number">1867</span>, <span class="attr">passed</span>: <span class="number">1934</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">first</span>: <span class="string">'Johannes'</span>, <span class="attr">last</span>: <span class="string">'Kepler'</span>, <span class="attr">year</span>: <span class="number">1571</span>, <span class="attr">passed</span>: <span class="number">1630</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">first</span>: <span class="string">'Nicolaus'</span>, <span class="attr">last</span>: <span class="string">'Copernicus'</span>, <span class="attr">year</span>: <span class="number">1473</span>, <span class="attr">passed</span>: <span class="number">1543</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">first</span>: <span class="string">'Max'</span>, <span class="attr">last</span>: <span class="string">'Planck'</span>, <span class="attr">year</span>: <span class="number">1858</span>, <span class="attr">passed</span>: <span class="number">1947</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">first</span>: <span class="string">'Katherine'</span>, <span class="attr">last</span>: <span class="string">'Blodgett'</span>, <span class="attr">year</span>: <span class="number">1898</span>, <span class="attr">passed</span>: <span class="number">1979</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">first</span>: <span class="string">'Ada'</span>, <span class="attr">last</span>: <span class="string">'Lovelace'</span>, <span class="attr">year</span>: <span class="number">1815</span>, <span class="attr">passed</span>: <span class="number">1852</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">first</span>: <span class="string">'Sarah E.'</span>, <span class="attr">last</span>: <span class="string">'Goode'</span>, <span class="attr">year</span>: <span class="number">1855</span>, <span class="attr">passed</span>: <span class="number">1905</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">first</span>: <span class="string">'Lise'</span>, <span class="attr">last</span>: <span class="string">'Meitner'</span>, <span class="attr">year</span>: <span class="number">1878</span>, <span class="attr">passed</span>: <span class="number">1968</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">first</span>: <span class="string">'Hanna'</span>, <span class="attr">last</span>: <span class="string">'Hammarström'</span>, <span class="attr">year</span>: <span class="number">1829</span>, <span class="attr">passed</span>: <span class="number">1909</span> &#125;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.prototype.filter()</span></span><br><span class="line"><span class="comment">// 1. Filter the list of inventors for those who were born in the 1500's</span></span><br><span class="line"><span class="keyword">let</span> Filters= inventors.filter(<span class="function"><span class="params">el</span> =&gt;</span> el.year&lt;<span class="number">1600</span> )</span><br><span class="line">     <span class="built_in">console</span>.table(Filters)</span><br><span class="line"><span class="comment">// Array.prototype.map()</span></span><br><span class="line"><span class="comment">// 2. Give us an array of the inventors' first and last names</span></span><br><span class="line"><span class="keyword">let</span> maps = inventors.map(<span class="function"><span class="params">el</span> =&gt;</span><span class="string">`<span class="subst">$&#123;el.first&#125;</span> <span class="subst">$&#123;el.last&#125;</span>`</span>)</span><br><span class="line">     <span class="built_in">console</span>.log(maps)</span><br><span class="line"><span class="comment">// Array.prototype.sort()</span></span><br><span class="line"><span class="comment">// 3. Sort the inventors by birthdate, oldest to youngest</span></span><br><span class="line">     inventors.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a.year-b.year)</span><br><span class="line">     <span class="built_in">console</span>.table(inventors)</span><br><span class="line"><span class="comment">// Array.prototype.reduce()</span></span><br><span class="line"><span class="comment">// 4. How many years did all the inventors live?</span></span><br><span class="line">     <span class="keyword">let</span> lives = inventors.reduce(<span class="function">(<span class="params">first,second</span>)=&gt;</span>(first+(second.passed - second.year)), <span class="number">0</span>)</span><br><span class="line">     <span class="built_in">console</span>.table(lives)</span><br><span class="line"><span class="comment">// 5. Sort the inventors by years lived</span></span><br><span class="line">     inventors.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> -((a.passed-a.year)-(b.passed-b.year)))</span><br><span class="line">     <span class="built_in">console</span>.table(inventors)</span><br><span class="line">      <span class="keyword">const</span> people = [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'Wes'</span>, <span class="attr">year</span>: <span class="number">1988</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'Kait'</span>, <span class="attr">year</span>: <span class="number">1986</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'Irv'</span>, <span class="attr">year</span>: <span class="number">1970</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'Lux'</span>, <span class="attr">year</span>: <span class="number">2015</span> &#125;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> coms = [</span><br><span class="line">     &#123; <span class="attr">text</span>: <span class="string">'Love this!'</span>, <span class="attr">id</span>: <span class="number">523423</span> &#125;,</span><br><span class="line">     &#123; <span class="attr">text</span>: <span class="string">'Super good'</span>, <span class="attr">id</span>: <span class="number">823423</span> &#125;,</span><br><span class="line">     &#123; <span class="attr">text</span>: <span class="string">'You are the best'</span>, <span class="attr">id</span>: <span class="number">2039842</span> &#125;,</span><br><span class="line">     &#123; <span class="attr">text</span>: <span class="string">'Ramen is my fav food ever'</span>, <span class="attr">id</span>: <span class="number">123523</span> &#125;,</span><br><span class="line">     &#123; <span class="attr">text</span>: <span class="string">'Nice Nice Nice!'</span>, <span class="attr">id</span>: <span class="number">542328</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Some and Every Checks</span></span><br><span class="line"><span class="comment">// Array.prototype.some() // is at least one person 19 or older?</span></span><br><span class="line"><span class="keyword">let</span> isNineOld = people.some(<span class="function"><span class="params">el</span>=&gt;</span> (<span class="keyword">new</span> <span class="built_in">Date</span>()).getFullYear() - el.year&gt;=<span class="number">19</span>)</span><br><span class="line"><span class="comment">// Array.prototype.every() // is everyone 19 or older?</span></span><br><span class="line"><span class="keyword">let</span> everyone=people.every(<span class="function"><span class="params">el</span>=&gt;</span> (<span class="keyword">new</span> <span class="built_in">Date</span>()).getFullYear() - el.year&gt;=<span class="number">19</span>)</span><br><span class="line"><span class="comment">// Array.prototype.find()</span></span><br><span class="line"><span class="comment">// Find is like filter, but instead returns just the one you are looking for</span></span><br><span class="line"><span class="comment">// find the comment with the ID of 823423</span></span><br><span class="line"><span class="keyword">let</span> comment = coms.find(<span class="function"><span class="params">el</span>=&gt;</span>el.id ===<span class="number">823423</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.prototype.findIndex()</span></span><br><span class="line"><span class="comment">// Find the comment with this ID</span></span><br><span class="line"><span class="keyword">let</span> i = coms.findIndex(<span class="function"><span class="params">el</span>=&gt;</span>el.id ===<span class="number">823423</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete the comment with the ID of 823423</span></span><br><span class="line"><span class="keyword">let</span> newcoms = [...coms.slice(<span class="number">0</span>,i),coms.slice(i+<span class="number">1</span>)]</span><br><span class="line">coms.splice(i,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 举一个比较典型的例子，看完后即明白 Label 的应用：（未添加 Label）</span></span><br><span class="line">        <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++)&#123;</span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span> ; j &lt; <span class="number">10</span> ; j++)&#123;</span><br><span class="line">                  <span class="keyword">if</span>( i == <span class="number">5</span> &amp;&amp; j == <span class="number">5</span> )&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">             num++;</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        alert(num); <span class="comment">// 循环在 i 为5，j 为5的时候跳出 j循环，但会继续执行 i 循环，输出 95</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对比使用了 Label 之后的程序：（添加 Label 后）</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">    outPoint:</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++)&#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span> ; j &lt; <span class="number">10</span> ; j++)&#123;</span><br><span class="line">              <span class="keyword">if</span>( i == <span class="number">5</span> &amp;&amp; j == <span class="number">5</span> )&#123;</span><br><span class="line">                    <span class="keyword">break</span> outPoint;</span><br><span class="line">              &#125;</span><br><span class="line">         num++;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    alert(num); <span class="comment">// 循环在 i 为5，j 为5的时候跳出双循环，返回到outPoint层继续执行，输出 55</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>algorithm</title>
      <link href="/2019/04/21/algorithm/"/>
      <url>/2019/04/21/algorithm/</url>
      
        <content type="html"><![CDATA[<h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><ul><li>时间复杂度: 一个算法执行所耗费的时间。<blockquote><p>一个算法花费的时间与算法中语句的执行次数成正比例,一个算法中的语句执行次数称为语句频度或时间频度。记为T(n)。<br>n称为问题的规模，当n不断变化时，时间频度T(n)也会不断变化，要知道变化时呈现什么规律就引入了时间复杂度概念<br>算法中基本操作重复执行的次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n),使得当n趋近于无穷大时，T（n)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作T(n)=Ｏ(f(n)),称Ｏ(f(n)) 为算法的渐进时间复杂度，简称时间复杂度。</p></blockquote></li><li>空间复杂度: 运行完一个程序所需内存的大小。<blockquote><p>一个算法所需的存储空间用f(n)表示。S(n)=O(f(n))　　其中n为问题的规模，S(n)表示空间复杂度。</p></blockquote></li><li>内排序：所有排序操作都在内存中完成； 外排序：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</li><li>稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面； 不稳定：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面；<br><img src="/static/img/big-o-graph.png" alt="复杂度"></li></ul><p><a href="https://liuchuanliang.com/time-and-space-complexity/" target="_blank" rel="noopener">更多信息</a></p><hr><h3 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h3><ul><li>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素(自己不能跟自己加起来等于target)。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure><p>解答：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; target</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 方法一  嵌套循环  时间复杂度：O(n^2) 空间：O(2)</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> [i,k] <span class="keyword">of</span> nums.entries())&#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">let</span> j = i+<span class="number">1</span>; j&lt; nums.length; j++) &#123;</span><br><span class="line">              <span class="keyword">if</span>(  (target - k) === nums[j]) &#123;</span><br><span class="line">               <span class="keyword">return</span>  [i,j];</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 方法二 嵌套循环 比 方法一 更快 </span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> len = nums.length;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> j = i+<span class="number">1</span>; j&lt;len; j++) &#123;</span><br><span class="line">                   <span class="keyword">if</span>( (target - nums[i]) === nums[j]) &#123;</span><br><span class="line">                   <span class="keyword">return</span>  [i,j];</span><br><span class="line">                 &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 方法三 has表   时间复杂度：O(n) 空间：O(n)</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存储对应的值 和 索引 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;userManage</span><br><span class="line">      <span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">      <span class="keyword">const</span> len = nums.length；</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++ ) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(m.has(nums[i]) &amp;&amp; m.get(nums[i]) !== i)&#123;</span><br><span class="line">            <span class="keyword">return</span> [m.get(nums[i]),i]</span><br><span class="line">        &#125;</span><br><span class="line">            m.set((target - nums[i]),i); </span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">      <span class="keyword">const</span> len = nums.length；</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++ ) &#123;</span><br><span class="line">        <span class="keyword">let</span>  res = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span>(m.has(res) &amp;&amp; m.get(res) !== i)&#123;</span><br><span class="line">            <span class="keyword">return</span> [m.get(res),i]</span><br><span class="line">        &#125;</span><br><span class="line">            m.set(nums[i],i); </span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="整数反转"><a href="#整数反转" class="headerlink" title="整数反转"></a>整数反转</h3><ul><li>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。<blockquote><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; x</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverse = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">let</span> res =( x+<span class="string">''</span> ).split(<span class="string">""</span>);</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(res[<span class="number">0</span>] !== <span class="string">'-'</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> num = <span class="built_in">parseInt</span>(res.reverse().join(<span class="string">''</span>),<span class="number">10</span>);</span><br><span class="line">         <span class="keyword">if</span>( num&gt; <span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">31</span>) <span class="number">-1</span>)&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">         &#125;</span><br><span class="line">       <span class="keyword">return</span> num; </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.reverse().pop();</span><br><span class="line">      <span class="keyword">let</span> num = <span class="built_in">parseInt</span>(res.join(<span class="string">''</span>),<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span>( num&gt; <span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">31</span>) <span class="number">-1</span>)&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">'-'</span> + num; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h3><ul><li><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数 。</p><blockquote><p>输入: 121 输出: true<br>输入: -121 输出: false  解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。<br>输入: 10  输出: false  解释: 从右向左读, 为 01 。因此它不是一个回文数。<br>注意 0 是回文数</p></blockquote></li><li><p>进阶: 不将整数转为字符串来解决这个问题 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; x</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">// 方法 一 转化未字符串</span></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span>  x &lt; <span class="number">0</span>? <span class="literal">false</span>: (<span class="built_in">parseInt</span>((x+<span class="string">''</span>).split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)) === x ? <span class="literal">true</span> : <span class="literal">false</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法二  中间数的右边反转后 等于 左边 </span></span><br><span class="line"><span class="comment"> * 提取中间数的右边 通过 *10 、 %10 来提取   </span></span><br><span class="line"><span class="comment"> * */</span> </span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">int</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(int &lt; <span class="number">0</span> ||  (int%<span class="number">10</span> === <span class="number">0</span> &amp;&amp; int !== <span class="number">0</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (int &gt; num )&#123;</span><br><span class="line">        num = num * <span class="number">10</span> + int % <span class="number">10</span>;</span><br><span class="line">        int = <span class="built_in">parseInt</span>(int/<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">console</span>.log(int,num)</span><br><span class="line">    <span class="keyword">return</span>  int === num || int === <span class="built_in">parseInt</span>(num/<span class="number">10</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sum of two numbers </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原生Ajax的封装 和 Axios的 二次封装</title>
      <link href="/2019/04/17/axios/"/>
      <url>/2019/04/17/axios/</url>
      
        <content type="html"><![CDATA[<h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><p>异步的JavaScript与XML技术（ Asynchronous JavaScript and XML ）<br>Ajax 核心使用 <code>XMLHttpRequest</code> （XHR）对象,首先由微软引入的一个特性；Ajax 不需要任何浏览器插件，能在不更新整个页面的前提下维护数据（可以向服务器请求额外的数据无需重载页面），但需要用户允许JavaScript在浏览器上执行。</p><h4 id="XHR-对象用法"><a href="#XHR-对象用法" class="headerlink" title="XHR 对象用法"></a>XHR 对象用法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLRequestHttp() <span class="comment">// 通过XMLHttpRequest 构造函数来创建</span></span><br></pre></td></tr></table></figure><h4 id="open-方法"><a href="#open-方法" class="headerlink" title="open 方法"></a>open 方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(method, url, <span class="keyword">async</span>, user, password);</span><br></pre></td></tr></table></figure><p>-<code>method</code>：要发送的请求类型 <code>GET、POST、PUT、DELETE</code> 。（必选）<br><code>url</code>：请求的URL （必选）</p><ul><li>axync ：布尔值，是否异步发送请求，默认true（true 时，已完成事务的通知可供事件监听使用，如果 <code>xhr.multipart</code>为true,则此参数必须为true；false 时，send()方法直到收到答复前不会返回）</li><li><code>user</code>：用户名用于认证用途 默认 null</li><li><code>password</code>：用户名用于认证用途 默认 null</li></ul><label>调用<code>open</code>方法不会真正发送请求，只是准备发送请求，并且URL有同源策略的限制（须和页面的主域、端口、协议一致，只要一处不符合要求将报错，数据将被拦截，可通过前后端配置，或使用代理来解决）。</label><h4 id="setRequestHeader"><a href="#setRequestHeader" class="headerlink" title="setRequestHeader()"></a>setRequestHeader()</h4><p>如需设置 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept" target="_blank" rel="noopener">Accpet</a> 头部信息，可通过<code>setRequestHeader()</code> 方法来设置</p><ul><li><code>Accpet</code> 头部信息：告知客户端可以处理的内容类型，用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="noopener">MIME类型</a> 表示；服务端使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type" target="_blank" rel="noopener">Content-Type</a> 通知客户端它的选择<br>媒体类型（ <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="noopener">MIME类型</a> ） ：一种标准，用来表示文档、文件或字 节流的性质和格式。 <a href="https://www.iana.org/assignments/media-types/media-types.xhtml" target="_blank" rel="noopener">完整类型列表</a><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type" target="_blank" rel="noopener">Content-Type</a> ：实体头部用于指示资源的 MIME 类型，告诉客户端实际返回的内容类型；浏览器会在某些情况下进行MIME查找，并不一定遵循此标题的值; 为了防止这种行为，可以将标题 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/X-Content-Type-Options" target="_blank" rel="noopener">X-Content-Type-Options</a> 设置为 <code>nosniff</code>。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.setRequestHeader(<span class="string">'Content-Type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="send-方法"><a href="#send-方法" class="headerlink" title="send 方法"></a>send 方法</h4><p> <strong>data：作为请求主体发送的数据，如果不需要通过请求主体发送数据，则必须传 null</strong><br>调用 send()发送请求，在收到响应后，响应的数据会自动填充XHR对象的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.send(data);</span><br></pre></td></tr></table></figure><h4 id="responseText-：从服务端返回的文本"><a href="#responseText-：从服务端返回的文本" class="headerlink" title="responseText ：从服务端返回的文本"></a>responseText ：从服务端返回的文本</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState === xhr.DONE) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;<span class="number">5</span>             <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="responseXML"><a href="#responseXML" class="headerlink" title="responseXML"></a>responseXML</h4><p>如果响应的 <code>Content-Type</code> 为<code>text/html</code> 或 <code>application/xml</code>，将保存包含响应数据的 <code>XML DOM</code> 文档，对于其它类型的数据则为 <code>null</code>, 也可通过<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/overrideMimeType" target="_blank" rel="noopener">overrideMimeType()</a>  强制 XHR 对象解析为 XML<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// overrideMimeType() 用来强制解析 response 为 XML</span></span><br><span class="line">xhr.overrideMimeType(<span class="string">'text/xml'</span>);</span><br><span class="line"></span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState === xhr.DONE) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123; <span class="number">8</span>       <span class="built_in">console</span>.log(xhr.responseXML);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h4 id="status"><a href="#status" class="headerlink" title="status"></a>status</h4><p>返回响应的HTTP状态码，请求完成前值为0，如果XHR 对象出错 值也是0， 200 表示请求成功，304表示请求的资源并没有修改，可直接使用浏览器种缓存的数据。 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status" target="_blank" rel="noopener">其它状态信息</a></p><h4 id="statusText"><a href="#statusText" class="headerlink" title="statusText"></a>statusText</h4><p> 返回响应的HTTP状态说明，<code>status</code> 值为 200 时  <code>statusText</code>为 “OK”</p><h4 id="readyState"><a href="#readyState" class="headerlink" title="readyState"></a>readyState</h4><p>返回一个当前XHR对象所处的活动状态</p><table><thead><tr><th>值</th><th>状态</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>UNSENT</td><td>代理被创建，但尚未调用 <code>open()</code> 方法。</td></tr><tr><td>1</td><td>OPENED</td><td><code>open()</code> 方法已经被调用。</td></tr><tr><td>2</td><td>HEADERS_RECEIVED</td><td><code>send()</code> 方法已经被调用，并且头部和状态已经可获得。</td></tr><tr><td>3</td><td>LOADING</td><td>下载中；响应体部分正在被接收 <code>responseText</code> 属性已经包含部分数据。</td></tr><tr><td>4</td><td>DONE</td><td>下载操作已完成。</td></tr></tbody></table><h4 id="onreadystatechange"><a href="#onreadystatechange" class="headerlink" title="onreadystatechange"></a>onreadystatechange</h4><p>当 readyState变化时会触发次事件函数，如果使用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/abort" target="_blank" rel="noopener">abort()</a> 取消请求则次事件函数不会被触发<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(xhr.readyState === XMLHttpRequest.DONE &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.responseText)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">参考资料</a></h5><h4 id="封装示例"><a href="#封装示例" class="headerlink" title="封装示例"></a>封装示例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ajax</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.url = obj.url ||<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">this</span>.type = obj.type || <span class="string">'get'</span>;</span><br><span class="line">    <span class="keyword">this</span>.data = obj.data ||&#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.success = obj.success || <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.error = obj.error || <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 再原型上创建方法</span></span><br><span class="line">Ajax.prototype.send = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span>  toStr = <span class="built_in">Object</span>.prototype.toString;</span><br><span class="line">    <span class="keyword">if</span> (self.data === <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> self.data !== <span class="string">'object'</span> &amp;&amp; <span class="built_in">Array</span>.isArray(obj)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 实例化 XML对象</span></span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            <span class="keyword">var</span> data = <span class="string">''</span>;</span><br><span class="line">            <span class="comment">// 序列化参数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> self.data)&#123;</span><br><span class="line">                    data += k + <span class="string">'='</span> + self.data[k] + <span class="string">'&amp;'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            data = data.substr(<span class="number">0</span>,data.length - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 接收回调函数</span></span><br><span class="line">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span> || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">                        isFunction(self.success)  &amp;&amp;  self.success(xhr.responseText)</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        isFunction(self.error)  &amp;&amp; self.error(xhr)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 初始化请求</span></span><br><span class="line">            <span class="keyword">if</span>(self.type.toLocaleLowerCase() === <span class="string">'post'</span>)&#123;</span><br><span class="line">                    xhr.open (<span class="string">'post'</span>,self.url,<span class="literal">true</span>)</span><br><span class="line">                    <span class="comment">// 设置请求头</span></span><br><span class="line">                    xhr.setRequestHeader(<span class="string">'Content-Type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">                    <span class="comment">//发送请求</span></span><br><span class="line">                    xhr.send(data)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    xhr.open(<span class="string">'get'</span>, self.url + <span class="string">"?"</span> + data,<span class="literal">true</span>)</span><br><span class="line">                    xhr.send(<span class="literal">null</span>)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> toStr.call(obj) === <span class="string">"[object Function]"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ajax = <span class="keyword">new</span> Ajax(&#123;</span><br><span class="line">     type:<span class="string">'post'</span>,</span><br><span class="line">     url:<span class="string">"/login"</span>,</span><br><span class="line">     data:&#123;</span><br><span class="line">         loginname:<span class="string">"admin"</span>,</span><br><span class="line">         password:<span class="string">"admin"</span></span><br><span class="line">        &#125;,</span><br><span class="line">      success:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(e)</span><br><span class="line">            &#125;,</span><br><span class="line">       error:<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(err)</span><br><span class="line">              &#125;,</span><br><span class="line">        &#125;).send();</span><br></pre></td></tr></table></figure><h4 id="XMLHttpRequest-Level-2-相比于-老版本的-XMLHttpRequest-新增以下内容："><a href="#XMLHttpRequest-Level-2-相比于-老版本的-XMLHttpRequest-新增以下内容：" class="headerlink" title="XMLHttpRequest Level 2 相比于 老版本的 XMLHttpRequest 新增以下内容："></a><code>XMLHttpRequest Level 2</code> 相比于 老版本的 <code>XMLHttpRequest</code> 新增以下内容：</h4><h5 id="可以设置-HTTP-请求超时时间"><a href="#可以设置-HTTP-请求超时时间" class="headerlink" title="可以设置 HTTP 请求超时时间"></a>可以设置 HTTP 请求超时时间</h5>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'GET'</span>,<span class="string">'url'</span>);</span><br><span class="line"><span class="comment">// 超时 2s</span></span><br><span class="line">xhr.timeout = <span class="number">2000</span>;</span><br><span class="line"><span class="comment">// 超时处理</span></span><br><span class="line">xhr.ontimeout = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;</span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure><h5 id="可以通过-FormData-发送表单数据"><a href="#可以通过-FormData-发送表单数据" class="headerlink" title="可以通过 FormData 发送表单数据"></a>可以通过 <code>FormData</code> 发送表单数据</h5>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 实例化 FormData</span></span><br><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line"> <span class="comment">// 添加数据</span></span><br><span class="line"> formData.append(key,value);</span><br><span class="line"></span><br><span class="line"> xhr.open(<span class="string">'POST'</span>,<span class="string">'url'</span>);</span><br><span class="line"> xhr.send(formData);</span><br></pre></td></tr></table></figure><h5 id="可以上传文件"><a href="#可以上传文件" class="headerlink" title="可以上传文件"></a>可以上传文件</h5><ul><li><code>FormData</code> 除了可以添加字符串数据，也可以添加 <code>blob、file</code> 类型的数据，因此可以用于上传文件。</li><li><p>在浏览器中，一般是通过文件上传输入框来获取 file 对象，比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">'uploadFile'</span> <span class="attr">id</span>=<span class="string">"upload-file"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'upload-file'</span>)</span><br><span class="line">        .addEventListener(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">            <span class="comment">// 获取数据</span></span><br><span class="line">              formData.append(<span class="string">'uploadFile'</span>, <span class="keyword">this</span>.files[<span class="number">0</span>])</span><br><span class="line">               xhr.send(formData)</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="支持跨域请求"><a href="#支持跨域请求" class="headerlink" title="支持跨域请求"></a>支持跨域请求</h5><ul><li>浏览器默认是不允许跨域请求的，有时候又是必要的，在以前通常使用<a href="https://baike.baidu.com/item/JSONP" target="_blank" rel="noopener"><code>JSONP</code></a>来解决（IE10 以下不支持）</li><li>为了标准化跨域请求， W3C提出 <a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享</a>（CORS）前端无须修改代码，只需 服务器返回 <code>Access-Control-Allow-Origin</code> 响应头，指定允许对应的域，如果是公共资源可指定“*”</li><li><p><code>CORS</code> 默认不发送 <code>cookie</code> 如果需要发送，前端需要设置 <code>withCredentials</code>属性，同时服务器需要 返回 <code>Access-Control-Allow-Credentials: true</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>检测XHR是否支持CORS最简单的方式，就是检查是否存在 <code>withCredentials</code>，再检测<code>XDomainRequest</code> 对象是否存在，即可兼顾所有浏览器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> createCORSRequest = <span class="function">(<span class="params">method,url</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">var</span> xhr = mew XMLHttpRequest();</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'withCredentials'</span> <span class="keyword">in</span> xhr)&#123;</span><br><span class="line">      xhr.open(method,url,<span class="literal">true</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> XDomainRequest != <span class="string">'undefined'</span>)&#123;</span><br><span class="line">      xhr = <span class="keyword">new</span> XDomainRequest();</span><br><span class="line">      xhr.open(method,url);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      xhr = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> xhr</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">let</span> request = createCORSRequest(<span class="string">'get'</span>,<span class="string">'baidu.com'</span>)</span><br><span class="line">    <span class="keyword">if</span>(request)&#123;</span><br><span class="line">      request.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// request.responseText</span></span><br><span class="line">      &#125;</span><br><span class="line">      request.send()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>Preflighted Requests：</strong></p></li><li>一个透明服务器验证机制，用于检查服务器是否支持<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">CORS</a><br>这是一个 OPTIONS 请求，使用了三个请求头</li><li>Access-Control-Request-Method：请求自身使用的方法</li><li>Access-Control-Request-Headers：自定义头部信息，多个头部以逗号分隔</li><li>Origin报头：和简单请求相同，将请求的域发送给服务端，服务端再Access-Control-Allow-Origin 响应头中返回同样的域即可解决跨域问题。</li></ul><p><strong>img src特性：</strong></p><ul><li>一个网页可以从任何网页中加载图像，不用担心跨域问题，通过onload 和 onerror 事件处理确定是否接收到响应</li><li>请求的数据通过查询字符串形式发送，响应可以是任意内容，通常是像素图或204响应。</li><li>只能发送 get 请求，无法访问服务器的响应文本<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'done'</span>)</span><br><span class="line">&#125;</span><br><span class="line">img.src = <span class="string">'http://www.baidu.com?test=test1'</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>请求数据</strong></p><h5 id="可以获取服务端二进制数据"><a href="#可以获取服务端二进制数据" class="headerlink" title="可以获取服务端二进制数据"></a>可以获取服务端二进制数据</h5><ol><li>使用 <code>overrideMimeType</code> 方法覆写服务器指定的 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="noopener"><code>MIME</code></a> 类型，从而改变浏览器解析数据的方式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数 MIME 类型</span></span><br><span class="line"><span class="comment">// 告诉浏览器，服务器响应的内容是用户自定义的字符集</span></span><br><span class="line">xhr.overrideMimeType(<span class="string">'text/plain; charset=x-user-defined'</span>);</span><br><span class="line"><span class="comment">// 浏览器就会将服务器返回的二进制数据当成文本处理，我们需要做进一步的转换才能拿到真实的数据</span></span><br><span class="line">  <span class="comment">// 获取二进制数据的第 i 位的值</span></span><br><span class="line">  <span class="keyword">var</span> byte = xhr.responseText.charCodeAt(i) &amp; <span class="number">0xff</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>“&amp; 0xff” 运算 参考 <a href="http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html" target="_blank" rel="noopener">阮一峰的文章</a></li></ul><ol start="2"><li>xhr.responseType 用于设置服务器返回的数据的类型,将<code>返回类型设置为 blob 或者 arraybuffer</code>，然后就可以从 <code>xhr.response</code> 属性获取到对应类型的服务器返回数据。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xhr.responseType = <span class="string">'arraybuffer'</span></span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> arrayBuffer = xhr.response</span><br><span class="line"><span class="comment">// 接下来对 arrayBuffer 做进一步处理...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="可以获取数据传输进度信息-参考资料"><a href="#可以获取数据传输进度信息-参考资料" class="headerlink" title="可以获取数据传输进度信息 参考资料"></a>可以获取数据传输进度信息 <a href="https://dev.opera.com/articles/xhr2/" target="_blank" rel="noopener">参考资料</a></h5><ul><li>使用 onload 监听了一个数据传输完成的事件。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上传进度监听</span></span><br><span class="line">xhr.upload.addEventListener(<span class="string">'progress'</span>, onProgressHandler, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传输成功完成</span></span><br><span class="line">xhr.upload.addEventListener(<span class="string">'load'</span>, onLoadHandler, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 传输失败信息</span></span><br><span class="line">xhr.upload.addEventListener(<span class="string">'error'</span>, onErrorHandler, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h4><p><img src="/static/img/xml.png" alt="XMLHttpRequest"></p><p>更多资料参考:<br><a href="http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html" target="_blank" rel="noopener">阮一峰的文章</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">MDN</a></p><hr><h3 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h3><ul><li>基于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise</a> 的 Http 库</li><li>可以在客户端 和 nodeJs中使用</li><li>在客户端创基 XMLHttpRequests</li><li>在nodeJs 创建 <a href="https://nodejs.org/api/http.html" target="_blank" rel="noopener">HTTP</a> 请求</li><li>支持Promise</li><li>可拦截转化请求和响应数据</li><li>取消请求</li><li>自动转化JSON数据</li><li>支持客户端 <a href="https://en.wikipedia.org/wiki/Cross-site_request_forgery" target="_blank" rel="noopener">XSRF</a></li></ul><h4 id="兼容性-1"><a href="#兼容性-1" class="headerlink" title="兼容性"></a>兼容性</h4><p><img src="/static/img/axios.png" alt="axios"></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><h4 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h4><h5 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>)</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'url?id=xxx'</span>)</span><br><span class="line">     .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(res)</span><br><span class="line">     &#125;)</span><br><span class="line">     .catch(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(err)</span><br><span class="line">     &#125;)</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">axios.get(<span class="string">'url'</span>,&#123;</span><br><span class="line">  params:&#123;</span><br><span class="line">    id:<span class="string">'xxxxx'</span></span><br><span class="line">  &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">   .then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(res)</span><br><span class="line">   &#125;)</span><br><span class="line">   .catch(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(err)</span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure><ul><li><p>同样的传参方法有 delete</p><h5 id="post"><a href="#post" class="headerlink" title="post"></a>post</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="string">'url'</span>,&#123;<span class="attr">name</span>:<span class="string">'Owen'</span>&#125;)</span><br><span class="line">     .then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(res)</span><br><span class="line">     &#125;)</span><br><span class="line">     .catch(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(err)</span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure></li><li><p>同样的传参方法有  put patch</p><h5 id="concurrent-requests"><a href="#concurrent-requests" class="headerlink" title="concurrent requests"></a>concurrent requests</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.all([axios.get(<span class="string">'url1'</span>),axios.get(<span class="string">'url2'</span>)])</span><br></pre></td></tr></table></figure></li></ul><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><ul><li><code>axios(config)</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">axios(&#123;</span><br><span class="line">  method:<span class="string">'get'</span>, <span class="comment">// default is get</span></span><br><span class="line">  url:<span class="string">'url'</span>, <span class="comment">// request  url</span></span><br><span class="line">  data:&#123; <span class="comment">// 仅支持post，put和patch方法，数据作为请求主体发送 ( Only the post,put and patch methods are supported, and the data is sent as the request body )</span></span><br><span class="line">  <span class="comment">/* 浏览器仅支持传递 FormData, File, Blob （The browser only supports passing FormData, File and Blob)</span></span><br><span class="line"><span class="comment">     Node 仅支持传递 Stream, Buffer (The Node only supports passing Stream, Buffer)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    name:<span class="string">'owen'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  baseURL:<span class="string">'base/url'</span>, <span class="comment">// 除非url是绝对路径，否则将baseURL添加到url的前面 (Add baseURL to then front of the url unless the url is an absolute path)</span></span><br><span class="line">  transformRequest: [<span class="function"><span class="keyword">function</span> (<span class="params">data, headers</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 可以修改发送的请求数据和请求头，只支持put，post和patch，回调函数必须返回Buffer，ArrayBuffer，FormData或Stream数据</span></span><br><span class="line">    <span class="comment">// Can modify the sent request data and request header,only support put, post and patch.</span></span><br><span class="line">    <span class="comment">// Callback must return Buffer, ArrayBuffer, FormData or Stream data</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do whatever you want to transform the data</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line">  transformResponse: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">     <span class="comment">// 修改响应数据，再传递给 then或catch 方法 （Modify the response data and pass it to the then or catch method)</span></span><br><span class="line">    <span class="comment">// Do whatever you want to transform the data</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line">  headers: &#123;<span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span>&#125;, <span class="comment">// 自定义请求头 (Custom request header)</span></span><br><span class="line">  params:&#123; <span class="comment">// 添加到url尾部的参数，一般用于get 和 delete（ Parameters addde to the end of the url,generally used for get and delete )</span></span><br><span class="line">    id:<span class="string">'xxx'</span></span><br><span class="line">  &#125;,</span><br><span class="line">   paramsSerializer: <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123; <span class="comment">//序列化 [params] (https://www.npmjs.com/package/qs)</span></span><br><span class="line">    <span class="keyword">return</span> Qs.stringify(params, &#123;<span class="attr">arrayFormat</span>: <span class="string">'brackets'</span>&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  timeout:<span class="number">1000</span>,<span class="comment">// default is 0 , 设置请求超时时间，单位毫秒 （ Set request timeout in milliseconds )</span></span><br><span class="line">  withCredentials: <span class="literal">true</span>, <span class="comment">// default is false, 跨域时是否携带cookie（ Whether to carry cookies when crossing domains )</span></span><br><span class="line">  adapter: <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/*拦截响应数据*/</span></span><br><span class="line">      <span class="comment">// At this point:</span></span><br><span class="line">    <span class="comment">//  - config has been merged with defaults</span></span><br><span class="line">    <span class="comment">//  - request transformers have already run</span></span><br><span class="line">    <span class="comment">//  - request interceptors have already run</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make the request using config provided</span></span><br><span class="line">    <span class="comment">// Upon response settle the Promise</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> response = &#123;</span><br><span class="line">      data: responseData,</span><br><span class="line">      status: request.status,</span><br><span class="line">      statusText: request.statusText,</span><br><span class="line">      headers: responseHeaders,</span><br><span class="line">      config: config,</span><br><span class="line">      request: request</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    settle(resolve, reject, response);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// From here:</span></span><br><span class="line">    <span class="comment">//  - response transformers will run</span></span><br><span class="line">    <span class="comment">//  - response interceptors will run</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * Resolve or reject a Promise based on response status.</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       * @param &#123;Function&#125; resolve A function that resolves the promise.</span></span><br><span class="line"><span class="comment">       * @param &#123;Function&#125; reject A function that rejects the promise.</span></span><br><span class="line"><span class="comment">       * @param &#123;object&#125; response The response.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">settle</span>(<span class="params">resolve, reject, response</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> validateStatus = response.config.validateStatus;</span><br><span class="line">            <span class="keyword">if</span> (!validateStatus || validateStatus(response.status)) &#123;</span><br><span class="line">              resolve(response);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              reject(createError(</span><br><span class="line">                <span class="string">'Request failed with status code '</span> + response.status,</span><br><span class="line">                response.config,</span><br><span class="line">                <span class="literal">null</span>,</span><br><span class="line">                response.request,</span><br><span class="line">                response</span><br><span class="line">              ));</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Create an Error with the specified message, config, error code, request and response.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @param &#123;string&#125; message The error message.</span></span><br><span class="line"><span class="comment">         * @param &#123;Object&#125; config The config.</span></span><br><span class="line"><span class="comment">         * @param &#123;string&#125; [code] The error code (for example, 'ECONNABORTED').</span></span><br><span class="line"><span class="comment">         * @param &#123;Object&#125; [request] The request.</span></span><br><span class="line"><span class="comment">         * @param &#123;Object&#125; [response] The response.</span></span><br><span class="line"><span class="comment">         * @returns &#123;Error&#125; The created error.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">createError</span>(<span class="params">message, config, code, request, response</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> error = <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">        <span class="keyword">return</span> enhanceError(error, config, code, request, response);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Update an Error with the specified config, error code, and response.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @param &#123;Error&#125; error The error to update.</span></span><br><span class="line"><span class="comment">         * @param &#123;Object&#125; config The config.</span></span><br><span class="line"><span class="comment">         * @param &#123;string&#125; [code] The error code (for example, 'ECONNABORTED').</span></span><br><span class="line"><span class="comment">         * @param &#123;Object&#125; [request] The request.</span></span><br><span class="line"><span class="comment">         * @param &#123;Object&#125; [response] The response.</span></span><br><span class="line"><span class="comment">         * @returns &#123;Error&#125; The error.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">enhanceError</span>(<span class="params">error, config, code, request, response</span>) </span>&#123;</span><br><span class="line">            error.config = config;</span><br><span class="line">            <span class="keyword">if</span> (code) &#123;</span><br><span class="line">              error.code = code;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            error.request = request;</span><br><span class="line">            error.response = response;</span><br><span class="line">            error.isAxiosError = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            error.toJSON = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="comment">// Standard</span></span><br><span class="line">                message: <span class="keyword">this</span>.message,</span><br><span class="line">                name: <span class="keyword">this</span>.name,</span><br><span class="line">                <span class="comment">// Microsoft</span></span><br><span class="line">                description: <span class="keyword">this</span>.description,</span><br><span class="line">                number: <span class="keyword">this</span>.number,</span><br><span class="line">                <span class="comment">// Mozilla</span></span><br><span class="line">                fileName: <span class="keyword">this</span>.fileName,</span><br><span class="line">                lineNumber: <span class="keyword">this</span>.lineNumber,</span><br><span class="line">                columnNumber: <span class="keyword">this</span>.columnNumber,</span><br><span class="line">                stack: <span class="keyword">this</span>.stack,</span><br><span class="line">                <span class="comment">// Axios</span></span><br><span class="line">                config: <span class="keyword">this</span>.config,</span><br><span class="line">                code: <span class="keyword">this</span>.code</span><br><span class="line">              &#125;;</span><br><span class="line">            &#125;;</span><br><span class="line">          <span class="keyword">return</span> error;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  auth:&#123; <span class="comment">//  表示应使用HTTP Basic身份验证，并提供凭据 ( indicates that HTTP Basic auth should be used, and supplies credentials. )</span></span><br><span class="line">    user:<span class="string">'xxx'</span>,</span><br><span class="line">    password:<span class="string">'***'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  responseType: <span class="string">'json'</span>,<span class="comment">/* 服务器响应的数据类型（ The server response data type ）</span></span><br><span class="line"><span class="comment">                         支持 arraybuffer, blob, document, json, text, stream</span></span><br><span class="line"><span class="comment">                        */</span></span><br><span class="line">  responseEncoding:<span class="string">'utf8'</span>, <span class="comment">// 用于解码响应的编码 (Encoding for decoding the response )</span></span><br><span class="line">  xsrfCookieName: <span class="string">'XSRF-TOKEN'</span>, <span class="comment">// default is XSRF-TOKEN , csrf令牌Cookie 名称</span></span><br><span class="line">  xsrfHeaderName: <span class="string">'X-XSRF-TOKEN'</span>, <span class="comment">//default is X-XSRF-TOKEN, xsrf标记值的http标头的名称</span></span><br><span class="line">onUploadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123; <span class="comment">//上传进度事件 （handling of progress events for uploads ）</span></span><br><span class="line">    <span class="built_in">console</span>.log(progressEvent)</span><br><span class="line">  &#125;,</span><br><span class="line">onDownloadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123; <span class="comment">// 下载进度事件 （ handling of progress events for downloads）</span></span><br><span class="line">   <span class="built_in">console</span>.log(progressEvent)</span><br><span class="line">  &#125;,</span><br><span class="line">maxContentLength: <span class="number">2000</span>, <span class="comment">// 允许响应内容的最大字节 （defines the max size of the http response content in bytes allowed）</span></span><br><span class="line">validateStatus: <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123; <span class="comment">// 返回给定HTTP状态范围, 如果状态在给定范围内，响应数据传给`then` ，否则传给 `catch` ( Returns the given HTTP status range, if the status is within the give range, the respones data is passed to `then`, otherwise passed to `catch` )</span></span><br><span class="line">    <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>; <span class="comment">// default</span></span><br><span class="line">  &#125;,</span><br><span class="line">  maxRedirects: <span class="number">5</span>, <span class="comment">// default is 5  // 定义Node 中最大重定向数  ( defines the maximunn number of redirects in Node )</span></span><br><span class="line">  socketPath: <span class="literal">null</span>, <span class="comment">//  default is null 定义要在node.js中使用的 UNIX socket</span></span><br><span class="line">  httpAgent: <span class="keyword">new</span> http.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;), <span class="comment">// node 中 http 和 https 的代理</span></span><br><span class="line">  httpsAgent: <span class="keyword">new</span> https.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),<span class="comment">// http://nodejs.cn/api/http.html</span></span><br><span class="line">  proxy: &#123; <span class="comment">// 代理配置</span></span><br><span class="line">    host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port: <span class="number">9000</span>,</span><br><span class="line">    auth: &#123;</span><br><span class="line">      username: <span class="string">'mikeymike'</span>,</span><br><span class="line">      password: <span class="string">'rapunz3l'</span></span><br><span class="line">          &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">    cancelToken: <span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span> (<span class="params">cancel</span>) </span>&#123; <span class="comment">// 取消请求的 token</span></span><br><span class="line">  &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(res)</span><br><span class="line">     &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(err)</span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h5><ul><li><p>通过 <code>axios.create</code> 方法来替换全局配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'base/url'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>通过<code>axios.defaults</code> 对象替换全局默认配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">instance.defaults.headers.common[<span class="string">'Authorization'</span>] = AUTH_TOKEN;</span><br><span class="line">instance.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span>;</span><br></pre></td></tr></table></figure></li></ul><h5 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h5><ul><li><p>拦截请求前的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li><li><p>拦截响应数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something with response data</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something with response error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li><li><p>删除拦截器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myInterceptor = axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/*...*/</span>&#125;);</span><br><span class="line">axios.interceptors.request.eject(myInterceptor);</span><br></pre></td></tr></table></figure></li></ul><h4 id="二次封装"><a href="#二次封装" class="headerlink" title="二次封装"></a>二次封装</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @desc: axios封装</span></span><br><span class="line"><span class="comment"> * @author: ggw</span></span><br><span class="line"><span class="comment"> * @module: axios</span></span><br><span class="line"><span class="comment"> * @description: 配合使用 饿了么的 Message和Loading</span></span><br><span class="line"><span class="comment"> * @Date: 2018</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    Message,</span><br><span class="line">    Loading</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'../router'</span>;</span><br><span class="line"><span class="keyword">let</span> loading;</span><br><span class="line"><span class="keyword">let</span> headerNone = &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded; charset=UTF-8'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> headerTwo = &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/json; charset=UTF-8'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> baseURL = <span class="built_in">window</span>.location.origin ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 定义初始化Loading</span></span><br><span class="line"><span class="comment"> * @method: startLoading</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">const</span> startLoading = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    loading = Loading.service(&#123;</span><br><span class="line">        target: <span class="string">'.content-box'</span>,</span><br><span class="line">        background: <span class="string">'rgba(220, 220, 220, 0.51)'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 显示Loading 同时多个发送请求 只开启一次Loading</span></span><br><span class="line"><span class="comment"> * @method: showLoading  &amp;&amp; hideLoading</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">const</span> showLoading = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (count === <span class="number">0</span>) startLoading();</span><br><span class="line">    count++;</span><br><span class="line">&#125;;</span><br><span class="line"> <span class="keyword">const</span> hideLoading = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    count--;</span><br><span class="line">    <span class="keyword">if</span> (count === <span class="number">0</span>) &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">           loading.close();</span><br><span class="line">        &#125;, <span class="number">300</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> filiter = <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="built_in">Object</span>.keys(r)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (r[item] === <span class="string">' '</span> || r[item] === <span class="string">''</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> r[item];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 出口</span></span><br><span class="line"><span class="comment"> * @exports api</span></span><br><span class="line"><span class="comment"> * @param:options 必须是对象</span></span><br><span class="line"><span class="comment"> * options 对象为 axios对应参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (options) =&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @description: 用来初始化承诺的回调。</span></span><br><span class="line"><span class="comment">     * 这个回调被传递了两个参数：</span></span><br><span class="line"><span class="comment">     * 一个解析回调用一个值或另一个承诺的结果来解析承诺，</span></span><br><span class="line"><span class="comment">     * 以及一个拒绝回调，用来拒绝承诺的原因或错误。</span></span><br><span class="line"><span class="comment">     * @constructor: Promise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">            withCredentials: <span class="literal">true</span>,</span><br><span class="line">            headers: headerNone,</span><br><span class="line">            baseURL</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 请求拦截器</span></span><br><span class="line">        instance.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">             <span class="keyword">let</span> &#123;load = <span class="literal">true</span>&#125; = config.data || config.params || &#123;&#125; ;</span><br><span class="line">            <span class="keyword">if</span> (load) showLoading();</span><br><span class="line">            <span class="comment">//  过滤无值参数</span></span><br><span class="line">            <span class="keyword">if</span> (config.params) &#123;</span><br><span class="line">               <span class="keyword">delete</span> config.params.load;</span><br><span class="line">                filiter(config.params);</span><br><span class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (config.data) &#123;</span><br><span class="line">                filiter(config.data);</span><br><span class="line">               <span class="keyword">delete</span> config.data.load;</span><br><span class="line">               &#125;</span><br><span class="line">            <span class="keyword">if</span> (</span><br><span class="line">                config.method.toLocaleLowerCase() === <span class="string">'post'</span> ||</span><br><span class="line">                config.method.toLocaleLowerCase() === <span class="string">'put'</span></span><br><span class="line">            ) &#123;</span><br><span class="line">                <span class="comment">// json 格式传递</span></span><br><span class="line">                <span class="keyword">if</span> (config.json) &#123;</span><br><span class="line">                    config.headers = headerTwo;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    config.data = qs.stringify(config.data);</span><br><span class="line">                    config.data = config.data + <span class="string">'&amp;t='</span> + <span class="built_in">Date</span>.now();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> config;</span><br><span class="line">        &#125;, error =&gt; &#123;</span><br><span class="line">             hideLoading();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 响应拦截器</span></span><br><span class="line">        instance.interceptors.response.use(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">           setTimeout(hideLoading,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">let</span> data;</span><br><span class="line">            <span class="comment">// IE9时response.data是undefined，因此需要使用response.request.responseText(Stringify后的字符串)</span></span><br><span class="line">            <span class="keyword">if</span> (!response.data ) &#123;</span><br><span class="line">                data = response.request.responseText;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                data = response.data;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (data.code) &#123; <span class="comment">// 接口定义字段</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'001'</span>:</span><br><span class="line">                    Message(&#123;</span><br><span class="line">                        showClose: <span class="literal">true</span>,</span><br><span class="line">                        message: data.msg || <span class="string">'未知错误,请联系管理员'</span>,</span><br><span class="line">                        type: <span class="string">'error'</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                    router.push(&#123;</span><br><span class="line">                        path: <span class="string">'/login'</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">default</span>:</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;, err =&gt; &#123;</span><br><span class="line">          hideLoading();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (err &amp;&amp; err.response) &#123;</span><br><span class="line">                <span class="keyword">let</span> msg = &#123;</span><br><span class="line">                    <span class="number">400</span>: <span class="string">'请求错误'</span>,</span><br><span class="line">                    <span class="number">401</span>: <span class="string">'未授权，请登录'</span>,</span><br><span class="line">                    <span class="number">403</span>: <span class="string">'拒绝访问'</span>,</span><br><span class="line">                    <span class="number">404</span>: <span class="string">`请求地址出错: <span class="subst">$&#123;err.response.request.responseURL&#125;</span>`</span>,</span><br><span class="line">                    <span class="number">408</span>: <span class="string">'请求超时'</span>,</span><br><span class="line">                    <span class="number">500</span>: <span class="string">'服务器内部错误'</span>,</span><br><span class="line">                    <span class="number">501</span>: <span class="string">'服务未实现'</span>,</span><br><span class="line">                    <span class="number">502</span>: <span class="string">'网关错误'</span>,</span><br><span class="line">                    <span class="number">503</span>: <span class="string">'服务不可用'</span>,</span><br><span class="line">                    <span class="number">504</span>: <span class="string">'网关超时'</span>,</span><br><span class="line">                    <span class="number">505</span>: <span class="string">'HTTP版本不受支持'</span></span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">let</span> status = <span class="built_in">parseInt</span>(err.response.status,<span class="number">10</span>);</span><br><span class="line">                Message(&#123;</span><br><span class="line">                    showClose: <span class="literal">true</span>,</span><br><span class="line">                    message: msg[status] || <span class="string">''</span>,</span><br><span class="line">                    type: <span class="string">'error'</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Message(&#123;</span><br><span class="line">                    message: err.config ? <span class="string">`请求地址出错: <span class="subst">$&#123;err.config.url&#125;</span>`</span> : err,</span><br><span class="line">                    type: <span class="string">'error'</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 请求</span></span><br><span class="line">        instance(options)</span><br><span class="line">            .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                resolve(res);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                  reject(error);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> XMLHttpRequest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>class</title>
      <link href="/2019/04/17/class/"/>
      <url>/2019/04/17/class/</url>
      
        <content type="html"><![CDATA[<h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><ul><li>生成类的实例对象的写法，与 ES5 完全一样，也是使用new命令</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">var</span> point = Point(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">var</span> point = <span class="keyword">new</span> Point(<span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>实例的属性除非显式定义在其本身（即定义在this对象上）， 否则都是定义在原型上（即定义在class上）。 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> point = <span class="keyword">new</span> Point(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">point.toString() <span class="comment">// (2, 3)</span></span><br><span class="line"></span><br><span class="line">point.hasOwnProperty(<span class="string">'x'</span>) <span class="comment">// true</span></span><br><span class="line">point.hasOwnProperty(<span class="string">'y'</span>) <span class="comment">// true</span></span><br><span class="line">point.hasOwnProperty(<span class="string">'toString'</span>) <span class="comment">// false</span></span><br><span class="line">point.__proto__.hasOwnProperty(<span class="string">'toString'</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><label>与 ES5 一样，类的所有实例共享一个原型对象。</label></li><li><p>避免对环境产生依赖，生产环境中，我们可以使用 <code>Object.getPrototypeOf</code><br>方法来获取实例对象的原型，然后再来为原型添加方法/属性。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Point(<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">p1.__proto__.printName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'Oops'</span> &#125;;</span><br><span class="line"></span><br><span class="line">p1.printName() <span class="comment">// "Oops"</span></span><br><span class="line">p2.printName() <span class="comment">// "Oops"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> Point(<span class="number">4</span>,<span class="number">2</span>);</span><br><span class="line">p3.printName() <span class="comment">// "Oops"</span></span><br></pre></td></tr></table></figure><p>由于p1的原型就是p2的原型，因此p2也可以调用这个方法。 而且，此后新建的实例p3也可以调用这个方法。这意味着，使用实例的<code>__proto__</code>属性改写原型，必须相当谨慎，不推荐使用，因为这会改变“类”的原始定义，影响到所有实例。</p><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><ul><li>constructor方法是类的默认方法, <label>通过new命令生成对象实例时</label>，自动调用该方法。</li></ul><p>一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。<br>相当于es5 new Vue </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125; <span class="comment">//JavaScript 引擎会自动为它添加一个空的constructor方法。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">new</span> Point ()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>constructor方法默认返回实例对象（即this），完全可以指定返回另外一个对象。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Foo() <span class="keyword">instanceof</span> Foo</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><label>类必须使用new调用</label>，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用new也可以执行。</p><h3 id="表达式定义"><a href="#表达式定义" class="headerlink" title="表达式定义"></a>表达式定义</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyClass = <span class="class"><span class="keyword">class</span> <span class="title">Me</span> </span>&#123;</span><br><span class="line">  getClassName() &#123;</span><br><span class="line">    <span class="keyword">return</span> Me.name;</span><br><span class="line">    <span class="comment">//这个类的名字是MyClass而不是Me，Me只在 Class 的内部代码可用，指代当前类。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//内部没用到Me的话可以省略Me</span></span><br><span class="line"><span class="keyword">const</span> YouClass = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>采用 Class 表达式，可以写出立即执行的 Class。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sayName() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(<span class="string">'张三'</span>);</span><br><span class="line"></span><br><span class="line">person.sayName(); <span class="comment">// "张三"</span></span><br></pre></td></tr></table></figure><ul><li>不存在变量提升 （hoist），必须保证子类在父类之后定义 ，这一点与 ES5 完全不同。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Foo(); <span class="comment">// ReferenceError</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><p>继承类<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> Foo = <span class="class"><span class="keyword">class</span> </span>&#123;&#125;;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="comment">//Bar继承Foo</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h3><p>私有方法是常见需求，但 ES6 不提供，只能通过变通方法模拟实现。<br>有三种方法可模拟</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 公有方法</span></span><br><span class="line">  foo (baz) &#123;</span><br><span class="line">    <span class="keyword">this</span>._bar(baz);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 私有方法</span></span><br><span class="line">  _bar(baz) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.snaf = baz;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// _bar方法前面的下划线，表示这是一个只限于内部使用的私有方法 但是，在类的外部，还是可以调用到这个方法。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> </span>&#123;</span><br><span class="line">  foo (baz) &#123;</span><br><span class="line">    bar.call(<span class="keyword">this</span>, baz);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 内部调用了bar.call(this, baz)，成为了当前模块的私有方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//私有方法移出模块</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">baz</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.snaf = baz;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="built_in">Symbol</span>(<span class="string">'bar'</span>);</span><br><span class="line"><span class="keyword">const</span> snaf = <span class="built_in">Symbol</span>(<span class="string">'snaf'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">myClass</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 公有方法</span></span><br><span class="line">  foo(baz) &#123;</span><br><span class="line">    <span class="keyword">this</span>[bar](baz);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 私有方法 </span></span><br><span class="line">  [bar](baz) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[snaf] = baz;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 利用Symbol值的唯一性，将私有方法的名字命名为一个Symbol值。</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="私有属性的提案"><a href="#私有属性的提案" class="headerlink" title="私有属性的提案"></a><strong>私有属性的提案</strong></h3><ul><li><p>方法是在属性名之前，使用#表示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  #x=0;// 私有属性可以指定初始值，在构造函数执行时进行初始化。</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(x = 0) &#123;</span><br><span class="line">    #x = +x; // 写成 this.#x 亦可</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get #x() &#123; return #x &#125;</span><br><span class="line">  set #x(value) &#123; #x = +value &#125;</span><br><span class="line">  #sum() &#123; return #a + #b; &#125;  //私有方法</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//  #x是一个私有属性，它的读写都通过get #x()和set #x()来完成。 #x和x是两个不同的属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//JavaScript 是一门动态语言，没有类型声明，使用独立的符号似乎是唯一的比较方便可靠的方法，能够准确地区分一种属性是否为私有属性。@已经留给了 Decorator。</span></span><br></pre></td></tr></table></figure></li><li><p>私有属性不限于从this引用，类的实例也可以引用私有属性  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  #privateValue = 42;</span><br><span class="line">  <span class="keyword">static</span> getPrivateValue(foo) &#123;</span><br><span class="line">    return foo.#privateValue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.getPrivateValue(<span class="keyword">new</span> Foo()); <span class="comment">// 42</span></span><br><span class="line">console.log(Foo.#privateValue) // 报错</span><br></pre></td></tr></table></figure></li></ul><h4 id="class-的取值函数（getter）和存值函数（setter）"><a href="#class-的取值函数（getter）和存值函数（setter）" class="headerlink" title="class 的取值函数（getter）和存值函数（setter）"></a>class 的取值函数（getter）和存值函数（setter）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> prop() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'getter'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> prop(value) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setter: '</span>+value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> inst = <span class="keyword">new</span> MyClass();</span><br><span class="line"></span><br><span class="line">inst.prop = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// setter: 123</span></span><br><span class="line"></span><br><span class="line">inst.prop</span><br><span class="line"><span class="comment">// 'getter'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS问题整理</title>
      <link href="/2019/04/10/JSquestion/"/>
      <url>/2019/04/10/JSquestion/</url>
      
        <content type="html"><![CDATA[<h3 id="赋值运算符多次出现，优先计算问题-结合性"><a href="#赋值运算符多次出现，优先计算问题-结合性" class="headerlink" title="赋值运算符多次出现，优先计算问题(结合性)"></a>赋值运算符多次出现，优先计算问题(结合性)</h3><blockquote><p>赋值表达式为右结合<br>先从左到右解析各个引用，然后计算最右侧的表达式的值，最后把值从右到左赋给各个引用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">a = b = c = v</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">先解析 左侧的操作数</span></span><br><span class="line"><span class="comment">1. refa</span></span><br><span class="line"><span class="comment">2. refb</span></span><br><span class="line"><span class="comment">3. refc</span></span><br><span class="line"><span class="comment">4. value v</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">refa = (refb = (refc = value v))</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 再计算右侧表达式的值 然后和从右到左赋值</span></span><br><span class="line"><span class="comment">1. value v 赋值 refc</span></span><br><span class="line"><span class="comment">2. value v 赋值 refb</span></span><br><span class="line"><span class="comment">3. calue v 赋值 refa</span></span><br><span class="line"><span class="comment">4. 返回 value v</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//example</span></span><br><span class="line"><span class="keyword">var</span> foo = &#123;<span class="attr">n</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> bar = foo;</span><br><span class="line"></span><br><span class="line">foo.x = foo = &#123;<span class="attr">n</span>:<span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">变量名 存储在栈中， 引用对象存储在堆中</span></span><br><span class="line"><span class="comment">根据规则 先解析 =号左侧的引用</span></span><br><span class="line"><span class="comment"> refx = (refo = &#123;n:2&#125;)</span></span><br><span class="line"><span class="comment">再赋值</span></span><br><span class="line"><span class="comment">refo = &#123;n:2&#125; //refo  开辟新指针 foo  指向 &#123;n:2&#125;</span></span><br><span class="line"><span class="comment">refx =  &#123;n:2&#125; // 在原refo指针对象中开辟新指针 指向 &#123;n:2&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">结果  refo.x == undefined</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">或者</span></span><br><span class="line"><span class="comment"> foo.x赋值前是&#123;n:1,x:unfiend&#125;;</span></span><br><span class="line"><span class="comment">赋值后&#123;n:1,x:&#123;n:2&#125;&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">foo.x <span class="comment">//undefined</span></span><br><span class="line">bar.x <span class="comment">// &#123;n: 1, x: &#123;n:2&#125;&#125;;</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'81 newO'</span>.split(<span class="string">''</span>) <span class="comment">//["8", "1", " ", "n", "e", "w", "O"]</span></span><br><span class="line"></span><br><span class="line"><span class="string">'81 newO'</span>.split(<span class="string">' '</span>)<span class="comment">// ["81", "newO"]</span></span><br><span class="line"></span><br><span class="line"><span class="string">'81 newO'</span>.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line"><span class="comment">//"Owen 18"</span></span><br></pre></td></tr></table></figure><p>###</p>]]></content>
      
      
      
        <tags>
            
            <tag> JSQuestion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interator</title>
      <link href="/2019/04/04/Interator/"/>
      <url>/2019/04/04/Interator/</url>
      
        <content type="html"><![CDATA[<h2 id="Interator"><a href="#Interator" class="headerlink" title="Interator"></a>Interator</h2><blockquote><p>“集合”数据的结构主要有 <code>Array</code> 、<code>Object</code>、 <code>Set</code>  and <code>Map</code> ，任何数据结构只要部署 Iterator 接口，就可完成遍历操作</p></blockquote><p><strong>遍历过程：</strong> </p><ul><li>创建指针，指向当前数据结构起始位。（遍历对象本质是一个指针对象）。</li><li>依次循环调用指针对象的 <code>next</code>方法，对应指向数据结构成员，直至结束。<br><code>每次调用</code>next<code>方法，返回对象当前成员的信息</code>{value：text,done:true}<code>,其中</code>value<code>表示成员值，</code>done` 表示遍历是否结束</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'Owen'</span>,<span class="string">'18'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> makeInterator = <span class="function"><span class="params">array</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span>  index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">       next ()&#123;</span><br><span class="line">        <span class="keyword">return</span> index &lt; array.length ? </span><br><span class="line">        &#123;<span class="attr">value</span>:array[index++],<span class="attr">done</span>:<span class="literal">false</span>&#125; : </span><br><span class="line">        &#123;<span class="attr">value</span>:<span class="literal">undefined</span>, <span class="attr">done</span>:<span class="literal">true</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span>  inter = makeInterator(arr);</span><br><span class="line">inter.next()</span><br><span class="line">it.next() <span class="comment">// &#123; value: "Owen", done: false &#125;</span></span><br><span class="line">it.next() <span class="comment">// &#123; value: 18, done: false &#125;</span></span><br><span class="line">it.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><p>对与遍历器对象来说 <code>done: false</code> and <code>value:undefined</code> 可省略</p><p>原生具备 Iterator 的数据结构：<code>Array</code> 、 <code>String</code> 、 <code>Map</code>、 <code>Set</code> 、<code>arguments</code> and <code>NodeList</code></p><blockquote><p>都默认部署 <code>[Symbol.iterator]</code> 方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator] : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      next: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          value: <span class="number">1</span>,</span><br><span class="line">          done: <span class="literal">true</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj[<span class="built_in">Symbol</span>.iterator]().next() <span class="comment">//&#123;value: 1, done: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">let</span> iter = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"></span><br><span class="line">iter.next() <span class="comment">// &#123; value: 'a', done: false &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: 'b', done: false &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: 'c', done: false &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>对象（Object）之所以没有默认部署 Iterator 接口，是因为对象的哪个属性先遍历，哪个属性后遍历是不确定的，需要开发者手动指定。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//原型上部署Interator</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RangeIterator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(start, stop) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value = start;</span><br><span class="line">    <span class="keyword">this</span>.stop = stop;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]() &#123; <span class="keyword">return</span> <span class="keyword">this</span>; &#125;</span><br><span class="line"></span><br><span class="line">  next() &#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="keyword">this</span>.value;</span><br><span class="line">    <span class="keyword">if</span> (value &lt; <span class="keyword">this</span>.stop) &#123;</span><br><span class="line">      <span class="keyword">this</span>.value++;</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: value&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">true</span>, <span class="attr">value</span>: <span class="literal">undefined</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">range</span>(<span class="params">start, stop</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> RangeIterator(start, stop);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> range(<span class="number">0</span>, <span class="number">3</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value); <span class="comment">// 0, 1, 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象上部署Interator</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Obj</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.value = value;</span><br><span class="line">  <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Obj.prototype[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> iterator = &#123; <span class="attr">next</span>: next &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> current = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (current) &#123;</span><br><span class="line">      <span class="keyword">var</span> value = current.value;</span><br><span class="line">      current = current.next;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: value &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> iterator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> one = <span class="keyword">new</span> Obj(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> two = <span class="keyword">new</span> Obj(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> three = <span class="keyword">new</span> Obj(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">one.next = two;</span><br><span class="line">two.next = three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">of</span> one)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i); <span class="comment">// 1, 2, 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="类似数组对象，可引用-Array-prototype-Symbol-iterator"><a href="#类似数组对象，可引用-Array-prototype-Symbol-iterator" class="headerlink" title="类似数组对象，可引用 Array.prototype[Symbol.iterator]"></a>类似数组对象，可引用 <code>Array.prototype[Symbol.iterator]</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//NodeList</span></span><br><span class="line">NodeList.prototype[<span class="built_in">Symbol</span>.iterator] = <span class="built_in">Array</span>.prototype[<span class="built_in">Symbol</span>.iterator];</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">NodeList.prototype[<span class="built_in">Symbol</span>.iterator] = [][<span class="built_in">Symbol</span>.iterator];</span><br><span class="line"></span><br><span class="line">[...document.querySelectorAll(<span class="string">'div'</span>)] </span><br><span class="line"></span><br><span class="line"><span class="comment">//obj</span></span><br><span class="line"><span class="keyword">let</span> iterable = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'a'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'c'</span>,</span><br><span class="line">  length: <span class="number">3</span>,</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]: <span class="built_in">Array</span>.prototype[<span class="built_in">Symbol</span>.iterator]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item); <span class="comment">// 'a', 'b', 'c'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一些-默认调用-Iterator-的操作"><a href="#一些-默认调用-Iterator-的操作" class="headerlink" title="一些 默认调用 Iterator 的操作"></a>一些 默认调用 Iterator 的操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 解构赋值</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set().add('a').add('b').add('c');</span><br><span class="line"></span><br><span class="line">let [x,y] = <span class="keyword">set</span>; // x='a'; y='b'</span><br><span class="line"></span><br><span class="line">let [first, ...rest] = <span class="keyword">set</span>; // first='a'; rest=['b','c'];</span><br><span class="line"></span><br><span class="line">//扩展运算符</span><br><span class="line"></span><br><span class="line">var str = 'hello';</span><br><span class="line">[...str] //  ['h','e','l','l','o']</span><br><span class="line"></span><br><span class="line">let arr = ['b', 'c'];</span><br><span class="line">['a', ...arr, 'd']  // ['a', 'b', 'c', 'd']</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//yield*后面跟的是一个可遍历的结构，它会调用该结构的遍历器接口。</span><br><span class="line"></span><br><span class="line">let generator = function* () &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span>* [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iterator = generator();</span><br><span class="line"></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: 3, done: false &#125;</span></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: 4, done: false &#125;</span></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: 5, done: false &#125;</span></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for...of</span></span><br><span class="line"><span class="comment">//for...of循环可以使用的范围包括数组、Set 和 Map 结构、某些类似数组的对象（比如arguments对象、DOM NodeList 对象）、 Generator 对象，以及字符串。</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="built_in">document</span>.querySelectorAll(<span class="string">"p"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr ) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 其他操作*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from()</span><br><span class="line"><span class="built_in">Map</span>(), <span class="built_in">Set</span>(), <span class="built_in">WeakMap</span>(), <span class="built_in">WeakSet</span>() <span class="comment">//生成对应数据结构</span></span><br><span class="line"><span class="built_in">Promise</span>.all()</span><br><span class="line"><span class="built_in">Promise</span>.race()</span><br></pre></td></tr></table></figure><h3 id="遍历器return方法和throw方法"><a href="#遍历器return方法和throw方法" class="headerlink" title="遍历器return方法和throw方法"></a>遍历器return方法和throw方法</h3><h4 id="return"><a href="#return" class="headerlink" title="return()"></a>return()</h4><blockquote><p>return方法必须返回一个对象。<br>如果一个对象在完成遍历前，需要清理或释放资源，就可以部署return方法。<br>如果for…of循环提前退出（通常是因为出错，或者有break语句），就会调用return方法。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                next() &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">done</span>:<span class="literal">false</span>&#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="keyword">return</span>()&#123;</span><br><span class="line">                    file.close()</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">done</span>:<span class="literal">true</span>&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//触发 return()</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> line <span class="keyword">of</span> readFile(fileName)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(line);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//触发 return()</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> line <span class="keyword">of</span> readLinesSync(fileName)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(line);</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for…of-和其他遍历语法对比"><a href="#for…of-和其他遍历语法对比" class="headerlink" title="for…of 和其他遍历语法对比"></a>for…of 和其他遍历语法对比</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="comment">//普通 `for`循环</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt;arr.length; index++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[index]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 书写比较麻烦</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.forEach </span></span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 无法跳出循环，无法使用 break or return </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for...in</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[index]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.数组键名为字符串形式的数字</span></span><br><span class="line"><span class="comment"> * 2.会遍历出原型链上的键，和手动添加的键</span></span><br><span class="line"><span class="comment"> * 3.有些情况是无顺序遍历</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.语法简洁</span></span><br><span class="line"><span class="comment"> * 2.没有 for...in 的缺点</span></span><br><span class="line"><span class="comment"> * 3.可以使用 return、break and continue</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Interator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Generator</title>
      <link href="/2019/04/04/generator/"/>
      <url>/2019/04/04/generator/</url>
      
        <content type="html"><![CDATA[<h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><blockquote><p> ES6 提供的一种异步编程解决方案<br>Generator 函数是一个状态机，封装了多个内部状态。还是一个遍历器对象生成函数。返回<label>遍历器对象</label>，可以依次遍历 Generator 函数内部的每一个状态。</p></blockquote><p>Generator 函数特征</p><ul><li><code>function</code>关键字和函数名之间 有 <code>*</code>  ES6 没有规定，function关键字与函数名之间的星号，写在哪个位置。</li><li>函数体内部有 <code>yield</code> 表达式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span>  <span class="string">'Owen'</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'end'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象 Iterator </span></span><br><span class="line"><span class="keyword">let</span> person = generator();</span><br><span class="line"></span><br><span class="line">person.next() <span class="comment">//&#123;value:'Owen',done:false&#125;</span></span><br><span class="line">person.next() <span class="comment">//&#123;value:18,done:false&#125;</span></span><br><span class="line">person.next() <span class="comment">//&#123;value:'end',done:true&#125;</span></span><br><span class="line">person.next() <span class="comment">//&#123;value:undefined,done:true&#125;</span></span><br><span class="line">person.next() <span class="comment">//&#123;value:undefined,done:true&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><blockquote><p>yield 后面的表达式以分号作为结束语句<br>一种可以暂停函数执行的表达式，配合 <code>next</code>方法使用。<br>只能再在 <code>Generator</code> 函数中使用，普通函数中使用会报错.<br><code>yield</code> 如果用<label>在另一个表达式中,必须用圆括号包起来</label>，作为函数参数或者赋值表达式右边可以不用加括号。</p></blockquote><p><code>next</code> 运行逻辑</p><ul><li>调用 <code>next</code> 遇到 <code>yield</code>表达式 暂停执行函数后面的操作，并且 <label> 紧跟 <code>yield</code> 后面的表达式的值</label>作为返回对象 <code>value</code> 属性的值。</li><li>再次调用 <code>next</code>,继续执行<code>yield</code>表达式 后面的逻辑代码，直到下一个 <code>yield</code>表达式 或者 <code>return</code> 语句，返回值为 对象 <code>value</code> 属性的值。</li><li>如果没有  <code>return</code> 语句 ，则  <code>value</code> 属性的值为 <code>undefined</code>。</li><li><label>只有调用<code>next</code>方法，才会执行对应 <code>yield</code> 后面的表达式</label><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">g</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span> + <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> num = g() </span><br><span class="line">num <span class="comment">//g &#123;&lt;suspended&gt;&#125;</span></span><br><span class="line">num.next() <span class="comment">//&#123;value:3,done:false&#125;</span></span><br><span class="line">num.next() <span class="comment">//&#123;value:undefined,done:true&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="使用-Interator"><a href="#使用-Interator" class="headerlink" title="使用 Interator"></a>使用 Interator</h3><blockquote><p>由于 <code>Generator</code> 函数是遍历器生成函数，因此 把它赋值给对象的 <code>[Symbol.interator]</code>属性，该对象就可以被遍历<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iter = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">iter[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[...iter] <span class="comment">//[1, 2, 3]</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="next-参数"><a href="#next-参数" class="headerlink" title="next 参数"></a>next 参数</h3><blockquote><p><code>yield</code> 本身的返回值为 undefined， 而 <code>next</code>方法可以带一个参数，当作<label>上一个 <code>yield</code>的返回值<label></label></label></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> g = fn();</span><br><span class="line"></span><br><span class="line"> g.next() <span class="comment">//&#123;value:0,done:false&#125;</span></span><br><span class="line"> g.next() <span class="comment">//&#123;value:1,done:false&#125;</span></span><br><span class="line"> g.next() <span class="comment">//&#123;value:2,done:false&#125;</span></span><br><span class="line"> g.next(<span class="number">1</span>) <span class="comment">//&#123;value:0,done:false&#125;</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span>* <span class="title">fn</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span>  i = <span class="number">0</span>; <span class="literal">true</span>; i++)&#123;</span><br><span class="line">         <span class="keyword">let</span> reset = <span class="keyword">yield</span> i;</span><br><span class="line">         <span class="keyword">if</span>(reset) i = <span class="number">-1</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">dataConsumer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Started'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`1. <span class="subst">$&#123;<span class="keyword">yield</span>&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`2. <span class="subst">$&#123;<span class="keyword">yield</span>&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'result'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> genObj = dataConsumer();</span><br><span class="line">genObj.next();</span><br><span class="line"><span class="comment">// Started</span></span><br><span class="line"><span class="comment">//&#123;value: "undefined", done: fales&#125;</span></span><br><span class="line">genObj.next(<span class="string">'a'</span>)</span><br><span class="line"><span class="comment">//1. a</span></span><br><span class="line"><span class="comment">//&#123;value: "undefined", done: fales&#125;</span></span><br><span class="line">genObj.next(<span class="string">'b'</span>)</span><br><span class="line"><span class="comment">//2. b</span></span><br><span class="line"><span class="comment">//&#123;value: "result", done: true&#125;</span></span><br></pre></td></tr></table></figure><h3 id="for…of-中使用-Generator"><a href="#for…of-中使用-Generator" class="headerlink" title="for…of 中使用 Generator"></a>for…of 中使用 Generator</h3><blockquote><p>可以不用调用 <code>next</code> 方法</p><p><label> 如果 返回对象 done属性值为 true， 循环终并且不包含该对象返回值；<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> fn())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">    <span class="comment">//1 2 3 4 5 undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//斐波那契数列</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fibonacci</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span>  [prev, curr] = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">      <span class="keyword">yield</span> curr;</span><br><span class="line">      [prev,curr] = [curr, prev + curr];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> f <span class="keyword">of</span> fibonacci()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (f &gt; <span class="number">1000</span>) <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历任意对象方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">objectEntries</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> propKeys = <span class="built_in">Reflect</span>.ownKeys(obj);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> propKeys)&#123;</span><br><span class="line">         <span class="keyword">yield</span> [key,obj[key]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>:<span class="string">'Owen'</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key,value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(person))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key,value);</span><br><span class="line">    <span class="comment">//name Owen</span></span><br><span class="line">    <span class="comment">// age 18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key,value] <span class="keyword">of</span> objectEntries(person))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key,value);</span><br><span class="line">     <span class="comment">//name Owen</span></span><br><span class="line">    <span class="comment">// age 18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"></span><br><span class="line">person[<span class="built_in">Symbol</span>.interator] = objectEntries</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key,value] <span class="keyword">of</span> person)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key,value);</span><br><span class="line">     <span class="comment">//name Owen</span></span><br><span class="line">    <span class="comment">// age 18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></label></p></blockquote><h3 id="Generator-throw"><a href="#Generator-throw" class="headerlink" title="Generator throw"></a>Generator throw</h3><blockquote><p>在函数体外抛出错误，再在 函数体内捕获。<br>throw方法抛出的错误要被内部捕获，前提是必须至少执行过一次next方法。因为只有执行一次 <code>next</code>方法，函数才开始执行。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;  <span class="keyword">yield</span>;  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'内部1'</span>,e )</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123; <span class="keyword">yield</span>; &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'内部2'</span>,e)</span><br><span class="line">    &#125;; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span>  t = g();</span><br><span class="line">t.next(); <span class="comment">//&#123;value: undefined, done: false&#125;</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    t.throw(<span class="string">'a'</span>);</span><br><span class="line">    t.throw(<span class="string">'b'</span>);</span><br><span class="line">    t.throw(<span class="string">'c'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'外部'</span>,e)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内部1 a</span></span><br><span class="line"><span class="comment">//内部2 b</span></span><br><span class="line"><span class="comment">//外部 c</span></span><br></pre></td></tr></table></figure><h3 id="Generator-return"><a href="#Generator-return" class="headerlink" title="Generator return"></a>Generator return</h3><blockquote><p>结束 Generator 函数 并且给定对象返回值<br>如果有 <code>try...finally</code>，且在执行中，return方法会等待<code>finally</code> 执行完毕，再执行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">g</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ge = g();</span><br><span class="line"></span><br><span class="line">ge.next(); <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">ge.return(<span class="string">'Owen'</span>); <span class="comment">// &#123; value:"Owen", done: true &#125;</span></span><br><span class="line">ge.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// try...finally</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">numbers</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">yield</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> nun = numbers();</span><br><span class="line">nun.next() <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">nun.next() <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line">nun.return(<span class="number">7</span>) <span class="comment">// &#123; value: 4, done: false &#125;</span></span><br><span class="line">nun.next() <span class="comment">// &#123; value: 5, done: false &#125;</span></span><br><span class="line">nun.next() <span class="comment">// &#123; value: 7, done: true &#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><p><strong>next()、throw()、return()</strong></p><blockquote><p>都是让 Generator 恢复执行，并且使用不同语句替换 <code>yield</code>  </p></blockquote><h3 id="yield-1"><a href="#yield-1" class="headerlink" title="yield*"></a>yield*</h3><blockquote><p>Generator 函数默认不在内部调用另一个 Generator 函数 是没有效果的，如果<label>放到 <code>yield</code> 后面 会返回一个遍历器对象</label><br><code>yield*</code> 后面的 <code>Generator</code> 函数（没有return语句时），等同于在 <code>Generator</code> 函数内部，部署一个 <code>for...of</code> 循环。<br>如果 <code>yield*</code> 后面紧跟数组，会遍历数组成员（数组原始支持遍历器）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">g</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'x'</span>;</span><br><span class="line">    f();</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'y'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span>  g())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key)</span><br><span class="line">    <span class="comment">//"x" "y"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//yield*</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">y</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'x'</span>;</span><br><span class="line">    <span class="keyword">yield</span>* f();</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'y'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">of</span> y()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(k);</span><br><span class="line">    <span class="comment">// "x" "y" 1 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无 return</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">concat</span>(<span class="params">iter1, iter2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span>* iter1;</span><br><span class="line">  <span class="keyword">yield</span>* iter2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">concat</span>(<span class="params">iter1, iter2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> iter1) &#123;</span><br><span class="line">    <span class="keyword">yield</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> iter2) &#123;</span><br><span class="line">    <span class="keyword">yield</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// yield* array 如果去掉 * 会返回整个数组</span></span><br><span class="line"><span class="comment">//任何数据结构只要有 Iterator 接口，就可以被yield*遍历。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">yield</span>* [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> g = gen();</span><br><span class="line"></span><br><span class="line">g.next() <span class="comment">//&#123;value: "a", done: false&#125;</span></span><br><span class="line">g.next() <span class="comment">//&#123;value: "b", done: false&#125;</span></span><br><span class="line">g.next() <span class="comment">//&#123;value: "c", done: false&#125;</span></span><br><span class="line">g.next() <span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//取出嵌套数组的所有成员</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">iterTree</span>(<span class="params">tree</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(tree))&#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">let</span> arr <span class="keyword">of</span> tree) &#123;</span><br><span class="line">             <span class="keyword">yield</span>* iterTree(arr)</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">yield</span> tree</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tree = [<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>],<span class="number">7</span>],<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> iterTree(tree))&#123;</span><br><span class="line"><span class="built_in">console</span>.log(v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1 2 3 4 5 6 7 8</span></span><br><span class="line"></span><br><span class="line">[...iterTree(tree)] <span class="comment">//[1, 2, 3, 4, 5, 6, 7, 8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历完全二叉树</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面是二叉树的构造函数，</span></span><br><span class="line"><span class="comment">// 三个参数分别是左树、当前节点和右树</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tree</span>(<span class="params">left, label, right</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.left = left;</span><br><span class="line">  <span class="keyword">this</span>.label = label;</span><br><span class="line">  <span class="keyword">this</span>.right = right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面是中序（inorder）遍历函数。</span></span><br><span class="line"><span class="comment">// 由于返回的是一个遍历器，所以要用generator函数。</span></span><br><span class="line"><span class="comment">// 函数体内采用递归算法，所以左树和右树要用yield*遍历</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">inorder</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (t) &#123;</span><br><span class="line">    <span class="keyword">yield</span>* inorder(t.left);</span><br><span class="line">    <span class="keyword">yield</span> t.label;</span><br><span class="line">    <span class="keyword">yield</span>* inorder(t.right);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面生成二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断是否为叶节点</span></span><br><span class="line">  <span class="keyword">if</span> (array.length == <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">new</span> Tree(<span class="literal">null</span>, array[<span class="number">0</span>], <span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Tree(make(array[<span class="number">0</span>]), array[<span class="number">1</span>], make(array[<span class="number">2</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tree = make([[[<span class="string">'a'</span>], <span class="string">'b'</span>, [<span class="string">'c'</span>]], <span class="string">'d'</span>, [[<span class="string">'e'</span>], <span class="string">'f'</span>, [<span class="string">'g'</span>]]]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历二叉树</span></span><br><span class="line"><span class="keyword">var</span> result = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> node <span class="keyword">of</span> inorder(tree)) &#123;</span><br><span class="line">  result.push(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result <span class="comment">// ['a', 'b', 'c', 'd', 'e', 'f', 'g']</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="对象属性中的-Generator-函数"><a href="#对象属性中的-Generator-函数" class="headerlink" title="对象属性中的 Generator 函数"></a>对象属性中的 Generator 函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    * generator()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    generator :<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Generator-函数的this"><a href="#Generator-函数的this" class="headerlink" title="Generator 函数的this"></a>Generator 函数的this</h3><blockquote><p>Generator 函数不能和 new 一起使用</p><p><label>函数总返回一个遍历器，并且它指向 函数实例，同时继承 函数原型对象上的方法</label><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">18</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Owen"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj =g() <span class="comment">//g &#123;&lt;suspended&gt;&#125;</span></span><br><span class="line">obj <span class="keyword">instanceof</span> g <span class="comment">//true</span></span><br><span class="line">obj.say() <span class="comment">//"Owen"</span></span><br><span class="line"></span><br><span class="line">obj.next() <span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br><span class="line">obj.say() <span class="comment">//"Owen"</span></span><br><span class="line"><span class="comment">//因为 next 返回的是遍历器对象而不是 this 对象,所以不会返回 18</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过call 绑定this</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">Gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">this</span>.name = <span class="string">"Owen"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = Gen.call(Gen.prototype);</span><br><span class="line">obj.next()</span><br><span class="line">obj.age <span class="comment">// 18</span></span><br><span class="line">obj.next();</span><br><span class="line">obj.name <span class="comment">//"Owen"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 new 的变通方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">G</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Gen.call(Gen.prototype)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="keyword">new</span> G();</span><br><span class="line">obj1.next()</span><br><span class="line">obj1.age <span class="comment">// 18</span></span><br><span class="line">obj1.next();</span><br><span class="line">obj1.name <span class="comment">//"Owen"</span></span><br></pre></td></tr></table></figure></p></blockquote><h2 id="Generator-函数异步应用"><a href="#Generator-函数异步应用" class="headerlink" title="Generator 函数异步应用"></a>Generator 函数异步应用</h2><blockquote><p>异步: 执行一个任务的时候还不能马上返回结果，那么先将其搁置到后台，执行其他任务，等到有结果返回之后放到消息队列中，等主线程任务执行完毕后，再从消息队列中取出对应任务（callback），执行。<br>同步： 执行一个任务，中间无法中断，只能等待任务返回结果，才能执行其他任务。</p></blockquote><p>异步编程：</p><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url:&apos;url&apos;,</span><br><span class="line">  success:function(res)&#123;</span><br><span class="line">    console.log(res)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><blockquote><p>起初由网景公司知道一套事件驱动机制（事件捕获），之后IE 推出自己的驱动机制（事件冒泡）<br>利用驱动机制实现事件代理委托<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">el.addEventListener(event,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;,boolean);</span><br><span class="line"></span><br><span class="line"><span class="comment">//IE8 以下</span></span><br><span class="line">el.attachEvent(event,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//事件代理委托</span></span><br><span class="line"><span class="keyword">var</span> parent = <span class="built_in">document</span>.getElementById(<span class="string">'parent'</span>);</span><br><span class="line">parent.addEventListener(<span class="string">'click'</span>,showColor,<span class="literal">false</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showColor</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> son = e.target;</span><br><span class="line">        <span class="keyword">if</span>(son.nodeName.toLowerCase() === <span class="string">'li'</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'The color is '</span> + son.innerHTML);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="发布-订阅（观察者模式）"><a href="#发布-订阅（观察者模式）" class="headerlink" title="发布/订阅（观察者模式）"></a>发布/订阅（观察者模式）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现一个简单的发布订阅</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  订阅一个事件，发布对应事件并且执行方法</span></span><br><span class="line"><span class="comment">  需要先有代理主题 message proxy</span></span><br><span class="line"><span class="comment">  然后订阅者去订阅</span></span><br><span class="line"><span class="comment">  然后发布者发布消息执行方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">PubSub</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  <span class="comment">// message proxy</span></span><br><span class="line">  PubSub.prototype.message = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// publish</span></span><br><span class="line">  PubSub.prototype.pub = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="comment">// Turn arguments  into real array</span></span><br><span class="line">    <span class="keyword">let</span> args = [].slice.call(<span class="built_in">arguments</span>,<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> event = args.shift();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.message[event]) <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> list = <span class="keyword">this</span>.message[event];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span>  list) &#123;</span><br><span class="line">       item.apply(<span class="keyword">this</span>,args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// subscribe</span></span><br><span class="line">  PubSub.prototype.sub = <span class="function"><span class="keyword">function</span> (<span class="params">event,callback</span>)</span>&#123;      </span><br><span class="line">    <span class="keyword">if</span>( !<span class="keyword">this</span>.message[event]) &#123;</span><br><span class="line">        <span class="keyword">this</span>.message[event] = [];</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.message[event].push(callback);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="comment">// unsubscribe</span></span><br><span class="line">  PubSub.prototype.unsub = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (!<span class="keyword">this</span>.message[event]) <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">this</span>.message[event] = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Promise-对象"><a href="#Promise-对象" class="headerlink" title="Promise 对象"></a>Promise 对象</h3><blockquote><p>为了解决 “回调地狱”（callback hell）而提出的写法<br>允许将 <code>callback</code> 变成链式调用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// read I/O</span></span><br><span class="line"><span class="keyword">let</span> readFile = <span class="built_in">require</span>(<span class="string">'fs-readfile-promise'</span>);</span><br><span class="line"></span><br><span class="line">readFile(fileA)</span><br><span class="line">    .then( <span class="function">(<span class="params">data</span>) =&gt;</span> <span class="built_in">console</span>.log(data.toString()))</span><br><span class="line">    .then( <span class="function"><span class="params">()</span> =&gt;</span>   readFile(fileB))</span><br><span class="line">    .then( <span class="function">(<span class="params">data</span>) =&gt;</span> <span class="built_in">console</span>.log(data.toString()))</span><br><span class="line">    .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(err));</span><br></pre></td></tr></table></figure></p></blockquote><p>Promise 的最大问题是代码冗余，原来的任务被 Promise 包装了一下，不管什么操作，一眼看去都是一堆then，原来的语义变得很不清楚。</p><h3 id="Generator-函数（es6）"><a href="#Generator-函数（es6）" class="headerlink" title="Generator 函数（es6）"></a>Generator 函数（es6）</h3><h4 id="协程"><a href="#协程" class="headerlink" title="协程"></a><strong>协程</strong></h4><blockquote><p>多个线程相互协作，完成异步任务<br>步骤</p><ul><li>A方法开始任务</li><li>A方法执行到一半，暂停，将执行权转移到主线程</li><li>一段时间后主线程交还执行权</li><li>A方法恢复执行</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//example</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">async</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//... do something</span></span><br><span class="line">  <span class="keyword">let</span> file = <span class="keyword">yield</span> readFile(fileA);</span><br><span class="line">  <span class="comment">//... do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//异步操作需要暂停的地方，都用yield语句注明。</span></span><br></pre></td></tr></table></figure><label> 协程代码的写法非常像同步操作，Generator 函数最大优点是可以交出函数执行权</label><p>函数通过<code>next</code> 进行数据交换，通过 <code>throw</code>进行错误处理<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">async</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> n;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">     n =  <span class="keyword">yield</span> ++num;</span><br><span class="line">  &#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> g = <span class="keyword">async</span>(<span class="number">1</span>);</span><br><span class="line">g.next()</span><br><span class="line">g.throw(<span class="string">'error'</span>);</span><br></pre></td></tr></table></figure></p><h4 id="封装异步任务"><a href="#封装异步任务" class="headerlink" title="封装异步任务"></a>封装异步任务</h4><p>使用<code>node-fetch</code> 模块 返回一个Promise 对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> fetch = <span class="built_in">require</span>(<span class="string">'node-fetch'</span>);</span><br><span class="line"><span class="keyword">let</span> g = gen();</span><br><span class="line"><span class="keyword">let</span> result = g.next();</span><br><span class="line"></span><br><span class="line">result.value.then(<span class="function">(<span class="params">data</span>) =&gt;</span> data.json())</span><br><span class="line">            .then(<span class="function">(<span class="params">data</span>) =&gt;</span> g.next(data) );</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> url = <span class="string">'/index.json'</span>;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">yield</span> fetch(url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Thunk-形实转换"><a href="#Thunk-形实转换" class="headerlink" title="Thunk (形实转换)"></a>Thunk (形实转换)</h4><p><strong>函数传值策略</strong></p><ul><li>传值调用（参数在传入函数前计算）,简单易懂，不过可能会造成性能损失</li><li>传名调用（将参数放到一个临时函数，再将这个临时函数传入函数体（<code>Thunk</code> 函数)）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传值</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">x,b</span>) </span>&#123; <span class="keyword">return</span> x * <span class="number">3</span> &#125;;</span><br><span class="line">fn(x + <span class="number">1</span>) <span class="comment">//   4 * 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//传名</span></span><br><span class="line">fn(x + <span class="number">1</span>)  <span class="comment">//    (x + 1) * 3 </span></span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">var</span> thunk = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123; <span class="keyword">return</span> x + <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">fn (thunk) <span class="comment">// thunk() * 3</span></span><br></pre></td></tr></table></figure><h3 id="async-await（es7"><a href="#async-await（es7" class="headerlink" title="async/await（es7)"></a>async/await（es7)</h3>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> async </tag>
            
            <tag> Generator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reflect</title>
      <link href="/2019/04/02/Reflect/"/>
      <url>/2019/04/02/Reflect/</url>
      
        <content type="html"><![CDATA[<h2 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h2><blockquote><p>将<code>Object</code>对象中一些属于语言内部的方法，放到 <code>Reflect</code>对象中<br>会逐渐替换<code>Object</code>对象 中对应的方法<br>优化一些放法返回的结果<br>只要是 Proxy 对象的方法，就能在 Reflect 对象上找到对应的方法,不管 Proxy 怎么修改默认行为，你总可以在 Reflect 上获取默认行为。</p></blockquote><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><blockquote><p>13 个静态方法  作用对应Object同名方法</p><label>所有方法第一个参数，必须是对象，否则报错</label></blockquote><h3 id="Reflect-apply-target-thisArg-args"><a href="#Reflect-apply-target-thisArg-args" class="headerlink" title="Reflect.apply(target, thisArg, args)"></a>Reflect.apply(target, thisArg, args)</h3><blockquote><p>等同于 <code>Function</code> 构造函数中的<code>Function.prototype.apply.call(func, thisArg, args)</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ages = [<span class="number">11</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">96</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">const</span> youngest = <span class="built_in">Math</span>.min.apply(<span class="built_in">Math</span>, ages);</span><br><span class="line"><span class="keyword">const</span> oldest = <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, ages);</span><br><span class="line"><span class="keyword">const</span> type = <span class="built_in">Object</span>.prototype.toString.call(youngest);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reflect</span></span><br><span class="line"><span class="keyword">const</span> youngest = <span class="built_in">Reflect</span>.apply(<span class="built_in">Math</span>.min, <span class="built_in">Math</span>, ages);</span><br><span class="line"><span class="keyword">const</span> oldest = <span class="built_in">Reflect</span>.apply(<span class="built_in">Math</span>.max, <span class="built_in">Math</span>, ages);</span><br><span class="line"><span class="keyword">const</span> type = <span class="built_in">Reflect</span>.apply(<span class="built_in">Object</span>.prototype.toString, youngest, []);</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-construct-target-args"><a href="#Reflect-construct-target-args" class="headerlink" title="Reflect.construct(target, args)"></a>Reflect.construct(target, args)</h3><blockquote><p>对应 <code>new target(...args)</code>  提供了一种不使用 new，来调用构造函数的方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greeting</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// new 的写法</span></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> Greeting(<span class="string">'Owen'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reflect.construct 的写法</span></span><br><span class="line"><span class="keyword">const</span> instance = <span class="built_in">Reflect</span>.construct(Greeting, [<span class="string">'Owen'</span>]);</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-get-target-name-receiver"><a href="#Reflect-get-target-name-receiver" class="headerlink" title="Reflect.get(target, name, receiver)"></a>Reflect.get(target, name, receiver)</h3><blockquote><p>查找目标对象属性值并返回<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name : <span class="string">'Owen'</span>,</span><br><span class="line">    age:<span class="number">18</span>,</span><br><span class="line">    <span class="keyword">get</span> baz()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="keyword">this</span>.age </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.get(obj,<span class="string">'name'</span>) <span class="comment">//'Owen'</span></span><br><span class="line"><span class="built_in">Reflect</span>.get(obj,<span class="string">'baz'</span>)  <span class="comment">//'Owen18'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// receiver 改变 get 函数 this 指向</span></span><br><span class="line"><span class="keyword">let</span> obj1 =&#123;</span><br><span class="line">     name : <span class="string">'Owen'</span>,</span><br><span class="line">    age:<span class="number">16</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Reflect</span>.get(obj,<span class="string">'baz'</span>,obj1) <span class="comment">//'Owen16</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-set-target-name-value-receiver"><a href="#Reflect-set-target-name-value-receiver" class="headerlink" title="Reflect.set(target, name, value, receiver)"></a>Reflect.set(target, name, value, receiver)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name : <span class="string">'Owen'</span>,</span><br><span class="line">    age:<span class="number">18</span>,</span><br><span class="line">    <span class="keyword">set</span> baz(val)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.age = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Reflect</span>.set(obj,<span class="string">'name'</span>,<span class="string">'wen'</span>) </span><br><span class="line">obj.name <span class="comment">//'wen'</span></span><br><span class="line"><span class="built_in">Reflect</span>.set(obj,<span class="string">'baz'</span>, <span class="number">16</span>)</span><br><span class="line">obj.age <span class="comment">// 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//receiver 改变 set this 指向</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  name: <span class="string">'wen'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Reflect</span>.set(obj,<span class="string">'baz'</span>, <span class="number">16</span>,obj1)</span><br><span class="line">obj.name <span class="comment">// wen</span></span><br></pre></td></tr></table></figure><blockquote><p>如果 <code>Proxy</code>和 <code>Reflect</code> 联合使用，<label>并且传入 <code>receiver</code> </label>， 那么 <code>Reflect.set</code> 会触发<code>Proxy.defineProperty</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> proxy = &#123;</span><br><span class="line">    name:<span class="string">'Owen'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">    <span class="keyword">set</span> (target, key, value, receiver)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'set'</span>)</span><br><span class="line">        Refelect.set(target, key, value, receiver)</span><br><span class="line">    &#125;,</span><br><span class="line">    defineProerty(target, key, attribute)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'defineProperty'</span>)</span><br><span class="line">        <span class="built_in">Reflect</span>.defineProperty(target, key, attribute)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(proxy,handler)</span><br><span class="line">obj.name = <span class="string">'wen'</span>;</span><br><span class="line"><span class="comment">// set</span></span><br><span class="line"><span class="comment">// defineProperty</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">因为Proxy.set的receiver参数总是指向当前的 Proxy实例（即上例的obj），</span></span><br><span class="line"><span class="comment">而Reflect.set一旦传入receiver，就会将属性赋值到receiver上面（即obj），导致触发defineProperty拦截。</span></span><br><span class="line"><span class="comment">如果Reflect.set没有传入receiver，那么就不会触发defineProperty拦截。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-defineProperty-target-propertykey-attribute"><a href="#Reflect-defineProperty-target-propertykey-attribute" class="headerlink" title="Reflect.defineProperty(target, propertykey, attribute)"></a>Reflect.defineProperty(target, propertykey, attribute)</h3><blockquote><p>对应 <code>Object.defineProperty</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyDate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*…*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(MyDate, <span class="string">'now'</span>, &#123;</span><br><span class="line">  value: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Date</span>.now()</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="built_in">Reflect</span>.defineProperty(MyDate, <span class="string">'now'</span>, &#123;</span><br><span class="line">  value: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Date</span>.now()</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-deleteProperty-target-name"><a href="#Reflect-deleteProperty-target-name" class="headerlink" title="Reflect.deleteProperty(target, name)"></a>Reflect.deleteProperty(target, name)</h3><blockquote><p>对应 <code>delete obj.name</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name:<span class="string">'Owen'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//es5 </span></span><br><span class="line"><span class="keyword">delete</span> obj.name</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reflect</span></span><br><span class="line"><span class="built_in">Reflect</span>.deleteProperty(obj,<span class="string">'name'</span>)</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-has-target-name"><a href="#Reflect-has-target-name" class="headerlink" title="Reflect.has(target, name)"></a>Reflect.has(target, name)</h3><blockquote><p>对应 <code>name in obj</code>  中的 in 运算<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name:<span class="string">'Owen'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//es5</span></span><br><span class="line"> <span class="string">'name'</span> <span class="keyword">in</span> obj <span class="comment">// ture</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Reflect</span></span><br><span class="line"><span class="built_in">Reflect</span>.has(obj,<span class="string">'name'</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-ownKeys-target"><a href="#Reflect-ownKeys-target" class="headerlink" title="Reflect.ownKeys(target)"></a>Reflect.ownKeys(target)</h3><blockquote><p>对应 <code>Object.getOwnPropertyNames</code> and <code>Object.getOwnPropertySymbols</code>  返回对象所有属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name:<span class="string">'Owen'</span>,</span><br><span class="line">  age:<span class="number">18</span>,</span><br><span class="line">  [<span class="built_in">Symbol</span>.for(<span class="string">'name'</span>)]:<span class="string">'Owen'</span>,</span><br><span class="line">  [<span class="built_in">Symbol</span>.for(<span class="string">'age'</span>)]:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(obj)</span><br><span class="line"><span class="comment">// ['name', 'age']</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertySymbols(obj)</span><br><span class="line"><span class="comment">//[Symbol(name), Symbol(age)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="built_in">Reflect</span>.ownKeys(obj)</span><br><span class="line"><span class="comment">//['name', 'age',Symbol(name), Symbol(age)]</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-isExtensible-target"><a href="#Reflect-isExtensible-target" class="headerlink" title="Reflect.isExtensible(target)"></a>Reflect.isExtensible(target)</h3><blockquote><p>对应 <code>Object.isExtensible</code>  返回 <code>boolean</code>，表示当前对象是否可扩展。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj =&#123;&#125;</span><br><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="built_in">Object</span>.isExtensible(obj) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="built_in">Reflect</span>.isExtensible(obj) <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-preventExtensions-target"><a href="#Reflect-preventExtensions-target" class="headerlink" title="Reflect.preventExtensions(target)"></a>Reflect.preventExtensions(target)</h3><blockquote><p> 对应 <code>Object.preventExtensions</code>  让一个对象变为不可扩展。它返回 <code>boolean</code>，表示是否操作成功。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj =&#123;&#125;</span><br><span class="line"><span class="comment">// es5 </span></span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(obj) <span class="comment">// Object &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="built_in">Reflect</span>.preventExtensions(obj) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-getOwnPropertyDescriptor-target-propertyKey"><a href="#Reflect-getOwnPropertyDescriptor-target-propertyKey" class="headerlink" title="Reflect.getOwnPropertyDescriptor(target, propertyKey)"></a>Reflect.getOwnPropertyDescriptor(target, propertyKey)</h3><blockquote><p>对应 <code>Object.getOwnPropertyDescriptors</code>   返回对象所有自身属性（非继承） 的描述对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj t = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'hidden'</span>, &#123;</span><br><span class="line">  value: <span class="literal">true</span>,</span><br><span class="line">  enumerable: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">var</span> theDescriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">'hidden'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line">theDescriptor = <span class="built_in">Reflect</span>.getOwnPropertyDescriptor(obj, <span class="string">'hidden'</span>);</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-getPrototypeOf-target"><a href="#Reflect-getPrototypeOf-target" class="headerlink" title="Reflect.getPrototypeOf(target)"></a>Reflect.getPrototypeOf(target)</h3><blockquote><p>获取对象原型<br>参数不是对象，Object.getPrototypeOf会将这个参数转为对象，然后再运行，而Reflect.getPrototypeOf会报错。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObj = <span class="keyword">new</span> FancyThing();</span><br><span class="line"></span><br><span class="line"><span class="comment">// es5 </span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(myObj) === FancyThing.prototype;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reflect</span></span><br><span class="line"><span class="built_in">Reflect</span>.getPrototypeOf(myObj) === FancyThing.prototype;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Reflect-setPrototypeOf-target-prototype"><a href="#Reflect-setPrototypeOf-target-prototype" class="headerlink" title="Reflect.setPrototypeOf(target, prototype)"></a>Reflect.setPrototypeOf(target, prototype)</h4><blockquote><p>对应<code>Object.setPrototypeOf</code> 设置 原型对象， 返回 <code>Boolean</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj,Person.prototype);</span><br><span class="line"></span><br><span class="line"><span class="comment">//es6 </span></span><br><span class="line"><span class="built_in">Reflect</span>.setPrototypeOf(obj,Person.prototype);</span><br><span class="line"></span><br><span class="line">obj.length <span class="comment">//0</span></span><br></pre></td></tr></table></figure><h2 id="Proxy-Observer-Mode"><a href="#Proxy-Observer-Mode" class="headerlink" title="Proxy Observer  Mode"></a>Proxy Observer  Mode</h2><blockquote><p>函数字段观察数据对象，如果数据改变，函数自动执行</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//队列函数</span></span><br><span class="line"><span class="keyword">const</span> observe = <span class="function"><span class="params">callback</span> =&gt;</span> queue.add(callback);</span><br><span class="line"></span><br><span class="line"><span class="comment">//观察目标</span></span><br><span class="line"><span class="keyword">const</span> observable = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj,&#123;<span class="keyword">set</span>&#125;);</span><br><span class="line"></span><br><span class="line">//自动执行</span><br><span class="line">function <span class="keyword">set</span> (target,key,value,receiver)&#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.set(target,key,value,receiver);</span><br><span class="line">  queue.forEach(<span class="function"><span class="params">observer</span> =&gt;</span> observer() );</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = observable(&#123;  </span><br><span class="line">    name:<span class="string">'Owen'</span>,</span><br><span class="line">    age:<span class="number">18</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span>  <span class="title">auto</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;person.name&#125;</span>,<span class="subst">$&#123;person.age&#125;</span>`</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">observe(auto);</span><br><span class="line">person.name = <span class="string">'Owen'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">先定义一个Set集合，所有观察者函数都放进这个集合。然后，observable函数返回原始对象的代理，拦截赋值操作。</span></span><br><span class="line"><span class="comment">拦截函数set之中，会自动执行所有观察者。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reflect </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>proxy</title>
      <link href="/2019/03/26/proxy/"/>
      <url>/2019/03/26/proxy/</url>
      
        <content type="html"><![CDATA[<h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><blockquote><p>用于修改某些操作的默认行为。（对编程语言进行编程）<br>在目标对象之前架设一层‘门户’，外界访问对象时，必须先访问这个门户，<label>对外界的访问进行过滤和改写</label></p></blockquote><p><strong>生成:</strong></p><blockquote><p>ES6中 所有proxy实例 通过 Proxy 构造函数生成<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">new</span> <span class="built_in">Proxy</span>(target,handler);</span><br><span class="line"><span class="comment">// target对象 要访问的对象， handler对象 拦截行为</span></span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  <span class="keyword">get</span>: function(target, property) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">35</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy.time <span class="comment">// 35</span></span><br><span class="line">proxy.name <span class="comment">// 35</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Proxy-支持的操作"><a href="#Proxy-支持的操作" class="headerlink" title="Proxy 支持的操作"></a>Proxy 支持的操作</h3><h4 id="get-target-propKey-proxy"><a href="#get-target-propKey-proxy" class="headerlink" title="get(target, propKey, proxy)"></a>get(target, propKey, proxy)</h4><blockquote><p>拦截对象属性的读取，比如proxy.foo和proxy[‘foo’]。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*get 接收三个参数</span></span><br><span class="line"><span class="comment">*target 目标对象</span></span><br><span class="line"><span class="comment">*property 属性名</span></span><br><span class="line"><span class="comment">*proxy 实例本身</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">"Owen"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;</span><br><span class="line">  <span class="keyword">get</span>: function(target, property) &#123;</span><br><span class="line">    <span class="keyword">if</span> (property <span class="keyword">in</span> target) &#123;</span><br><span class="line">      <span class="keyword">return</span> target[property];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">ReferenceError</span>(<span class="string">"Property \""</span> + property + <span class="string">"\" does not exist."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy.name <span class="comment">// "Owen"</span></span><br><span class="line">proxy.age <span class="comment">// error:Property "age" does not exist.</span></span><br><span class="line"><span class="comment">//如果访问目标对象不存在的属性，会抛出一个错误。如果没有这个拦截函数，访问不存在的属性，只会返回undefined。</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="set-target-propKey-value-proxy"><a href="#set-target-propKey-value-proxy" class="headerlink" title="set(target, propKey, value, proxy)"></a>set(target, propKey, value, proxy)</h4><blockquote><p>拦截对象属性的设置，比如proxy.foo = v或proxy[‘foo’] = v，返回一个布尔值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*set 有4 个参数</span></span><br><span class="line"><span class="comment">*target 目标对象</span></span><br><span class="line"><span class="comment">*property 属性名</span></span><br><span class="line"><span class="comment">*value 属性值</span></span><br><span class="line"><span class="comment">*proxy 实例本身</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">let</span> validator = &#123;</span><br><span class="line">  <span class="keyword">set</span>: function(obj, prop, value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prop === <span class="string">'age'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">Number</span>.isInteger(value)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'The age is not an integer'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (value &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeError</span>(<span class="string">'The age seems invalid'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对于满足条件的 age 属性以及其他属性，直接保存</span></span><br><span class="line">    obj[prop] = value;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">//严格模式下 return false or undefined 会报错 </span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, validator);</span><br><span class="line">obj.age = <span class="number">18</span>;</span><br><span class="line">obj.age =<span class="string">'18'</span>; <span class="comment">//error</span></span><br><span class="line">obj.age =<span class="number">101</span>;<span class="comment">//error</span></span><br><span class="line"><span class="comment">//每当对象发生变化时，会自动更新 DOM。</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="has-target-propKey"><a href="#has-target-propKey" class="headerlink" title="has(target, propKey)"></a>has(target, propKey)</h4><blockquote><p>拦截propKey in proxy的操作，返回一个布尔值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*接收两个参数</span></span><br><span class="line"><span class="comment">*target目标对象</span></span><br><span class="line"><span class="comment">*key 查询的属性名</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  has (target, key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">'_'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> key <span class="keyword">in</span> target;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">_prop</span>: <span class="string">'Owen'</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="string">'_prop'</span> <span class="keyword">in</span> proxy <span class="comment">// false</span></span><br><span class="line"><span class="comment">//拦截以‘_’开头的属性名 对for ...in 遍历不生效</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="deleteProperty-target-propKey"><a href="#deleteProperty-target-propKey" class="headerlink" title="deleteProperty(target, propKey)"></a>deleteProperty(target, propKey)</h4><blockquote><p>拦截delete proxy[propKey]的操作，返回一个布尔值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  deleteProperty (target, key) &#123;</span><br><span class="line">    invariant(key, <span class="string">'delete'</span>);</span><br><span class="line">    <span class="keyword">delete</span> target[key];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invariant</span> (<span class="params">key, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">'_'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Invalid attempt to <span class="subst">$&#123;action&#125;</span> private "<span class="subst">$&#123;key&#125;</span>" property`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">_prop</span>: <span class="string">'foo'</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="keyword">delete</span> proxy._prop</span><br><span class="line"><span class="comment">// Error: Invalid attempt to delete private "_prop" property</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="ownKeys-target"><a href="#ownKeys-target" class="headerlink" title="ownKeys(target)"></a>ownKeys(target)</h4><blockquote><p>拦截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for…in循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而Object.keys()的返回结果仅包括目标对象自身的可遍历属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拦截对象自身属性的读取操作</span></span><br><span class="line"><span class="keyword">let</span> target = &#123;</span><br><span class="line">  _bar: <span class="string">'foo'</span>,</span><br><span class="line">  _prop: <span class="string">'bar'</span>,</span><br><span class="line">  prop: <span class="string">'Owen'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">  ownKeys (target) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.ownKeys(target).filter(<span class="function"><span class="params">key</span> =&gt;</span> key[<span class="number">0</span>] !== <span class="string">'_'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(proxy)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(target[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//会自动过滤 不存在的属性，Symbol，不可遍历属性</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="getOwnPropertyDescriptor-target-propKey"><a href="#getOwnPropertyDescriptor-target-propKey" class="headerlink" title="getOwnPropertyDescriptor(target, propKey)"></a>getOwnPropertyDescriptor(target, propKey)</h4><blockquote><p>拦截Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  getOwnPropertyDescriptor (target, key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">'_'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.getOwnPropertyDescriptor(target, key);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">_foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="string">'tar'</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(proxy, <span class="string">'wat'</span>)</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(proxy, <span class="string">'_foo'</span>)</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(proxy, <span class="string">'baz'</span>)</span><br><span class="line"><span class="comment">// &#123; value: 'tar', writable: true, enumerable: true, configurable: true &#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="defineProperty-target-propKey-propDesc"><a href="#defineProperty-target-propKey-propDesc" class="headerlink" title="defineProperty(target, propKey, propDesc)"></a>defineProperty(target, propKey, propDesc)</h4><blockquote><p>拦截 Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一个布尔值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  defineProperty (target, key, descriptor) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line">proxy.owen = <span class="string">'Owen'</span> <span class="comment">// 不会生效</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="preventExtensions-target"><a href="#preventExtensions-target" class="headerlink" title="preventExtensions(target)"></a>preventExtensions(target)</h4><blockquote><p>拦截<code>Object.preventExtensions(proxy)</code>，返回一个布尔值。<br>该方法必须返回一个布尔值，否则会被自动转为布尔值。<br>目标对象不可扩展时（<label>即Object.isExtensible(proxy)为false</label>），<code>proxy.preventExtensions</code>才能返回true<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  preventExtensions: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(proxy)</span><br><span class="line"><span class="comment">//error</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="getPrototypeOf-target"><a href="#getPrototypeOf-target" class="headerlink" title="getPrototypeOf(target)"></a>getPrototypeOf(target)</h4><blockquote><p>拦截Object.getPrototypeOf(proxy)，返回一个对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主要拦截获取对象原型</span></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">*Object.prototype.__proto__</span></span><br><span class="line"><span class="comment">*Object.prototype.isPrototypeOf()</span></span><br><span class="line"><span class="comment">*Object.getPrototypeOf()</span></span><br><span class="line"><span class="comment">*Reflect.getPrototypeOf()</span></span><br><span class="line"><span class="comment">*instanceof</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">var</span> proto = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  getPrototypeOf(target) &#123;</span><br><span class="line">    <span class="keyword">return</span> proto;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(p) === proto <span class="comment">// true</span></span><br><span class="line"><span class="comment">//返回值必须是对象或者null，否则报错</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="isExtensible-target"><a href="#isExtensible-target" class="headerlink" title="isExtensible(target)"></a>isExtensible(target)</h4><blockquote><p>拦截Object.isExtensible(proxy)，返回一个布尔值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  isExtensible: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Owen"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.isExtensible(p)</span><br><span class="line"><span class="comment">//返回值必须是Boolean</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="setPrototypeOf-target-proto"><a href="#setPrototypeOf-target-proto" class="headerlink" title="setPrototypeOf(target, proto)"></a>setPrototypeOf(target, proto)</h4><blockquote><p>拦截Object.setPrototypeOf(proxy, proto)，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  setPrototypeOf (target, proto) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Changing the prototype is forbidden'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> proto = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> target = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(proxy, proto);</span><br><span class="line"><span class="comment">// Error: Changing the prototype is forbidden</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="apply-target-object-args"><a href="#apply-target-object-args" class="headerlink" title="apply(target, object, args)"></a>apply(target, object, args)</h4><blockquote><p>拦截 Proxy 实例作为函数调用的操作，比如proxy(…args)、proxy.call(object, …args)、proxy.apply(…)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*接收三个参数 </span></span><br><span class="line"><span class="comment">*target 目标对象</span></span><br><span class="line"><span class="comment">*this  目标对象上下文</span></span><br><span class="line"><span class="comment">*目标对象的参数数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> target = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'I am the target'</span>; &#125;;</span><br><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  apply: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'I am the proxy'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"></span><br><span class="line">p()</span><br><span class="line"><span class="comment">// "I am the proxy"</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="construct-target-args"><a href="#construct-target-args" class="headerlink" title="construct(target, args)"></a>construct(target, args)</h4><blockquote><p>拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(…args)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接收两个参数</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*target 目标对象</span></span><br><span class="line"><span class="comment">*args 构造函数参数对象</span></span><br><span class="line"><span class="comment">函数必须返回对象，否则会报错</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">let</span> obj = &#123;</span><br><span class="line">      construct: <span class="function"><span class="keyword">function</span>(<span class="params">target, args</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Owen: '</span> + args.join(<span class="string">', '</span>));</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">value</span>: args[<span class="number">0</span>] * <span class="number">10</span> &#125;;</span><br><span class="line">   <span class="comment">// retirn '18'; error</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, obj)</span><br><span class="line"> <span class="keyword">new</span> p(<span class="number">2</span>).value <span class="comment">// 20</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Proxy-revocable"><a href="#Proxy-revocable" class="headerlink" title="Proxy.revocable"></a>Proxy.revocable</h3><blockquote><p><code>Proxy.revocable</code>方法返回一个可取消的 Proxy 实例。<br>使用场景： 目标对象不允许直接访问，必须通过代理访问，一旦访问结束，就收回代理权，不允许再次访问。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> handler = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;proxy, revoke&#125; = <span class="built_in">Proxy</span>.revocable(target,handler);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">Proxy.revocable(target, handler);</span></span><br><span class="line"><span class="comment">&#123;proxy: Proxy, revoke: ƒ&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">proxy.name = <span class="string">'Owen'</span></span><br><span class="line">proxy.name</span><br><span class="line"></span><br><span class="line">revoke() <span class="comment">//取消 proxy 实例</span></span><br><span class="line">proxy.name </span><br><span class="line"><span class="comment">//error</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Proxy-this"><a href="#Proxy-this" class="headerlink" title="Proxy this"></a>Proxy this</h3> <label> 在 Proxy 代理的情况下，目标对象内部的<code>this</code>关键字会指向 Proxy 代理。 </label> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">const</span> target = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">const</span> handler = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"></span><br><span class="line">proxy.getDate();</span><br><span class="line"><span class="comment">//error</span></span><br></pre></td></tr></table></figure><h3 id="Proxy-实例使用"><a href="#Proxy-实例使用" class="headerlink" title="Proxy 实例使用"></a>Proxy 实例使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = createWebService(<span class="string">'http://example.com/data'</span>);</span><br><span class="line"></span><br><span class="line">service.employees().then(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> employees = <span class="built_in">JSON</span>.parse(json);</span><br><span class="line">  <span class="comment">// ···</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWebService</span>(<span class="params">baseUrl</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">    <span class="keyword">get</span>(target, propKey, receiver) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> httpGet(baseUrl+<span class="string">'/'</span> + propKey);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Extend</title>
      <link href="/2019/03/19/extend/"/>
      <url>/2019/03/19/extend/</url>
      
        <content type="html"><![CDATA[<h3 id="String-Extend"><a href="#String-Extend" class="headerlink" title="String Extend"></a>String Extend</h3><h4 id="被-for-of-遍历"><a href="#被-for-of-遍历" class="headerlink" title="被 for ... of 遍历"></a><strong>被 <code>for ... of</code> 遍历</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> <span class="string">'abc'</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">    <span class="comment">//a</span></span><br><span class="line">    <span class="comment">//b</span></span><br><span class="line">    <span class="comment">//c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找字符"><a href="#查找字符" class="headerlink" title="查找字符"></a><strong>查找字符</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'Hello Brother!'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//includes 是否包含参数字符串</span></span><br><span class="line">str.includes(<span class="string">'Br'</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//startsWith  开头是否存在参数字符串</span></span><br><span class="line">str.startsWith(<span class="string">'Hello'</span>) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//endsWith 结尾是否存在参数字符串</span></span><br><span class="line">str.endsWith(<span class="string">'er!'</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="重复字符"><a href="#重复字符" class="headerlink" title="重复字符"></a><strong>重复字符</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//repeat  重复 n 次，  n 为参数,返回新字符串</span></span><br><span class="line"><span class="keyword">let</span> re = <span class="string">'Hello Brother!'</span>;</span><br><span class="line"></span><br><span class="line">re.repeat(<span class="number">2</span>); <span class="comment">//"Hello Brother!Hello Brother!"</span></span><br><span class="line"></span><br><span class="line">re.repeat(<span class="number">-2</span>); <span class="comment">// Invalid count value</span></span><br><span class="line">re.repeat(<span class="literal">Infinity</span>); <span class="comment">// Invalid count value</span></span><br><span class="line"><span class="comment">//小数会取整 </span></span><br><span class="line">re.repeat(<span class="number">1.9</span>) <span class="comment">// "Hello Brother!"</span></span><br><span class="line">re.repeat(<span class="number">-0.9</span>) <span class="comment">// ""</span></span><br></pre></td></tr></table></figure><h4 id="补全字符"><a href="#补全字符" class="headerlink" title="补全字符"></a><strong>补全字符</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//补全开头 padStart 补齐尾部 padEnd</span></span><br><span class="line"><span class="keyword">let</span> pd = <span class="string">'Brother!'</span>; </span><br><span class="line">pd.padStart(<span class="number">14</span>,<span class="string">'Hello '</span>); <span class="comment">//"Hello Brother!"</span></span><br><span class="line"><span class="comment">//第一个参数为补齐的最大长度（整串字符） 第二个参数为补齐缺省的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果原始字符长度大于等于最大长度，返回原字符串</span></span><br><span class="line">pd.padStart(<span class="number">7</span>,<span class="string">'Hello '</span>)<span class="comment">// 'Brother!'</span></span><br><span class="line">pd.padStart(<span class="number">8</span>,<span class="string">'Hello '</span>)<span class="comment">// 'Brother!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果最大长度小于补齐长度，则去除超出部分</span></span><br><span class="line">pd.padStart(<span class="number">9</span>,<span class="string">'Aay '</span>)<span class="comment">//'ABrother!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果缺省第二个参数则 默认使用空格补齐</span></span><br><span class="line">pd.padStart(<span class="number">9</span>)<span class="comment">//' Brother!'</span></span><br></pre></td></tr></table></figure><h4 id="模板字符"><a href="#模板字符" class="headerlink" title="模板字符"></a><strong>模板字符</strong></h4><blockquote><p>通过反引号 “ <code></code> ” 当普通字符串使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有换行和空格会保留，嵌入变量，须将变量包含在 `$&#123;&#125;` 中，并且可进行运算,函数调用，对象调用</span></span><br><span class="line"><span class="keyword">let</span> num =<span class="number">1</span>,obj =&#123;<span class="attr">name</span>:<span class="string">'Owen'</span>&#125;, fn=<span class="function"><span class="params">()</span>=&gt;</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> str =<span class="string">` </span></span><br><span class="line"><span class="string"><span class="subst">$&#123;num * <span class="number">3</span> + <span class="number">1</span> + fn() + obj.name&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str)</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">" </span></span><br><span class="line"><span class="comment">7Owen"</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果紧更在函数名后，函数将被调用（标签模板）</span></span><br><span class="line">alert<span class="string">`123`</span>  <span class="comment">// 等同于</span></span><br><span class="line">alert(<span class="number">123</span>)</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="转义符"><a href="#转义符" class="headerlink" title="转义符 \"></a><strong>转义符 <code>\</code></strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以 x 开头,会被当做 16 进制</span></span><br><span class="line"></span><br><span class="line"> <span class="string">`\x23`</span> <span class="comment">// #</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//以 u 开头,会被当做 unicode  字符</span></span><br><span class="line"> <span class="string">`\u004F`</span> <span class="comment">//"O"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果无法编译将会报错</span></span><br></pre></td></tr></table></figure><p>ES2018 放松了对<code>标签模板</code>里面的字符串转义的限制，无法转义的返回<code>undefined</code>；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log<span class="string">`\uw`</span>;</span><br><span class="line"><span class="comment">//[undefined, raw: Array(1)]</span></span><br><span class="line"><span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><hr><h3 id="Function-Extend"><a href="#Function-Extend" class="headerlink" title="Function Extend"></a>Function Extend</h3><h4 id="形参指定默认值"><a href="#形参指定默认值" class="headerlink" title="形参指定默认值"></a><strong>形参指定默认值</strong></h4><blockquote><p>形参 不能再次使用 let 和 const 声明<br>形参不能重名<br>函数 length 不包含设置默认值和后面的形参个数<br>使用 <code>...arg</code> 中的参数 length 也不包含</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function">(<span class="params">x, y = <span class="string">'Owen'</span></span>) =&gt;</span>( <span class="built_in">console</span>.log(x,y));</span><br><span class="line">fn(<span class="number">1</span>) <span class="comment">// 1 "Owen"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认参数 惰性求值</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">99</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">y = x + <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(y);</span><br><span class="line">&#125;</span><br><span class="line">foo() <span class="comment">// 100</span></span><br><span class="line">x = <span class="number">100</span>;</span><br><span class="line">foo() <span class="comment">// 101</span></span><br><span class="line"><span class="comment">//调用一次计算一次</span></span><br></pre></td></tr></table></figure><blockquote><p>事实上 每次调用函数，如果不传递参数， 形参默认传递 <code>undefined</code><br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 默认参数最好定义再尾部，因为使用形参默认参数，那么那个位置的形参必传</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y = <span class="number">5</span>, z， ...arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y, z];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f() <span class="comment">// [undefined, 5, undefined]</span></span><br><span class="line">f(<span class="number">1</span>) <span class="comment">// [1, 5, undefined]</span></span><br><span class="line">f(<span class="number">1</span>, ,<span class="number">2</span>) <span class="comment">// 报错</span></span><br><span class="line">f(<span class="number">1</span>, <span class="literal">undefined</span>, <span class="number">2</span>) <span class="comment">// [1, 5, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//length 不包含设置默认值 和后面的形参 的个数，</span></span><br><span class="line">f().length <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a><strong>作用域</strong></h4><blockquote><p>函数中的<label>变量无法访问</label> 默认值<br>函数中的形参名不能和默认名一样<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数变量无法访问默认值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">y = x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f() <span class="comment">// ReferenceError: x is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数中的形参名不能和默认名一样</span></span><br><span class="line"><span class="comment">//参数x = x形成一个单独作用域。实际执行的是let x = x，由于暂时性死区的原因，这行代码会报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x = x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">f()<span class="comment">//  x is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y = function(</span>) </span>&#123; x = <span class="number">2</span>; &#125;) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">3</span>;</span><br><span class="line">  y();</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo() <span class="comment">// 3</span></span><br><span class="line">x <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p></blockquote><p>由于  var 声明的 x 和函数形参 x 不再同一个作用域 ， 因此调用 y() x值不变；<br>如果 去掉 var , 那么 x 就指向 形参 x ,调用 y() x = 2。</p><h4 id="reset-参数-（…）"><a href="#reset-参数-（…）" class="headerlink" title="reset 参数 （…）"></a><strong>reset 参数 （…）</strong></h4><blockquote><p>使用形式 <code>...arg</code>  实数以数组的形势赋给变量<br>reset 参数后不能再有形参，否则报错<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">a,...arg</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)<span class="comment">//[2,3,4,5]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">a,...arg,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ught SyntaxError: Rest parameter must be last formal parameter</span></span><br></pre></td></tr></table></figure></p></blockquote><label>只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错。 </label><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a, b = a</span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="comment">// code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params">&#123;a, b&#125;</span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="comment">// code</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function">(<span class="params">...a</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="comment">// code</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="comment">// 报错</span></span><br><span class="line">  fn(&#123;a, b&#125;) &#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br><br>####  <strong>箭头函数</strong><br>&gt;使用 <code>() =&gt;</code>  定义函数<br>注意：<br>- this 指向函数定义时所绑定的普通函数，不会被(bind,call,apply)更改,也不会被调用时的上下文改变。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span><span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">"Owen"</span>&#125;;</span><br><span class="line"></span><br><span class="line">fn.call(obj) <span class="comment">//window</span></span><br><span class="line"></span><br><span class="line">fn.bind(obj)</span><br><span class="line">fn() <span class="comment">//window</span></span><br><span class="line"></span><br><span class="line">fn.apply(obj)  <span class="comment">//window</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="comment">//可以通过改变宿主环境来改变 this 指向</span></span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>)&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">foo.call(obj)() <span class="comment">//&#123;name: "Owen"&#125;</span></span><br><span class="line">foo.call(obj)()() <span class="comment">//&#123;name: "Owen"&#125; &#123;name: "Owen"&#125;</span></span><br></pre></td></tr></table></figure><br><br>- 外层没有普通函数 ，严格模式和非严格模式下它的this都会指向window(全局对象)。<br><br>- 不可以当作构造函数，也就是说，不可以使用new命令，没有<code>prototype</code>属性，不支持<code>new.target</code>,否则会抛出一个错误。<br>- 参数和箭头之间不能换行<br>- 不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。<br><br>- 不可以使用yield命令，因此箭头函数不能用作 Generator 函数。<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//定义简单函数</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">'Owen'</span>;</span><br><span class="line">fn()<span class="comment">// 'Owen'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo = <span class="function"><span class="params">r</span> =&gt;</span> r;</span><br><span class="line">foo(<span class="string">'Owen'</span>) <span class="comment">// 'Owen'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f = <span class="function">(<span class="params">num1,num2</span>) =&gt;</span> num1 + num2;</span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>)<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果返回一个对象需要小括号包裹,f否则会报错</span></span><br><span class="line"><span class="keyword">let</span> f = <span class="function">(<span class="params">name,age</span>) =&gt;</span> (&#123;name,age&#125;);</span><br><span class="line">f(<span class="string">'Owen'</span>,<span class="number">18</span>)<span class="comment">//&#123;name: "Owen", age: 18&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果代码部分大于一条语句，那么需要 大括号包裹，使用return 返回值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fn1 = <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="keyword">return</span> r + a;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>####  <strong>不推荐使用场景</strong><br><br>- 在对象中使用 this.<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  gender:<span class="string">"man"</span>,</span><br><span class="line">  getSex: <span class="function"><span class="params">()</span> =&gt;</span>  &#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>.gender)&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.getSex() <span class="comment">//undefined</span></span><br><span class="line"><span class="comment">//this -&gt; global</span></span><br></pre></td></tr></table></figure><br><br>- 动态使用 this.<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelector(<span class="string">'li'</span>);</span><br><span class="line">lis.addEventListener(<span class="string">'click'</span>,() =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// this -&gt; global</span></span><br></pre></td></tr></table></figure><br><br>- 内部有大量的读写操作，不单纯是为了计算值，这时也不应该使用箭头函数<br><br><br>####  <strong>双冒号运算符 <code>::</code></strong><br><br>&gt; 目前只是一个提案，用来绑定函数的 this 类似于 (bind,call,apply)<br>&gt; 将做边的对象作为参数，绑定到右边函数上。<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bar:: fn</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">fn.bind(bar);</span><br><span class="line"></span><br><span class="line">bar::fn(...arguments);</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">fn.apply(bar, <span class="built_in">arguments</span>);</span><br></pre></td></tr></table></figure><br><br>####  <strong>函数调用</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   foo()</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   fn()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">f()</span><br></pre></td></tr></table></figure><br><br>&gt; 函数调用会在内存中形成一个 调用记录（<code>调用帧</code>），保存着调用位置和内部变量等信息。<br>&gt; 函数 <code>f</code>内部调用 <code>foo</code>函数，<code>f</code>调用帧的上方会形成 <code>foo</code>的调用帧， <code>foo</code>运行接受并且将结果返回给 <code>f</code>，<code>foo</code>的调用帧才会消失，同理，<code>foo</code>函数 内部调用<code>fn</code>函数，还会有 <code>fn</code> 的调用帧，以此类推，形成一个<code>调用栈</code>。<br><br>####  <strong>尾调用</strong><br>&gt; 指某个函数的最后一步是调用另一个函数。<br>&gt; 不一定出现在函数尾部，只要是最后一步操作即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尾调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fn(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//不属于尾调用</span></span><br><span class="line"><span class="comment">// 情况一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> y = g(x);</span><br><span class="line">  <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况二</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> g(x) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况三</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  g(x);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  g(x);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>——<br><br>### Array Extend<br><br>#### <strong>扩展运算 (…)</strong><br><br>&gt;主要用于函数调用， 将一个数组，变为参数序列。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(... [<span class="number">1</span>,<span class="number">2</span>]) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><br><br>##### <strong>clone数组</strong><br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//es5 </span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = arr.concat();</span><br><span class="line"></span><br><span class="line"> <span class="comment">//es6</span></span><br><span class="line"><span class="keyword">let</span> [...arr2] = arr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr];</span><br></pre></td></tr></table></figure><br><br>##### <strong>合并数组</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="keyword">let</span> arr3 = arr.concat(arr1,arr2);</span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="keyword">let</span> arr4 = [...arr,...arr1,...arr2];</span><br></pre></td></tr></table></figure><br><br>合并和clone 都是浅拷贝；<br><br>##### <strong>配合解构赋值</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">first <span class="comment">// 1</span></span><br><span class="line">rest  <span class="comment">// [2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [];</span><br><span class="line">first <span class="comment">// undefined</span></span><br><span class="line">rest  <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="string">"foo"</span>];</span><br><span class="line">first  <span class="comment">// "foo"</span></span><br><span class="line">rest   <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展运算符，只能放在参数的最后一位，否则会报错。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...middle, last] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">//error</span></span><br></pre></td></tr></table></figure><br><br>##### <strong>将伪数组(内部实现了Iterator)转化伪数组</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//内部实现Iterator</span></span><br><span class="line"><span class="comment">//字符串， Set, Map, Generator, NodeList, htmlcollection, classList ,argument内部都实现了迭代接口</span></span><br><span class="line"><span class="keyword">let</span> nodes = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> divs = [...nodes];</span><br><span class="line"></span><br><span class="line"><span class="comment">//内部未实现Iterator</span></span><br><span class="line"><span class="keyword">let</span> objs = &#123;</span><br><span class="line">  <span class="string">'0'</span>: <span class="string">'a'</span>,</span><br><span class="line">  <span class="string">'1'</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="string">'2'</span>: <span class="string">'c'</span>,</span><br><span class="line">  length: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> arr =[...objs];<span class="comment">//error</span></span><br><span class="line"><span class="comment">//可通过 Array.from方法转化</span></span><br><span class="line"><span class="keyword">let</span> arr1 = <span class="built_in">Array</span>.from(objs)</span><br></pre></td></tr></table></figure><br><br>#### Array.from<br>&gt; 将伪数组转化为数组<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrLike = &#123;</span><br><span class="line">  <span class="string">'0'</span>: <span class="string">'a'</span>,</span><br><span class="line">  <span class="string">'1'</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="string">'2'</span>: <span class="string">'c'</span>,</span><br><span class="line">  length: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(arrLike)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*第二个参数</span></span><br><span class="line"><span class="comment"> 遍历每个元素并返回运算结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">Array</span>.from(arrLike, x =&gt; x * x);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">Array</span>.from(arrLike).map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], (x) =&gt; x * x)</span><br><span class="line"><span class="comment">// [1, 4, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将布尔值为false的成员转为0</span></span><br><span class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>, , <span class="number">2</span>, , <span class="number">3</span>], (n) =&gt; n || <span class="number">0</span>)</span><br><span class="line"><span class="comment">// [1, 0, 2, 0, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取DOM 节点的文本内容。</span></span><br><span class="line"><span class="built_in">Array</span>.from</span><br><span class="line">(<span class="built_in">document</span>.querySelectorAll(<span class="string">'span.name'</span>);, s =&gt; s.textContent)</span><br><span class="line"><span class="comment">//第三个参数 绑定第二个参数中回调函数的this</span></span><br></pre></td></tr></table></figure><br><br>#### <strong>find and findIndex</strong><br>&gt; 回调函数遍历所有成员，返回符合条件的值， 没有则返回 undefined<br>&gt; find 返回值为，第一个符合条件的成员<br>&gt;findIndex ，没有则返回 -1<br>&gt; 回调函数接受三个参数（成员，位置，原数组）<br>&gt; 第二个参数 绑定回调函数 this<br>&gt; 可以识别NaN<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].find(<span class="function"><span class="keyword">function</span>(<span class="params">v,i,arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v&lt;<span class="number">0</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// -5</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].findIndex(<span class="function">(<span class="params">n</span>) =&gt;</span> n &lt; <span class="number">0</span>)</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><br><br>#### <strong>fill</strong><br>&gt; 填充数组,修改原数组<br>&gt; 第一个参数为填充值，第二个参数为开始填充的位置，第三个参数为结束位置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.fill(<span class="string">'Owen'</span>);</span><br><span class="line"><span class="comment">//["Owen","Owen","Owen"]</span></span><br><span class="line">arr.fill(<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">//[1,1,3]</span></span><br></pre></td></tr></table></figure><br><br>#### <strong>Interator</strong><br>&gt; keys,values,entries 对应属性遍历<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// keys</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'o'</span>,<span class="string">'w'</span>,<span class="string">'e'</span>,<span class="string">'n'</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> arr.keys())&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(key);</span><br><span class="line">   <span class="comment">//0 1 2 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr.values())&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(item);</span><br><span class="line">   <span class="comment">//o w e n</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [i,item] <span class="keyword">of</span> arr.entries())&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(i,item)</span><br><span class="line"><span class="comment">//1 "w"</span></span><br><span class="line"><span class="comment">//2 "e"</span></span><br><span class="line"><span class="comment">//3 "n"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>#### <strong>includes</strong><br>&gt; 返回一个Boolean ,数组是否包含给定的值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].includes(<span class="number">3</span>)<span class="comment">//true</span></span><br><span class="line"><span class="comment">//第二个参数为搜索的起始位置</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].includes(<span class="number">3</span>,<span class="number">4</span>)<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 是否支持 */</span></span><br><span class="line"><span class="keyword">const</span> contains = <span class="function">(<span class="params">(</span>) =&gt;</span></span><br><span class="line">  <span class="built_in">Array</span>.prototype.includes</span><br><span class="line">    ? <span class="function">(<span class="params">arr, value</span>) =&gt;</span> arr.includes(value)</span><br><span class="line">    : <span class="function">(<span class="params">arr, value</span>) =&gt;</span> arr.some(<span class="function"><span class="params">el</span> =&gt;</span> el === value)</span><br><span class="line">)();</span><br><span class="line">contains([<span class="string">'foo'</span>, <span class="string">'bar'</span>], <span class="string">'baz'</span>); <span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><br><br>#### <strong>flat ,flatMap</strong><br>&gt; 将二维数组变成一位数组，并返回新数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>]].flat()</span><br><span class="line"><span class="comment">//[1,2,3,4]</span></span><br><span class="line"><span class="comment">//默认拉平1层</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,[<span class="number">4</span>]]].flat(<span class="number">2</span>)</span><br><span class="line"><span class="comment">//[1,2,3,4]</span></span><br><span class="line"><span class="comment">//将所有维度变成一维</span></span><br><span class="line">array.flat(Infinty)</span><br><span class="line"><span class="comment">//会忽略空位</span></span><br><span class="line">[<span class="number">1</span>,,[<span class="number">3</span>,<span class="number">4</span>]].flat()</span><br><span class="line"><span class="comment">//[1,3,4]</span></span><br></pre></td></tr></table></figure><br><br>—<br>#### ES5 interator methods<br>##### every<br>-  访问每一个成员,给定某个条件，如果<label>所有成员满足条件</label>就返回true<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num  = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> n = num.every(<span class="function"><span class="keyword">function</span>(<span class="params">item,key,array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ( item&gt;<span class="number">2</span> )</span><br><span class="line">&#125;)</span><br><span class="line"> n <span class="comment">//false</span></span><br></pre></td></tr></table></figure><br><br>#### some<br>- 访问每一个成员,给定某个条件，<label>只要有一个成员满足条件就返回true</label><br>- 有一个满足条件的成员之后的不再执行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num  = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> n = num.some(<span class="function"><span class="keyword">function</span>(<span class="params">item,key,array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ( item &gt; <span class="number">2</span> )</span><br><span class="line">&#125;)</span><br><span class="line"> n <span class="comment">//true</span></span><br></pre></td></tr></table></figure><br><br>##### filter<br>- 访问每一个成员,给定某个条件，<label>将满足条件的成员组成数组返回</label>， 否则返回 <code>[]</code><br>- <label>只会在已经赋值的索引上被调用，对于那些已经被删除或者从未被赋值的索引不会被调用</label><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num  = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> n = num.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,key,array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ( item &gt; <span class="number">2</span> )</span><br><span class="line">&#125;)</span><br><span class="line"> n <span class="comment">//[3, 4, 5, 4, 3]</span></span><br></pre></td></tr></table></figure><h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><ul><li>访问每一个成员,将每次访问执行的结果组成数组返回，也就是说<label>每个成员都 必须要有return返回结果，否则都是<code>unndefined</code></label></li><li>map不支持continue跳出循环</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num  = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> n = num.map(<span class="function"><span class="keyword">function</span>(<span class="params">item,key,array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item * <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"> n <span class="comment">// [0, 2, 4, 4, 6, 8, 10, 6, 10]</span></span><br></pre></td></tr></table></figure><h5 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h5><ul><li>访问每一个成员,没有返回值</li><li>中途不能用常规操作跳出循环</li><li>不支持链式操作<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num  = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> n = num.map(<span class="function"><span class="keyword">function</span>(<span class="params">item,key,array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item * <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"> n <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="reduce-and-reduceRight"><a href="#reduce-and-reduceRight" class="headerlink" title="reduce and reduceRight"></a>reduce and reduceRight</h5><ul><li>reduce 从数组的第一项开始，逐个遍历到最后。</li><li>reduceRight  从数组的最后一项开始，向前遍历到第一项。</li><li>接收两个参数 回调函数和 回调函数第一个参数的值，默认数组第一个元素。</li><li>返回 累计处理的结果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @param</span></span><br><span class="line"><span class="comment">  *  prev 上次调用回调时的累积值</span></span><br><span class="line"><span class="comment">  *  cur  当前数组成员</span></span><br><span class="line"><span class="comment">  *  i  数组索引</span></span><br><span class="line"><span class="comment">  *  arrary 原数组</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">var</span> num  = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> n = num.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,cur,i,array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> prev*<span class="number">2</span> + cur</span><br><span class="line">&#125;)</span><br><span class="line"> n <span class="comment">// 431</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> num  = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> n = num.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,cur,i,array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> prev*<span class="number">2</span> + cur</span><br><span class="line">&#125;)</span><br><span class="line"> n <span class="comment">// 2186</span></span><br></pre></td></tr></table></figure><p> 以上都不会修改原数组，除非使用第三个参数做些操作，注意<label>数组成员是值类型，还是引用类型</label></p><h5 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h5><ul><li>对数组排序 默认排序按字母升序（根据字符串Unicode ）</li><li>参数为回调函数<code>callback(a,b)</code>  </li><li>返回值为负数 那么 a 会被排列到 b 之前</li><li>返回值为 0 位置不变</li><li>返回值为正数 b 会被排列到 a 之前<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">44</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>];</span><br><span class="line">num.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b</span><br><span class="line">&#125;)</span><br><span class="line">num <span class="comment">// [1, 2, 2, 3, 3, 4, 7, 9, 44]</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h4><ul><li>翻转数组<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">44</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>];</span><br><span class="line">num <span class="comment">//[9, 4, 3, 2, 44, 7, 2, 3, 1]</span></span><br><span class="line">num.reverse()</span><br></pre></td></tr></table></figure></li></ul><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><ul><li>has方法 会发生隐式转化 1 ==’1’ <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> unique = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">      <span class="keyword">var</span> res = [];     </span><br><span class="line">      arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,i</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(!obj[item])&#123;</span><br><span class="line">              obj[item] = <span class="literal">true</span>;</span><br><span class="line">              res.push(item) </span><br><span class="line">          &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">    <span class="keyword">return</span>  res</span><br><span class="line">&#125;</span><br><span class="line">unique(arr)</span><br><span class="line">&lt;&lt;<span class="xml"><span class="tag">&lt;&lt;&lt;&lt;&lt; <span class="attr">HEAD</span></span></span></span><br><span class="line"><span class="xml">=======</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">- map has方法 不会发生隐式转化</span></span><br><span class="line"><span class="xml">var unique = function(arr) &#123;</span></span><br><span class="line"><span class="xml">      var m = new Map();</span></span><br><span class="line"><span class="xml">      var res = [];     </span></span><br><span class="line"><span class="xml">      arr.forEach(function(item,i)&#123;</span></span><br><span class="line"><span class="xml">          if(!m.has(item))&#123;</span></span><br><span class="line"><span class="xml">              res.push(item) </span></span><br><span class="line"><span class="xml">          &#125;</span></span><br><span class="line"><span class="xml">          m.set(item,2);</span></span><br><span class="line"><span class="xml">       &#125;)</span></span><br><span class="line"><span class="xml">    return  res</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">unique(arr)</span></span><br><span class="line"><span class="xml">&gt;&gt;&gt;&gt;&gt;&gt;&gt; d71c39e5118389885ef986735a9a15598115e5b9</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>filter <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//会忽略 undefined</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> unique = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span>  arr.sort().filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,i,array</span>) </span>&#123; </span><br><span class="line">     <span class="keyword">return</span> item !== array[i+<span class="number">1</span>]; </span><br><span class="line">     &#125;)</span><br><span class="line">&#125;</span><br><span class="line"> unique(arr) <span class="comment">//  ["", 1, null]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> unique = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span>  arr.filter( <span class="function"><span class="keyword">function</span>(<span class="params">item, idx </span>)  </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr.indexOf(item) === idx;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unique(arr) <span class="comment">//[null, undefined, "", 1]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Object-extend"><a href="#Object-extend" class="headerlink" title="Object extend"></a>Object extend</h3><h4 id="对象中的简写"><a href="#对象中的简写" class="headerlink" title="对象中的简写"></a>对象中的简写</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数</span></span><br><span class="line"><span class="keyword">const</span> obj =&#123;</span><br><span class="line">  methode()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Owen'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  * m() &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'hello world'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">const</span> obj =&#123;</span><br><span class="line">  methode:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Owen'</span></span><br><span class="line">  &#125;</span><br><span class="line">  m:<span class="function"><span class="keyword">function</span>* (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'hello world'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用变量定义对象</span></span><br><span class="line">  <span class="comment">//默认情况下会自动将对象转为字符串[object Object]，这一点要特别小心。</span></span><br><span class="line"><span class="keyword">let</span> lastWord = <span class="string">'last word'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="string">'first word'</span>: <span class="string">'hello'</span>,</span><br><span class="line">  [lastWord]: <span class="string">'world'</span>,</span><br><span class="line">  [<span class="string">'h'</span> + <span class="string">'ello'</span>]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hi'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj[<span class="string">'first word'</span>] <span class="comment">// "hello"</span></span><br><span class="line">obj[lastWord] <span class="comment">// "world"</span></span><br><span class="line">obj[<span class="string">'last word'</span>] <span class="comment">// "world"</span></span><br><span class="line">obj.hello() <span class="comment">// hi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象中 函数 name属性</span></span><br><span class="line"><span class="comment">//对象的方法是一个 Symbol 值，那么name属性返回的是这个 Symbol 值的描述。</span></span><br><span class="line"><span class="keyword">const</span> key1 = <span class="built_in">Symbol</span>(<span class="string">'description'</span>);</span><br><span class="line"><span class="keyword">const</span> key2 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [key1]() &#123;&#125;,</span><br><span class="line">  [key2]() &#123;&#125;,</span><br><span class="line">  sayName() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Owen'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">get</span> foo() &#123;&#125;,</span><br><span class="line">  <span class="keyword">set</span> foo(x) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj[key1].name <span class="comment">// "[description]"</span></span><br><span class="line">obj[key2].name <span class="comment">// ""</span></span><br><span class="line">obj.sayName.name   <span class="comment">// "sayName"</span></span><br><span class="line"><span class="keyword">const</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">'foo'</span>);</span><br><span class="line"></span><br><span class="line">descriptor.get.name <span class="comment">// "get foo"</span></span><br><span class="line">descriptor.set.name <span class="comment">// "set foo"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过构造函数创立的函数</span></span><br><span class="line">(<span class="keyword">new</span> <span class="built_in">Function</span>()).name <span class="comment">// "anonymous"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过 bind 绑定的函数</span></span><br><span class="line"><span class="keyword">var</span> doSomething = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line">doSomething.bind().name <span class="comment">// "bound doSomething"</span></span><br></pre></td></tr></table></figure><h4 id="枚举和遍历"><a href="#枚举和遍历" class="headerlink" title="枚举和遍历"></a>枚举和遍历</h4><blockquote><p>Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name:<span class="string">'Owen'</span></span><br><span class="line">&#125;</span><br><span class="line">Objct.getOwnPropertyDescriptor(obj,<span class="string">'name'</span>);</span><br><span class="line"><span class="comment">//  &#123;</span></span><br><span class="line"><span class="comment">//    value: Owen,</span></span><br><span class="line"><span class="comment">//    writable: true,</span></span><br><span class="line"><span class="comment">//    enumerable: true, //可枚举</span></span><br><span class="line"><span class="comment">//    configurable: true</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br></pre></td></tr></table></figure><h5 id="如果-enumerable-为-false"><a href="#如果-enumerable-为-false" class="headerlink" title="如果 enumerable 为 false"></a><strong>如果 enumerable 为 false</strong></h5><p>有些操作会忽略，当前属性</p><ul><li>for…in循环：只遍历对象自身的和继承的可枚举的属性。</li><li>Object.keys()：返回对象自身的所有可枚举的属性的键名。</li><li>JSON.stringify()：只串行化对象自身的可枚举的属性。</li><li>(ES6) Object.assign()： 忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。</li></ul><blockquote><p>共有 5 种方法可以遍历对象的属性。</p><ul><li>for…in</li></ul></blockquote><p>for…in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。</p><ul><li>Object.keys(obj)</li></ul><p>Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。</p><ul><li>Object.getOwnPropertyNames(obj)</li></ul><p>Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。</p><ul><li>Object.getOwnPropertySymbols(obj)</li></ul><p>Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性的键名。</p><ul><li>Reflect.ownKeys(obj)<br>Reflect.ownKeys返回一个数组，包含对象自身的所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。</li></ul><h5 id="都遵守同样的属性遍历的次序规则。"><a href="#都遵守同样的属性遍历的次序规则。" class="headerlink" title="都遵守同样的属性遍历的次序规则。"></a><strong>都遵守同样的属性遍历的次序规则。</strong></h5><ul><li>首先遍历所有数值键，按照数值升序排列。</li><li>其次遍历所有字符串键，按照加入时间升序排列。</li><li>最后遍历所有 Symbol 键，按照加入时间升序排列。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Reflect</span>.ownKeys(&#123; [<span class="built_in">Symbol</span>()]:<span class="number">0</span>, <span class="attr">b</span>:<span class="number">0</span>, <span class="number">10</span>:<span class="number">0</span>, <span class="number">2</span>:<span class="number">0</span>, <span class="attr">a</span>:<span class="number">0</span> &#125;)</span><br><span class="line"><span class="comment">// ['2', '10', 'b', 'a', Symbol()]</span></span><br></pre></td></tr></table></figure></li></ul><p>上面代码中，Reflect.ownKeys方法返回一个数组，包含了参数对象的所有属性。这个数组的属性次序是这样的，首先是数值属性2和10，其次是字符串属性b和a，最后是 Symbol 属性。</p><p><strong>super</strong></p><blockquote><p><code>this</code> 总是指向函数所在的当前对象<br><code>super</code> 指向当前对象的原型对象。<br>super关键字表示原型对象时，<code>只能用在对象的方法之中</code>，用在其他地方都会报错。<br>目前，只有对象<label>方法的简写法可以让 JavaScript 引擎确认，定义的是对象的方法。</label><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proto = &#123;</span><br><span class="line">  foo: <span class="string">'hello'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  foo: <span class="string">'world'</span>,</span><br><span class="line">  find() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.foo;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, proto);</span><br><span class="line">obj.find() <span class="comment">// "hello"</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="对象扩展运算符"><a href="#对象扩展运算符" class="headerlink" title="对象扩展运算符"></a>对象扩展运算符</h4><blockquote><p>ES2018 将这个运算符引入了对象。<br>解构赋值的拷贝是浅拷贝<br>不能复制继承自原型对象的属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 解构</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//必须保证右方为对象，否则报错</span></span><br><span class="line"><span class="keyword">let</span> &#123; x, y, ...z &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br><span class="line">z <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//与函数参数扩展运算类似，解构赋值须最后一个参数</span></span><br><span class="line"><span class="keyword">let</span> &#123; ...x, y, z &#125; = someObject; <span class="comment">// 句法错误</span></span><br><span class="line"><span class="keyword">let</span> &#123; x, ...y, ...z &#125; = someObject; <span class="comment">// 句法错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//无法继承原型</span></span><br><span class="line"><span class="keyword">let</span> o1 = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> o2 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line">o2.__proto__ = o1;</span><br><span class="line"><span class="keyword">let</span> &#123; ...o3 &#125; = o2;</span><br><span class="line">o3 <span class="comment">// &#123; b: 2 &#125;</span></span><br><span class="line">o3.a <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展运算</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组是特殊的对象，所以对象的扩展运算符也可以用于数组</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123; ...[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>] &#125;;</span><br><span class="line">foo</span><br><span class="line"><span class="comment">// &#123;0: "a", 1: "b", 2: "c"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展运算符后面是一个空对象，无效果</span></span><br><span class="line">&#123;...&#123;&#125;, <span class="attr">a</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="comment">// &#123; a: 1 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展运算符后面不是对象，则会自动将其转为对象 </span></span><br><span class="line">&#123;..<span class="number">.1</span>&#125; <span class="comment">// &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展运算符后面是字符串，它会自动转成一个类似数组的对象</span></span><br><span class="line">&#123;...<span class="string">'Owen'</span>&#125;</span><br><span class="line"><span class="comment">//&#123;0: "O", 1: "w", 2: "e", 3: "n"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ab = &#123; ...a, ...b &#125;;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> ab = <span class="built_in">Object</span>.assign(&#123;&#125;, a, b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//完整克隆一个对象，还拷贝对象原型的属性，可以采用下面的写法。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法一 非浏览器环境不一定部署 __proto__</span></span><br><span class="line"><span class="keyword">const</span> clone1 = &#123;</span><br><span class="line">  __proto__: <span class="built_in">Object</span>.getPrototypeOf(obj),</span><br><span class="line">  ...obj</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">const</span> clone2 = <span class="built_in">Object</span>.assign(</span><br><span class="line">  <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.getPrototypeOf(obj)),</span><br><span class="line">  obj</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法三</span></span><br><span class="line"><span class="keyword">const</span> clone3 = <span class="built_in">Object</span>.create(</span><br><span class="line">  <span class="built_in">Object</span>.getPrototypeOf(obj),</span><br><span class="line">  <span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象的扩展运算符后面可以跟表达式</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  ...(x &gt; <span class="number">1</span> ? &#123;<span class="attr">a</span>: <span class="number">1</span>&#125; : &#123;&#125;),</span><br><span class="line">  b: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展运算符的参数对象之中，如果有取值函数get，这个函数是会执行let aWithXGetter = &#123;</span></span><br><span class="line">  ...a,</span><br><span class="line">  <span class="keyword">get</span> x() &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'not throw yet'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 会抛出错误，因为 x 属性被执行了</span></span><br><span class="line"><span class="keyword">let</span> runtimeError = &#123;</span><br><span class="line">  ...a,</span><br><span class="line">  ...&#123;</span><br><span class="line">    <span class="keyword">get</span> x() &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'throw now'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><hr><h3 id="New-method-for-objects"><a href="#New-method-for-objects" class="headerlink" title="New method for objects"></a>New method for objects</h3><h4 id="Object-is-比较两个值是否严格相等"><a href="#Object-is-比较两个值是否严格相等" class="headerlink" title="Object.is() 比较两个值是否严格相等"></a>Object.is() 比较两个值是否严格相等</h4><blockquote><p>和 <code>===</code> 的区别<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">0</span> === <span class="number">-0</span> <span class="comment">//true</span></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.is(+<span class="number">0</span>, <span class="number">-0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>) <span class="comment">// true</span></span><br><span class="line">es5 实现</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>,<span class="string">'is'</span>,&#123;</span><br><span class="line">  value: <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x === y) &#123;</span><br><span class="line">      <span class="comment">// 针对+0 不等于 -0的情况</span></span><br><span class="line">      <span class="keyword">return</span> x !== <span class="number">0</span> || <span class="number">1</span> / x === <span class="number">1</span> / y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 针对NaN的情况</span></span><br><span class="line">    <span class="keyword">return</span> x !== x &amp;&amp; y !== y;</span><br><span class="line">  &#125;,</span><br><span class="line">  configurable: <span class="literal">true</span>,</span><br><span class="line">  enumerable: <span class="literal">false</span>,</span><br><span class="line">  writable: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h4><blockquote><p>浅拷贝对象，无法拷贝原型,也不拷贝不可枚举的属性。<br>总是拷贝一个属性的值，而不会拷贝它背后的赋值方法或取值方法。<br>同属性后面的覆盖前面的值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(&#123;<span class="attr">b</span>: <span class="string">'c'</span>&#125;,</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(&#123;&#125;, <span class="string">'invisible'</span>, &#123;</span><br><span class="line">    enumerable: <span class="literal">false</span>,</span><br><span class="line">    value: <span class="string">'hello'</span></span><br><span class="line">  &#125;) )</span><br><span class="line"><span class="comment">// &#123; b: 'c' &#125;</span></span><br><span class="line"><span class="built_in">Object</span>.assign([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="comment">//[4,5,3]</span></span><br></pre></td></tr></table></figure><h4 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors()"></a>Object.getOwnPropertyDescriptors()</h4><blockquote><p>返回目标对象所有自身属性（非继承） 的描述对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  foo: <span class="number">123</span>,</span><br><span class="line">  <span class="keyword">get</span> bar() &#123; <span class="keyword">return</span> <span class="string">'Owen'</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span><br><span class="line"><span class="comment">// &#123; foo:</span></span><br><span class="line"><span class="comment">//    &#123; value: 123,</span></span><br><span class="line"><span class="comment">//      writable: true,</span></span><br><span class="line"><span class="comment">//      enumerable: true,</span></span><br><span class="line"><span class="comment">//      configurable: true &#125;,</span></span><br><span class="line"><span class="comment">//   bar:</span></span><br><span class="line"><span class="comment">//    &#123; get: [Function: get bar],</span></span><br><span class="line"><span class="comment">//      set: undefined,</span></span><br><span class="line"><span class="comment">//      enumerable: true,</span></span><br><span class="line"><span class="comment">//      configurable: true &#125; &#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>主要是为了解决Object.assign()无法正确拷贝get属性和set属性的问题。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source = &#123;</span><br><span class="line">  <span class="keyword">set</span> foo(value) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> shallowMerge = <span class="function">(<span class="params">target, source</span>) =&gt;</span> <span class="built_in">Object</span>.defineProperties(</span><br><span class="line">  target,</span><br><span class="line">  <span class="built_in">Object</span>.getOwnPropertyDescriptors(source)</span><br><span class="line">);</span><br><span class="line">shallowMerge(target,source)</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(target, <span class="string">'foo'</span>)</span><br><span class="line"><span class="comment">// &#123; get: undefined,</span></span><br><span class="line"><span class="comment">//   set: [Function: set foo],</span></span><br><span class="line"><span class="comment">//   enumerable: true,</span></span><br><span class="line"><span class="comment">//   configurable: true &#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>配合Object.create()方法，将对象属性克隆到一个新对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shallowClone = <span class="function">(<span class="params">obj</span>) =&gt;</span> <span class="built_in">Object</span>.create(</span><br><span class="line">  <span class="built_in">Object</span>.getPrototypeOf(obj),</span><br><span class="line">  <span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>实现一个对象继承另一个对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一</span></span><br><span class="line"><span class="keyword">const</span> obj1 = <span class="built_in">Object</span>.create(prot);</span><br><span class="line">obj.foo = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二</span></span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="built_in">Object</span>.assign(</span><br><span class="line">  <span class="built_in">Object</span>.create(prot),</span><br><span class="line">  &#123;</span><br><span class="line">    foo: <span class="number">123</span>,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//三</span></span><br><span class="line"><span class="keyword">const</span>  obj3 = <span class="built_in">Object</span>.create(prot,<span class="built_in">Object</span>.getOwnPropertyDescriptors(&#123;</span><br><span class="line">  name:<span class="string">'Owen'</span></span><br><span class="line">&#125;))</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>实现<code>Mixin</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mix = <span class="function">(<span class="params">obj</span>) =&gt;</span> (</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">with</span>:<span class="function">(<span class="params">...mixins</span>) =&gt;</span> mixins.reduce(</span><br><span class="line">      (c,mixin) =&gt; <span class="built_in">Object</span>.create(  c, <span class="built_in">Object</span>.getOwePropertyDescriptors( minxin )), obj</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="keyword">let</span> a = &#123;<span class="attr">a</span>: <span class="string">'a'</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> b = &#123;<span class="attr">b</span>: <span class="string">'b'</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> c = &#123;<span class="attr">c</span>: <span class="string">'c'</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> d = mix(c).with(a, b);</span><br><span class="line"></span><br><span class="line">d.c <span class="comment">// "c"</span></span><br><span class="line">d.b <span class="comment">// "b"</span></span><br><span class="line">d.a <span class="comment">// "a"</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="proto属性，Object-setPrototypeOf-，Object-getPrototypeOf"><a href="#proto属性，Object-setPrototypeOf-，Object-getPrototypeOf" class="headerlink" title="proto属性，Object.setPrototypeOf()，Object.getPrototypeOf()"></a><strong>proto</strong>属性，Object.setPrototypeOf()，Object.getPrototypeOf()</h4><blockquote><p>设置，和 获取原型<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//set</span></span><br><span class="line"><span class="keyword">let</span> proto = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">x</span>: <span class="number">10</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, proto);</span><br><span class="line"></span><br><span class="line">proto.y = <span class="number">20</span>;</span><br><span class="line">proto.z = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">obj.x <span class="comment">// 10</span></span><br><span class="line">obj.y <span class="comment">// 20</span></span><br><span class="line">obj.z <span class="comment">// 40</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//get</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rec = <span class="keyword">new</span> Rectangle();</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(rec) === Rectangle.prototype</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(rec, <span class="built_in">Object</span>.prototype);</span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(rec) === Rectangle.prototype</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Object-keys-，Object-values-，Object-entries"><a href="#Object-keys-，Object-values-，Object-entries" class="headerlink" title="Object.keys()，Object.values()，Object.entries()"></a>Object.keys()，Object.values()，Object.entries()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//keys</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;; <span class="comment">//es5</span></span><br><span class="line"><span class="built_in">Object</span>.keys(obj)</span><br><span class="line"><span class="comment">// ["foo", "baz"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//values</span></span><br><span class="line"><span class="built_in">Object</span>.values(obj)</span><br><span class="line"><span class="comment">//['bar,42]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.entries(obj)</span><br><span class="line"><span class="comment">// [['foo', 'bar'],  ['baz', 42]]</span></span><br></pre></td></tr></table></figure><h4 id="Object-fromEntries"><a href="#Object-fromEntries" class="headerlink" title="Object.fromEntries()"></a>Object.fromEntries()</h4><blockquote><p> Object.entries 方法的逆操作<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.fromEntries([</span><br><span class="line">  [<span class="string">'foo'</span>, <span class="string">'bar'</span>],</span><br><span class="line">  [<span class="string">'baz'</span>, <span class="number">42</span>]</span><br><span class="line">])</span><br><span class="line"><span class="comment">// &#123; foo: "bar", baz: 42 &#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><p>目前谷歌版本 Chrome/72.0.3626.121 Safari/537.36  及以下不支持</p>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Extend Methods </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Map</title>
      <link href="/2019/03/19/map/"/>
      <url>/2019/03/19/map/</url>
      
        <content type="html"><![CDATA[<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><blockquote><p>键值对的集合 键名的范围不限制于字符串</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>: <span class="string">'Owen'</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="comment">//设值</span></span><br><span class="line">m.set(obj,<span class="string">"boy"</span>); <span class="comment">//将 obj 作为键名， 给它赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以是对象，数组，甚至是函数，任何数据类型都可以当作属性名（键名）</span></span><br><span class="line">m.set(fn,<span class="number">1</span>) </span><br><span class="line"><span class="comment">//对同一个键名赋值，后面的将覆盖前面的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获值</span></span><br><span class="line">m.get(obj) <span class="comment">// 'boy'</span></span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line">m.has(obj) <span class="comment">// true</span></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">m.delete(obj)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="Map-参数"><a href="#Map-参数" class="headerlink" title="Map 参数"></a>Map 参数</h3><blockquote><p>任何 <code>Iterator</code> 接口，并且每个成员都是双元素数组的数据结构 都可以作为参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">3</span>]];</span><br><span class="line"><span class="keyword">const</span> ma = <span class="keyword">new</span> <span class="built_in">Map</span>(arr); <span class="comment">//Map(2) &#123;1 =&gt; 2, 2 =&gt; 3&#125;</span></span><br><span class="line">ma.get(<span class="number">1</span>) <span class="comment">//2</span></span><br><span class="line">ma.get(<span class="number">2</span>) <span class="comment">//3</span></span><br><span class="line"><span class="comment">//如果几组双元素成员相同那么只会生成一个值</span></span><br><span class="line">arr = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>]];</span><br><span class="line">mss = <span class="keyword">new</span> <span class="built_in">Map</span>(arr); <span class="comment">//Map(1) &#123;1 =&gt; 2&#125;</span></span><br><span class="line">ma.size<span class="comment">//2</span></span><br><span class="line">mss.size<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// keys 键名</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> ma.keys())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key)</span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">    <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//values 值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> ma.values())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val)</span><br><span class="line">    <span class="comment">//2</span></span><br><span class="line">    <span class="comment">//3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//entries  键值 等同于 遍历 ma 默认遍历的是entries </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key,val] <span class="keyword">of</span> ma.entries())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key,val)</span><br><span class="line">    <span class="comment">//1,2</span></span><br><span class="line">    <span class="comment">//2,3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//转化为数组</span></span><br><span class="line"></span><br><span class="line">[... ma.keys() ] <span class="comment">//[1,2]</span></span><br><span class="line"></span><br><span class="line">[... ma.values() ] <span class="comment">//[2,3]</span></span><br><span class="line"></span><br><span class="line">[... ma] <span class="comment">//[[1,2],[2,3]]</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Set</title>
      <link href="/2019/03/15/set/"/>
      <url>/2019/03/15/set/</url>
      
        <content type="html"><![CDATA[<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><blockquote><p>ES6 提供的数据结构类似于数组，值是唯一的，通过 <code>Set</code> 构造函数来生成</p></blockquote> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="comment">//参数可以是一个可以迭代的数据结构</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = new Set(arr); //Set(5)&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">[...set] <span class="comment">//[1,2,3,4,5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> set1 = <span class="keyword">new</span> <span class="built_in">Set</span>(<span class="string">'12343333433225'</span>);  <span class="comment">//Set(5) &#123;"1", "2", "3", "4", "5"&#125;</span></span><br><span class="line">set1.size <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组去重</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [... new <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>])];</span><br><span class="line"><span class="keyword">const</span> arr2 = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]));</span><br></pre></td></tr></table></figure><h3 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">  s.constructor <span class="comment">//指向 Set 函数 </span></span><br><span class="line">  s.size <span class="comment">//成员总数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作方法 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以通过 add()方法添加 只有一个参数</span></span><br><span class="line"><span class="keyword">const</span> set2 =<span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">set2.add(<span class="number">1</span>) <span class="comment">//Set(1) &#123;1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不会发生类型转换  NaN 会 = NaN </span></span><br><span class="line">set2.add(<span class="string">"1"</span>) <span class="comment">//Set(2) &#123;1,"1"&#125;</span></span><br><span class="line"></span><br><span class="line">set2.add(<span class="literal">NaN</span>).add(<span class="literal">NaN</span>)<span class="comment">// Set(3) &#123;1,"1",NaN&#125;  链式调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//两个对象不相等</span></span><br><span class="line">set2.add(&#123;&#125;)</span><br><span class="line">set2.size <span class="comment">//4</span></span><br><span class="line">set2.add(&#123;&#125;)</span><br><span class="line">set2.size <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过 delete() 删除某个值 返回 Boolean 值 </span></span><br><span class="line">set2.delete(<span class="number">1</span>) <span class="comment">//true</span></span><br><span class="line">set2.delete(&#123;&#125;) <span class="comment">//false </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//has()  是否存在某个值 </span></span><br><span class="line">set2.has(<span class="literal">NaN</span>) <span class="comment">//true</span></span><br><span class="line">set2.has(&#123;&#125;) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//clear() 清除所有成员</span></span><br><span class="line">set2.clear() <span class="comment">//Set(0) &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 遍历方法 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   keys 返回键名的迭代器， values 返回 键值的迭代器， 由于 Set 键名和键值 相同 所以</span></span><br><span class="line"><span class="comment"> * keys 和 values 方法返回值相同</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">const</span> sK = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]).keys()   <span class="comment">//SetIterator &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"> <span class="keyword">const</span> sV= <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]).values()   <span class="comment">//SetIterator &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//enters 返回键值对</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]).entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [1, 1]</span></span><br><span class="line"><span class="comment">// [2, 2]</span></span><br><span class="line"><span class="comment">// [3, 3]</span></span><br><span class="line"><span class="comment">// [4, 4]</span></span><br><span class="line"><span class="comment">// [5, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//推荐使用for of </span></span><br><span class="line"><span class="keyword">const</span> sI = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> sI) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(key); <span class="comment">//1 2 3 4 5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Set的遍历顺序就是插入顺序。使用 Set 保存一个回调函数列表，调用时能保证按照添加顺序调用。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//forEach</span></span><br><span class="line">sI.forEach(<span class="function">(<span class="params">value, key</span>) =&gt;</span> <span class="built_in">console</span>.log(key + <span class="string">' : '</span> + value))</span><br><span class="line"><span class="comment">// 1 : 1</span></span><br><span class="line"><span class="comment">// 2 : 2</span></span><br><span class="line"><span class="comment">// 3 : 3</span></span><br><span class="line"><span class="comment">// 4 : 4</span></span><br><span class="line"><span class="comment">// 5 : 5</span></span><br></pre></td></tr></table></figure><h3 id="weakSet"><a href="#weakSet" class="headerlink" title="weakSet"></a>weakSet</h3><blockquote><p>和Set 类似 但是只能存储对象，不可遍历<br>如果其他对象未应用该对象，垃圾回收机制会自动收回所占用的内存<br>适合存储临时对象和绑定对应对象的信息</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]]); <span class="comment">//WeakSet &#123;[1, 2], [3, 4]&#125;</span></span><br><span class="line"><span class="comment">//a 的成员自动成为 weakSet 的成员</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//add 方法</span></span><br><span class="line"><span class="keyword">let</span> arr =[[<span class="number">1</span>]];</span><br><span class="line">ws.add(arr);</span><br><span class="line"><span class="comment">//delete 删除对应成员</span></span><br><span class="line">ws.delete(arr); <span class="comment">//true</span></span><br><span class="line"><span class="comment">// has 是否包含</span></span><br><span class="line">ws.has(arr) <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>由于 WeakSet 的成员都是弱引用随时可能被回收，因此可以存储DOM节点，不用担心节点移除时，发生内存泄漏。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="keyword">new</span> <span class="built_in">WeakSet</span>()</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">   <span class="keyword">constructor</span>()&#123;</span><br><span class="line">     foo.add(<span class="keyword">this</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   method ()&#123;</span><br><span class="line">     <span class="keyword">if</span>(!foo.has (<span class="keyword">this</span>))&#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"method 只能在Foo 实例上使用"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>symbol</title>
      <link href="/2019/03/15/symbol/"/>
      <url>/2019/03/15/symbol/</url>
      
        <content type="html"><![CDATA[<h2 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h2><blockquote><p>ES6 引入的原始数据类型，表示独一无二的值<br>通过 <code>Symbol</code>函数生成的原始值，不是对象，所以无法添加属性和方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> s1 = <span class="keyword">new</span> <span class="built_in">Symbol</span>(<span class="string">'s'</span>); <span class="comment">//TypeError</span></span><br><span class="line"><span class="comment">// 不能通过 new Symbol 否则会报错</span></span><br><span class="line"></span><br><span class="line">s.toString()<span class="comment">//"Symbol()"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>();</span><br><span class="line">s == s2 <span class="comment">// false</span></span><br><span class="line"><span class="comment">//独一无二的特性</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Boolean</span>(s) <span class="comment">//true</span></span><br><span class="line">!s <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">s + s1 <span class="comment">//error </span></span><br><span class="line">s + <span class="number">1</span>  <span class="comment">//error </span></span><br><span class="line">s + <span class="string">"1"</span> <span class="comment">// error </span></span><br><span class="line"><span class="comment">//symbol 不能参与任何值的运算</span></span><br></pre></td></tr></table></figure></p></blockquote><p>对象中的 symbol 无法通过 <code>.</code> 点运算访问<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sm = <span class="built_in">Symbol</span>()</span><br><span class="line"><span class="keyword">const</span> s =&#123;</span><br><span class="line">    [sm]: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line">s.sm <span class="comment">//undefined</span></span><br><span class="line">s[sm]<span class="comment">//1</span></span><br></pre></td></tr></table></figure></p><h3 id="消除魔术字符串"><a href="#消除魔术字符串" class="headerlink" title="消除魔术字符串"></a>消除魔术字符串</h3><blockquote><p>代码中多次出现，与代码形成强耦合的某一个具体的字符串或者数值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDate</span>(<span class="params">num,options</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">switch</span> (num)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        data = num + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span> :</span><br><span class="line">        data = num * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// case 右边的 1， 2 就是魔术数值</span></span><br><span class="line"><span class="comment">//一般把魔术字符串 变成变量来消除</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj =&#123;</span><br><span class="line">    one:<span class="built_in">Symbol</span>(),</span><br><span class="line">    two:<span class="built_in">Symbol</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDate</span>(<span class="params">num,options</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">switch</span> (num)&#123;</span><br><span class="line">        <span class="keyword">case</span> obj.one:</span><br><span class="line">        data = options + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> obj.two :</span><br><span class="line">        data =  options * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br><span class="line">getDate(obj.one,<span class="number">3</span>)</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="作为对象属性名"><a href="#作为对象属性名" class="headerlink" title="作为对象属性名"></a>作为对象属性名</h3><ul><li><code>for...in</code>、<code>for...of</code>，<code>Object.keys()</code> , <code>Object.getOwnPropertyNames()</code>,<code>JSON.stringify()</code>返回。</li><li>不是私有属性，可以通过 <code>Object.getOwnPropertySymbols()</code>获取指定symbol名<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="built_in">Symbol</span>(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Symbol</span>(<span class="string">'b'</span>);</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">   [a]:<span class="string">'hello'</span>,</span><br><span class="line">   [b]:<span class="string">'word'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(obj)) <span class="comment">//(2) [Symbol(a), Symbol(b)]</span></span><br></pre></td></tr></table></figure></li></ul><p>-可以通过 <code>Reflect.ownKeys()</code> 返回所有类型的属性名<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="built_in">Symbol</span>(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Symbol</span>(<span class="string">'b'</span>);</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">   [a]:<span class="string">'hello'</span>,</span><br><span class="line">   [b]:<span class="string">'word'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Reflect</span>.ownKeys(obj) <span class="comment">// ["a", Symbol(a), Symbol(b)]</span></span><br></pre></td></tr></table></figure></p><h3 id="Symbol-for-与Symbol"><a href="#Symbol-for-与Symbol" class="headerlink" title="Symbol.for()与Symbol()"></a><code>Symbol.for()</code>与<code>Symbol()</code></h3><blockquote><p>Symbol(‘a’) 和 Symbol.for():两种方法都会生成新的 <code>Symbol</code> 值<br>Symbol(‘a’) 使用10次，会生成10个新的 Symbol<br>Symbol.for(‘a’)，使用10次，会生成一个 Symbol 并创建一个key值<br>Symbol.keyFor(Symbol.for(‘a’)),会返回一个全局 key 值，可以在不同的iframe 或 service worker 获取同一个key</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>.for(<span class="string">'s'</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>.for(<span class="string">'s'</span>);</span><br><span class="line">s == s1 <span class="comment">//false</span></span><br><span class="line">s1 == s2 <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> key = <span class="built_in">Symbol</span>.keyFor(s2) <span class="comment">//s</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Symbol </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pormise</title>
      <link href="/2019/03/14/promise/"/>
      <url>/2019/03/14/promise/</url>
      
        <content type="html"><![CDATA[<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><blockquote><p>为了解决 “回调地狱”（callback hell）而提出的写法<br>允许将 <code>callback</code> 变成链式调用<br>它是一个容器，保存着某个异步操作的结果。</p></blockquote><p><strong>特点</strong></p><ul><li><p>对象的状态部受外界影响；有三种状态， 进行中( pending ) 、 成功( fulfilled ) 、 失败( rejected );只有异步操作的结果可以决定那种状态。</p></li><li><p>状态一旦改变，就不会更改（resolved 定型），状态的改变只会是两种情况 pengding -&gt; fulfilled or pengding -&gt; rejected;</p></li><li><p><label>  一旦建立就会立即执行 </label>, 中途无法取消，无法得知事件进展，不设置callback，内部将会抛出错误</p></li></ul><h3 id="简单实列"><a href="#简单实列" class="headerlink" title="简单实列"></a>简单实列</h3><blockquote><p>使用 <code>Promise</code> 构造函数生成实例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//example</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve,reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//... do something</span></span><br><span class="line">    $.<span class="keyword">get</span>(url,function (data) &#123;</span><br><span class="line">        <span class="keyword">if</span> (data) &#123;</span><br><span class="line">            resolve(data)</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        reject(err)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><p>可见 <code>Promise</code> 接受一个callback 作为参数， callback有两个参数，都是函数</p><ul><li>第一个 <code>resolve</code> 异步操作成功时调用，将成功的信息作为参数传递出去</li><li>第二个 <code>rejcet</code> 异步操作失败时调用，将失败的信息传递出去</li></ul><h4 id="then-方法"><a href="#then-方法" class="headerlink" title="then 方法"></a>then 方法</h4><p>生成实例后,可以使用 <code>then</code> 方法 接收成功状态和失败状态的回调,<label>在当前脚本所有同步任务执行完才会执行</label></p><ul><li>第一个参数是成功后的callback (必传)</li><li>第二个参数是失败后的callback (为可选参数)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise = <span class="function">(<span class="params">time</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"promise"</span>)</span><br><span class="line">        setTimeout(resolve,time,<span class="string">'Owen'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">promise(<span class="number">1000</span>).then(<span class="function">(<span class="params">val</span>) =&gt;</span> <span class="built_in">console</span>.log(val)) <span class="comment">//"promise"  1s后 "Owen"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//加载图片</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImage</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">        image.onload = <span class="function"><span class="params">()</span> =&gt;</span> resolve(image);</span><br><span class="line"></span><br><span class="line">        image.onerror = <span class="function"><span class="params">()</span> =&gt;</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`not lad image at: <span class="subst">$&#123;url&#125;</span>`</span>))</span><br><span class="line"></span><br><span class="line">        image.src = url;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现原生ajax(get)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getJSON = <span class="function"><span class="keyword">function</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> handler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ( <span class="keyword">this</span>.readySate !== <span class="number">4</span> )  <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span> ) &#123;</span><br><span class="line">                resolve(<span class="keyword">this</span>.response)</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                reject( <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="keyword">this</span>.statusText) )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> client = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">              client.open(<span class="string">"GET"</span>,url);</span><br><span class="line">              client.onreadystatechange = handler;</span><br><span class="line">              client.setRequestHeader(<span class="string">"Accept"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">              client.send()</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getJSON(<span class="string">'url'</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;,err =&gt; <span class="built_in">console</span>.error(err));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//---</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line"> resolve();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">  resolve(p1);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setTimeout( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="built_in">window</span>.requestAnimationFrame(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 回调函数执行次数通常是每秒60次</span></span><br><span class="line">    <span class="comment">// 当requestAnimationFrame() 运行在后台标签页或者隐藏的&lt;iframe&gt; 里时，</span></span><br><span class="line">    <span class="comment">// requestAnimationFrame() 会被暂停调用以提升性能和电池寿命。</span></span><br><span class="line">    <span class="comment">//回调函数会被传入DOMHighResTimeStamp参数 （排队的回调开始触发的时间戳）</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">8</span>,v)</span><br><span class="line">    <span class="comment">//cancel​Animation​Frame(requestId) 取消 window.requestAnimationFrame</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p2.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">7</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">6</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//p1的状态决定了p2的状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="comment">//4</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="comment">//&#123;&lt;resolved&gt;: undefined&#125;</span></span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//向另一个 promise 传递 promise 执行状态问题</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'fail'</span>)); <span class="built_in">console</span>.log(<span class="number">1</span>)&#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="number">2</span>); resolve(p1) &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p2.then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error)) <span class="comment">//error fail</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//传入的 promise 会改变 自己 promise 的状态，变成传入的promise的状态</span></span><br></pre></td></tr></table></figure><h3 id="catch-方法"><a href="#catch-方法" class="headerlink" title="catch 方法"></a>catch 方法</h3><ul><li><p>指定发生错误时的回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">p.then(<span class="function">(<span class="params">val</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'fulfilled:'</span>, val))</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'rejected'</span>, err));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">p.then(<span class="function">(<span class="params">val</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'fulfilled:'</span>, val))</span><br><span class="line">  .then(<span class="literal">null</span>, (err) =&gt; <span class="built_in">console</span>.log(<span class="string">"rejected:"</span>, err));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//状态改变后不会再接收之后的状态</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    resolve(<span class="string">'ok'</span>);</span><br><span class="line">   reject( <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'test'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123; <span class="built_in">console</span>.log(value) &#125;) <span class="comment">//ok</span></span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123; <span class="built_in">console</span>.log(error) &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// promise 内部错误不会影响外部的代码，不会退出进程、终止脚本执行</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    resolve(Owen);</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line">promise.catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;<span class="built_in">console</span>.log(error)&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'Owen:'</span> + v)&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//18</span></span><br><span class="line"><span class="comment">//error</span></span><br><span class="line"><span class="comment">//Owen:undefined </span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//如果将 then 放到第一个将不会执行</span></span><br><span class="line"> <span class="comment">//因为 then 接收的是 promise变量 的状态</span></span><br><span class="line"> <span class="comment">//而放到末尾则接收的是 catch 返回的 Promise 函数的状态</span></span><br></pre></td></tr></table></figure><h3 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h3><p>不管 promise 的状态怎么变都会执行的方法 （ES2018)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//finally方法的回调函数不接受任何参数</span></span><br><span class="line">promise.finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 语句</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">promise.then(</span><br><span class="line">  result =&gt; &#123;</span><br><span class="line">    <span class="comment">// 语句</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="comment">// 语句</span></span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h3 id="all"><a href="#all" class="headerlink" title="all"></a>all</h3><ul><li>用于将多个 Promise 实例，包装成一个新 Promise 实例</li><li>参数是一个数组或者具有 Interator的接口（返回成员必须是promise)，如果成员不是 Promise 实例，会将其包装成一个porimse 实例</li><li>等待所以成员的状态都变成 <code>resolved</code> 状态， <code>Promise.all</code> 才变成 <code>resolved</code> 状态，并且<label>成员返回值将以数组形式传递给 <code>then</code></label></li><li>数组成员中只有又一位成员为<code>rejectd</code> 状态，<code>Promise.all</code> 就会变成 <code>rejected</code> , 并<label>将第一个变为<code>rejectd</code>的成员返回值传递给 <code>catch</code></label></li><li>如果成员自己定义了 <code>then</code> 或者 <code>catch</code>  对应成员的返回值不会传递到 <code>all</code> 的回调当中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//example</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> setTimeout(resolve,<span class="number">1000</span>,<span class="string">'Owen'</span>))</span><br><span class="line">            <span class="comment">//.then(result =&gt;console.log(result))</span></span><br><span class="line">           <span class="comment">// .catch(err =&gt;console.log(err));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'报错了'</span>);&#125;)</span><br><span class="line">            .then(<span class="function"><span class="params">re</span> =&gt;</span> <span class="built_in">console</span>.log(re))</span><br><span class="line">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));<span class="comment">//error</span></span><br><span class="line">            </span><br><span class="line"><span class="keyword">const</span> promise = <span class="built_in">Promise</span>.all([p1,p2])</span><br><span class="line">            .then(<span class="function"><span class="params">res</span>=&gt;</span><span class="built_in">console</span>.log(res)) <span class="comment">//1s 后 ["Owen",undefined]  </span></span><br><span class="line">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));</span><br></pre></td></tr></table></figure><h3 id="race"><a href="#race" class="headerlink" title="race"></a>race</h3><ul><li>和 <code>all</code> 方法一样  只是成员状态发生改变的情况不同</li><li>数组中只要有一个成员改变状态， <code>race</code> 就改变状态，并将返回值传递给 <code>race</code>方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//example</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> setTimeout(resolve,<span class="number">1000</span>,<span class="string">'Owen'</span>))</span><br><span class="line">            <span class="comment">//.then(result =&gt;console.log(result))</span></span><br><span class="line">           <span class="comment">// .catch(err =&gt;console.log(err));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'报错了'</span>);&#125;)</span><br><span class="line">            .then(<span class="function"><span class="params">re</span> =&gt;</span> <span class="built_in">console</span>.log(re))</span><br><span class="line">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));<span class="comment">//error</span></span><br><span class="line">            </span><br><span class="line"><span class="keyword">const</span> promise = <span class="built_in">Promise</span>.race([p1,p2])</span><br><span class="line">            .then(<span class="function"><span class="params">res</span>=&gt;</span><span class="built_in">console</span>.log(res)) <span class="comment">//undefined </span></span><br><span class="line">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));</span><br></pre></td></tr></table></figure><h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h3><ul><li>将对象转化为Promise对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'Owen'</span>)</span><br><span class="line"><span class="comment">// 等同</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(<span class="string">'Owen'</span>))</span><br></pre></td></tr></table></figure></li></ul><p>传参情况</p><h4 id="Promise实例"><a href="#Promise实例" class="headerlink" title="Promise实例"></a>Promise实例</h4><ul><li>返回出入的实例</li></ul><h4 id="传入-thenable对象"><a href="#传入-thenable对象" class="headerlink" title="传入 thenable对象"></a>传入 <code>thenable</code>对象</h4><ul><li>具有 <code>then</code>方法的对象,将其转化为 <code>Promise</code> 对象 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    then: <span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        resolve(<span class="string">"Owen"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.resolve(obj);</span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res) <span class="comment">//"Owen"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="不是对象或者没有-thenable方法"><a href="#不是对象或者没有-thenable方法" class="headerlink" title="不是对象或者没有 thenable方法"></a>不是对象或者没有 <code>thenable</code>方法</h4><ul><li>返回一个新的Promise，状态为 <code>resolved</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.resolve(<span class="number">18</span>);</span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">re</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(re) <span class="comment">//18</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="reject"><a href="#reject" class="headerlink" title="reject"></a>reject</h4><ul><li>返回一个新的Promise，状态为 <code>rejectd</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.reject(<span class="string">'出错了'</span>);</span><br><span class="line"><span class="comment">// 等同 </span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> reject(<span class="string">'出错了'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> thenable = &#123;</span><br><span class="line">  then(resolve, reject) &#123;</span><br><span class="line">    reject(<span class="string">'出错了'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.reject(thenable)</span><br><span class="line">.catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e === thenable) <span class="comment">//true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="结合-Generator-使用"><a href="#结合-Generator-使用" class="headerlink" title="结合 Generator 使用"></a>结合 Generator 使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> g = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> foo = <span class="keyword">yield</span> getFoo();</span><br><span class="line">    <span class="built_in">console</span>.log(foo);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFoo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    resolve(<span class="string">'foo'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span> (<span class="params">generator</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> it = generator();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (result.done) <span class="keyword">return</span> result.value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result.value.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> go(it.next(value));</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> go(it.throw(error));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  go(it.next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run(g);</span><br></pre></td></tr></table></figure><h3 id="Promise-A-规范"><a href="#Promise-A-规范" class="headerlink" title="Promise/A+ 规范"></a><a href="https://promisesaplus.com/" target="_blank" rel="noopener">Promise/A+ 规范</a></h3><ul><li>实现者为开发者提供开放的 Promise标准，实现可靠，可互操作的JavaScript承诺。</li></ul><h4 id="术语（Terminology）"><a href="#术语（Terminology）" class="headerlink" title="术语（Terminology）"></a>术语（Terminology）</h4><ol><li><code>promise</code> 是一个对象或函数，其<code>then</code> 方法 的行为符合此规范</li><li><code>thenable</code> 定义 <code>then</code> 方法的对象或函数</li><li><code>value</code> 是任何合法的 <code>JavaScript</code> 值 （包括 <code>undefined</code> 、<code>thenable</code> 和 <code>promise</code>）</li><li><code>exception</code> 是使用 <code>throw</code> 语句抛出的值</li><li><code>reason</code> 是一个值（拒因），表明承诺被拒绝的原因（拒绝回调的值）</li></ol><h4 id="要求（Requirements）"><a href="#要求（Requirements）" class="headerlink" title="要求（Requirements）"></a>要求（Requirements）</h4><h5 id="Promise-states"><a href="#Promise-states" class="headerlink" title="Promise states"></a>Promise states</h5><ul><li>Promise 只有三种状态：pending 、 fulfilled（resolved） 和 rejected 状态</li></ul><ol><li>pending（等待状态）：可以过渡到 resolved 或 rejected 状态</li><li>fulfilled (执行状态）：无法再改变状态，且只有一个无法改变的<code>value</code></li><li>rejected （拒绝状态）：无法再改变状态，必须有一个 <code>reason</code></li></ol><ul><li>这里的 ‘无法再改变’ 意味着不可改变的身份 使用 <code>===</code> 判断 <code>value</code> 或 <code>reason</code>  </li></ul><h5 id="then-方法（The-then-method）"><a href="#then-方法（The-then-method）" class="headerlink" title="then 方法（The then method）"></a><code>then</code> 方法（The <code>then</code> method）</h5><ul><li><p>一个 <code>Promise</code> 必须提供一个 <code>then</code> 方法来访问当前 或 最终<code>value</code> 或 <code>reason</code><br>此方法接收两个参数： <code>onFulfilled</code>,<code>onRejected</code>  必须忽略其中不是函数是参数</p><ol><li><code>onFulfilled</code>：必须在 <code>promise</code> 执行状态（<code>fufilled</code> ）结束后调用，其第一个参数为 <code>value</code>，只能调用一次</li><li><code>onRejected</code>： 必须在 <code>promise</code> 拒绝状态（<code>rejected</code> ）结束后调用, 其第一个参数为 <code>reason</code>，只能调用一次</li></ol></li><li><p>onFulfilled or onRejected 在<a href="https://es5.github.io/#x10.3" target="_blank" rel="noopener">执行上下文</a> (作用域)堆栈仅包含平台代码之前不得调用<br>意味着调用 <code>onFulfilled</code>,<code>onRejected</code> 须在新一轮 <code>event loop</code> 中执行， 可用 <code>macro-task</code>（setTimout,setInterval,I/O,UI rendering, <code>script</code>主线程) 或 <code>micro-task</code>（Promise, Object.observe,process.nextTick,MutationObserver） 机制来实现</p></li><li>onFulfilled or onRejected 必须作为函数调用，在 <code>use strict</code> 下 <code>this 为 undefined</code></li><li><code>then</code>在同一个 promise 中可以链式调用，按照对应注册顺序一次回调</li><li><p><code>then</code>返回一个Promise对象 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">promise2 = promise1.then(onFulfilled, onRejected);</span><br></pre></td></tr></table></figure><ol><li>任一 <code>onFulfilled</code>或<code>onRejected</code>返回一个值x ,则执行 <code>Promise 解决过程</code></li><li><code>onFulfilled</code>或<code>onRejected</code> 抛出异常 e, 则 <code>promise2</code> 必须拒绝执行，并返回 <code>reason</code></li><li>如果<code>onFulfilled</code> 不是函数且 Promise1 为执行 <code>fulfilled</code>状态，那么  promise2 必须返回和 Promise1  相同的<code>value</code></li><li>如果<code>onRejected</code>不是函数且 Promise1 为 <code>rejected</code>状态，那么  promise2 必须返回和 Promise1  相同的<code>reason</code></li></ol><h6 id="Promise-解决过程-The-Promise-Resolution-Procedure"><a href="#Promise-解决过程-The-Promise-Resolution-Procedure" class="headerlink" title="Promise 解决过程 (The Promise Resolution Procedure)"></a>Promise 解决过程 (The Promise Resolution Procedure)</h6><ul><li>Promise 解决过程是一个抽象的操作，作为输入一个Promise,和一个值，用 <code>[[Resolve]](Promise2,x)</code> 表示；<br>如果 <code>x</code> 有 <code>then</code> 方法并且看上去像一个Promise,Promise 解决过程程序会尝试promise采用状态 <code>x</code>，否则用 <code>x</code> 的 <code>value</code>执行Promise;<br>对thenables的这种处理使promise的实现进行互操作，只要它们暴露出一个遵循  <code>Promise/A+</code>规范 兼容<code>then</code>方法即可。它还允许<code>Promise/A+</code>规范来“吸收”与合理不符合标准的实现then方法。</li></ul><p>运行 <a href="promise, x">[Resolve]</a> 需遵循以下步骤：</p><ol><li>如果promise和<code>x</code>指向同一个对象，以<code>TypeError</code>为理由拒绝执行<code>promise</code>。</li><li>如果 <code>x</code> 是 promise，则接收其状态：<br>  2.1 如果 <code>x</code> 为 <code>pending</code>， 则 Promise 保持等待直至 <code>x</code>改变状态<br>  2.2 如果 <code>x</code> 为 <code>resolved</code>，则 用相同的 <code>value</code> 执行 promise<br>  2.3 如果 <code>x</code> 为 <code>rejected</code>，则 用相同的 <code>reason</code>执行 promise</li><li>如果 <code>x</code> 是 Object or Function:<br>  3.1 把 <code>x.then</code> 赋值给 <code>then</code><br>  3.2 如果 <code>xthen</code> 抛出异常 结果 <code>e</code>，promise 状态变为 <code>rejected</code>，<code>reason</code> 为 <code>e</code><br>  3.3 如果 <code>then</code>是一个函数，将<code>x</code>作为函数作用域 <code>this</code> 调用，传递两个回调函数作为参数，第一个为 <code>resolvePromise</code>, 第二个参数为 <code>rejectPromise</code><pre><code>3.3.1 如果 `resolvePromise` 以值 `y`为参数被调用，以 `r`为 `reason` ，则运行 `[[Resolve]](promise, y)`3.3.2 如果 `rejectPromise` 用`r`为参数调用 ，则以 `r`拒绝 promise3.3.3 如果 resolvePromise 和 rejectPromise 均被调用，或者被同一参数调用了多次，则优先采用第一次调用并忽略剩下的调用3.3.4 如果调用then抛出异常`e`，resolvePromise或rejectPromise已被调用，请忽略它；否则以 `e` 为`reason`(据因)拒绝 promise</code></pre>  3.4 如果then不是一个函数, 则以<code>x</code>为参数执行 promise<ol start="4"><li>如果 <code>x</code>不为Object or Function，以 <code>x</code> 为参数执行 promise    </li></ol></li></ol><p>如果一个 promise 被一个循环的 thenable 链中的对象解决，而<code>[[Resolve]](promise, thenable)</code> 的递归性质又使得其被再次调用，根据上述的算法将会陷入无限递归之中。<br>算法虽不强制要求，但也鼓励施者检测这样的递归是否存在，若检测到存在则以一个可识别的 <code>TypeError</code> 为<code>reason</code>(据因)来拒绝 promise  </p><h3 id="手写简版-Promise"><a href="#手写简版-Promise" class="headerlink" title="手写简版 Promise"></a>手写简版 Promise</h3></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常用变量大写</span></span><br><span class="line"><span class="keyword">const</span> PENDING =<span class="string">'pending'</span></span><br><span class="line"><span class="keyword">const</span> RESOLVEd = <span class="string">'resolved'</span></span><br><span class="line"><span class="keyword">const</span> REJECTEd = <span class="string">'rejected'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myPromise</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(callback) &#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="keyword">this</span></span><br><span class="line">    that.state = PENDING;</span><br><span class="line">    that.resolveCallback = [];</span><br><span class="line">    that.rejectCallback = [];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> resolve = <span class="function"><span class="params">value</span> =&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (that.state === PENDING)&#123;</span><br><span class="line">          that.state = RESOLVED;</span><br><span class="line">          that.value = value</span><br><span class="line">          that.resolveCallback.map(<span class="function"><span class="params">cb</span> =&gt;</span> cb(that.value))</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">const</span> reject = <span class="function"><span class="params">value</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (that.state === PENDING)&#123;</span><br><span class="line">          that.state = REJECTED;</span><br><span class="line">          that.value = value</span><br><span class="line">          that.rejectCallback.map(<span class="function"><span class="params">cb</span> =&gt;</span> cb(that.value))</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      callback(resolve,reject)</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">      reject(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  then(onResolved,onRejected)&#123;</span><br><span class="line">      <span class="keyword">const</span> that = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> async </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Async/await</title>
      <link href="/2019/03/14/asyncEs8/"/>
      <url>/2019/03/14/asyncEs8/</url>
      
        <content type="html"><![CDATA[<h2 id="ES2017引入async-函数"><a href="#ES2017引入async-函数" class="headerlink" title="ES2017引入async 函数"></a>ES2017引入async 函数</h2><ul><li>Generator 的语法糖</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//generator</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readFile = <span class="function"><span class="keyword">function</span> (<span class="params">path</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve,reject</span>) </span>&#123;</span><br><span class="line">        fs.readFile(path, <span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</span><br><span class="line">            resolve(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> g = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> f1 = <span class="keyword">yield</span> readFile(url1);</span><br><span class="line">    <span class="keyword">const</span> f2 = <span class="keyword">yield</span> readFile(url2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// async</span></span><br><span class="line"><span class="keyword">const</span> asyncFile = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> f1 = <span class="keyword">await</span> readFile(url1);</span><br><span class="line">    <span class="keyword">const</span> f2 = <span class="keyword">await</span> readFile(url2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将 g 函数的 * 变成 axync</span></span><br><span class="line"><span class="comment"> * 将 yield  变成 await </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="async-对-generator-进行以下优化"><a href="#async-对-generator-进行以下优化" class="headerlink" title="async  对  generator 进行以下优化"></a>async  对  generator 进行以下优化</h3><ul><li>不再需要调用 <code>next</code> 方法就能执行</li><li>更加语义化</li><li>实用性更强 <code>await</code> 后面可以是 Promise , 原始类型值（会自动转成立即 resolved 的 Promise 对象）</li><li>返回值为Promise 对象更加方便，<label>当函数执行遇到 <code>await</code> 时暂停执行，等到异步操作完成，再执行后面的代码</label></li><li>async 函数 return 的返回值会成为 <code>then</code> 方法的参数</li><li><p>async 函数内部抛出错误 将会被 <code>catch</code>方法接收</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve,ms))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncPrint</span>(<span class="params">val, ms </span>) </span>&#123;</span><br><span class="line">     <span class="keyword">await</span> timeout(ms);</span><br><span class="line">    <span class="built_in">console</span>.log(val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncPrint(<span class="string">'Owen'</span>,<span class="number">1000</span>) <span class="comment">//1s 后 "Owen"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//因为 asnyc 返回 Promise 所以可以改用 async</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">timout</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve,ms));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncPrint</span>(<span class="params">val, ms </span>) </span>&#123;</span><br><span class="line">     <span class="keyword">await</span> timeout(ms);</span><br><span class="line">    <span class="built_in">console</span>.log(val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncPrint(<span class="string">'Owen'</span>,<span class="number">1000</span>) <span class="comment">//1s 后 "Owen"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义 async 函数 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表达式</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="keyword">async</span> f()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Storage</span> </span>&#123;</span><br><span class="line">   <span class="keyword">async</span> getAvatar(name) &#123;  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">async</span> () =&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* then方法接收return 的参数 */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Owen"</span></span><br><span class="line">&#125;</span><br><span class="line">foo().then(<span class="function"><span class="params">re</span> =&gt;</span><span class="built_in">console</span>.log(re)); <span class="comment">//Owen</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 接收错误对象 */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="number">18</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn().catch(<span class="function"><span class="params">er</span> =&gt;</span><span class="built_in">console</span>.log(er)) <span class="comment">//error</span></span><br></pre></td></tr></table></figure></li><li><p>asyn回调只有等所有 <code>await</code> 后面的Promise 执行完毕或者报错和<code>return</code>才会执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> time = + <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="built_in">console</span>.log(time,<span class="number">1</span>)</span><br><span class="line">   <span class="keyword">let</span> p1 =  <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve,<span class="number">1000</span>));</span><br><span class="line">   <span class="built_in">console</span>.log(+ <span class="keyword">new</span> <span class="built_in">Date</span>() - time ,<span class="number">2</span>)</span><br><span class="line">   <span class="keyword">let</span> p2 =  <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve,<span class="number">2000</span>));</span><br><span class="line">   <span class="keyword">return</span> +<span class="keyword">new</span> <span class="built_in">Date</span>() - time;</span><br><span class="line">&#125;</span><br><span class="line">fn().then(<span class="function"><span class="params">time</span> =&gt;</span> <span class="built_in">console</span>.log(time,<span class="number">3</span>));</span><br><span class="line"><span class="comment">//  1s 1</span></span><br><span class="line"><span class="comment">//  2s 2</span></span><br><span class="line"><span class="comment">//  3s 3</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="await"><a href="#await" class="headerlink" title="await"></a>await</h3><ul><li><p>await 后面是 <code>thenable</code> 对象，会和返回 promise 对象 一样返回结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sleep</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(timeout) &#123;</span><br><span class="line">    <span class="keyword">this</span>.timeout = timeout;</span><br><span class="line">  &#125;</span><br><span class="line">  then(resolve, reject) &#123;</span><br><span class="line">    <span class="keyword">const</span> startTime = <span class="built_in">Date</span>.now();</span><br><span class="line">    setTimeout(</span><br><span class="line">      () =&gt; resolve(<span class="built_in">Date</span>.now() - startTime),</span><br><span class="line">      <span class="keyword">this</span>.timeout</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> actualTime = <span class="keyword">await</span> <span class="keyword">new</span> Sleep(<span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(actualTime);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li><li><p>如果 <code>await</code> 后面的Promise 状态为 <code>rejected</code> 那么结果将会传递给 <code>catch</code> 方法；并且函数会中断执行,除非使用 <code>try..catch</code> 或者 对应的 <code>Pomise</code> 使用 <code>catch</code>方法 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">ay</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">Promise</span>.reject(<span class="number">18</span>).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Owem"</span></span><br><span class="line">&#125;</span><br><span class="line">ay().then(<span class="function"><span class="params">res</span> =&gt;</span><span class="built_in">console</span>.log(res))</span><br><span class="line"><span class="comment">//18</span></span><br><span class="line"><span class="comment">//Owem</span></span><br></pre></td></tr></table></figure></li><li><p>多个 <code>await</code> 后面的异步，如果不存在继发关系，最好同时触发</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> time = + <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="built_in">console</span>.log(time,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">let</span> [p1,p2] = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([ </span><br><span class="line">       <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve,<span class="number">1000</span>)),</span><br><span class="line">       <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve,<span class="number">2000</span>))]);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> +<span class="keyword">new</span> <span class="built_in">Date</span>() - time;</span><br><span class="line">&#125;</span><br><span class="line">fn().then(<span class="function"><span class="params">time</span> =&gt;</span> <span class="built_in">console</span>.log(time,<span class="number">2</span>));</span><br></pre></td></tr></table></figure><ul><li>只能再 async 函数中使用 await <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">ay</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Owem"</span></span><br><span class="line">&#125;</span><br><span class="line">ay()  <span class="comment">//error</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="async-原理"><a href="#async-原理" class="headerlink" title="async 原理"></a>async 原理</h3><ul><li>将Generator 函数和执行器包装再一个函数中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autoactuator</span> (<span class="params">gen</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">const</span> g = gen();</span><br><span class="line">    <span class="keyword">let</span> step = <span class="function">(<span class="params">next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> n;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            n = next();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(err) &#123;</span><br><span class="line">            <span class="keyword">return</span> reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n.done)&#123;</span><br><span class="line">            <span class="keyword">return</span> resolve(n.value)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Promise</span>.resolve(next.value).ten(<span class="function">(<span class="params">v</span>) =&gt;</span>&#123;</span><br><span class="line">            step(<span class="function"><span class="params">()</span> =&gt;</span> g.next(v));</span><br><span class="line">        &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            setp(<span class="function"><span class="params">()</span> =&gt;</span> g.throw(e));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    step(<span class="function"><span class="params">()</span> =&gt;</span> g.next(<span class="literal">undefined</span>));</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> async </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步操作原理（二）</title>
      <link href="/2019/03/13/eventLoop/"/>
      <url>/2019/03/13/eventLoop/</url>
      
        <content type="html"><![CDATA[<h3 id="事件循环-eventLoop-详解"><a href="#事件循环-eventLoop-详解" class="headerlink" title="事件循环(eventLoop) 详解"></a>事件循环(<code>eventLoop</code>) 详解</h3><p><strong>并行和并发：</strong></p><p>并行性是指两个或多个事件在同一时刻发生；<br>并发性是指两个或多个事件在同一时间段内发生。</p><h4 id="任务队列-和-事件循环"><a href="#任务队列-和-事件循环" class="headerlink" title="任务队列 和 事件循环"></a>任务队列 和 事件循环</h4><blockquote><p>JS 将变量存储在 <label>堆 <code>heap</code></label> 和 <label> 栈 <code>stack</code></label>中<br>堆中存放对象比如 ：数组，对象，函数<br>栈中存放变量和对象的指针<br>运行时同步任务会排好队，依次执行，而排队的地方就叫执行栈（先进后出）</p></blockquote><ul><li><p>JS运行时，除了有一个主线程运行，引擎还提供任务队列 <code>task queue</code> , 里面是各种需要当前程序处理的异步任务。（不止一个任务队列）</p></li><li><p>异步任务通常是一个回调函数；如果一个异步任务没有回调函数，是不会放入异步任务队列中，同样也不会进入主线程中执行。</p></li></ul><p><strong>执行过程：</strong></p><ol><li>主线程会先执行完所有同步任务</li><li>同步任务结束，查看任务队列（<label>先进先出的数据结构，排在前面的事件，优先被主线程读取。</label>）里面的异步任务</li><li>查看所有满足执行条件的异步任务，放入主线程中变成同步任务，执行对应的回调函数。</li><li>执行完毕再将下一个满足执行条件的异步任务放入主线程中执行。</li><li>不断重复前三步操作</li></ol><p>只要同步任务执行完毕，JS引擎会不停的监测检查任务队列中的异步任务，将满足执行条件且最先进入的任务加入到执行栈中去执行，如此往复。这种检查机制就叫事件循环 <code>Event Loop</code><br><img src="/static/img/eventLoop.png" alt="event loop"></p><h4 id="微任务与宏任务"><a href="#微任务与宏任务" class="headerlink" title="微任务与宏任务"></a>微任务与宏任务</h4><p>异步任务还会分两层：</p><ul><li>微任务(<code>micro task</code>) </li><li>宏任务(<code>macro task</code>)</li></ul><p><label>主线程会先查看微任务 <code>micro task</code></label>；<br>如果没有满足条件的任务，再去宏任务中查找；<br>如果有则将所有满足条件的微任务按顺序依次加入到主进程中；<br>执行完毕后再去红任务队列中查找，往复循环。<br>常见宏任务：</p><ul><li>定时器 I/O（输入/输出）操作 </li></ul><p>微任务(<code>jobs</code>)： </p><ul><li>Promise async/await<h4 id="nodeJS"><a href="#nodeJS" class="headerlink" title="nodeJS"></a>nodeJS</h4>nodeJS 中任务队列 加入了 <code>process.nextTick</code> 和 <code>setImmediate</code>。<br>前者比后者先执行<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  process.nextTick(<span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">2</span>);&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">setImmediate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  setImmediate(<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    setImmediate(<span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">4</span>);&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'TIMEOUT FIRED'</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// TIMEOUT FIRED</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">//这个结果是不确定的可能是 1234  TIMEOUT FIRED  ||   12  TIMEOUT FIRED 34</span></span><br></pre></td></tr></table></figure></li></ul><p>其二者的调用顺序取决于当前event loop的上下文，如果他们在异步i／o callback之外调用，其执行先后顺序是不确定的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line">fs.readFile(__filename, () =&gt; &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timeout'</span>)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">  setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'immediate'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//immediate</span></span><br><span class="line"><span class="comment">//timeout</span></span><br></pre></td></tr></table></figure></p><p>这是因为<code>fs.readFile</code> callback执行完后，程序设定了<code>timer</code> 和 <code>setImmediate</code>，因此poll阶段不会被阻塞进而进入check阶段先执行setImmediate，后进入timer阶段执行setTimeout。<a href="https://juejin.im/post/5aab2d896fb9a028b86dc2fd#comment" target="_blank" rel="noopener">setTimeout和setImmediate的差异</a></p><p>process.nextTick在最新版nodejs中不被推荐使用，推荐使用setImmediate ，原因在于nextTick是在当前帧介绍后立即执行，会阻断I/O并且有最大数量限制；而setImmediate不会阻断I/O，更像是setTimeout(func, 0) </p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> async </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步操作原理(一)</title>
      <link href="/2019/03/11/async/"/>
      <url>/2019/03/11/async/</url>
      
        <content type="html"><![CDATA[<h3 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h3><blockquote><ul><li><code>javascript</code> 只再一个线程上<label>运行</label>，同时只能执行一个任务，一行一行执行。</li><li>javascript 运行在单线程上，并不代表 JavaScript引擎就是单线程的，其实它有多个线程，单个脚本只能在一个线程上运行（主线程），其他线程在后台配合运行。</li><li>为了利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程，但是子线程完全受主线程控制，且不得操作 DOM。所以，这个新标准并没有改变 JavaScript 单线程的本质。</li></ul></blockquote><p>这种模式好处在于， 实现起来简单，环境单纯。 但是 耗时较长，后面的任务必须等待前面的任务执行完毕。</p><h3 id="同步和异步任务"><a href="#同步和异步任务" class="headerlink" title="同步和异步任务"></a>同步和异步任务</h3><ul><li>同步<br>未被引擎挂起、在主线程上排队执行的任务。需要前面的任务执行完后才能执行。</li><li>异步<ol><li>被引擎挂起，暂不处理的任务,不进入主线程、而进入任务队列;</li><li><label>只有达到某个条件，异步任务才会进入主线程，不会堵塞异步任务后面的代码 （ajax 是最具代表性的异步任务）</label></li></ol></li></ul><h3 id="异步操作模式"><a href="#异步操作模式" class="headerlink" title="异步操作模式"></a>异步操作模式</h3><h4 id="回调函数-Callback"><a href="#回调函数-Callback" class="headerlink" title="回调函数 Callback"></a>回调函数 <code>Callback</code></h4><blockquote><p>将函数传递进一个方法中，函数不会立即执行，等待出来结果之后在执行。<br>回调函数是异步操作最基本的方法</p></blockquote><p>容易出现回调地狱（<code>Callback hell</code>)<br>比如多个 ajax 嵌套请求<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ajax(url, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 处理逻辑</span></span><br><span class="line">    ajax(url1, () =&gt; &#123;</span><br><span class="line">        <span class="comment">// 处理逻辑</span></span><br><span class="line">        ajax(url2, () =&gt; &#123;</span><br><span class="line">            <span class="comment">// 处理逻辑</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这种方式容易理解和简单，但是不利于<label>维护和阅读</label>；<br>耦合度高，结构混乱，错误较难追踪，而且每个任务只能指定一个回调。</p><h4 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h4><blockquote><p>采用事件驱动。<br>W3C规范中定义3个事件阶段：捕获(Netscape)，目标，冒泡（IE）。<br>事件冒泡：在目标元素上发生click事件的顺序 目标元素 -&gt; 父级元素 -&gt; body -&gt; html -&gt; document<br>事件捕获： 与冒泡相反，document -&gt; html -&gt; body -&gt; 父级元素 -&gt; 目标元素<br>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原生事件委托</span></span><br><span class="line">    <span class="keyword">var</span> parent = <span class="built_in">document</span>.getElementById(<span class="string">'parent'</span>);</span><br><span class="line">    parent.addEventListener(<span class="string">'click'</span>,showColor,<span class="literal">false</span>);</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">showColor</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> son = e.target;</span><br><span class="line">            <span class="keyword">if</span>(son.nodeName.toLowerCase() === <span class="string">'li'</span>)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'The color is '</span> + son.innerHTML);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   <span class="comment">//类似 jQuery写法</span></span><br><span class="line">    fn.on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br><span class="line">    <span class="comment">//等同于</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//do someing</span></span><br><span class="line">            fn.trigger(<span class="string">'done'</span>)</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>   这种方法比较容易理解，可以绑定多个事件，每个事件可以指定多个回调函数，可以去“耦合”(<code>decoupling</code>),便于实现模块化。 但是整个程序都会变成事件驱动，流程不清晰。</p><h4 id="发布-订阅"><a href="#发布-订阅" class="headerlink" title="发布/订阅"></a>发布/订阅</h4><blockquote><p>消息的发送者（称为发布者） 不会将消息直接发送给特定的接收者（称为订阅者），而是将不消息分为不同的类别，不需要了解哪些订阅者；<br>订阅者,只接收感兴趣的消息，不需要了解哪些发布者<br>可以把事件理解成“信号”,如果存在一个“信号中心”；<br> 某个任务执行完成，就向信号中心“发布” (<code>publish</code>) 一个信号，其他任务可以向信号中心“订阅”(<code>subscribe</code>)这个信号，从而知道什么时候自己开始执行</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = $(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">obj.on(<span class="string">"aaa"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">111111111111</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">obj.on(<span class="string">"aaa"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">222222222222</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">$(dom).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        obj.trigger(<span class="string">"aaa"</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>当 <code>foo</code> 执行完毕后，想消息纵向发布 <code>done</code>信号，引发执行<code>fn</code></p><h5 id="消息过滤"><a href="#消息过滤" class="headerlink" title="消息过滤"></a>消息过滤</h5><p>订阅者通常接收信号中心中(消息代理)的一个子集，选择接受和处理的消息过程叫过滤<br><strong>过滤形式</strong></p><ul><li>基于主题<blockquote><p>消息被发布到主题或命名通道上；订阅者将受到所有信息，并且所有订阅同一主题的订阅者都将收到同样的信息；发布者赋值定义订阅者所订阅的消息类别</p></blockquote></li><li>基于内容<blockquote><p>订阅者定义感兴趣的条件，只有当消息的属性或内容满足订阅者的条件，消息才投递到该订阅者。订阅者负责堆消息分类。</p></blockquote></li></ul><h5 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h5><p>发布者 发布消息到一个消息代理，订阅者向其注册订阅，由消息代理来过滤</p><p>优缺点：</p><ul><li>松耦合，发布者和订阅者只需要关注主题内容，相互独立地运行。</li><li>扩展性强，通过并行操作，消息缓存，基于树或网路路由等技术，比传统客户端具有更好的扩展性。<ul><li>缺点： 发布者解耦订阅者，问题难以跟踪，无法知道消息传送是成功的还是失败的</li></ul></li></ul><h3 id="异步操作的流程控制（多个异步操作如何确定异步操作的执行顺序，如何保证这种顺序执行）"><a href="#异步操作的流程控制（多个异步操作如何确定异步操作的执行顺序，如何保证这种顺序执行）" class="headerlink" title="异步操作的流程控制（多个异步操作如何确定异步操作的执行顺序，如何保证这种顺序执行）"></a>异步操作的流程控制（多个异步操作如何确定异步操作的执行顺序，如何保证这种顺序执行）</h3><h4 id="串行执行"><a href="#串行执行" class="headerlink" title="串行执行"></a>串行执行</h4><blockquote><p>一个任务执行完毕后，再执行另一个<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"> <span class="keyword">let</span> results = [];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="function">(<span class="params">arg,callback</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`参数：<span class="subst">$&#123;arg&#125;</span>，1秒后返回`</span>);</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>callback(arr*<span class="number">2</span>)&#125;,<span class="number">1000</span>);</span><br><span class="line">  &#125; </span><br><span class="line"><span class="keyword">const</span> final = <span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`完成：`</span>,res);</span><br><span class="line"><span class="keyword">const</span> series = <span class="function"><span class="params">item</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(item)&#123;</span><br><span class="line">        <span class="keyword">async</span>(item,result=&gt;&#123;</span><br><span class="line">            results.push(result);</span><br><span class="line">            <span class="keyword">return</span> serise(items.shift();)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> final(results[results.length<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">series(items.shift());</span><br></pre></td></tr></table></figure></p></blockquote><p>上面代码 <code>series</code> 就是一个串行函数； 类似与同步任务</p><h4 id="并行执行"><a href="#并行执行" class="headerlink" title="并行执行"></a>并行执行</h4><blockquote><p>所有异步任务同时执行，全部执行完毕，再执行 最终 (<code>final</code>) 函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"> <span class="keyword">let</span> results = [];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="function">(<span class="params">arg,callback</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`参数：<span class="subst">$&#123;arg&#125;</span>，1秒后返回`</span>);</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>callback(arr*<span class="number">2</span>)&#125;,<span class="number">1000</span>);</span><br><span class="line">  &#125; </span><br><span class="line"><span class="keyword">const</span> final = <span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`完成：`</span>,res);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> items)&#123;</span><br><span class="line">     <span class="keyword">async</span>(item,(result) =&gt;&#123;</span><br><span class="line">         results.push(result)</span><br><span class="line">     &#125;)</span><br><span class="line">     <span class="keyword">if</span>(results.length == items.length)&#123;</span><br><span class="line">         final(results[results.length<span class="number">-1</span>]);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p> 上面代码，for 循环会同时执行5异步任务，等他们执行完毕再执行 <code>final</code> 函数。 过个并行任务较多，容易耗尽系统资源，拖慢运行</p><h4 id="并串结合"><a href="#并串结合" class="headerlink" title="并串结合"></a>并串结合</h4><blockquote><p>限制并行执行任务的数量，避免占用过多系统资源</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> items = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> results = [];</span><br><span class="line"><span class="keyword">let</span> running = <span class="number">0</span>,limit = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="function">(<span class="params">arg,callback</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`参数：<span class="subst">$&#123;arg&#125;</span>，1秒后返回`</span>);</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>callback(arr*<span class="number">2</span>)&#125;,<span class="number">1000</span>);</span><br><span class="line">  &#125; </span><br><span class="line"><span class="keyword">const</span> final = <span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`完成：`</span>,res);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> launcher = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (running &lt; limit &amp;&amp; items.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> item = items.shift()；</span><br><span class="line">        <span class="keyword">async</span> (item,(res)=&gt;&#123;</span><br><span class="line">            results.push(result);</span><br><span class="line">            running--;</span><br><span class="line">            items.length? launcher(): final(results);</span><br><span class="line">        &#125;)</span><br><span class="line">        running++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码，最多只能运行两个异步任务，当前 <code>running</code> 记录运行的任务数量，低于门槛 limit 就会新增一个任务，直到任务执行完毕。</p><h3 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hash = <span class="built_in">window</span>.location.hash;</span><br><span class="line"><span class="keyword">const</span> hashWatcher = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.location.hash != hash)&#123;</span><br><span class="line">        updatePage()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setInterval(hashWatcher,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p><code>setInterval</code> 时间 间隔是” 开始执行 “ 之间的间隔,不会考虑每次执行的任务时间，所以两次执行间隔会小于指定时间。比如 指定 100ms  任务本身消耗 105 ms，那么第一次执行完毕后，第二次会立即执行。</p><p>如果要固定间隔，可以使用 <code>setTimeout</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hash = <span class="built_in">window</span>.location.hash;</span><br><span class="line"><span class="keyword">const</span> hashWatcher = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.location.hash != hash)&#123;</span><br><span class="line">        updatePage()</span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(hashWatcher,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(hashWatcher,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong></p><blockquote><p>HTML标准规定 <code>setTimeout</code> 最小间隔 4ms<br> 由于定时器每执行一次,会返回一个整数，连续执行，返回值比上一次大1<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 每轮事件循环检查一次</span></span><br><span class="line">  <span class="keyword">var</span> gid = setInterval(clearAllTimeouts, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">clearAllTimeouts</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> id = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"g:"</span>+gid) </span><br><span class="line">    &#125;,<span class="number">0</span>);</span><br><span class="line">   <span class="keyword">while</span> (id &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (id !== gid) &#123;</span><br><span class="line">        clearTimeout(id);</span><br><span class="line">      &#125;</span><br><span class="line">      id--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="防抖（debounce）"><a href="#防抖（debounce）" class="headerlink" title="防抖（debounce）"></a>防抖（<code>debounce</code>）</h3><blockquote><p>在某些场景下不希望事件执行太频繁，我们可以设置一个阀门临界值，再一段时间内只执行一次,或者一段时间过后执完所有任务</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一段时间只执行一次</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> perform = <span class="function">(<span class="params">fn,time</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span>  flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span>  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> self = <span class="keyword">this</span>,arg = <span class="built_in">arguments</span>;</span><br><span class="line">         <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">             flag = <span class="literal">false</span>;</span><br><span class="line">             fn.apply(self,arg);</span><br><span class="line">               setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">                flag = <span class="literal">true</span></span><br><span class="line">             &#125;,time)</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">setInterval(perform(fn,<span class="number">2000</span>),<span class="number">500</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 经过一段时间再执行所有要执行的任务</span></span><br><span class="line"> <span class="keyword">let</span> debounce = <span class="function">(<span class="params">fn,delay</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> self = <span class="keyword">this</span>,arg = <span class="built_in">arguments</span>;</span><br><span class="line">         timer &amp;&amp; clearTimeout(timer);</span><br><span class="line">         timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">             fn.apply(self,arg)</span><br><span class="line">         &#125;,delay)</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">setInterval(perform(fn,<span class="number">2500</span>),<span class="number">500</span>);</span><br></pre></td></tr></table></figure><hr><p><a href="http://wangdoc.com/javascript/async/general.html#%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF" target="_blank" rel="noopener">参考原文链接： http://wangdoc.com</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> async </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模块化开发(二)</title>
      <link href="/2019/03/07/modularization/"/>
      <url>/2019/03/07/modularization/</url>
      
        <content type="html"><![CDATA[<h3 id="ES6-详解"><a href="#ES6-详解" class="headerlink" title="ES6 详解"></a>ES6 详解</h3><blockquote><p>ES6 的模块自动采用严格模式，不管你有没有在模块头部加上”use strict”。<br> 顶层的this指向undefined，即不应该在顶层代码使用this。</p></blockquote><p>严格模式主要有以下限制：</p><ol><li>变量必须声明后再使用</li><li>函数的参数不能有同名属性，否则报错</li><li>不能使用<code>with</code>语句</li><li>不能对只读属性赋值，否则报错</li><li>不能使用前缀 0 表示八进制数，否则报错</li><li>不能删除不可删除的属性，否则报错</li><li>不能删除变量<code>delete prop</code>，会报错，只能删除属性<code>delete global[prop]</code></li><li><code>eval</code>不会在它的外层作用域引入变量</li><li><code>eval</code>和<code>arguments</code>不能被重新赋值</li><li>arguments不会自动反映函数参数的变化</li><li>不能使用<code>arguments.callee</code></li><li>不能使用<code>arguments.caller</code></li><li>禁止this指向全局对象</li><li>不能使用<code>fn.caller</code>和<code>fn.arguments</code>获取函数调用的堆栈</li><li><p>增加了保留字（比如<code>protected</code>、<code>static</code>和<code>interface</code>）<br>上面这些限制，模块都必须遵守。</p><h4 id="export命令"><a href="#export命令" class="headerlink" title="export命令"></a>export命令</h4></li></ol><ul><li><p><code>export</code>除了输出变量，还可以输出函数或类（class）,还可以通过 <code>as</code> 更改输出名。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> obj =&#123;<span class="attr">name</span>:  <span class="string">"Owen"</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> multiply = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x * y;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    age,</span><br><span class="line">    obj <span class="keyword">as</span> monicker, <span class="comment">//改变量名</span></span><br><span class="line">    multiply</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>导出的对象必须是对外的接口</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num =<span class="number">2</span>;</span><br><span class="line"><span class="keyword">export</span> num ; <span class="comment">//error 因为实际输出的是一个值，须放在对象中 &#123;num&#125;</span></span><br><span class="line"></span><br><span class="line">exprot <span class="number">2</span>  <span class="comment">//error  输出的是值 而不是一个对外接口 =&gt; 须改成 export let num =2；</span></span><br></pre></td></tr></table></figure><ul><li>不能放到局部作用域中导出， 因为导出的对象是动态绑定的<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="function">(<span class="params">r</span>) =&gt;</span> r++;</span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">export</span> <span class="keyword">default</span> foo; <span class="comment">//error</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="export-default"><a href="#export-default" class="headerlink" title="export default"></a>export default</h3><ul><li>全局只能有一个 <code>export default</code></li><li><code>export default</code>  后面不能有 变量声明的关键字</li><li>使用 <code>export default</code> ，import 就不需要使用 <code>{}</code>,只需要自定义一个变量即可</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">var</span> a=<span class="number">1</span>; <span class="comment">//error</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> obj =&#123;<span class="attr">name</span>:<span class="string">'Owen'</span>&#125;;</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">name</span>:<span class="string">"Owen"</span>&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;num, obj1&#125;</span><br></pre></td></tr></table></figure><h3 id="import"><a href="#import" class="headerlink" title="import"></a><code>import</code></h3><ul><li><p>配合 <code>from</code> 导入模块,  通过 <code>as</code> 修改导入接口, 接口不能重新赋值，但对象可以修改内部属性或方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;age, monicker <span class="keyword">as</span> obj, multiply&#125; <span class="keyword">from</span> <span class="string">'./preson.js'</span>;</span><br><span class="line">  age = <span class="number">0</span> ; <span class="comment">//error</span></span><br><span class="line">  obj.feature = <span class="string">"handsome Owen"</span>; </span><br><span class="line">  <span class="built_in">console</span>.log(age, obj。name, multiply(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">  <span class="keyword">import</span> * <span class="keyword">as</span> preson <span class="keyword">from</span> <span class="string">"./preson.js"</span> <span class="comment">//引入所有接口</span></span><br></pre></td></tr></table></figure></li><li><p><code>import</code> 具有提升的效果，会提升到作用域顶部执行，同一个模块多次引入只执行一次，并且不能再局部作用域中引入。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">multiply(<span class="number">2</span>,<span class="number">2</span>); <span class="comment">//4</span></span><br><span class="line"><span class="keyword">import</span> &#123;age, monicker <span class="keyword">as</span> obj, multiply&#125; <span class="keyword">from</span> <span class="string">'./preson.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">import</span> &#123;age, monicker <span class="keyword">as</span> obj, multiply&#125; <span class="keyword">from</span> <span class="string">'./preson.js'</span>; <span class="comment">//error</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="import-1"><a href="#import-1" class="headerlink" title="import()"></a><code>import()</code></h3><ul><li>因为require是运行时加载模块，import命令无法取代require的动态加载功能。因此，有一个提案，引入<code>import()</code>函数，完成动态加载。</li><li>import()函数可以用在任何地方，不仅仅是模块，非模块的脚本也可以使用。</li><li><p>和 <code>require</code>类似，不同之处在于 <code>import()</code>是同步加载 <code>require()</code>是异步加载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path =<span class="keyword">import</span>(<span class="string">'path'</span>);</span><br></pre></td></tr></table></figure></li><li><p>我们可以利用 <code>import()</code> 进行按需加载,动态加载，按条件加载:</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">'./a.js'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">        r.fn();</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">/* Error handling */</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="keyword">if</span>( x == <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> path =<span class="keyword">import</span>(<span class="string">'path'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>如果想同时加载多个模块，可以采用下面的写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">Promise</span>.all([</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./a.js'</span>),</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./b.js'</span>),</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./c.js'</span>),</span><br><span class="line">]) .then(<span class="function">(<span class="params">[a,b,c]</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line"> &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">/* Error handling */</span></span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> moduleDevelop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli 升级 webpack4 配置</title>
      <link href="/2019/03/07/webpack/"/>
      <url>/2019/03/07/webpack/</url>
      
        <content type="html"><![CDATA[<h3 id="升级webpack4-先删除之前的webpack"><a href="#升级webpack4-先删除之前的webpack" class="headerlink" title="升级webpack4  先删除之前的webpack"></a>升级webpack4  先删除之前的webpack</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D webpack  webpack-cli webpack-dev-server</span><br></pre></td></tr></table></figure><h3 id="build-base-conf-js"><a href="#build-base-conf-js" class="headerlink" title="build/base.conf.js"></a>build/base.conf.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>) <span class="comment">//node OS模块 可查看主机系统相关信息</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>) <span class="comment">//node path模块 c处理文件路径</span></span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>) <span class="comment">//vue-cli封装的公用模块</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)<span class="comment">//vue-cli封装的配置</span></span><br><span class="line"><span class="keyword">const</span> HappyPack = <span class="built_in">require</span>(<span class="string">"happypack"</span>)<span class="comment">//开启多个子进程去并发执行</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)<span class="comment">//webpack主要插件，可以简化HTML文件的创建</span></span><br><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);<span class="comment">//清空打包好的文件</span></span><br><span class="line"><span class="keyword">const</span> ProgressBarPlugin = <span class="built_in">require</span>(<span class="string">'progress-bar-webpack-plugin'</span>)<span class="comment">//查看进度</span></span><br><span class="line"><span class="keyword">const</span> vueLoaderConfig = <span class="built_in">require</span>(<span class="string">'./vue-loader.conf'</span>)<span class="comment">// 处理less,sass等样式配置文件 </span></span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> argv = <span class="built_in">require</span>(<span class="string">"yargs-parser"</span>)(process.argv.slice(<span class="number">2</span>))<span class="comment">//获取运行  scripts 里面的指令 --mode 后面参数 </span></span><br><span class="line"><span class="keyword">const</span> isPro = argv.mode == <span class="string">"production"</span></span><br><span class="line"><span class="keyword">const</span> resolve = <span class="function"><span class="params">dir</span> =&gt;</span> path.resolve(__dirname, <span class="string">".."</span>, dir)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    context: path.resolve(__dirname, <span class="string">'../'</span>),</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: <span class="string">"./src/main.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: config.build.assetsRoot,</span><br><span class="line">        filename: <span class="string">'[name].js'</span>,</span><br><span class="line">        publicPath: isPro ?</span><br><span class="line">            config.build.assetsPublicPath : config.dev.assetsPublicPath</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>],</span><br><span class="line">        alias: &#123;</span><br><span class="line">            <span class="string">'vue'</span>: <span class="string">'vue/dist/vue.esm.js'</span>,</span><br><span class="line">            <span class="string">'src'</span>: path.resolve(__dirname, <span class="string">'../src/common'</span>),</span><br><span class="line">            <span class="string">'@'</span>: resolve(<span class="string">'src'</span>),</span><br><span class="line">            <span class="string">'~'</span>: resolve(<span class="string">'src/components/common'</span>),</span><br><span class="line">            <span class="string">'static'</span>: path.resolve(__dirname, <span class="string">'../static'</span>),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">                test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">                loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">                options: vueLoaderConfig</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                loaders: <span class="string">'happypack/loader?id=babel'</span>,<span class="comment">//配合 happypack插件使用</span></span><br><span class="line">                exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">                include: [resolve(<span class="string">'src'</span>), resolve(<span class="string">'test'</span>)]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    limit: <span class="number">10000</span>,</span><br><span class="line">                    name: utils.assetsPath(<span class="string">'img/[name].[hash:7].[ext]'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/</span>,</span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    limit: <span class="number">10000</span>,</span><br><span class="line">                    name: utils.assetsPath(<span class="string">'media/[name].[hash:7].[ext]'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(woff2?|eot|ttf|otf)(\?.*)?$/</span>,</span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    limit: <span class="number">10000</span>,</span><br><span class="line">                    name: utils.assetsPath(<span class="string">'fonts/[name].[hash:7].[ext]'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    node: &#123;</span><br><span class="line">        setImmediate: <span class="literal">false</span>,</span><br><span class="line">        dgram: <span class="string">'empty'</span>,</span><br><span class="line">        fs: <span class="string">'empty'</span>,</span><br><span class="line">        net: <span class="string">'empty'</span>,</span><br><span class="line">        tls: <span class="string">'empty'</span>,</span><br><span class="line">        child_process: <span class="string">'empty'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> ProgressBarPlugin(),</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">        <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">            id: <span class="string">'babel'</span>,</span><br><span class="line">            loaders: [&#123;</span><br><span class="line">                loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    babelrc: <span class="literal">true</span>,</span><br><span class="line">                    cacheDirectory: <span class="literal">true</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                publicPath: <span class="string">"/"</span></span><br><span class="line">            &#125;],</span><br><span class="line">            <span class="comment">//共享进程池</span></span><br><span class="line">            threadPool: HappyPack.ThreadPool(&#123;</span><br><span class="line">                size: os.cpus().length <span class="comment">//cpu nunbers</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="comment">//允许 HappyPack 输出日志</span></span><br><span class="line">            verbose: <span class="literal">true</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">            <span class="string">'process.env'</span>: &#123;</span><br><span class="line">                <span class="string">'NODE_ENV'</span>: <span class="built_in">JSON</span>.stringify(argv.mode)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'index.html'</span>,</span><br><span class="line">            template: <span class="string">'index.html'</span>,</span><br><span class="line">            inject: <span class="literal">true</span>,</span><br><span class="line">            favicon: <span class="string">'./src/assets/img/favicon.ico'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> webpack.ProvidePlugin(&#123;<span class="comment">//引入全局变量</span></span><br><span class="line">            $: <span class="string">'jquery'</span>,</span><br><span class="line">            jQuery: <span class="string">'jquery'</span>, <span class="comment">// 加上这个</span></span><br><span class="line">        &#125;), <span class="keyword">new</span> VueLoaderPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="build-dev-conf-js"><a href="#build-dev-conf-js" class="headerlink" title="build/dev.conf.js"></a>build/dev.conf.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)<span class="comment">//可以合并 base.conf 配置文件</span></span><br><span class="line"><span class="keyword">const</span> baseWebpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.base.conf'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> FriendlyErrorsPlugin = <span class="built_in">require</span>(<span class="string">'friendly-errors-webpack-plugin'</span>)<span class="comment">//让日志更加友好</span></span><br><span class="line"><span class="keyword">const</span> portfinder = <span class="built_in">require</span>(<span class="string">'portfinder'</span>) <span class="comment">//查找开放端口或域接字的简单工具 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HOST = process.env.HOST</span><br><span class="line"><span class="keyword">const</span> PORT = process.env.PORT &amp;&amp; <span class="built_in">Number</span>(process.env.PORT)</span><br><span class="line"><span class="keyword">const</span> devWebpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class="line">  mode:<span class="string">'development'</span>,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: utils.styleLoaders(&#123; <span class="attr">sourceMap</span>: config.dev.cssSourceMap, <span class="attr">usePostCSS</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: config.dev.devtool,</span><br><span class="line"></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    clientLogLevel: <span class="string">'warning'</span>,</span><br><span class="line">    historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    host: HOST || config.dev.host,</span><br><span class="line">    port: PORT || config.dev.port,</span><br><span class="line">    open: config.dev.autoOpenBrowser,</span><br><span class="line">    overlay: config.dev.errorOverlay</span><br><span class="line">      ? &#123; <span class="attr">warnings</span>: <span class="literal">false</span>, <span class="attr">errors</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      : <span class="literal">false</span>,</span><br><span class="line">    publicPath: config.dev.assetsPublicPath,</span><br><span class="line">    proxy: config.dev.proxyTable,</span><br><span class="line">    quiet: <span class="literal">true</span>, <span class="comment">// necessary for FriendlyErrorsPlugin</span></span><br><span class="line">    watchOptions: &#123;</span><br><span class="line">      poll: config.dev.poll,</span><br><span class="line">    &#125;,</span><br><span class="line">    disableHostCheck: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  portfinder.basePort = process.env.PORT || config.dev.port</span><br><span class="line">  portfinder.getPort(<span class="function">(<span class="params">err, port</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      process.env.PORT = port</span><br><span class="line">      devWebpackConfig.devServer.port = port</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Add FriendlyErrorsPlugin</span></span><br><span class="line">      devWebpackConfig.plugins.push(<span class="keyword">new</span> FriendlyErrorsPlugin(&#123;</span><br><span class="line">        compilationSuccessInfo: &#123;</span><br><span class="line">          messages: [<span class="string">`Your application is running here: http://<span class="subst">$&#123;devWebpackConfig.devServer.host&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">        onErrors: config.dev.notifyOnErrors</span><br><span class="line">        ? utils.createNotifierCallback()</span><br><span class="line">        : <span class="literal">undefined</span></span><br><span class="line">      &#125;))</span><br><span class="line"></span><br><span class="line">      resolve(devWebpackConfig)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="pluguin"><a href="#pluguin" class="headerlink" title="pluguin"></a>pluguin</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D happypack html-webpack-plugin  clean-webpack-plugin progress-bar-webpack-plugin yargs-parser  friendly-errors-webpack-plugin  portfinder  webpack-merge extract-text-webpack-plugin@next optimize-css-assets-webpack-plugin  uglifyjs-webpack-plugin chalk rimraf</span><br></pre></td></tr></table></figure><h3 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a>babel-loader</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-loader @babel/cli  @babel/core @babel/  @babel/preset-env plugin-proposal-class-properties @babel/ plugin-proposal-decorators @babel/ plugin-syntax-dynamic-import @babel/plugin-transform-classes @babel/plugin-transform-runtime -D</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save   @babel/runtime   @babel/runtime-corejs2</span><br></pre></td></tr></table></figure><h3 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a>.babelrc</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [</span><br><span class="line">        [<span class="string">"@babel/preset-env"</span>, &#123;</span><br><span class="line">            <span class="attr">"useBuiltIns"</span>: <span class="string">"usage"</span></span><br><span class="line">        &#125;]</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"plugins"</span>: [</span><br><span class="line">        [<span class="string">"@babel/plugin-proposal-decorators"</span>, &#123;</span><br><span class="line">            <span class="attr">"legacy"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="string">"@babel/proposal-class-properties"</span>,</span><br><span class="line">        [<span class="string">"@babel/plugin-transform-runtime"</span>, &#123;</span><br><span class="line">            <span class="attr">"corejs"</span>: <span class="number">2</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="string">"@babel/plugin-syntax-dynamic-import"</span>,</span><br><span class="line">        <span class="string">"@babel/plugin-transform-classes"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="build-prod-conf-js"><a href="#build-prod-conf-js" class="headerlink" title="build/prod.conf.js"></a>build/prod.conf.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> baseWebpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.base.conf'</span>)</span><br><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>)<span class="comment">//复制文件和目录</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)<span class="comment">//提取样式文件，只有extract-text-webpack-plugin@^4.0.0-beta.0 才支持webpack4  </span></span><br><span class="line"><span class="comment">//或者使用 mini-css-extract-plugin  用法详见  ![GitHub](https://github.com/search?q=mini-css-extract-plugin)</span></span><br><span class="line"><span class="keyword">const</span> OptimizeCSSPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>) <span class="comment">//用于优化\最小化 CSS</span></span><br><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>) <span class="comment">// 压缩JS资源</span></span><br><span class="line"><span class="keyword">const</span> webpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class="line">    mode: <span class="string">'production'</span>,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: utils.styleLoaders(&#123;</span><br><span class="line">            sourceMap: config.build.productionSourceMap,</span><br><span class="line">            extract: <span class="literal">true</span>,</span><br><span class="line">            usePostCSS: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: config.build.productionSourceMap ? config.build.devtool : <span class="literal">false</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: config.build.assetsRoot,</span><br><span class="line">        filename: utils.assetsPath(<span class="string">'js/[name].[chunkhash].js'</span>),</span><br><span class="line">        chunkFilename: utils.assetsPath(<span class="string">'js/[id].[chunkhash].js'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">            chunks: <span class="string">'all'</span>,              <span class="comment">// initial、async和all</span></span><br><span class="line">            minSize: <span class="number">30000</span>,             <span class="comment">// 形成一个新代码块最小的体积</span></span><br><span class="line">            maxAsyncRequests: <span class="number">5</span>,        <span class="comment">// 按需加载时候最大的并行请求数</span></span><br><span class="line">            maxInitialRequests: <span class="number">3</span>,      <span class="comment">// 最大初始化请求数</span></span><br><span class="line">            automaticNameDelimiter: <span class="string">'~'</span>, <span class="comment">// 打包分割符</span></span><br><span class="line">            name: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        minimizer: [</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">                uglifyOptions: &#123;</span><br><span class="line">                    compress: &#123;</span><br><span class="line">                        warnings: <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                sourceMap: config.build.productionSourceMap,</span><br><span class="line">                parallel: <span class="literal">true</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="comment">// extract css into its own file</span></span><br><span class="line">            <span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">                filename: utils.assetsPath(<span class="string">'css/[name].[hash].css'</span>),</span><br><span class="line">                allChunks: <span class="literal">true</span>,</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> OptimizeCSSPlugin(&#123;</span><br><span class="line">                cssProcessorOptions: config.build.productionSourceMap ? &#123;</span><br><span class="line">                    safe: <span class="literal">true</span>,</span><br><span class="line">                    map: &#123;</span><br><span class="line">                        inline: <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; : &#123;</span><br><span class="line">                    safe: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">                filename: config.build.index,</span><br><span class="line">                template: <span class="string">'index.html'</span>,</span><br><span class="line">                inject: <span class="literal">true</span>,</span><br><span class="line">                favicon: <span class="string">'./src/assets/img/favicon.ico'</span>,</span><br><span class="line">                minify: &#123;</span><br><span class="line">                    removeComments: <span class="literal">true</span>,</span><br><span class="line">                    collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">                    removeAttributeQuotes: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line"></span><br><span class="line">                chunksSortMode: <span class="string">'dependency'</span></span><br><span class="line">            &#125;),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> webpack.optimize.ModuleConcatenationPlugin(),</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> CopyWebpackPlugin([&#123;</span><br><span class="line">                <span class="keyword">from</span>: path.resolve(__dirname, <span class="string">'../static'</span>),</span><br><span class="line">                to: config.build.assetsSubDirectory,</span><br><span class="line">                ignore: [<span class="string">'.*'</span>]</span><br><span class="line">            &#125;])</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = webpackConfig</span><br></pre></td></tr></table></figure><h3 id="build-js"><a href="#build-js" class="headerlink" title="build.js"></a>build.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./check-versions'</span>)()</span><br><span class="line"></span><br><span class="line">process.env.NODE_ENV = <span class="string">'production'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rm = <span class="built_in">require</span>(<span class="string">'rimraf'</span>)<span class="comment">//删除文件</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)<span class="comment">//终端字符串样式</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"><span class="keyword">const</span> webpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.prod.conf'</span>)</span><br><span class="line"></span><br><span class="line">rm(path.join(config.build.assetsRoot, config.build.assetsSubDirectory), err =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">  webpack(webpackConfig, (err, stats) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">    process.stdout.write(stats.toString(&#123;</span><br><span class="line">      colors: <span class="literal">true</span>,</span><br><span class="line">      modules: <span class="literal">false</span>,</span><br><span class="line">      children: <span class="literal">false</span>, </span><br><span class="line">      chunks: <span class="literal">false</span>,</span><br><span class="line">      chunkModules: <span class="literal">false</span></span><br><span class="line">    &#125;) + <span class="string">'\n\n'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (stats.hasErrors()) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(chalk.red(<span class="string">' 构建失败，错误.\n'</span>))</span><br><span class="line">      process.exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(chalk.cyan(<span class="string">'  Build success.\n'</span>))</span><br><span class="line">    <span class="built_in">console</span>.log(chalk.yellow(</span><br><span class="line">      <span class="string">' 打包文件应该通过HTTP服务器启用.\n'</span> </span><br><span class="line">    ))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> package </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模块化开发(一)</title>
      <link href="/2019/03/07/module/"/>
      <url>/2019/03/07/module/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是模块化"><a href="#什么是模块化" class="headerlink" title="什么是模块化"></a>什么是模块化</h3><blockquote><p>将一组模块（及其依赖项）以正确的顺序拼接到一个文件（或一组文件）中的过程。</p></blockquote><h3 id="传统的模块化做法。"><a href="#传统的模块化做法。" class="headerlink" title="传统的模块化做法。"></a>传统的模块化做法。</h3><blockquote><p>模块是实现特定功能的一组属性和方法的封装。</p></blockquote><p>将模块写成一个对象，所有的模块成员都放到这个对象里面。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;</span><br><span class="line">  _count:<span class="number">0</span>,</span><br><span class="line">  f1:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">  f2:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line">module1.f1()</span><br><span class="line">module1.f2()</span><br></pre></td></tr></table></figure></p><p>上面的对象可以改变里面的属性和方法，不安全</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = （<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> count=<span class="number">0</span>;</span><br><span class="line"> <span class="keyword">return</span> &#123; </span><br><span class="line">   f1:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">  f2:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;&#125;</span><br><span class="line">&#125;());</span><br><span class="line">module1.f1()</span><br><span class="line">module1.f2()</span><br><span class="line">module1.count <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>使用<label>立即执行函数</label> 将相应的方法和属性封装在函数中,这样就不会暴露私有成员</p><h4 id="利用构造函数封装对象"><a href="#利用构造函数封装对象" class="headerlink" title="利用构造函数封装对象"></a>利用构造函数封装对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr =[];</span><br><span class="line">  <span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>)</span>&#123;</span><br><span class="line">       arr.push(val)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.join(<span class="string">''</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Father();</span><br><span class="line">a.add(<span class="number">1</span>);<span class="comment">//[1]</span></span><br><span class="line">a.toString();<span class="comment">//"1"</span></span><br><span class="line">a.arr <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>上面的函数将 <code>arr</code> 变成私有变量，在函数外部无法访问，但是形成了闭包，非常耗费内存；<br>违背了构造函数与实例对象在数据上相分离的原则（即实例对象的数据，不应该保存在实例对象以外）。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ToString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._buffer = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ToString.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: ToString,</span><br><span class="line">  add: function (str) &#123;</span><br><span class="line">    <span class="keyword">this</span>._buffer.push(str);</span><br><span class="line">  &#125;,</span><br><span class="line">  toString: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._buffer.join(<span class="string">''</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>虽然上面的构造函数未生成闭包，但是外部可以修改方法和属性，不安全</p><h4 id="放大模式"><a href="#放大模式" class="headerlink" title="放大模式"></a>放大模式</h4><p>如果一个模块很大或者一个模块需要继承另一个模块可以利用立即执行函数的特效来封装<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span>(<span class="params">m1</span>)</span>&#123;</span><br><span class="line">mod1.col=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> mod1;</span><br><span class="line">&#125;(<span class="built_in">window</span>.modlue2 ||&#123;&#125;)) <span class="comment">//有些模块可能是null 确保函数正常执行 采用兼容模式 window.modlue2 ||&#123;&#125;</span></span><br></pre></td></tr></table></figure></p><ul><li>独立性是模块的重要特点，模块内部最好不与程序的其他部分直接交互。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span> (<span class="params">$, Swiper</span>) </span>&#123;</span><br><span class="line">　<span class="comment">//...</span></span><br><span class="line">&#125;(jQuery, Swiper));</span><br></pre></td></tr></table></figure></li></ul><p>上面的 module1 引入 jQuery 和 Swiper 当做两个参数传入模块中，保证了模块的独立性，还使得模块之间的依赖关系变得明显。</p><p><strong>立即执行函数还可以起到命名空间的作用。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$, window, document</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleEvents</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">initialize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dieCarouselDie</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//attach to the global scope</span></span><br><span class="line">  <span class="built_in">window</span>.finalCarousel = &#123;</span><br><span class="line">    init : initialize,</span><br><span class="line">    destroy : dieCarouselDie</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;( jQuery, <span class="built_in">window</span>, <span class="built_in">document</span> ));</span><br></pre></td></tr></table></figure></p><p>以上都有一个共同点:使用单个全局变量箭头代码包装在函数中，使用闭包建立私有空间<br>但是都有缺点：</p><ul><li>不知道模块(库) 的加载顺序</li><li><p>还是有可能引起命名冲突，比如两个库都有相同的名称，或者使用哪个版本<br>有几种良好实施的方法：CommonJS、AMD和CMD。可以解决以上的缺陷</p><h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3></li><li><p><code>CommonJS</code> 是一种思想, 本质上是可复用的JavaScript,它导出特定的对象，提供其它程序使用。</p></li><li><p>由于 <code>JavaScript</code> 没有模块系统、标准库较少、缺乏包管理工具,因此<code>CommonJS</code>是为它的表现来制定规范。</p></li><li><p>每个JavaScript 文件 都将模块存储在自己独有的作用域中。</p></li><li><p>需要使用 <code>module.exports</code> 和 <code>exports.obj</code> 来导出对象，并在需要它的程序中使用 <code>require(&#39;module&#39;)</code> 加载</p></li></ul> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//文件1</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">myModule</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello!'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.goodbye = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'goodbye!'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = myModule;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//文件2</span></span><br><span class="line"> <span class="keyword">var</span> myModule = <span class="built_in">require</span>(<span class="string">'myModule'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myModuleInstance = <span class="keyword">new</span> myModule();</span><br><span class="line">myModuleInstance.hello(); <span class="comment">// 'hello!'</span></span><br><span class="line">myModuleInstance.goodbye(); <span class="comment">// 'goodbye!'</span></span><br></pre></td></tr></table></figure><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = &#123; </span><br><span class="line">  export1:&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">module,exports</span>)</span>&#123;</span><br><span class="line">   exports.add = functon(val)&#123;</span><br><span class="line">      <span class="keyword">return</span> val *<span class="number">10</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;(module1,module1.export1));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = module1.export1.add;</span><br><span class="line">fn(<span class="number">2</span>)<span class="comment">//20</span></span><br></pre></td></tr></table></figure><p>利用立即执行函数 接受两个参数 module 和 exports， 模块就通过立即执行函数赋值，然后导出模块，即可实现模块的加载<br><strong>这种方法的好处：</strong></p><ul><li>避免全局污染</li><li>明确依赖项目</li><li>语法清晰<br><strong>缺点：</strong></li><li><p>由于 <code>CommonJS</code> 采用服务器优先方法并且同步加载模块，因此在浏览器中使用它会阻止浏览器运行其他内容，直到加载完成。</p><p>我们可以使用 <code>AMD</code> 来异步加载</p><h3 id="AMD-Asynchromous-Module-Definition"><a href="#AMD-Asynchromous-Module-Definition" class="headerlink" title="AMD(Asynchromous Module Definition)"></a>AMD(Asynchromous Module Definition)</h3></li><li>定义了一套 JavaScript 模块依赖异步加载标准，来解决同步加载的问题。</li><li>AMD模块加载不影响后面语句的运行。所有依赖某些模块的语句均放置在回调函数中。</li><li>定义了一个函数 <code>define</code>，通过 <code>define</code> 方法定义模块。</li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> define([<span class="string">'myModule'</span>, <span class="string">'myOtherModule'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">myModule, myOtherModule</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(myModule.hello());</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的 <code>define</code> 函数将每个模块的依赖项，以数组的形式作为参数。</p><blockquote><p>这些依赖项会在后台异步加载，一旦加载完成，<code>define</code> 函数就调用模块给出的回调函数<br><code>myModule</code> 可能像下面一样定义：</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   define([], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    goodbye: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'goodbye'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="CMD-Common-Module-Definition"><a href="#CMD-Common-Module-Definition" class="headerlink" title="CMD(Common Module Definition)"></a>CMD(Common Module Definition)</h4><ul><li><code>CMD</code>由玉伯大佬提出并用于<a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="noopener">SeaJS</a> </li><li><p>CMD 和 AMD 很相似，都有 define 函数， 通过 require 加载 </p><p>CMD和AMD 不同点：</p><ul><li>对于依赖的模块 CMD 延迟执行， AMD 提前执行(requireJS 高版本也开始延迟执行)</li><li><p>CMD使用依赖就近原则（按需加载）：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">     define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;   </span><br><span class="line">       <span class="keyword">var</span> near = <span class="built_in">require</span>(<span class="string">'./a'</span>)   </span><br><span class="line">       near.doSomething()   </span><br><span class="line">       <span class="comment">// 此处略去 100 行  </span></span><br><span class="line">        <span class="keyword">var</span> nearOne = <span class="built_in">require</span>(<span class="string">'./b'</span>) <span class="comment">// 依赖可以就近书写   </span></span><br><span class="line">        nearOne.doSomething()   <span class="comment">// ...</span></span><br><span class="line">         &#125;)</span><br><span class="line">     <span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">- AMD使用依赖前置原则（必须先加载完依赖）：</span></span><br><span class="line"><span class="string">    `</span><span class="string">``</span>javascript</span><br><span class="line">    define([<span class="string">'./a'</span>, <span class="string">'./b'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">nearTow, nearThree</span>) </span>&#123; <span class="comment">// 必须一开始加载</span></span><br><span class="line">          nearTow.doSomething()</span><br><span class="line">          <span class="comment">// 此处略去 100 行</span></span><br><span class="line">          nearThree.doSomething()</span><br><span class="line">          ...</span><br><span class="line">          &#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>CMD</code> 里，没有全局 require，而是根据模块系统的完备性，提供 seajs.use 来实现模块系统的加载启动。CMD 里，每个 API 都简单纯粹。   <code>AMD</code> 的 API 默认是一个当多个用，CMD 的 API 严格区分，推崇职责单一。比如 AMD 里，require 分全局 require 和局部 require，都叫 require。 </p></li></ul></li></ul><h4 id="AMD-和-CommonJS-不同点："><a href="#AMD-和-CommonJS-不同点：" class="headerlink" title=" AMD 和 CommonJS 不同点："></a><label> <code>AMD</code> 和 <code>CommonJS</code> 不同点：</label></h4><p><code>AMD</code>：</p><ul><li>采用浏览器优先的方法，异步加载，主要用于浏览器</li><li>先加载依赖项</li><li>依赖项可以说 对象、函数、构造函数、字符串等等其他JS类型</li></ul><p><code>CommonJS</code>:</p><ul><li>采用服务器优先的方法，同步加载，主要用于服务器</li><li>支持对象作为模块<br>共同点： 先加载依赖项</li></ul><h3 id="通用模块定义-UMD"><a href="#通用模块定义-UMD" class="headerlink" title="通用模块定义 UMD"></a>通用模块定义 <code>UMD</code></h3><blockquote><p>同时支持 <code>AMD</code>和 <code>CommonJS</code><br>本质 创建了一种方法来使用两者的任何一种，同时支持全局变量定义，(JS兼容性的常用思想)所以 <code>UMD</code> 可以在客户端和服务器上工作<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">root, factory</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">      <span class="comment">// AMD</span></span><br><span class="line">    define([<span class="string">'myModule'</span>, <span class="string">'myOtherModule'</span>], factory);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> exports === <span class="string">'object'</span>) &#123;</span><br><span class="line">      <span class="comment">// CommonJS</span></span><br><span class="line">    <span class="built_in">module</span>.exports = factory(<span class="built_in">require</span>(<span class="string">'myModule'</span>),</span><br><span class="line">     <span class="built_in">require</span>(<span class="string">'myOtherModule'</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    root.returnExports = factory(root.myModule, root.myOtherModule);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params">myModule, myOtherModule</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">notHelloOrGoodbye</span>(<span class="params"></span>)</span>&#123;&#125;; </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>)</span>&#123;&#125;; </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">goodbye</span>(<span class="params"></span>)</span>&#123;&#125;; </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">      hello: hello,</span><br><span class="line">      goodbye: goodbye</span><br><span class="line">  &#125;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="ES6模块（即-ES2015-ECMAScript-6、ES6）"><a href="#ES6模块（即-ES2015-ECMAScript-6、ES6）" class="headerlink" title="ES6模块（即 ES2015/ECMAScript 6、ES6）"></a>ES6模块（即 <a href="http://es6.ruanyifeng.com/#docs/module#%E6%A6%82%E8%BF%B0" target="_blank" rel="noopener">ES2015/ECMAScript 6、ES6</a>）</h3><ul><li>使用 <code>import</code> 关键字引入模块，通过 <code>export</code> 关键字导出模块</li><li><p>ES6目前无法在浏览器中执行,只能通过babel将不被支持的import编译为当前受到广泛支持的 require。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> cun =<span class="number">1</span>; </span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  cun++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----------------</span></span><br><span class="line"><span class="keyword">import</span> &#123; cun, add &#125; <span class="keyword">from</span> <span class="string">'./a.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(cun); <span class="comment">// 1</span></span><br><span class="line">incCounter();</span><br><span class="line"><span class="built_in">console</span>.log(cun); <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> fo =<span class="string">'a'</span>;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> fo =<span class="string">'b'</span>,<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;fo&#125; <span class="keyword">from</span> <span class="string">'./a.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(fo);<span class="comment">//'a'</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> <span class="built_in">console</span>.log(fo),<span class="number">500</span>)<span class="comment">//'b'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6 输入的模块变量，只是一个“符号连接”，所以这个变量是只读的，对它进行重新赋值会报错。</span></span><br><span class="line">fo = <span class="string">'s'</span> <span class="comment">//error</span></span><br></pre></td></tr></table></figure></li><li><p>ES6 模块之中，顶层的this指向undefined，即不应该在顶层代码使用this。<br><code>CommonJS</code>、<code>AMD</code>和<code>CMD</code>相比:</p></li><li><code>ES6</code>模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</li><li>ES6 对外接口只是一种静态定义，在代码静态解析阶段就会生成。</li><li>ES6 module编译时输出接口(加载)，输出的是值的引用。(静态编译)</li><li>CommonJS 加载的是一个对象（即module.exports属性），该对象只有在脚本运行完才会生成。</li><li>CommonJS 模块运行时加载，输出的是一个值的拷贝。(动态编译)<br>一旦输出一个值，模块内部的变化就影响不到这个值。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib/counter.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrement</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  counter--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  counter: counter,</span><br><span class="line">  increment: increment,</span><br><span class="line">  decrement: decrement</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// src/main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> counter = <span class="built_in">require</span>(<span class="string">'../../lib/counter'</span>);</span><br><span class="line"></span><br><span class="line">counter.increment();</span><br><span class="line"><span class="built_in">console</span>.log(counter.counter); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> moduleDevelop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript OOP(三)</title>
      <link href="/2019/03/05/oop3/"/>
      <url>/2019/03/05/oop3/</url>
      
        <content type="html"><![CDATA[<h3 id="对象继承"><a href="#对象继承" class="headerlink" title="对象继承"></a>对象继承</h3><p>A 对象通过继承 B 对象，就能直接拥有 B 对象的所有属性和方法。这对于<label>代码的复用</label>是非常有用的。</p><p>JavaScript 语言的继承不通过 class，而是通过“原型对象”<code>prototype</code>实现</p><h4 id="传统原型链式继承"><a href="#传统原型链式继承" class="headerlink" title="传统原型链式继承"></a>传统原型链式继承</h4><ul><li>过多的继承属性</li><li>比如一个函数用不到某个原型方法或属性，那么方法或属性就过剩了<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Grand</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">Grand.prototype.name=<span class="string">"grand"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> grand = <span class="keyword">new</span> Grand();</span><br><span class="line"></span><br><span class="line">Father.prototype=grand;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> father = <span class="keyword">new</span> Father();</span><br><span class="line"></span><br><span class="line">Son.prototype=father;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> Son();</span><br></pre></td></tr></table></figure></li></ul><h4 id="借用构造函数-使用call-appply"><a href="#借用构造函数-使用call-appply" class="headerlink" title="借用构造函数  使用call/appply"></a>借用构造函数  使用call/appply</h4><ul><li>不是真正继承，因为不能调用原型上的方法，而且每调用一次都会调用多次函数，实际上步骤没有变少</li><li>工业级推荐使用</li><li>缺点无法添加私有原型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Father.call(<span class="keyword">this</span>); <span class="comment">// 调用父类构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son.prototype.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Father.prototype.print.call(<span class="keyword">this</span>);<span class="comment">//只使用单个方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类继承父类的原型</span></span><br><span class="line">Son.prototype = <span class="built_in">Object</span>.create(Father.prototype);</span><br><span class="line">Son.prototype.constructor = Son;</span><br></pre></td></tr></table></figure><h4 id="共有原型"><a href="#共有原型" class="headerlink" title="共有原型"></a>共有原型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Father.prototype =&#123;</span><br><span class="line">    name:<span class="string">"common"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Son.prototype =  <span class="built_in">Object</span>.create(Father.prototype)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span> (<span class="params">Target,Origin</span>)</span>&#123;<span class="comment">//继承源</span></span><br><span class="line">  Target.prototype = Origin.prototype;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="圣杯模式"><a href="#圣杯模式" class="headerlink" title="圣杯模式"></a>圣杯模式</h4><blockquote><p>隐式附加的东西就私有化，可以公共定义的东西提取出来公有化<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> inherit =(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> Interim =<span class="function"><span class="keyword">function</span> <span class="title">Interim</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">   <span class="keyword">return</span>  <span class="function"><span class="keyword">function</span> (<span class="params">Target,Origin</span>)</span>&#123;<span class="comment">//继承源</span></span><br><span class="line">   Interim.prototype =<span class="built_in">Object</span>.create(Origin);</span><br><span class="line">   Target.prototype = Interim.prototype;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//现在 可以 制定自己的私有属性，但是 constuctor 不是 原函数所一手动赋值回来，如果想要知道函数真正继承那个原型需要保存它</span></span><br><span class="line">  Target.prototype.constuctor = Target;</span><br><span class="line">  Target.prototype.yliluokka =Origin;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;())</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h4><p>JavaScript 不提供多重继承功能，即不允许一个对象同时继承多个对象。但是，可以通过<code>Object.assign</code>，实现这个功能。这种模式称之为 Mixin (混入)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn1</span>(<span class="params"></span>)</span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn2</span>(<span class="params"></span>)</span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  F1.call(<span class="keyword">this</span>);</span><br><span class="line">  F2.call(<span class="keyword">this</span>);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//继承F1</span></span><br><span class="line">Son.prototype =<span class="built_in">Object</span>.create(Fn1.prototype);</span><br><span class="line"><span class="comment">//继承F2</span></span><br><span class="line"><span class="built_in">Object</span>.assign(Son.prototype,Fn2.prototype);</span><br><span class="line">Son.prototype.constructor =Son;</span><br><span class="line"><span class="keyword">let</span> a =<span class="keyword">new</span> Son();</span><br></pre></td></tr></table></figure></p><h3 id="call，apply-and-bind"><a href="#call，apply-and-bind" class="headerlink" title="call，apply and bind"></a>call，apply and bind</h3><blockquote><p>都可改变函数内部this的指向（即函数执行时所在的作用域），然后在所指定的作用域中，调用该函数。</p></blockquote><h4 id="call-and-apply"><a href="#call-and-apply" class="headerlink" title="call and apply"></a>call and apply</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;&#125; </span><br><span class="line"><span class="comment">//test() == test.call()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj =&#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(obj) <span class="comment">//"[object Object]"</span></span><br><span class="line"><span class="comment">//因为call 和 apply 会将函数中的this指向第一个参数</span></span><br><span class="line"><span class="comment">//相当于 obj.toString()</span></span><br></pre></td></tr></table></figure><p><code>call and apply</code> 二者区别在于传参：</p><ul><li>call 第二个参数开始单个单个参数传</li><li>apply 第二个参数为数组或类数组<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回数组中最大的数</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">15</span>];</span><br><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, a) <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将数组的空元素变为undefined</span></span><br><span class="line"><span class="built_in">Array</span>.apply(<span class="literal">null</span>, [<span class="number">1</span>,,<span class="number">3</span>,,<span class="number">4</span>])<span class="comment">//[1,undefined,3,undefined,4];</span></span><br></pre></td></tr></table></figure></li></ul><p>空元素与undefined的差别</p><ul><li>forEach方法会跳过空元素，但是不会跳过undefined。因此，遍历内部元素的时候，会得到不同的结果。  </li><li><label>转换类似数组的对象</label></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj=&#123;<span class="number">0</span>: <span class="number">1</span>, <span class="attr">length</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">Array</span>.protetype.slice.apply(obj);<span class="comment">//[1,undefined]</span></span><br></pre></td></tr></table></figure><label>被处理的对象必须有length属性，以及相对应的数字键。</label><h6 id="参数为空、null和undefined，则默认传入全局对象。"><a href="#参数为空、null和undefined，则默认传入全局对象。" class="headerlink" title="参数为空、null和undefined，则默认传入全局对象。"></a><label>参数为空、null和undefined，则默认传入全局对象。</label></h6><hr><p>bind方法用于将函数体内的this绑定到某个对象，然后返回一个新函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> counter = &#123;</span><br><span class="line">  count: <span class="number">0</span>,</span><br><span class="line">  inc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> func = counter.inc.bind(counter);</span><br><span class="line">func();</span><br><span class="line">counter.count <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * <span class="keyword">this</span>.m + y * <span class="keyword">this</span>.n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  m: <span class="number">2</span>,</span><br><span class="line">  n: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newAdd = add.bind(obj, <span class="number">5</span>); <span class="comment">//将x 绑定为 5 </span></span><br><span class="line">newAdd(<span class="number">5</span>) <span class="comment">// 20</span></span><br><span class="line">newAdd(<span class="number">1</span>,<span class="number">5</span>)<span class="comment">//12</span></span><br></pre></td></tr></table></figure><p> <label>第一个参数是null或undefined，等于将this绑定到全局对象</label></p><h4 id="bind方法使用注意点"><a href="#bind方法使用注意点" class="headerlink" title="bind方法使用注意点"></a>bind方法使用注意点</h4><ul><li><p>bind方法每运行一次，就返回一个新函数 需要一个变量接收</p></li><li><p>结合回调函数使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> counter = &#123;</span><br><span class="line">  count: <span class="number">0</span>,</span><br><span class="line">  inc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callIt</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  callback();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">callIt(counter.inc.bind(counter));</span><br><span class="line">counter.count <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li><li><p>结合call方法使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].slice(<span class="number">0</span>, <span class="number">1</span>) <span class="comment">// [1]</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.call([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">0</span>, <span class="number">1</span>) <span class="comment">// [1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将Array.prototype.slice变成Function.prototype.call方法所在的对象</span></span><br><span class="line"><span class="comment">//调用时就变成了Array.prototype.slice.call。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> slice = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Array</span>.prototype.slice);</span><br><span class="line"><span class="built_in">Function</span>.prototype.slice.call([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">0</span>, <span class="number">1</span>) <span class="comment">// [1]</span></span><br><span class="line"><span class="comment">//slice([1, 2, 3], 0, 1) </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> push = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Array</span>.prototype.push);</span><br><span class="line"><span class="keyword">let</span> pop = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Array</span>.prototype.pop);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span> ,<span class="number">2</span> ,<span class="number">3</span>];</span><br><span class="line">push(a, <span class="number">4</span>)</span><br><span class="line">a <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">pop(a)</span><br><span class="line">a <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure></li><li><p>将Function.prototype.bind方法变成Function.prototype.call的方法，就意味着bind的调用形式也可以被改写</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o = &#123; <span class="attr">v</span>: <span class="number">123</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> bind = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Function</span>.prototype.bind);</span><br><span class="line">bind(f, o)() <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><h3 id="Object-系统默认方法"><a href="#Object-系统默认方法" class="headerlink" title="Object 系统默认方法"></a><code>Object 系统默认方法</code></h3><ul><li><p><code>getPrototypeOf</code> 获取对象原型,只有一个参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> Foo ();</span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(obj) <span class="comment">// Foo.prototype</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//空对象原型</span></span><br><span class="line"> <span class="built_in">Object</span>.getPrototypeOf(&#123;&#125;) <span class="comment">// Object.prototype</span></span><br><span class="line"><span class="comment">// Object.prototype 原型</span></span><br><span class="line"> <span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">Object</span>.prototype) <span class="comment">//null</span></span><br><span class="line"><span class="comment">// Foo</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(Foo) <span class="comment">// Function.prototype</span></span><br></pre></td></tr></table></figure></li><li><p><code>setPrototypeOf</code> 设置对象原型<br>有两个参数：</p><ol><li>现有对象</li><li>继承的原型对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> now = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> pro = &#123;<span class="attr">name</span>:<span class="string">"Owen"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(now,pro);</span><br><span class="line">now.name <span class="comment">//"Owen"</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h4 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a><code>Object.create()</code></h4><blockquote><p>生成实例对象的常用方法 参数必须为对象 或 null</p><ul><li>参数为 <code>null</code> 会生成一个不会继承任何属性和方法的对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">obj.toString()<span class="comment">// Error</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//会继承第二个参数的属性和方法</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(&#123;&#125;, &#123;</span><br><span class="line">    p1: &#123;</span><br><span class="line">      value: <span class="number">123</span>,</span><br><span class="line">      enumerable: <span class="literal">true</span>,</span><br><span class="line">      configurable: <span class="literal">true</span>,</span><br><span class="line">      writable: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    p2: &#123;</span><br><span class="line">      value: <span class="string">'Owen'</span>,</span><br><span class="line">      enumerable: <span class="literal">true</span>,</span><br><span class="line">      configurable: <span class="literal">true</span>,</span><br><span class="line">      writable: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(&#123;&#125;);</span><br><span class="line">obj.p1 = <span class="number">123</span>;</span><br><span class="line">obj.p2 = <span class="string">'Owen'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成的对象会继承它的原型对象的构造函数。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Object</span>.create(f);</span><br><span class="line"></span><br><span class="line">b.constructor === Foo <span class="comment">// true</span></span><br><span class="line">b <span class="keyword">instanceof</span> Foo <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><h4 id="object-isPrototypeOf"><a href="#object-isPrototypeOf" class="headerlink" title="object.isPrototypeOf"></a><code>object.isPrototypeOf</code></h4><blockquote><p>判断对象是否再参数对象的原型链上</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> F()</span><br><span class="line">F.prototype.isPrototypeOf(f) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h5 id="获取原型的三种方法"><a href="#获取原型的三种方法" class="headerlink" title="获取原型的三种方法"></a>获取原型的三种方法</h5><ol><li><code>obj.__proto__</code></li><li><code>obj.constructor.prototype</code></li><li><code>Object.getPrototypeOf(obj)</code></li></ol><ul><li><p>前两种不可靠，都个一手动修改， 而且 <code>__proto__</code> 只有浏览器才需要部署</p><h4 id="getOwnPropertyNames-和-keys"><a href="#getOwnPropertyNames-和-keys" class="headerlink" title="getOwnPropertyNames 和 keys"></a><code>getOwnPropertyNames</code> 和 <code>keys</code></h4><blockquote><p>以数组形式返回参数对象所有属性名(不包含继承属性)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不管可不可遍历都会返回出来</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(<span class="built_in">Date</span>);<span class="comment">//["length", "name", "prototype", "now", "parse", "UTC"]</span></span><br><span class="line"><span class="comment">//返回可遍历属性</span></span><br><span class="line"><span class="built_in">Object</span>.keys(<span class="built_in">Date</span>)<span class="comment">// []</span></span><br></pre></td></tr></table></figure></blockquote></li></ul><h4 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty"></a><code>hasOwnProperty</code></h4><blockquote><p>判断参数是否是自身的属性，唯一一个不会遍历原型链的方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.hasOwnProperty(<span class="string">'length'</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="拷贝对象"><a href="#拷贝对象" class="headerlink" title="拷贝对象"></a>拷贝对象</h3><p>拷贝对象需要确保两件事情：</p><ul><li>与原对象具有同样的原型。</li><li>与原对象具有同样的实例属性。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyOwn</span> (<span class="params">target,origin</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.getOwnPropertyNames(origin).forEach(<span class="function">(<span class="params">key</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> desc =<span class="built_in">Object</span>.getOwnPropertyDescriptor(origin,key);</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(target,origin,desc);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">origin</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> clone = <span class="built_in">Object</span>.create (<span class="built_in">Object</span>.getPrototypeOf(origin));</span><br><span class="line">    copyOwn(clone,origin)</span><br><span class="line">  <span class="keyword">return</span> clone</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//es8</span></span><br><span class="line"><span class="keyword">const</span> copyTwo = <span class="function"><span class="params">origin</span> =&gt;</span><span class="built_in">Object</span>.create( <span class="built_in">Object</span>.getPropertyOf(origin),<span class="built_in">Object</span>.getOwnPropertyDescriptor(origin) );</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript OOP(二)</title>
      <link href="/2019/03/05/opp2/"/>
      <url>/2019/03/05/opp2/</url>
      
        <content type="html"><![CDATA[<h3 id="原型对象-prototype"><a href="#原型对象-prototype" class="headerlink" title="原型对象 prototype"></a>原型对象 <code>prototype</code></h3><blockquote><p>原型对象的所有属性和方法,都能被实例对象共享</p></blockquote><p>JavaScript 通过构造函数生成新对象，因此构造函数可以视为对象的模板。实例对象的属性和方法，可以定义在构造函数内部。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span> (<span class="params">name, color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">'小明'</span>, <span class="string">'白色'</span>);</span><br><span class="line"></span><br><span class="line">cat1.name <span class="comment">// '小明'</span></span><br><span class="line">cat1.color <span class="comment">// '白色'</span></span><br></pre></td></tr></table></figure></p><p><strong>构造函数缺点：</strong></p><ul><li>一个构造函数的多个实例之间，无法共享属性，从而造成对系统资源的浪费。</li></ul><p>解决方法，就是 JavaScript 的<label style="color:#409eff; padding: 0 8px;">原型对象</label> <code>prototype</code>，因为原型对象的所有属性和方法，都能被实例对象共享。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span> (<span class="params">name, color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Cat.prototype.color =<span class="string">"白色"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">'巧克力'</span>);</span><br><span class="line"><span class="keyword">var</span> cat2 = <span class="keyword">new</span> Cat(<span class="string">'布丁'</span>);</span><br><span class="line">cat1.color <span class="comment">//白色</span></span><br><span class="line">cat2.color<span class="comment">//白色</span></span><br></pre></td></tr></table></figure><h5 id="JavaScript规定，每个函数都有一个prototype属性，指向一个对象。"><a href="#JavaScript规定，每个函数都有一个prototype属性，指向一个对象。" class="headerlink" title="JavaScript规定，每个函数都有一个prototype属性，指向一个对象。"></a>JavaScript规定，每个函数都有一个<code>prototype</code>属性，指向一个对象。</h5><ul><li>对于构造函数来说，生成实例的时候，该属性会自动成为实例对象的原型。</li><li>实例对象自身就有某个属性或方法，它就不会再去原型对象寻找这个属性或方法。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">typeof</span> f.prototype <span class="comment">// "object"</span></span><br></pre></td></tr></table></figure><p>每个 JS 对象都有 <code>__proto__</code> 属性，这个属性可以访问到  原型（<code>[[prototype]]</code>） 内部属性。这个属性在现在来说已经不推荐直接去使用它了。</p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><blockquote><p>任何对象，都可以充当其他对象的原型；原型对象也有自己的原型。<br>对象到原型，再到原型的原型，一层层向上找到<code>Object.prototype</code>。</p></blockquote><p>可以说 <label>基本上所有对象都继承了<code>Object.prototype</code>的属性；</label>而 <code>Object.prototype</code> 的原型是 <code>null</code><br>通过 <code>getPrototypeOf</code> 方法返回参数对象原型<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">Object</span>.prototype) <span class="comment">//null</span></span><br></pre></td></tr></table></figure></p><label>读取对象属性时，引擎会先在自身属性上查找，没有就查找原型，一级级向上查找，如果到<code>Object.prototype</code>还是没有，则返回<code>undefined</code>。</label><p><strong>一级级向上，对性能有影响，寻找的层级越多，性能影响越大</strong></p><p> <strong>原型链：</strong></p><p><img src="/static/img/prototype.png" alt="原型链"></p><ul><li><p>实例 F1 通过<code>__proto__</code> 访问对应构造函数的原型 -&gt;  <code>FOO.prototype</code></p></li><li><p>函数原型再通过<code>__proto__</code> 访问Object的原型 -&gt;  <code>Object.prototype</code></p></li><li><p>Object的原型的<code>__proto__</code>  指向 <code>null</code></p></li><li><p>构造函数  <code>Foo.prototype</code> 通过<code>constructor</code>访问构造函数本身</p></li><li><code>Object.constructo</code> 指向 <code>Function</code></li><li><code>Function.constructo</code> 指向 本身</li><li><code>Function.__proto__</code>  指向一个匿名函数</li><li>每个构造函数通过 <code>prototype</code> 访问原型 </li></ul><p><strong>只有函数才拥有<code>prototype</code>属性,<label>基本上</label>所有函数都有这个属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fun = <span class="built_in">Function</span>.prototype.bind()</span><br></pre></td></tr></table></figure><p>当声明一个函数时自动创建 <code>prototype</code> 属性，<br>这个属性的值是一个对象（也就是原型），且只有一个属性 <code>constructor</code></p><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a><code>constructor</code></h3><p> <code>prototype</code> 有一个属性 <code>constructor</code>，默认指向原型所在的构造函数</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Fn ();</span><br><span class="line">f.constructor == Fn <span class="comment">//true</span></span><br><span class="line">f.constructor == <span class="built_in">Function</span> <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以从实例对象新建另一个实例</span></span><br><span class="line"><span class="keyword">var</span> b =<span class="keyword">new</span> f.constructor();</span><br><span class="line">b.constructor == Fn <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p> <code>constructor</code>是一个公有且不可枚举的属性。一旦我们改变了函数的 prototype ，那么新对象就没有这个属性了,如果修改了原型对象，一般会同时修改constructor属性，防止引用的时候出错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(A.prototype) <span class="comment">// &#123;constructor: ƒ&#125;constructor: ƒ A()__proto__: Object</span></span><br><span class="line">A.prototype=<span class="string">"a"</span></span><br><span class="line"><span class="built_in">console</span>.log(A.prototype) <span class="comment">//"a"</span></span><br></pre></td></tr></table></figure><p>constructor作用：</p><ul><li>让实例对象知道是什么函数构造了它<blockquote><p>可以得知某个实例对象，是哪一个构造函数产生的。</p></blockquote></li><li>如果想给某些类库中的构造函数增加一些自定义的方法，就可以通过 xx.constructor.method 来扩展</li></ul><h3 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a>__proto__</h3><p>基本上每个对象都有的隐式原型属性，指向创建该对象的构造函数的原型，实际指向<code>[[prototype]]</code>， 内部属性，我们并不能访问到，所以使用 <em>proto</em> 来访问。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(&#123;&#125;)</span><br><span class="line"><span class="comment">//__proto__: Objectconstructor: ƒ Object()hasOwnProperty: ....</span></span><br></pre></td></tr></table></figure></p><p>当我们使用 new 操作符时，生成的实例对象拥有了 <code>__proto__</code>属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 这个函数是 Function 的实例对象</span></span><br><span class="line"><span class="comment">// function 就是一个语法糖</span></span><br><span class="line"><span class="comment">// 内部调用了 new Function(...)</span></span><br><span class="line"><span class="keyword">const</span> a =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> fn = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"console.log(a)"</span>) <span class="comment">// Function 的this始终指向 全局对象，除非手动改变this指向</span></span><br><span class="line">fn()<span class="comment">//1</span></span><br></pre></td></tr></table></figure></p><blockquote><p>所有对象都可以通过原型链最终找到 Object.prototype ，虽然 Object.prototype 也是一个对象，但是这个对象却不是 Object 创造的，而是引擎自己创建了 <code>Object.prototype</code> 。<br>可以这样说，<label style="color:#409eff; padding: 0 8px;">所有实例都是对象，但是对象不一定都是实例。</label></p></blockquote><p>-首先引擎创建了 Object.prototype ，然后创建了 Function.prototype ，并且通过<strong>proto</strong> 将两者联系了起来。</p><ul><li><p>Function.prototype 以后才有了 function Function() ，然后其他的构造函数都是 function Function() 生成的。</p></li><li><p>函数通过 <code>new Function()</code> 生成,</p><label style="color:#409eff; padding: 0 8px;">不是所有函数都是 <code>new Function()</code>产生的。</label></li></ul><blockquote><ol><li>Object 是所有对象的爸爸，所有对象都可以通过<strong>proto</strong> 找到它</li><li>Function 是所有函数的爸爸，所有函数都可以通过<strong>proto</strong> 找到它</li><li>Function.prototype 和 Object.prototype 是两个特殊的对象，他们由引擎来创建</li><li>除了以上两个特殊对象，其他对象都是通过构造器 new 出来的</li><li>函数的 prototype 是一个对象，也就是原型<br>对象的<strong>proto</strong> 指向原型，<strong>proto</strong>将对象和原型连接起来组成了原型链</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript OOP(一)</title>
      <link href="/2019/03/04/opp1/"/>
      <url>/2019/03/04/opp1/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h3><p>对象是单个实物的抽象，通常需要一个模板，表示某一类实物的共同特征，然后对象根据这个模板生成。<br>   面向对象编程的第一步，就是要生成对象。<br> 对象是一个容器，封装了属性（property）和方法（method），属性是对象的状态，方法是对象的行为（完成某种任务）。<br>比如，我们可以把动物抽象为animal对象，使用“属性”记录具体是那一种动物，使用“方法”表示动物的某种行为（奔跑、捕猎、休息等等）。</p><blockquote><p>典型的面向对象编程语言（比如 C++ 和 Java），都有“类”（class）这个概念。所谓“类”就是对象的模板，对象就是“类”的实例。</p></blockquote><p>JavaScript 语言的对象体系，不是基于“类”的，而是基于构造数<code>constructor</code>和原型链<code>prototype</code>；<br>所以JS <label>专门使用构造函数作为对象模板</label>；一个构造函数，可生成多个实列对象，它们有相同的结构</p><h4 id="构造函数与普通函数区别"><a href="#构造函数与普通函数区别" class="headerlink" title="构造函数与普通函数区别"></a>构造函数与普通函数区别</h4><ul><li>构造函数就是一个普通的函数，但是有自己的特征和用法。</li><li>函数体内部使用了this关键字，代表了所要生成的对象实例。</li><li>生成对象的时候，必须使用new命令。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//constructor </span></span><br><span class="line"><span class="keyword">var</span> Bird = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'lai fu'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> bird1 = <span class="keyword">new</span> Bird(); <span class="comment">// 也可以使用 new Bird; 推荐使用前者</span></span><br><span class="line"><span class="built_in">console</span>.log(bird1.name) <span class="comment">// "lai fu"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ordinary</span></span><br><span class="line"><span class="keyword">var</span> a =Bird();</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(a.name) <span class="comment">// typeError</span></span><br><span class="line">name <span class="comment">// 'laifu'</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="防止把构造函数constructor当普通函数使用"><a href="#防止把构造函数constructor当普通函数使用" class="headerlink" title="防止把构造函数constructor当普通函数使用"></a>防止把构造函数<code>constructor</code>当普通函数使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//使用 严格模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fubar</span>(<span class="params">foo, bar</span>)</span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="keyword">this</span>._foo = foo;</span><br><span class="line">  <span class="keyword">this</span>._bar = bar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Fubar()<span class="comment">// TypeError</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断 this 不是构造函数（constructor）的实列对象 那么手动返回自身constructor</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Far</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Far)) <span class="keyword">return</span> <span class="keyword">new</span> Far(a);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>._a=a;</span><br><span class="line">&#125;</span><br><span class="line">Far(<span class="number">1</span>)._a</span><br></pre></td></tr></table></figure><h3 id="new命令的原理"><a href="#new命令的原理" class="headerlink" title="new命令的原理"></a><code>new</code>命令的原理</h3><ul><li>创建一个空对象，作为将要返回的对象实例。</li><li>将这个空对象的原型，指向构造函数的prototype属性。</li><li>将这个空对象赋值给函数内部的this关键字。</li><li>开始执行构造函数内部的代码。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*新生成一个空对象</span></span><br><span class="line"><span class="comment">*链接到原型</span></span><br><span class="line"><span class="comment">*绑定 this</span></span><br><span class="line"><span class="comment">*返回新对象</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_new</span>(<span class="params">constuctor,param</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 获得构造函数</span></span><br><span class="line">    <span class="keyword">let</span> Con = [].shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="comment">//    创建一个空对象，继承构造函数的 prototype 属性 链接到原型</span></span><br><span class="line">  <span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(Con.prototype);</span><br><span class="line">    <span class="comment">// 绑定 this，执行构造函数</span></span><br><span class="line">    <span class="keyword">let</span> result = Con.apply(obj, <span class="built_in">arguments</span>)</span><br><span class="line">    <span class="comment">// 确保 new 出来的是个对象</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">typeof</span>(result) === <span class="string">'object'</span> &amp;&amp; result != <span class="literal">null</span>)  ? result : obj</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">var</span> fn = _new(</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.name = name; <span class="keyword">this</span>.age = age</span><br><span class="line">    &#125;, <span class="string">'Owen'</span>, <span class="number">28</span>);</span><br><span class="line">fn.name <span class="comment">// 'Owen'</span></span><br></pre></td></tr></table></figure><h3 id="new-target"><a href="#new-target" class="headerlink" title="new.target"></a>new.target</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">new</span>.target === f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f() <span class="comment">// false</span></span><br><span class="line"><span class="keyword">new</span> f() <span class="comment">// true </span></span><br><span class="line"><span class="comment">//可利用 它来判断是否使用 new 命令</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">new</span>.target) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请使用 new 命令调用！'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f() <span class="comment">// Uncaught Error: 请使用 new 命令调用！</span></span><br></pre></td></tr></table></figure><hr><h3 id="this实质"><a href="#this实质" class="headerlink" title="this实质"></a><code>this</code>实质</h3><blockquote><p>原始的对象以字典结构保存，每一个属性名都对应一个属性描述对象。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>:  <span class="number">1</span> &#125;;</span><br></pre></td></tr></table></figure><p>JavaScript 存储变量实际上是以下面的形式保存的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  a: &#123;</span><br><span class="line">    [[value]]: <span class="number">1</span> <span class="comment">//函数的地址</span></span><br><span class="line">    [[writable]]: <span class="literal">true</span> <span class="comment">//是否可赋值</span></span><br><span class="line">    [[enumerable]]: <span class="literal">true</span><span class="comment">//是否可枚举</span></span><br><span class="line">    [[configurable]]: <span class="literal">true</span><span class="comment">//是否可配置</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><label>属性的值保存在属性描述对象的value属性里面。</label><br> 如果 a 属性的值是<label>引用值</label> 那么属性将以下面的形式保存的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">fn</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125; &#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  fn: &#123;</span></span><br><span class="line"><span class="comment">    [[value]]: </span></span><br><span class="line"><span class="comment">    [[writable]]: true </span></span><br><span class="line"><span class="comment">    [[enumerable]]: true </span></span><br><span class="line"><span class="comment">    [[configurable]]: true </span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>由于函数是一个单独的值，所以它可以在不同的环境（上下文）执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f n= <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">f</span>: fn &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单独执行</span></span><br><span class="line"> fn()</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj 环境执行</span></span><br><span class="line">obj.f()</span><br></pre></td></tr></table></figure><blockquote><p>JavaScript 允许在函数体内部，引用当前环境的其他变量。</p></blockquote><p>由于函数可以在不同的运行环境执行，所以需要有一种机制，能够在函数体内部获得当前的运行环境（context）。所以，this就出现了，它的设计目的就是在函数体内部，指代<label>函数当前的运行环境</label>。</p><p>下面这几种用法，都会改变this的指向。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(obj.fn = obj.fn)() <span class="comment">// window</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="literal">false</span> || obj.fn)() <span class="comment">// window</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">(<span class="literal">false</span> || <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="number">4</span>, obj.fn)() <span class="comment">// window</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">(<span class="number">4</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><p>数组调用forEach 方法时函数内部this 指向window ，将父级上下文传递给forEach 改变this指向<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  v: <span class="string">'hello'</span>,</span><br><span class="line">  p: [ <span class="string">'Owen'</span>, <span class="number">18</span> ],</span><br><span class="line">  f: <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.p.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.v + <span class="string">'-'</span> + item);</span><br><span class="line">    &#125;, <span class="keyword">this</span>); <span class="comment">//将外层的this传递给forEach方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">o.f() <span class="comment">// hello-Owen hello-18</span></span><br></pre></td></tr></table></figure></p><p>end</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
