<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Owen</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://owen027.github.io/"/>
  <updated>2019-07-28T01:46:29.099Z</updated>
  <id>https://owen027.github.io/</id>
  
  <author>
    <name>Owen Gao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React 基础学习</title>
    <link href="https://owen027.github.io/2019/07/23/react/"/>
    <id>https://owen027.github.io/2019/07/23/react/</id>
    <published>2019-07-23T12:35:20.000Z</published>
    <updated>2019-07-28T01:46:29.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><blockquote><p><code>React</code> 是一个声明式，高效且灵活的用于构建用户界面的 <code>JavaScript</code>库。可以将一些简短、独立的代码片段组合成复杂的UI界面，这些片段被称为“组件”。</p></blockquote><p><strong>React 大体包含下面这些概念：</strong></p><ul><li>组件</li><li>JSX</li><li>Virtual DOM</li><li>Data Flow</li></ul><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>组件，从概念上类似于 <code>JavaScript</code> 函数。它接受任意的入参（即 “props”），并返回用于描述页面展示内容的<code>React 元素</code>。<br><strong>自定义组件命名：必须以大写字母开头，React 会将以小写字母开头的组件视为原生DOM标签。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>; <span class="comment">// React 的核心库</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>; <span class="comment">// 提供与 DOM 相关的功能</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoppingList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"shopping-list"</span>&gt;</span><br><span class="line">        &lt;h1&gt;Shopping List <span class="keyword">for</span> &#123;<span class="keyword">this</span>.props.name&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">          &lt;li&gt;Instagram&lt;/</span>li&gt;</span><br><span class="line">          &lt;li&gt;WhatsApp&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">          &lt;li&gt;Oculus&lt;/</span>li&gt;</span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;ShoppingList name="Mark" /&gt;</span></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;ShoppingList name=<span class="string">"Mark"</span> /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>React 应用都是构建在组件之上。<code>ShoppingList</code>就是一个React 组件类型，<code>ReactDOM.render</code> 函数会将组件方到页面上的某个节点元素中。(<code>render</code> 返回了一个 <code>React 元素</code> ，这是一种对渲染内容的轻量级描述。)<br><strong>大多数 <code>React</code>应用只会调用一次 <code>ReactDOM.render()</code>。</strong></p><p><strong>其中<code>props</code>（是 properties 的简写） 是组件包含的两个核心概念之一，另一个是<code>state</code>。</strong></p><h3 id="props"><a href="#props" class="headerlink" title="props"></a><code>props</code></h3><p><code>props</code>接收一些其他组件的参数（比如上方的 name )，来配置组件，<strong>所有 React 组件都必须像纯函数一样保护它们的 props 不被更改</strong>。</p><h3 id="state"><a href="#state" class="headerlink" title="state"></a><code>state</code></h3><p><code>state</code> 来实现所谓“记忆”的功能。可以通过 <code>React</code> 组件的构造函数中设置 <code>this.state</code>;<code>this.state</code> 应该被视为一个组件的私有属性。<br><strong>修改<code>this.state</code>值需要通过<code>this.setState</code>方法赋值,有些 props 值或 state 值可能是异步更新的，使用对象赋值的方式更改 state 可能无效，可使用回调传参方式更新</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(  <span class="function">(<span class="params">state,props</span>)=&gt;</span> (&#123;<span class="attr">count</span>:state.count + props.count&#125;) );</span><br></pre></td></tr></table></figure></p><h3 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h3><blockquote><p>通过 <code>class</code> 语法来定义组件，必须包含<code>render()</code> 方法,并且继承于 <code>React.Component</code>。<br><strong>类组件必须包含<code>render()</code>，并且return 只能返回一个父元素（类似vue中的template中只能有一个父元素）。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @name constructor</span></span><br><span class="line"><span class="comment">   * @param &#123;*&#125; props</span></span><br><span class="line"><span class="comment">   * 每次定义子类的构造函数时，都必须调用 super 方法。</span></span><br><span class="line"><span class="comment">   * 因此，在所有含有构造函数的React组件中，构造函数必须以super(props)开头</span></span><br><span class="line"><span class="comment">   * state 保存着组件中的数据 类似 vue 中的 data 属性</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      value:<span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button className=<span class="string">"square"</span> onClick = &#123;()=&gt;&#123;<span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>:<span class="string">'X'</span>&#125;)&#125;</span><br><span class="line">      &#125;&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.state.value&#125;</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><p>render方法中的<code>onClick</code> 事件监听函数中调用<code>this.setState</code>方法，可以设置<code>this.state</code> 中的属性<br>推荐使用箭头函数，避免<a href="https://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/" target="_blank" rel="noopener">this 造成困扰</a>。</p><h3 id="简单组件-函数组件"><a href="#简单组件-函数组件" class="headerlink" title="简单组件(函数组件)"></a>简单组件(函数组件)</h3><p>简单组件是一个函数，不用使用<code>class</code>关键字，当然就没有<code>constructor 构造函数和state</code><br><strong>当组件的数据完全受到父组件的控制（不再持有 state) 时，将此类组件称之为“受控组件”，并且可简化为==函数组件==</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Square =  <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">return</span>  (&lt;button className= "square"</span><br><span class="line">   onClick= &#123; props.onClick&#125; &gt;&#123; props.value  &#125;</span><br><span class="line">  &lt;/button&gt;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="渲染多个组件"><a href="#渲染多个组件" class="headerlink" title="渲染多个组件"></a>渲染多个组件</h3><p>将组件变成数组集合放入花括号中即可渲染多个组件,通常使用数组的<code>map()</code>方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Lis = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> lis = props.list.map(<span class="function">(<span class="params">val,key</span>)=&gt;</span> &lt;li key=&#123;key&#125;&gt;&#123;key+<span class="number">1</span>&#125;&lt;<span class="regexp">/li&gt;);</span></span><br><span class="line"><span class="regexp">    return &lt;ul&gt;&#123;lis&#125;&lt;/u</span>l&gt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> list = <span class="built_in">Array</span>(<span class="number">7</span>).fill(<span class="literal">null</span>);</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Lis list = &#123;list&#125; /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h3 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h3><p><code>input</code>、<code>&lt;select&gt;</code>、<code>&lt;textarea&gt;</code> 等表单的状态发生改变，都得同时通过<code>onChange</code>事件改变组件中的<code>state</code>值，否则表单不会发生变化。通过这种方式控制取值的表单叫做<code>受控组件</code>。<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Input</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      value:<span class="string">'3s'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">  render ()&#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;input type="text" value = &#123;this.state.value&#125; /&gt;   // 用户在表单中输入任何信息都是无效的</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用事件来改变</span><br><span class="line"> render ()&#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;input </span><br><span class="line">          type="text" </span><br><span class="line">          value = &#123;this.state.value&#125; </span><br><span class="line">          onChange = &#123;(&#123;target&#125;) =&gt;&#123;</span><br><span class="line">            this.setState(&#123;</span><br><span class="line">              value:target.value</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">    )   </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p><strong>React受控组件更新state的流程:</strong></p><ul><li>通过在初始化state中设置表单默认值；</li><li>每当表单值发生变化时，调用<code>onChange</code>事件</li><li>事件通过合成的事件对象来改变状态更新 <code>state</code></li><li>setState触发视图渲染更新，完成表单组件值的更新</li></ul><h3 id="状态提升"><a href="#状态提升" class="headerlink" title="状态提升"></a>状态提升</h3><p>当多个组件数据联动时，建议将共享状态提升到最近的共同父组件中去。</p><h3 id="组件生命周期函数"><a href="#组件生命周期函数" class="headerlink" title="组件生命周期函数"></a>组件生命周期函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      value:<span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">   componentDidMount() &#123; <span class="comment">// 组件被渲染到 DOM 中后运行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'DidMount: 1'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  compoentwillUnmount()&#123; <span class="comment">// 组件被删除的时候</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'UnMount: end'</span>)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button className=<span class="string">"square"</span> onClick = &#123;()=&gt;&#123;<span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>:<span class="string">'X'</span>&#125;)&#125;</span><br><span class="line">      &#125;&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.state.value&#125;</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><p>React 提出的一种叫 JSX 的语法，这应该是最开始接触 React 最不能接受的设定之一,因为前端被“表现和逻辑层分离”这种思想“洗脑”太久了。实际上组件的 HTML 是组成一个组件不可分割的一部分，能够将 HTML 封装起来才是组件的完全体.</p><blockquote><p>JSX是一个JavaScript语法扩展。它类似于模板语言，但它具有JavaScript 的全部能力。它最终会被编译为<code>React.createElement()</code>函数调用，返回称为 <code>React元素</code>的普通JavaScript`对象。</p></blockquote><p>推荐使用箭头函数，避免<a href="https://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/" target="_blank" rel="noopener">this 造成困扰</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Square</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt; button className = <span class="string">"square"</span></span><br><span class="line">             onClick = &#123; props.onClick &#125; &gt;</span><br><span class="line">      &#123; props.value &#125;</span><br><span class="line">    &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class Board extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  constructor(props)&#123;</span></span><br><span class="line"><span class="regexp">    super(props)</span></span><br><span class="line"><span class="regexp">    this.state = &#123;</span></span><br><span class="line"><span class="regexp">      squares: Array(9).fill(null),</span></span><br><span class="line"><span class="regexp">      xIsNext:true, /</span><span class="regexp">/ 先落子，并确认该哪位玩家落子</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  /</span>**</span><br><span class="line">   * 只接受一个squares副本，而不直接修改本身数据</span><br><span class="line">   * <span class="number">1.</span> 这样可以简化复杂的功能，不可变性使得复杂的特性更容易实现。</span><br><span class="line">   * <span class="number">2.</span> 可以跟踪数据的改变，如果直接修改源数据就很难跟踪变化的数据。</span><br><span class="line">   * <span class="number">3.</span> 可以帮助我们在 React 中创建 purecomponents。可以轻松的确定不可变数据是否发生了改变，</span><br><span class="line">   *    从而确定何时对组件进行重新渲染。</span><br><span class="line">   * @param &#123;*&#125; i</span><br><span class="line">   * @memberof Board</span><br><span class="line">   *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">  handleClick(i) &#123;</span></span><br><span class="line"><span class="regexp">    const squares = this.state.squares.slice();</span></span><br><span class="line"><span class="regexp">    squares[i] = this.state.xIsNext? "X":"O";</span></span><br><span class="line"><span class="regexp">    this.setState(&#123; squares,xIsNext:!this.state.xIsNext &#125;)</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  renderSquare(i) &#123; /</span><span class="regexp">/ 返回一个 Square 组件</span></span><br><span class="line"><span class="regexp">    return ( &lt; Square</span></span><br><span class="line"><span class="regexp">              value = &#123; this.state.squares[i] &#125;/</span><span class="regexp">/ 给子组件传递 value数据</span></span><br><span class="line"><span class="regexp">              onClick = &#123;()=&gt; this.handleClick(i)&#125; /</span><span class="regexp">/ 给子组件传递 onClick事件</span></span><br><span class="line"><span class="regexp">        /</span>&gt;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;state&#125; = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> status = <span class="string">`Next player: <span class="subst">$&#123;state.xIsNext?<span class="string">'X'</span>:<span class="string">'O'</span>&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div className=<span class="string">"status"</span>&gt;&#123;status&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div className="board-row"&gt;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(0)&#125;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(1)&#125;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(2)&#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">        &lt;div className=<span class="string">"board-row"</span>&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.renderSquare(<span class="number">3</span>)&#125;</span><br><span class="line">          &#123;<span class="keyword">this</span>.renderSquare(<span class="number">4</span>)&#125;</span><br><span class="line">          &#123;<span class="keyword">this</span>.renderSquare(<span class="number">5</span>)&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div className="board-row"&gt;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(6)&#125;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(7)&#125;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(8)&#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>在 JSX 中你可以任意使用JavaScript表达式，只需要用一个<strong>大括号({})</strong>括起来；<br>事实上每个 React 元素都是一个<code>JavaScript</code> 对象，可以把它保存在变量中或者作为参数传递。</p><p>为避免遇到自动插入分号陷阱，<strong>最好将内容包裹在小括号中，如果只有一行代码则不需要括号</strong>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加括号</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"shopping-list"</span>&gt;</span><br><span class="line">        &lt;h1&gt;Shopping List <span class="keyword">for</span>&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">          &lt;li&gt;Instagram&lt;/</span>li&gt;</span><br><span class="line">          &lt;li&gt;WhatsApp&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">          &lt;li&gt;Oculus&lt;/</span>li&gt;</span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不用加括号</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span>  &lt;li&gt;Instagram&lt;/li&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JSX 语法更接近于 JavaScript，所以 ReactDom 使用cameCase(小驼峰命名)来定义属性名称,并且不要使用引号将大括号包裹，两者是不能并存的。对于字符串值使用引号，对于表达式使用大括号</strong></p><p><strong><code>React</code> 中无法通过 <code>return false</code> 的方式阻止默认行为，必须使用<code>e.preventDefault()</code>阻止默认事件。但是不用担心<code>event事件</code>的兼容问题</strong></p><p><strong>JSX 本身就能防止<a href="https://en.wikipedia.org/wiki/Cross-site_scripting" target="_blank" rel="noopener">XSS</a>攻击</strong><br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原生DOM</span></span><br><span class="line">&lt;a href=<span class="string">"#"</span> onclick=<span class="string">"console.log('The link was clicked.'); return false"</span>&gt;</span><br><span class="line">  Click me</span><br><span class="line">&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ JSX</span></span><br><span class="line"><span class="regexp">class App extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">        &lt;a href="#" onclick=&#123;(e)=&gt;this.handleClick(e)&#125;&gt; /</span><span class="regexp">/每次渲染时都会创建不同的回调函数。该回调函数作为 prop 传入子组件时，这些组件可能会进行额外的重新渲染。</span></span><br><span class="line"><span class="regexp">            Click me</span></span><br><span class="line"><span class="regexp">        &lt;/</span>a&gt;;</span><br><span class="line">        &lt;a href=<span class="string">"#"</span> onclick=&#123;(e)=&gt;<span class="keyword">this</span>.handleClick(id,e)&#125;&gt; <span class="comment">// 向事件处理程序传递参数</span></span><br><span class="line">            Click me</span><br><span class="line">        &lt;<span class="regexp">/a&gt;;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="事件处理程序回调函数中的-this"><a href="#事件处理程序回调函数中的-this" class="headerlink" title="事件处理程序回调函数中的 this"></a><strong>事件处理程序回调函数中的 this</strong></h3><ul><li>在 <code>JavaScript</code> 中，<code>class</code> 的方法默认不会绑定 <code>this</code>。如果你忘记绑定 <code>this.handleClick</code> 并把它传入了 <code>onClick</code>，当你调用这个函数的时候 <code>this</code>的值为 <code>undefined</code>。<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 此语法确保 `handleClick` 内的 `this` 已被绑定。</span></span><br><span class="line">    <span class="comment">// 注意: 这是 **实验性** 语法。 使用 Create React App 默认会启用此语法</span></span><br><span class="line">    handleClick = <span class="function">(<span class="params">e</span>)=&gt;</span> &#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        <span class="built_in">console</span>.log(e)</span><br><span class="line">    &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;a href=<span class="string">"#"</span> onclick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;</span><br><span class="line">            Click me</span><br><span class="line">        &lt;<span class="regexp">/a&gt;;</span></span><br><span class="line"><span class="regexp">         &lt;a href="#" onclick=&#123;this.handleClick。bind(this,id)&#125;&gt; /</span><span class="regexp">/ 向事件处理程序传递参数, 事件对象会被隐式传递</span></span><br><span class="line"><span class="regexp">            Click me</span></span><br><span class="line"><span class="regexp">        &lt;/</span>a&gt;;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Virtual-DOM"><a href="#Virtual-DOM" class="headerlink" title="Virtual DOM"></a>Virtual DOM</h2><blockquote><p>当组件状态<code>state</code>有更改的时候，<code>React</code>会自动调用组件的<code>render</code>方法重新渲染整个组件的<code>UI</code>。</p></blockquote><p><code>React</code>实现了一个<code>Virtual DOM</code>，组件 DOM 结构就是映射到这个<code>Virtual DOM</code> 上，<code>React</code> 在这个<code>Virtual DOM</code> 上实现了一个<code>diff</code>算法，<strong>当要重新渲染组件的时候，会通过<code>diff</code> 寻找到要变更的DOM 节点，再把这个修改更新到浏览器实际的DOM 节点上</strong>，所以实际上不是真的渲染整个<code>DOM</code>树(<code>React DOM</code> 只会更新实际改变了的内容)。这个 <code>Virtual DOM</code> 是一个纯粹的 JS 数据结构，所以性能会比原生 DOM 快很多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;React&lt;/code&gt; 是一个声明式，高效且灵活的用于构建用户界面的 &lt;code&gt;JavaScrip
      
    
    </summary>
    
      <category term="React" scheme="https://owen027.github.io/categories/React/"/>
    
    
      <category term="basic" scheme="https://owen027.github.io/tags/basic/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 单例模式 （Singleton Pattern）</title>
    <link href="https://owen027.github.io/2019/07/21/singletonPattern/"/>
    <id>https://owen027.github.io/2019/07/21/singletonPattern/</id>
    <published>2019-07-21T15:46:04.000Z</published>
    <updated>2019-07-23T14:38:34.243Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>确保只有一个实例，并提供全局访问。</p></blockquote><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>一个类能返回对象一个引用（永远是同一个）和一个获得该实例的方法（必须是静态方法，通常命名为<code>getIntance</code>）；当我们调用这个方法时，类持有的引用不为空则返回这个引用，如果为空须创建该类实例并将实例的引用赋予该类保持的引用；同时将该类的构造函数定义为私有方法，那么其他环境就无法通过调用该类的构造函数来实例化该类的对象，只能通过该类提供的静态方法得到该类唯一的实例。</p><h3 id="实现-Java-语言中的单例模式"><a href="#实现-Java-语言中的单例模式" class="headerlink" title="实现 Java 语言中的单例模式"></a>实现 Java 语言中的单例模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Singleton getInstance &#123;</span><br><span class="line">            <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span>(Singleton.class) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(INSTANCE = <span class="keyword">null</span>) &#123;</span><br><span class="line">                       INSTANCE = <span class="keyword">new</span> Singleton()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> INSTANCE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现-JavaScript-语言中的单例模式"><a href="#实现-JavaScript-语言中的单例模式" class="headerlink" title="实现 JavaScript 语言中的单例模式"></a>实现 JavaScript 语言中的单例模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Singleton = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Singleton.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line">Singleton.getInstance = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">let</span> instance;</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(instance) <span class="keyword">return</span> instance;</span><br><span class="line">       <span class="keyword">return</span> instance = <span class="keyword">new</span> Singleton(name)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="keyword">let</span> s1 = Singleton.getInstance(<span class="string">'owen'</span>); <span class="comment">// Singleton &#123;name: "owen"&#125;</span></span><br><span class="line"><span class="keyword">let</span> s2 = Singleton.getInstance(<span class="string">'guowen'</span>); <span class="comment">// Singleton.getInstance('guowen');</span></span><br><span class="line">s1 === s2 <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>JavaScript中单例作为一个命名空间提供者，从全局命名空间里提供一个唯一的访问点来访问该对象。</p></blockquote><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>使用命名空间可以降低全局变量带来的命名污染；<br>最简单的方法是对象字面量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> globalWeb = &#123;</span><br><span class="line">    a() &#123;&#125;,</span><br><span class="line">    b() &#123;&#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>或者使用闭包<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Singleton = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> instance;</span><br><span class="line">    <span class="keyword">let</span> init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">'owen'</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            name,</span><br><span class="line">            data()&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            method:&#123; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getInstance() &#123;</span><br><span class="line">            <span class="keyword">if</span>(instance) <span class="keyword">return</span> instance;</span><br><span class="line">            <span class="keyword">return</span> instance = init()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;())</span><br><span class="line"><span class="keyword">let</span> app = Singleton.getInstance() <span class="comment">// &#123;name: "owen", data: ƒ, method: &#123;…&#125;&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="惰性单例"><a href="#惰性单例" class="headerlink" title="惰性单例"></a>惰性单例</h3><blockquote><p>惰性单例指在需要的时候才创建对象实例，在实现开发中非常有用，即目标对象只有在使用的时候才被创建，而不是页面加载好时创建。</p></blockquote><h4 id="模态框示例"><a href="#模态框示例" class="headerlink" title="模态框示例"></a>模态框示例</h4><p> 点击一个按钮弹窗一个模态框，很明显页面是唯一的，一次不会弹窗多个模态框的情况</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>modal box<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    * &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">        padding:0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">   html&#123;</span></span><br><span class="line"><span class="undefined">   width:100%;</span></span><br><span class="line"><span class="undefined">   height:100%;</span></span><br><span class="line"><span class="undefined">   &#125;</span></span><br><span class="line"><span class="undefined">    .Owen &#123;</span></span><br><span class="line"><span class="undefined">        width:30%;</span></span><br><span class="line"><span class="undefined">        height:30%;</span></span><br><span class="line"><span class="undefined">        margin:10% auto;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #modal &#123;</span></span><br><span class="line"><span class="undefined">        width:100%;</span></span><br><span class="line"><span class="undefined">        height:100%;</span></span><br><span class="line"><span class="undefined">        position:fixed;</span></span><br><span class="line"><span class="undefined">        left:0;</span></span><br><span class="line"><span class="undefined">        top:0;</span></span><br><span class="line"><span class="undefined">        background: rgba(0, 0, 0, 0.52);</span></span><br><span class="line"><span class="undefined">        display:none;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .main&#123;</span></span><br><span class="line"><span class="undefined">        width:30%;</span></span><br><span class="line"><span class="undefined">        height:30%;</span></span><br><span class="line"><span class="undefined">        margin:10% auto;</span></span><br><span class="line"><span class="undefined">        text-align: center;</span></span><br><span class="line"><span class="undefined">        background-color: #b0e8ff;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Owen"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>Owen<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"modal"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                我是弹框</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> openModal = <span class="built_in">document</span>.querySelector(<span class="string">"button"</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> modal = <span class="built_in">document</span>.querySelector(<span class="string">"#modal"</span>)</span></span><br><span class="line"><span class="javascript">    openModal.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">       modal.style.display = <span class="string">'block'</span></span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 第一种方法是在页面加载完成时创建好这个弹框，一开始就是隐藏的，只有点击按钮的时候才显示，这种方式有一个问题，就是我们进入页面，只是看看其他内容，不做任何操作；这样就造成资源浪费</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>modal box<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    * &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">        padding:0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">   html&#123;</span></span><br><span class="line"><span class="undefined">   width:100%;</span></span><br><span class="line"><span class="undefined">   height:100%;</span></span><br><span class="line"><span class="undefined">   &#125;</span></span><br><span class="line"><span class="undefined">    .Owen &#123;</span></span><br><span class="line"><span class="undefined">        width:30%;</span></span><br><span class="line"><span class="undefined">        height:30%;</span></span><br><span class="line"><span class="undefined">        margin:10% auto;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #modal &#123;</span></span><br><span class="line"><span class="undefined">        width:100%;</span></span><br><span class="line"><span class="undefined">        height:100%;</span></span><br><span class="line"><span class="undefined">        position:fixed;</span></span><br><span class="line"><span class="undefined">        left:0;</span></span><br><span class="line"><span class="undefined">        top:0;</span></span><br><span class="line"><span class="undefined">        background: rgba(0, 0, 0, 0.52);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .main&#123;</span></span><br><span class="line"><span class="undefined">        width:30%;</span></span><br><span class="line"><span class="undefined">        height:30%;</span></span><br><span class="line"><span class="undefined">        margin:10% auto;</span></span><br><span class="line"><span class="undefined">        padding:20px;</span></span><br><span class="line"><span class="undefined">        text-align: right;</span></span><br><span class="line"><span class="undefined">        background-color: #b0e8ff;</span></span><br><span class="line"><span class="undefined">        position:relative;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .main div &#123;</span></span><br><span class="line"><span class="undefined">        text-align: center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .main span &#123;</span></span><br><span class="line"><span class="undefined">        display: inline-block;</span></span><br><span class="line"><span class="undefined">        padding:5px;</span></span><br><span class="line"><span class="undefined">        cursor:pointer;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Owen"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">    init()</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> openModal = <span class="built_in">document</span>.querySelector(<span class="string">"button"</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> createModal =( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> flag;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 生成 Modal 容器</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span></span><br><span class="line"><span class="javascript">        div.id = <span class="string">"modal"</span></span></span><br><span class="line"><span class="javascript">        div.style.display = <span class="string">"none"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(flag) <span class="keyword">return</span> div;</span></span><br><span class="line"><span class="javascript">            flag = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> fra = <span class="built_in">document</span>.createDocumentFragment();</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 添加 Modal 内容</span></span></span><br><span class="line"><span class="xml">            els = `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span></span><br><span class="line"><span class="javascript">                    &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"close"</span>&gt;×&lt;<span class="regexp">/span&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">                            我是弹框</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">                    `</span></span><br><span class="line"><span class="undefined">            div.innerHTML = els;</span></span><br><span class="line"><span class="undefined">            fra.appendChild(div)</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.body.appendChild(fra)</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 关闭 Modal</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> close = <span class="built_in">document</span>.querySelector(<span class="string">'.close'</span>)</span></span><br><span class="line"><span class="javascript">            close.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                flag = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.body.removeChild(div)</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> div</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;())</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 显示 Modal</span></span></span><br><span class="line"><span class="javascript">    openModal.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">       createModal().style.display = <span class="string">"block"</span>;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二种方法，只执行一次DOM的创建修改操作，不用频繁的创建和删除节点，提高资源利用率；</p><p><strong>参考资料</strong></p><p>《JavaScript设计模式与开发实践》<br><a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">基维</a></p><p><a href="https://www.cnblogs.com/TomXu/archive/2012/02/20/2352817.html" target="_blank" rel="noopener">大叔</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;确保只有一个实例，并提供全局访问。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;实现思路&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="design patterns" scheme="https://owen027.github.io/categories/design-patterns/"/>
    
    
      <category term="Singleton" scheme="https://owen027.github.io/tags/Singleton/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 高阶函数（Heigher-order function）</title>
    <link href="https://owen027.github.io/2019/07/12/designPatterns3/"/>
    <id>https://owen027.github.io/2019/07/12/designPatterns3/</id>
    <published>2019-07-12T04:32:40.000Z</published>
    <updated>2019-07-23T14:38:34.242Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是高阶函数"><a href="#什么是高阶函数" class="headerlink" title="什么是高阶函数"></a>什么是高阶函数</h1><blockquote><p>《javascript设计模式和开发实践》中定义 函数既可作为参数被传递，也可以作为返回值输出</p></blockquote><p><strong>满足以下条件:</strong></p><ul><li>接受一个或多个函数作为输入</li><li>输出一个函数</li></ul><p>高阶函数一般是那些函数型包含多于函数。在函数式编程中，返回另一个函数的高阶函数被称为Curry化的函数。</p><h2 id="函数作为参数传递"><a href="#函数作为参数传递" class="headerlink" title="函数作为参数传递"></a>函数作为参数传递</h2><blockquote><p>将函数作为参数传递，我们就可以抽离以部分容易变化的业务逻辑，这样可以分离业务代码中变与不变的部分</p></blockquote><p><strong>回调函数：</strong></p><blockquote><p>将函数传进一个方法中，函数不会立即执行，等待出来结果之后在执行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> func = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n === <span class="string">'owen'</span>)&#123;</span><br><span class="line">        callback() <span class="comment">//回调函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">say</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'Hello Word'</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> func(say)</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>Array 对象常用的方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].forEach(iteration)</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">iteration</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(v)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="作为返回值输出"><a href="#作为返回值输出" class="headerlink" title="作为返回值输出"></a>作为返回值输出</h2><blockquote><p>让函数继续返回一个可执行的函数，意味着运行过程是可延续的。</p></blockquote><p><strong>判断数据类型</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> type = <span class="function"><span class="params">type</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">`[object <span class="subst">$&#123;type&#125;</span>]`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> isArray = type(<span class="string">'Array'</span>),isString = type(<span class="string">'String'</span>),isNumber = type(<span class="string">'Number'</span>),isObject = type(<span class="string">'Object'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">let</span> Type = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> type = &#123;&#125;,types = [<span class="string">'Object'</span>,<span class="string">'Array'</span>,<span class="string">'Number'</span>,<span class="string">'String'</span>]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span>  types) &#123;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">            type[<span class="string">`is<span class="subst">$&#123;str&#125;</span>`</span>] = <span class="function">(<span class="params">obj</span>) =&gt;</span> <span class="built_in">Object</span>.prototype.toString.call( obj ) === <span class="string">`[object <span class="subst">$&#123;str&#125;</span>]`</span></span><br><span class="line">        &#125;(val))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(type)</span><br><span class="line">    <span class="keyword">return</span> type</span><br><span class="line">&#125;())</span><br><span class="line">Type.isNumber(<span class="number">2</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><h3 id="实现AOP（面向切片编程）"><a href="#实现AOP（面向切片编程）" class="headerlink" title="实现AOP（面向切片编程）"></a>实现AOP（面向切片编程）</h3><blockquote><p>AOP 通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。<br>JAVA 语言中 AOP 将一些跟核心业务逻辑模块无关的功能抽离出来，通常包括日志统计、安全控制、异常处理灯。再通过“动态织入”的方式掺入业务逻辑中。<br><strong>好处：</strong> 可以保持业务逻辑模块的纯净和高内聚，方便复用日志统计等功能模块。</p></blockquote><p>JavaScript中实现AOP是指把一个函数“动态织入”到另一个函数之中<br><strong>具体实现：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.before = <span class="function"><span class="keyword">function</span>(<span class="params">beforeFn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> that = <span class="keyword">this</span>; <span class="comment">// 谁调用指向谁 下面是由 func 函数调用所以是指向 func</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"> ...args</span>)</span>&#123;</span><br><span class="line">        beforeFn.apply(<span class="keyword">this</span>,args) <span class="comment">// 执行回调函数 beforeFn</span></span><br><span class="line">        <span class="keyword">return</span> that.apply(<span class="keyword">this</span>,args) <span class="comment">// 执行原函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.after = <span class="function"><span class="keyword">function</span>(<span class="params">afterFn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> that = <span class="keyword">this</span>; <span class="comment">// 谁调用指向谁 下面是由befor函数调用所以是指向 befor</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"> ...args</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> ret = that.apply(<span class="keyword">this</span>,args) <span class="comment">// 执行并接收原对象</span></span><br><span class="line">        afterFn.apply(<span class="keyword">this</span>,args) <span class="comment">//  执行回调函数 beforeFn</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line">func = func.before(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;).after(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br><span class="line">func()</span><br><span class="line"><span class="comment">// 1 2 3</span></span><br></pre></td></tr></table></figure></p><h3 id="函数柯里化-（function-currying）"><a href="#函数柯里化-（function-currying）" class="headerlink" title="函数柯里化 （function currying）"></a>函数柯里化 （function currying）</h3><blockquote><p>在数学和计算机科学中，柯里化是将多个参数的函数转换成一系列使用一个参数的函数，且返回接受余下的参数的新函数</p></blockquote><p><strong>curring 又称部分求值；一个 curring 函数首先会接收一些参数，该函数并不会立即求值，而是继续返回另外一个函数，而刚传入的参数会被保存在形成的闭包中，待函数真正需要求值的时候，之前的所以参数都会被一次性用于求值</strong></p><p><strong>简单示例：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果柯里化</span></span><br><span class="line">add(<span class="number">1</span>)(<span class="number">2</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p><p>接下来使用 currying 实现一个几天之内消费总和的函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通方法</span></span><br><span class="line"><span class="keyword">var</span> cost = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = [];</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">arguments</span>.length)&#123;</span><br><span class="line">            <span class="keyword">let</span> money = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> args )&#123;</span><br><span class="line">                money += val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> money</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            [].push.apply(args,<span class="built_in">arguments</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line">cost(<span class="number">100</span>);</span><br><span class="line">cost(<span class="number">100</span>);</span><br><span class="line">cost(<span class="number">100</span>);</span><br><span class="line">cost(); <span class="comment">// 300</span></span><br><span class="line"></span><br><span class="line">cost(<span class="number">100</span>)(<span class="number">100</span>)(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// currying</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存原函数参数返回到新函数中使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  func(100,100,100) //300</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span> (<span class="params">...args</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">if</span>(args.length&gt;<span class="number">1</span>)&#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> args)&#123;</span><br><span class="line">             num +=v</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> num</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> args[<span class="number">0</span>]</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span>  curry = <span class="function"><span class="keyword">function</span>(<span class="params">func</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> args = []</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">...Args</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Args.length)&#123;</span><br><span class="line">            [].push.apply(args,Args)</span><br><span class="line">            <span class="keyword">return</span> fn</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> func.apply(<span class="keyword">this</span>,args)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">cost = curry(count);</span><br><span class="line"></span><br><span class="line">cost(<span class="number">100</span>);</span><br><span class="line">cost(<span class="number">100</span>);</span><br><span class="line">cost(<span class="number">100</span>);</span><br><span class="line">cost(); <span class="comment">// 300</span></span><br></pre></td></tr></table></figure></p><h3 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h3><p>JavaScript 中大多数情况都是用户主动出发函数，除非函数本身的实现不合理，否则一般不会遇到跟性能相关的问题，少数情况下，函数不是由用户直接触发控制，可能被频繁调用造成严重的性能问题。<br>比如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// do something...</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// do something...</span></span><br><span class="line">&#125;);</span><br><span class="line">Dom.addEventListener(<span class="string">'mousemove'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// do something...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// progress</span></span><br><span class="line">xhr.upload.addEventListener(<span class="string">"progress"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something...</span></span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure></p><p><strong>上述事件1秒种触发很多次，并且常常操作DOM节点，非常损耗性能，浏览器会因此吃不消而卡顿；实际我们不需要触发如此高的频率因此我们可以在一段时间内忽略掉一些执行次数</strong></p><h4 id="节流原理："><a href="#节流原理：" class="headerlink" title="节流原理："></a>节流原理：</h4><blockquote><p>如果持续触发事件，可每隔一段时间只执行一次。</p></blockquote><h5 id="使用定时器实现节流"><a href="#使用定时器实现节流" class="headerlink" title="使用定时器实现节流"></a>使用定时器实现节流</h5><blockquote><p>将即将被执行的函数用 <code>setTimeout</code> 函数延迟一段时间执行，如果该定时器未执行完成则忽略接下下来的需被执行的函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func,wait</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> timer, firstFlag = <span class="literal">true</span>; <span class="comment">//第一次立即执行</span></span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(timer)  <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 如果存在定时器这不执行</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">let</span> that = <span class="keyword">this</span>;</span><br><span class="line">          <span class="keyword">if</span>(firstFlag)&#123;</span><br><span class="line">              firstFlag = <span class="literal">false</span>;</span><br><span class="line">             <span class="keyword">return</span> func.apply(that,args);</span><br><span class="line">          &#125;</span><br><span class="line">          timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               clearTimeout(timer);</span><br><span class="line">               timer = <span class="literal">null</span>;</span><br><span class="line">               func.apply(that,args);</span><br><span class="line">            &#125;,wait)</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, throttle(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;,<span class="number">1000</span>));</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h3><blockquote><p>和节流一定时间段内只调用一次事件处理函数不同，防抖是一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。（用户不再触发对应事件才执行一次事件）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func,wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> that = <span class="keyword">this</span>;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            func.apply(that,args)</span><br><span class="line">        &#125;,wait)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, debounce(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;,<span class="number">1000</span>));</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>参考资料</strong></p><p>《JavaScript设计模式与开发实践》</p><p><a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1" target="_blank" rel="noopener">基维 AOP</a></p><p><a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">基维 高阶函数</a></p><p><a href="https://github.com/mqyqingfeng/Blog/issues/26" target="_blank" rel="noopener">JavaScript专题之跟着 underscore 学节流</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是高阶函数&quot;&gt;&lt;a href=&quot;#什么是高阶函数&quot; class=&quot;headerlink&quot; title=&quot;什么是高阶函数&quot;&gt;&lt;/a&gt;什么是高阶函数&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;《javascript设计模式和开发实践》中定义 函数既可作为参数被传递，
      
    
    </summary>
    
      <category term="design patterns" scheme="https://owen027.github.io/categories/design-patterns/"/>
    
    
      <category term="Heigher-order" scheme="https://owen027.github.io/tags/Heigher-order/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript  设计模式基础（二）</title>
    <link href="https://owen027.github.io/2019/07/09/designPatterns2/"/>
    <id>https://owen027.github.io/2019/07/09/designPatterns2/</id>
    <published>2019-07-09T05:13:34.000Z</published>
    <updated>2019-07-21T16:01:09.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><p>在以类为中心的面向对象编程语言中，类和对象的关系就像铸模和铸件的关系，对象总是从类中创建。而原型编程中，类不是必须的，对象未必从类中创建而来，可以拷贝另一个对象而变成新对象</p><blockquote><p>从设计模式角度讲，原型模式是用于创建对象的一种模式，找到一个对象，不需要关心对象的具体类型，通过克隆来创建一个一模一样的对象。 原型不单是一种设计模式，也被称为编程泛型</p></blockquote><p>原型模式实现的关键是语言本身是否提供了 clone 方法， ECMAScript 5 提供了 <code>Object.create</code> 方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Plane</span> (<span class="params">propertys</span>)</span>&#123; <span class="comment">//工厂方法</span></span><br><span class="line">    <span class="keyword">this</span>.blood = propertys.blood;</span><br><span class="line">    <span class="keyword">this</span>.attackLevel = propertys.attackLevel;</span><br><span class="line">    <span class="keyword">this</span>.defenseLevel = propertys.defenseLevel;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> plane = <span class="keyword">new</span> Plane(&#123;</span><br><span class="line">    blood :<span class="number">100</span>,</span><br><span class="line">    attackLevel :<span class="number">10</span>,</span><br><span class="line">    defenseLevel :<span class="number">10</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> clonePlane = <span class="built_in">Object</span>.create(plane);</span><br><span class="line"><span class="built_in">console</span>.log(clonePlane.__proto__) <span class="comment">// Plane &#123;blood: 100, attackLevel: 10, defenseLevel: 10&#125;</span></span><br></pre></td></tr></table></figure></p><p>通过克隆 <code>plane 对象</code>得到 <code>clonePlane 对象</code>,那么 plane 就被称为 clonePlane 的原型；而 plane 中所有的属性和方法都将挂载到<code>__proto__</code> 原型属性上</p><p>每个 JS 对象都有 <code>__proto__</code> 属性(隐式原型属性)，指向创建该对象的构造函数的原型,这个属性可以访问到原型（<code>[[prototype]]</code>） 内部属性。这个属性在现在来说已经不推荐直接去使用它了。</p><p><strong>由于 JavaScript 作为一门基于原型的语言，没有类的概念，每一个对象都是基于另一个对象的克隆，因此语言最初只有一个根对象 <code>Object.prototype</code>,如果A对象是从B对象克隆而来，那么B就是A的原型，如果C又是B的原型。它们之间就形成了一条原型链</strong></p><label> <strong>原型编程中有一个重要特性：访问对象中某个属性或方法，而对象本身没有对应属性和方法，那么它会从自己的原型链上查找，一直查到根对象为止</strong><br></label><br><strong>一级级向上，对性能有影响，寻找的层级越多，性能影响越大</strong><br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(clonePlane) <span class="comment">// Plane &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(clonePlane.blood) <span class="comment">// 100</span></span><br><span class="line"><span class="built_in">console</span>.log(clonePlane.color) <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(clonePlane.__proto__) <span class="comment">//原型 Plane &#123;blood: 100, attackLevel: 10, defenseLevel: 10&#125;</span></span><br></pre></td></tr></table></figure><br><br>上述代码中的<code>clonePlane 对象</code> 本身是没有 blood 和 color 属性，却能访问到blood的值而访问不到color的值，是因为 <code>clonePlane 对象</code> 原型链中有 blood 属性而没有color属性。<br><br><strong>原型编程基本规则：</strong><br>1. 所有数据都是对象<br>2. 对象会记住它的原型（类似于继承）<br>3. 要得到一个对象，需要将另一个对象作为原型并克隆它<br>4. 访问不到对象的某个属性或方法，那么它会从自己的原型链上查找，一直查到根对象为止<br><br>## 原型继承<br><br>在JavaScript中我们遇到的每一个对象都是从 <code>Object.prototype</code>克隆而来，通过<code>Object.getPrototypeOf</code>来判断对象的原型从属关系。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(obj) === <span class="built_in">Object</span>.prototype) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(obj1) === <span class="built_in">Object</span>.prototype) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><br><br>由于引擎内部会自动实现对 <code>Object.prototype</code> 的克隆，所有我们执行显示的使用<code>let obj = new Object(); let obj1 = {};</code><br> <code>prototype</code> 有一个属性 <code>constructor</code>，默认指向原型所在的构造函数<br>,<code>constructor</code>是一个公有且不可枚举的属性。一旦我们改变了函数的 prototype ，那么新对象就没有这个属性了,如果修改了原型对象，一般会同时修改constructor属性，防止引用的时候出错。<br><br>下面我们来看<code>new</code> 运算符<br><br> <label> <strong>JavaScript中没有类的概念，所以 <code>Object</code> 是一个构造函数，JavaScript 中的函数即可作为普通函数调用，又可作为构造器调用,当使用 new 运算调用函数时，函数就是构造器。</strong></label><h3 id="new命令的原理"><a href="#new命令的原理" class="headerlink" title="new命令的原理"></a><code>new</code>命令的原理</h3><ol><li>创建一个空对象，作为返回的对象实例</li><li>将构造函数指向原型<code>prototype</code>属性（继承构造函数）</li><li>绑定作用域（ this 指向空对象 ）</li><li>执行构造函数,如果构造函数return 为对象则使用该对象，否则 return 创建的空对象</li></ol><p>模拟 <code>new</code> 运算<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__new</span> (<span class="params">fun,args</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 获取构造函数</span></span><br><span class="line">  <span class="keyword">let</span> arr =[...arguments]</span><br><span class="line">  <span class="keyword">let</span> Con = arr.shift()</span><br><span class="line">  <span class="comment">// 创建对象，将构造函数的原型指向它</span></span><br><span class="line">  <span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(Con.prototype)</span><br><span class="line">  <span class="comment">// 绑定 this</span></span><br><span class="line">  <span class="keyword">let</span> ret = Con.apply(obj,arr)</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">typeof</span> ret === <span class="string">'object'</span> &amp;&amp; ret !== <span class="literal">null</span> )? ret : obj</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = __new(<span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">&#123; name,sex,age &#125;</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;,&#123;<span class="attr">name</span>:<span class="string">'owen'</span>,<span class="attr">sex</span>:<span class="string">'man'</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(person) <span class="comment">// Person &#123;name: "owen", sex: "man", age: 18&#125;</span></span><br></pre></td></tr></table></figure></p><p><strong>new.target：</strong>  可利用 它来判断是否使用 new 命令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">new</span>.target) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请使用 new 命令调用！'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func() <span class="comment">// Uncaught Error: 请使用 new 命令调用！</span></span><br></pre></td></tr></table></figure><h3 id="call，apply-and-bind"><a href="#call，apply-and-bind" class="headerlink" title="call，apply and bind"></a>call，apply and bind</h3><p>Javascript 编程中 <code>call，apply 和 bind</code> 方法被广泛运用，在学习设计模式前先理解这几个概念</p><blockquote><p>三者都可改变函数内部this的指向（即函数执行时所在的作用域）</p></blockquote><h4 id="call-and-apply"><a href="#call-and-apply" class="headerlink" title="call and apply"></a>call and apply</h4><blockquote><p>都是在改变this 指向后调用该函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">//test() == test.call()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj =&#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(obj) <span class="comment">//"[object Object]"</span></span><br><span class="line"><span class="comment">//因为call 和 apply 会将函数中的this指向第一个参数</span></span><br><span class="line"><span class="comment">//相当于 obj.toString()</span></span><br></pre></td></tr></table></figure></p></blockquote><p><strong><code>call and apply</code> 二者区别在于传参：</strong></p><ul><li>call 第二个参数开始单个单个参数传</li><li>apply 第二个参数为数组或类数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回数组中最大的数</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">15</span>];</span><br><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, arr) <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将数组的空元素变为undefined</span></span><br><span class="line"><span class="built_in">Array</span>.apply(<span class="literal">null</span>,[<span class="number">1</span>,,<span class="number">3</span>,,<span class="number">4</span>])<span class="comment">//[1,undefined,3,undefined,4];</span></span><br></pre></td></tr></table></figure><p>空元素与undefined的差别</p><ul><li>forEach方法会跳过空元素，但是不会跳过undefined。因此，遍历内部元素的时候，会得到不同的结果。</li><li><label>转换类似数组的对象</label></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj=&#123;<span class="number">0</span>: <span class="number">1</span>, <span class="attr">length</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">Array</span>.protetype.slice.apply(obj);<span class="comment">//[1,undefined]</span></span><br></pre></td></tr></table></figure><label>被处理的对象必须有length属性，以及相对应的数字键。</label><h6 id="参数为空、null和undefined，则默认传入全局对象。"><a href="#参数为空、null和undefined，则默认传入全局对象。" class="headerlink" title="参数为空、null和undefined，则默认传入全局对象。"></a><label>参数为空、null和undefined，则默认传入全局对象。</label></h6><hr><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><p><strong>bind方法用于将函数体内的this绑定到某个对象，然后返回一个新函数。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> counter = &#123;</span><br><span class="line">  count: <span class="number">0</span>,</span><br><span class="line">  func: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> func = counter.func.bind(counter);</span><br><span class="line">func(); <span class="comment">// 相当于 count++</span></span><br><span class="line">counter.count <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * <span class="keyword">this</span>.m + y * <span class="keyword">this</span>.n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  m: <span class="number">2</span>,</span><br><span class="line">  n: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newAdd = add.bind(obj, <span class="number">5</span>); <span class="comment">//将x 绑定为 5</span></span><br><span class="line">newAdd(<span class="number">5</span>) <span class="comment">// 20</span></span><br><span class="line">newAdd(<span class="number">1</span>,<span class="number">6</span>)<span class="comment">//12 6为起作用 相当于 5*2+1*2</span></span><br></pre></td></tr></table></figure><label>第一个参数是null或undefined，等于将this绑定到全局对象</label><h4 id="bind方法使用注意点"><a href="#bind方法使用注意点" class="headerlink" title="bind方法使用注意点"></a>bind方法使用注意点</h4><ul><li>bind方法每运行一次，就返回一个新函数 需要一个变量接收</li></ul><h4 id="模拟-bind"><a href="#模拟-bind" class="headerlink" title="模拟 bind"></a>模拟 bind</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params">...Args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">"function"</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Function.prototype.bind - what is trying to be bound is not callable"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> that = <span class="keyword">this</span>, <span class="comment">//保存原函数</span></span><br><span class="line">  target = Args.shift(), <span class="comment">//提取须绑定的对像</span></span><br><span class="line">  func =  <span class="function">(<span class="params">...args</span>) =&gt;</span>that.apply(target ? <span class="keyword">this</span> : target || <span class="built_in">window</span>, aArgs.concat(args));  <span class="comment">//  aArgs.concat(args) 合并参数</span></span><br><span class="line">  func.prototype = <span class="built_in">Object</span>.create(<span class="keyword">this</span>.prototype); <span class="comment">// 继承原函数的原型</span></span><br><span class="line">  <span class="keyword">return</span> func;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>结合回调函数使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> counter = &#123;</span><br><span class="line">  count: <span class="number">0</span>,</span><br><span class="line">  inc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callIt</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  callback();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">callIt(counter.inc.bind(counter));</span><br><span class="line">counter.count <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li><li><p>结合call方法使用</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].slice(<span class="number">0</span>, <span class="number">1</span>) <span class="comment">// [1]</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.call([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">0</span>, <span class="number">1</span>) <span class="comment">// [1]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//将Array.prototype.slice变成Function.prototype.call方法所在的对象</span></span><br><span class="line"><span class="comment">//调用时就变成了Array.prototype.slice.call。</span></span><br><span class="line"><span class="keyword">let</span> slice = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Array</span>.prototype.slice);</span><br><span class="line"><span class="built_in">Function</span>.prototype.slice.call([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">0</span>, <span class="number">1</span>) <span class="comment">// [1]</span></span><br><span class="line"><span class="comment">//slice([1, 2, 3], 0, 1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> push = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Array</span>.prototype.push);</span><br><span class="line"><span class="keyword">let</span> pop = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Array</span>.prototype.pop);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span> ,<span class="number">2</span> ,<span class="number">3</span>];</span><br><span class="line">push(a, <span class="number">4</span>)</span><br><span class="line">a <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">pop(a)</span><br><span class="line">a <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><ul><li>将Function.prototype.bind方法变成Function.prototype.call的方法，就意味着bind的调用形式也可以被改写</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o = &#123; <span class="attr">v</span>: <span class="number">123</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> bind = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Function</span>.prototype.bind);</span><br><span class="line">bind(f, o)() <span class="comment">// 123</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原型模式&quot;&gt;&lt;a href=&quot;#原型模式&quot; class=&quot;headerlink&quot; title=&quot;原型模式&quot;&gt;&lt;/a&gt;原型模式&lt;/h1&gt;&lt;p&gt;在以类为中心的面向对象编程语言中，类和对象的关系就像铸模和铸件的关系，对象总是从类中创建。而原型编程中，类不是必须的，对象未
      
    
    </summary>
    
      <category term="design patterns" scheme="https://owen027.github.io/categories/design-patterns/"/>
    
    
      <category term="Pattern intro" scheme="https://owen027.github.io/tags/Pattern-intro/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 设计模式基础（一）</title>
    <link href="https://owen027.github.io/2019/07/08/designPatterns1/"/>
    <id>https://owen027.github.io/2019/07/08/designPatterns1/</id>
    <published>2019-07-08T05:13:34.000Z</published>
    <updated>2019-07-21T16:01:09.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是设计模式？"><a href="#什么是设计模式？" class="headerlink" title="什么是设计模式？"></a>什么是设计模式？</h1><blockquote><p><code>模式</code> 起源于建筑学。20世纪70年代，哈佛大学建筑学博士<code>Christopher Alexander</code>和他的团队花大约20年，来研究为解决同一个问题而设计出的不同建筑结构，从中发现那些高质量设计中的相似性，并且用<code>模式</code>来指代这种相似性；</p></blockquote><p>受<code>Christopher Alexander</code>观点的启发，<code>Erich Gamma, Richard Helm, Ralph Johnson和 John Vlissides</code>(人称Gang Of Four, GoF),将这种 <code>模式</code> 观点应用于面向对象的软件设计中，并总结了23种常见的软件开发设计模式， 于 1995 年发布一本名叫《Design Patterns: Elements Of Reusable Object-Oriented Software》的书</p><blockquote><p>设计模式的定义：在面向对象软件设计过程种针对特定的问题的简洁而优雅的解决方案。就是给面向对象软件开发中一些 好的设计取个名。</p></blockquote><h2 id="为什么要给好设计取名？"><a href="#为什么要给好设计取名？" class="headerlink" title="为什么要给好设计取名？"></a>为什么要给好设计取名？</h2><p>在开发中，一些稍有经验的程序员也许在不知不觉中使用过设计模式，于是他向别人描述它时会遇到困难，沟通成本高、效率低。而 GoF 将这些好的设计从面向对象中挑选出来，这些都是久经考验的反应了开发者的经验和见解的使用模式来定义的技术，给它们一个好听又好记的名字，这样就方便我们更好的传播和学习，当遇到一个问题时，知道这是哪种设计模式，就能很快想出几种解决方案，提高工作效率。</p><p><strong>好处：</strong></p><ol><li>提供固定的解决方法来解决在软件开发中出现的问题。</li><li>很容易地重用，防止在应用程序开发过程中出现的一些可能导致重大问题的小问题，提高工作效率。</li><li>避免重复代码来减小我们文件大小。</li><li>模式善于表达，交流更快速，降低沟通成本。</li></ol><p> <strong>所有设计模式的实现都遵循一条原则：找出程序中变化的地方，将变化封装起来</strong>。一个程序的设计总是可以分为 可变部分和不变的部分；找出可变部分，将其封装，剩下的不变和稳定部分就非常容易复用。<br><strong>作用：</strong> 让人写出可复用和可维护的程序。<br>JavaScript是一门<code>面向对象语言</code><a href="https://www.ibm.com/developerworks/cn/web/1304_zengyz_jsoo/" target="_blank" rel="noopener">[1]</a><a href="https://www.infoq.cn/article/3*8POPcRSClQh1Cp9Sqg" target="_blank" rel="noopener">[2]</a><a href="https://zhuanlan.zhihu.com/p/33658346" target="_blank" rel="noopener">[3]</a>，设计模式通过对面向对象的特征<label><strong>封装、继承、组合、多态</strong></label>等技术的反复使用，提炼出可复用的面向对象设计技巧。</p><hr><h1 id="设计模式基础"><a href="#设计模式基础" class="headerlink" title="设计模式基础"></a>设计模式基础</h1><blockquote><p>JavaScript 在语言层面没有抽象类和接口的支持，没有类式继承，而是通过原型委托的方式来实现对象与对象之间的继承。</p></blockquote><h2 id="编程语言类型"><a href="#编程语言类型" class="headerlink" title="编程语言类型"></a>编程语言类型</h2><p><strong>编程语言按数据类型大体可分两大类：静态类型语言和动态类型语言</strong> 。静态类型语言在编译时就已经确定变量的类型，动态类型语言只有在程序运行的时候才能确定变量的类型。而JavaScript就是动态类型语言。</p><p><strong>静态语言优点：</strong></p><ol><li>编译时就能发现类型不匹配的错误，可以避免程序运行时有可能发生的错误。</li><li>编译器可针对对应变量的类型进行优化，提高程序运行速度。</li></ol><p><strong>静态语言缺点：</strong></p><ol><li>迫使程序员按照对应的规则来写程序，为每个变量规定数据类型分散程序员注意力，增加代码量。</li></ol><p><strong>动态语言优点：</strong></p><ol><li>代码简洁，程序员可以把更多精力放在业务逻辑处理上，更加专注</li><li>无需类型检测，灵活性高，只关注须对象的行为，无需关注对象本身</li><li>不必借助超类型来实现”面向接口编程”</li></ol><p><strong>动态语言缺点：</strong></p><ol><li>无法保证变量的类型，程序可能发生意想不到的bug.</li></ol><h2 id="面向对象的特征-参考JAVA"><a href="#面向对象的特征-参考JAVA" class="headerlink" title="面向对象的特征(参考JAVA)"></a>面向对象的特征(参考JAVA)</h2><p><strong>多态、继承、封装</strong></p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><blockquote><p>定义：同一操作作用于不同对象，产生不同的解释和不同的执行结果</p></blockquote><p>给不同对象发送同一个消息时，这些对象会根据这个消息分别给出不同的回应。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sendInfo = <span class="function"><span class="params">target</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ( target <span class="keyword">instanceof</span> ObjOne) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> ObjOne)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (target <span class="keyword">instanceof</span> ObjTwo) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> ObjTwo)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">ObjOne</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">ObjTwo</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"> sendInfo(<span class="keyword">new</span> ObjOne())</span><br><span class="line"> sendInfo(<span class="keyword">new</span> ObjTwo())</span><br></pre></td></tr></table></figure><p>上述代码段就体现了<code>多态性</code>,当发送 <code>sendInfo</code> 消息时每个对象做出不同的回应，但是这样的<code>多态性</code>很糟糕，如果再这个家一个对象 ObjThere 就得改动代码，对象越来越多时，<strong>修改的代码越多，出错的可能性越大。</strong></p><p>多态背后的思想是将 <code>做什么</code> 和 <code>谁去做以及怎样做</code>分开，也就是将 <code>不变的事物和可能变化的事</code> 分开。上述代码段中，每个对象都会打印日志,这是不变的，而各个对象输出哪些信息是变化的，将不变的隔离出来，把变化的封装起来，这样程序就又了扩展能力，是可生长的，这样就符合 <code>开发-封闭</code> 原则。<br><strong>下面是修改后的代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sendInfo = <span class="function"><span class="params">target</span> =&gt;</span> &#123;</span><br><span class="line">  target.log()</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">ObjOne</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">ObjOne.prototype.log = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>)&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ObjTwo</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">ObjTwo.prototype.log = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>)&#125;;</span><br><span class="line"></span><br><span class="line"> sendInfo(<span class="keyword">new</span> ObjOne())</span><br><span class="line"> sendInfo(<span class="keyword">new</span> ObjTwo())</span><br></pre></td></tr></table></figure><p>现在我们增加一个对象就不需要修改 <code>sendInfo</code>里的代码了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ObjThere</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">ObjThere.prototype.log = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>)&#125;;</span><br><span class="line">sendInfo(<span class="keyword">new</span> ObjThere())</span><br></pre></td></tr></table></figure><h4 id="类型检查和多态"><a href="#类型检查和多态" class="headerlink" title="类型检查和多态"></a>类型检查和多态</h4><p>类型检查是再表现出对象多态性之前一个绕不开的话题，<code>JavaScript</code> 是一门不必进行类型检查的动态类型语言，为了真正了解多态的目的，须从静态语言说起。</p><p>以JAVA为例，由于在编译时会进行类型检查，所有不能给变量赋予不同类型的值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str;</span><br><span class="line"></span><br><span class="line">str = <span class="string">'ab'</span></span><br><span class="line">str =<span class="number">2</span> <span class="comment">// error</span></span><br></pre></td></tr></table></figure></p><p>将之前的例子换成 Java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjOne</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">'a'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjTwo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">'b'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendInfo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span> <span class="params">(ObjOne objOne)</span> </span>&#123;</span><br><span class="line">      objOne.log()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String args[] )</span> </span>&#123;</span><br><span class="line">        SendInfo sendInfo = <span class="keyword">new</span> SnedInfo();</span><br><span class="line">        ObjOne objOne = <span class="keyword">new</span> ObjOne()</span><br><span class="line">        sendInfo(objOne) <span class="comment">// 'a'</span></span><br><span class="line">        ObjTwo objTwo = <span class="keyword">new</span> objTwo()</span><br><span class="line">        sendInfo(objTwo) <span class="comment">// error</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码段中 <code>sendInfo(objOne)</code> 可以顺利输出，而<code>sendInfo(objTwo)</code>因为传入的类不同而报错，为了解决这一问题，静态类性的面向对象通常被设计为可向上转型：<strong>当给一个类变量赋值时，这个变量的类型既可以用这个类本身，也可以用这个类的超类</strong> 就像描述一只咖啡猫在跑、一只波斯猫在跑，如果忽略它们具体类型，可以说 一只猫在跑。</p><p>同理，当 ObjOne 和 ObjTwo 对象的类型都被隐藏在超类 Objects 身后时， ObjOne 和 ObjTwo就能被交换使用，这就让对象表现出多态性，这种表现正是实现众多设计模式的目标。<br><strong>要实现多态归根结底得先要消除类型之间的耦合关系。一个JavaScript对象即可表示<code>ObjOne</code>又可表示<code>ObjThere</code>,这意味着JavaScript对象的多态性是与生俱来的</strong></p><h4 id="多态在面向对象程序设计中的作用"><a href="#多态在面向对象程序设计中的作用" class="headerlink" title="多态在面向对象程序设计中的作用"></a>多态在面向对象程序设计中的作用</h4><p><code>Martin Fowler</code> 在重构一书中写到：</p><blockquote><p>  多态的最根本好处在于，你不必再向对象询问“你是什么类” 而后根据得到的答案调用对象的某个行为————你只管调用该行为就是了，其他的一切多态机制都会为你安排妥当。</p></blockquote><p><strong>多态最根本的作用就是把过程化的条件分支语句转化为对象的多态性，从而消除条件分支语句</strong></p><p>就好比如在电影拍摄现场，导演喊出“action”时，每个人都做自己应该做的事，而不用导演走到每个人面前确认他们的职责，然后告诉他们该做什么。<strong>对象应该做什么并不是临时决定的，而是事先约定排练好的，每个对象该做什么，已经成为该对象的一个方法，被安装在对像内部，每个对像负责自己的行为，然后这些对象通过同一个消息，有条不紊的工作</strong><br>将行为分布在各个对象中，让他们各自负责自己的行为，这便是面向对象设计的优点。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p><strong>使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。</strong>通过继承创建的新类称为“子类”或“派生类”,被继承的类称为“基类”、“父类”或“超类”。继承的过程，就是从一般到特殊的过程。</p><blockquote><p>使用继承来得到多态效果,是让对象表现出多态性最常用的手段。继承通常包括<strong>实现继承(使用基类的属性和方法而无需额外编码的能力)和接口继承( 接口继承是指仅使用属性和方法的名称、但是子类必须提供实现的能力)和可视继承(子窗体（类）使用基窗体（类）的外观和实现代码的能力)</strong></p></blockquote><p><strong>注意：</strong> 使用继承时,两个类之间的关系应该是“属于”关系。</p><p>将上述JAVA例子进一步封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Objects</span> </span>&#123; <span class="comment">//抽象出一个超类</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjOne</span> <span class="keyword">extends</span> <span class="title">Objects</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">'a'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjTwo</span> <span class="keyword">extends</span> <span class="title">Objects</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">'b'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendInfo</span> </span>&#123; <span class="comment">//让 log 方法接收 Objects 类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span> <span class="params">(Objects objects)</span> </span>&#123;</span><br><span class="line">      objects.log()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String args[] )</span> </span>&#123;</span><br><span class="line">        SendInfo sendInfo = <span class="keyword">new</span> SnedInfo();</span><br><span class="line">        Objects  objOne = <span class="keyword">new</span> ObjOne();</span><br><span class="line">        Objects  objTwo = <span class="keyword">new</span> objTwo();</span><br><span class="line">        sendInfo(objOne) <span class="comment">// 'a'</span></span><br><span class="line">        sendInfo(objTwo) <span class="comment">// 'b'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码段中 ObjOne 和 ObjTwo 继承自 Objects 类即可通过这个桥梁来使用对应的方法。</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装是实现面向对象程序设计的第一步，将数据或函数等集合在一个个单元中（在java中称之为类，JavaScript中就是一个函数对象）</p><blockquote><p>封装是隐藏数据、实现细节、设计细节以及对象的类型等，是代码模块化；是把过程和数据包围起来，只能通过已定义的方法访问数据。<strong>把客观事物封装成抽象的类，并且只对可信的类或对象来操作这个类的数据和方法，而对不可信的对象进行信息隐藏</strong></p></blockquote><p><strong>封装的意义：</strong></p><ol><li>保护数据成员，不然其他对象或类直接访问或修改，只能通过提供的接口访问，防止用户无意破坏（数据封装）</li><li>方法的细节对外是隐藏的，只要接口不变，内容的修改不会影响到外部的调用这（封装实现）</li></ol><h3 id="封装数据"><a href="#封装数据" class="headerlink" title="封装数据"></a>封装数据</h3><p>在许多语言的对象系统中，封装数据是由语法解析来实现的比如 JAVA 提供了 public 、private、protected等关键字来设置不同的访问权限。</p><p><strong>JavaScript 中并没有提供这些关键字，只能依赖作用域来实现封装特性，而且只能模拟出 public、和private</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myObject=<span class="function">(<span class="params">(</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> __name = <span class="string">"owen"</span>; <span class="comment">// private</span></span><br><span class="line">    <span class="keyword">return</span> &#123;  <span class="comment">// publice 对象</span></span><br><span class="line">        getName()&#123;</span><br><span class="line">            <span class="keyword">return</span> __name</span><br><span class="line">        &#125;,</span><br><span class="line">        setName(value)&#123;</span><br><span class="line">            <span class="keyword">return</span> __name = value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line">myObject.getName() <span class="comment">// "owen"</span></span><br><span class="line">myObject.setName(<span class="string">'gao'</span>)</span><br><span class="line">myObject.getName() <span class="comment">// "gao"</span></span><br></pre></td></tr></table></figure></p><p>ES6 中除了 let 、const 外还可使用 Symbol 类型建立私有属性</p><h3 id="封装实现"><a href="#封装实现" class="headerlink" title="封装实现"></a>封装实现</h3><p>封装使对象内部的变化对其他对象或类而言是透明不可见的，对象对他自己的行为负责，其他对象或类不用关心他内部的实现，对象之间只通过暴露 API接口来通信。</p><p>比如 Array中的forEach 方法遍历一个聚合对象，我们不用关心 forEach 内部是争议实现的，只要它提供的功能正确就行，即使修改它内部的代码，只要调用方式没有变化就不用关系它内部实现的改变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.forEach(<span class="function"><span class="params">val</span> =&gt;</span> <span class="built_in">console</span>.log(val))</span><br></pre></td></tr></table></figure><p>封装在更重要的层面体现为封装变化《设计模式》一书曾提到：</p><blockquote><p>考虑你的设计中哪些地方可能变法，这种方式与关注会导致重新设计的原因相反。它不是考虑什么时候会迫使你的设计改变，而是考虑你怎么样才能够在不重新设计的情况下进行改变。这里的关键在于封装发送变化的概念，这是许多设计模式的主题</p></blockquote><p>《设计模式》一书中归纳总结了23种设计模式，从意图上可将这些模式划分为 <code>创建型模式</code>、<code>结构型模式</code>和<code>行为型模式</code>。</p><p>通过封装变化的方式，把系统中稳定不变的部分和容易变化的部分隔离开来，在系统演变过程中，只需替换哪些容易变化的部分，如果这些部分是已经封装好的，替换起来也相对容易；这样可以很大程度的保证程序的稳定性或可扩展性。</p><h2 id="面向对象基本原则"><a href="#面向对象基本原则" class="headerlink" title="面向对象基本原则"></a>面向对象基本原则</h2><h3 id="单一职责原则（Single-Responsibility-Prunciple）"><a href="#单一职责原则（Single-Responsibility-Prunciple）" class="headerlink" title="单一职责原则（Single Responsibility Prunciple）"></a>单一职责原则（Single Responsibility Prunciple）</h3><blockquote><p>一个类只允许有一个职责，即只有一个导致该类变更的原因。</p></blockquote><p>简单来说一个类只专注做一件事。并不是说一个类只有一个函数，而是说这个类中的函数所做的工作必须高度相关（高内聚）</p><p><strong>不过这个原则很容易违背，因为可能由于某种原因，原来功能单一的类需要被细化成颗粒更小的职责1跟职责2，不过这个拆的粒度可能因人而已，有时候并不需要拆的过细，不要成了为设计而设计。所以在每次迭代过程中可能需要重新梳理重构之前编写的代码，将不同的职责封装到不同的类或者模块中。</strong></p><p><strong>优点：</strong></p><ol><li>类的复杂性降低，实现什么职责都有清晰明确的定义,可读性提高，可维护性提高；</li><li>变更引起的风险降低，变更是必不可少的，如果接口的单一职责做得好，一个接口修改只对相应的实现类有影响，对其他的接口无影响，这对系统的扩展性、维护性都有非常大的帮助。</li></ol><h3 id="开发关闭原则（Open-Closed-Principle）"><a href="#开发关闭原则（Open-Closed-Principle）" class="headerlink" title="开发关闭原则（Open Closed Principle）"></a>开发关闭原则（Open Closed Principle）</h3><blockquote><p>一个软件实体应该是可以扩展的，但是不可修改。</p></blockquote><p><strong>在软件开发过程中，永远不变的就是变化。因此当软件需要变化时，我们应该尽量通过扩展的方式来实现变化，而不是通过修改已有的代码来实现。封装变化，是实现开放封闭原则的重要手段，对于经常发生变化的状态，一般将其封装为一个抽象，拒绝滥用抽象，只将经常变化的部分进行抽象。</strong><br><strong>优点：</strong></p><ol><li>增加稳定性。</li><li>可扩展性高。</li></ol><h3 id="里氏替换原则-（Liskov-Substitution-Principle）"><a href="#里氏替换原则-（Liskov-Substitution-Principle）" class="headerlink" title="里氏替换原则 （Liskov Substitution Principle）"></a>里氏替换原则 （Liskov Substitution Principle）</h3><blockquote><p>子类必须能够替换掉它们的基类，而程序执行效果不变。</p></blockquote><p><strong>所有使用基类代码的地方，如果换成子类对象的时候还能够正常运行，则满足这个原则，否则就是继承关系有问题，应该废除两者的继承关系，这个原则可以用来判断我们的对象继承关系是否合理。</strong>尽量把父类设计为抽象类或者接口，让子类继承父类或实现父接口，并实现在父类中声明的方法.</p><p><strong>优点：</strong></p><ol><li>提高代码的重用性；</li><li>代码共享，减少创建类的工作量，每个子类都拥有父类的方法和属性；</li><li>提高代码的可扩展性，实现父类的方法就可以“为所欲为”了，很多开源框架的扩展接口都是通过继承父类来完成的；</li><li>可以用来判断我们的对象继承关系是否合理,约束继承在使用上的泛滥。</li></ol><p><strong>缺点：</strong></p><ol><li>降低代码的灵活性。子类必须拥有父类的属性和方法，让子类自由的世界中多了些约束；</li><li>增强了耦合性。当父类的常量、变量和方法被修改时，必需要考虑子类的修改，而且在缺乏规范的环境下，这种修改可能带来非常糟糕的结果——大片的代码需要重构。</li></ol><h3 id="依赖倒置原则-（Dependence-Inversion-Principle）"><a href="#依赖倒置原则-（Dependence-Inversion-Principle）" class="headerlink" title="依赖倒置原则 （Dependence Inversion Principle）"></a>依赖倒置原则 （Dependence Inversion Principle）</h3><blockquote><p>高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。</p></blockquote><p>我们经常说“针对接口编程”，这里的接口就是抽象，我们应该依赖接口，而不是依赖具体的实现来编程。<br>假设B是较A低的模块，但B需要使用到A的功能，这个时候，B不应当直接使用A中的具体类；而应当由B定义一抽象接口，并由A来实现这个抽象接口，B只使用这个抽象接口；这样就达到了依赖倒置的目的，B也解除了对A的依赖，反过来是A依赖于B定义的抽象接口。通过上层模块难以避免依赖下层模块，假如B也直接依赖A的实现，那么就可能造成循环依赖</p><p><strong>高低应该是从开发者当前的角度来看的，不过DIP原则从不同角度来看它都适合且需要被遵守。假如我们高层模块直接依赖于底层模块，带来的后果是每次底层模块改动，高层模块就会受到影响，整个系统就变得不稳定，这也违反了开放关闭原则。</strong></p><p> <strong>通常我们会通过引入中间层的方式来解决这个问题，这个中间层相当于一个抽象接口层，高层模块和底层模块都依赖于这个中间层来交互，这样只要中间抽象层保持不变，底层模块改变不会影响到高层模块，这就满足了开放关闭原则；而且假如高层模块跟底层模块同时处于开发阶段，这样有了中间抽象层之后，每个模块都可以针对这个抽象层的接口同时开发，高层模块就不需要等到底层模块开发完毕才能继续了。</strong></p><p><strong>优点：</strong> 通过抽象来搭建框架，建立类和类的关联，以减少类间的耦合性。而且以抽象搭建的系统要比以具体实现搭建的系统更加稳定，扩展性更高，同时也便于维护。</p><h3 id="接口隔离原则-（Interface-Segregation-Principle）"><a href="#接口隔离原则-（Interface-Segregation-Principle）" class="headerlink" title="接口隔离原则 （Interface Segregation Principle）"></a>接口隔离原则 （Interface Segregation Principle）</h3><blockquote><p>多个特定的客户端接口要好于一个通用性的总接口。</p></blockquote><p><strong>应当为客户端提供尽可能小的单独的接口，而不是提供大的总的接口。</strong></p><p><strong>需要注意的是：</strong>接口的粒度也不能太小。如果过小，则会造成接口数量过多，使设计复杂化。<br><strong>优点：</strong> 避免同一个接口里面包含不同类职责的方法，接口责任划分更加明确，符合高内聚低耦合的思想。<br>接口是设计时对外部设定的约定，通过分散定义多个接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。</p><h3 id="迪米特法则-（Law-Of-Demeter）-或-最少知识原则（Least-Knowledge-Principle）"><a href="#迪米特法则-（Law-Of-Demeter）-或-最少知识原则（Least-Knowledge-Principle）" class="headerlink" title="迪米特法则 （Law Of Demeter） 或 最少知识原则（Least Knowledge Principle）"></a>迪米特法则 （Law Of Demeter） 或 最少知识原则（Least Knowledge Principle）</h3><blockquote><p>一个对象应该对其他对象有最少的了解;一个类应该对自己需要耦合或调用的类知道得最少。<br><strong>类的内部如何实现、如何复杂都与调用者或者依赖者没关系，调用者或者依赖者只需要知道他需要的方法即可，其他的我一概不关心。类与类之间的关系越密切，耦合度越大，当一个类发生改变时，对另一个类的影响也越大。</strong><br><strong>优点：</strong></p><ol><li>降低复杂度；降低耦合度；增加稳定性。</li><li>减少类与类之间的关联程度，让类与类之间的协作更加直接。</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是设计模式？&quot;&gt;&lt;a href=&quot;#什么是设计模式？&quot; class=&quot;headerlink&quot; title=&quot;什么是设计模式？&quot;&gt;&lt;/a&gt;什么是设计模式？&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;模式&lt;/code&gt; 起源于建筑学。20世纪70年代，哈
      
    
    </summary>
    
      <category term="design patterns" scheme="https://owen027.github.io/categories/design-patterns/"/>
    
    
      <category term="Pattern intro" scheme="https://owen027.github.io/tags/Pattern-intro/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 学习</title>
    <link href="https://owen027.github.io/2019/07/05/nginx/"/>
    <id>https://owen027.github.io/2019/07/05/nginx/</id>
    <published>2019-07-05T03:12:21.000Z</published>
    <updated>2019-07-21T15:53:32.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是-Nginx"><a href="#什么是-Nginx" class="headerlink" title="什么是 Nginx"></a>什么是 Nginx</h1><p>  Nginx 是一款轻量级高性能的web 和 反向代理服务器，类似于<code>Apache</code>，也是一个 IMAP/POP3/SMTP （电子邮件）代理服务器。，由俄罗斯程序设计师 <code>Igor Sysoev</code>开发；<br>在高连接并发的情况下，Nginx能够支持高达 50000 个并发连接数的响应，是 Apache 服务器不错的替代品。</p><p><strong>nginx做为HTTP服务器，有以下几项基本特性：</strong></p><pre><code>1. 处理静态文件，索引文件以及自动索引；打开文件描述符缓冲．2. FastCGI和反向代理加速(无缓存)，简单的负载均衡和容错．3. 模块化的结构。包括gzipping, byte ranges, chunked responses,以及 SSI-filter等filter。如果由FastCGI或其它代理服务器处理单页中存在的多个SSI，则这项处理可以并行运行，而不需要相互等待。4. 支持SSL 和 TLSSNI．</code></pre><p>Nginx支持热部署。它的启动特别容易, 并且几乎可以做到7*24不间断运行，即使运行数个月也不需要重新启动。你还能够在不间断服务的情况下，对软件版本进行进行升级。<br>nginx是异步的，多个连接（万级别）可以对应一个进程。 apache是同步多进程模型，一个连接对应一个进程；<br><strong>nginx的优势是处理静态请求，cpu内存使用率低，apache适合处理动态请求，所以现在一般前端用nginx作为反向代理抗住压力，apache 作为后端处理动态请求。</strong></p><p><strong>正向代理：</strong> 服务器代理客户端向服务端发送请求，并将数据分发给客户端，服务端无法知道客户端的信息<br><strong>反向代理：</strong> 服务器代理服务端接收客户端的请求，并分发给服务器（分布式部署），反向代理隐藏了服务器的信息。<br><strong>负载均衡：</strong>  客户端发送的、Nginx反向代理服务器接收到的请求数量，就是负载量。请求数量按照一定的规则进行分发到不同的服务器处理的规则，就是一种均衡规则，即代理服务器将请求按一定的规则分发的过程就是负载均衡。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>下载</strong><br><a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">点击进入官网下载</a> Windows版本,解压至 C盘</p><p><strong>启动</strong><br>双击 <code>nginx.exe</code> 或者 打开 CMD 进入 nginx 目录 输入 <code>start nginx</code>,如果启用防火墙，允许访问即可</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>须使用CMD 进入跟目录才能使用 nginx<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nginx -h //查看帮助</span><br><span class="line">nginx -v // 查看版本</span><br><span class="line">nginx -s stop  //停用</span><br><span class="line">nginx -s reload //重载配置，重启进程</span><br><span class="line">nginx -s reopen //重启日志</span><br></pre></td></tr></table></figure></p><h2 id="代理配置"><a href="#代理配置" class="headerlink" title="代理配置"></a>代理配置</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"><span class="comment">#开启进程数 &lt;=CPU数   </span></span><br><span class="line">worker_processes  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"><span class="comment">#进程号保存文件  </span></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    <span class="comment">#每个进程最大连接数（最大连接=连接数x进程数）每个worker允许同时产生多少个链接，默认1024 </span></span><br><span class="line">    worker_connections  <span class="number">1024</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    <span class="comment">#文件扩展名与文件类型映射表  </span></span><br><span class="line">    include       mime.types;</span><br><span class="line">    <span class="comment">#默认文件类型  </span></span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#日志文件输出格式 这个位置相对于全局设置  </span></span><br><span class="line">    <span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">    <span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">    <span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#请求日志保存位置</span></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#打开发送文件 </span></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#连接超时时间  </span></span><br><span class="line">    keepalive_timeout  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#打开gzip压缩  </span></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        <span class="comment">#监听端口，默认是80端口  </span></span><br><span class="line">        <span class="keyword">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="comment">#监听域名 </span></span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line">        <span class="comment">#nginx访问日志放在logs/host.access.log下，并且使用main格式（可以自定义格式）</span></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#如果没有location更明确的匹配访问路径的话，访问请求都会被该location处理</span></span><br><span class="line">        location / &#123;</span><br><span class="line">            <span class="comment">#root指定nginx的根目录为/usr/local/nginx/html  </span></span><br><span class="line">            root   html;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#默认访问文件，欢迎页先去html目录下找index.html，如果找不到再去找index.htm</span></span><br><span class="line">            <span class="keyword">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#错误页面及其返回地址，错误码为500、502、503、504都会返回50.html错误页面</span></span><br><span class="line">        error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /<span class="number">50</span>x.html;</span><br><span class="line">        <span class="comment">#location后面是"="的话，说明是精确匹配  </span></span><br><span class="line">        location = <span class="regexp">/50x.html &#123;</span></span><br><span class="line"><span class="regexp">            root   html;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line"><span class="regexp">        #</span></span><br><span class="line"><span class="regexp">        #location ~ \.php$ &#123;</span></span><br><span class="line"><span class="regexp">        #    proxy_pass   http:/</span><span class="regexp">/127.0.0.1;</span></span><br><span class="line"><span class="regexp">        #&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line"><span class="regexp">        #</span></span><br><span class="line"><span class="regexp">        #location ~ \.php$ &#123;</span></span><br><span class="line"><span class="regexp">        #    root           html;</span></span><br><span class="line"><span class="regexp">        #    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line"><span class="regexp">        #    fastcgi_index  index.php;</span></span><br><span class="line"><span class="regexp">        #    fastcgi_param  SCRIPT_FILENAME  /scripts</span>$fastcgi_script_name;</span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache's document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx's one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要监听多个端口和域名 可配置多个 <code>server</code>。</p><p><strong>参考文章:</strong><br><a href="http://www.nginx.cn/doc/" target="_blank" rel="noopener">Nginx 中文文档</a><br><a href="https://www.cnblogs.com/wcwnina/p/8728391.html" target="_blank" rel="noopener">Nginx 相关介绍</a><br><a href="https://www.jianshu.com/p/5eab0f83e3b4" target="_blank" rel="noopener">深入浅出Nginx</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是-Nginx&quot;&gt;&lt;a href=&quot;#什么是-Nginx&quot; class=&quot;headerlink&quot; title=&quot;什么是 Nginx&quot;&gt;&lt;/a&gt;什么是 Nginx&lt;/h1&gt;&lt;p&gt;  Nginx 是一款轻量级高性能的web 和 反向代理服务器，类似于&lt;code&gt;A
      
    
    </summary>
    
      <category term="Nginx" scheme="https://owen027.github.io/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="https://owen027.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>for,for...of, for...in, array iteration 运行速度测试</title>
    <link href="https://owen027.github.io/2019/07/03/performance/"/>
    <id>https://owen027.github.io/2019/07/03/performance/</id>
    <published>2019-07-03T14:35:43.000Z</published>
    <updated>2019-07-27T14:28:23.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="for-for…of-for…in-array-iteration-运行速度测试"><a href="#for-for…of-for…in-array-iteration-运行速度测试" class="headerlink" title="for,for…of, for…in, array iteration 运行速度测试"></a>for,for…of, for…in, array iteration 运行速度测试</h1><ul><li>由于不同浏览器，不同版本性能不一，且控制台本质是是套用了一大堆<a href="https://www.zhihu.com/question/29352114/answer/44050599" target="_blank" rel="noopener">eval</a>，沙盒化程度高,所以需使用<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node</a>环境测试来提高准确性<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 准备待测数组</span></span><br><span class="line"><span class="keyword">const</span> NUM = <span class="number">1e7</span>;</span><br><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(NUM).fill(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// for 测试</span></span><br><span class="line"><span class="keyword">let</span> arr1 =[];</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'for'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  arr1.push(arr[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'for'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Chrome/75.0.3770.100 Safari/537.36 环境</span></span><br><span class="line"><span class="comment">//VM1324:10 for: 576.733154296875ms</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// node v10.11.0 环境</span></span><br><span class="line"><span class="comment">// for:  412.087ms</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="for-几种写法"><a href="#for-几种写法" class="headerlink" title="for 几种写法"></a>for 几种写法</h2><ul><li><p><strong>常规写法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = []</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'one'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++ )&#123;</span><br><span class="line">    arr1.push(arr[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'one'</span>)</span><br></pre></td></tr></table></figure><p>   数组长度是会动态变化，每次循环会重新计算length长度，可能会出现死循环</p></li><li><p><strong>cache arr.length</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++ )&#123;</span><br><span class="line">     arr1.push(arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   缓存length 值，无需重新计算length</p></li><li><p><strong>倒序</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = arr.length<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">     arr1.push(arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   比第二种方法更简洁</p></li><li><p><strong>倒叙简洁版</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = arr.length<span class="number">-1</span>; i--;)&#123;</span><br><span class="line">     arr1.push(arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  两个分号之间的表达式为 true 会一直执行直到 判断为 false (i = 0)</p></li><li><p><strong>正序简洁版</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len;len = arr[i++]; )&#123;</span><br><span class="line">     arr1.push(arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   当 i 大于等于数组长度或arr[i++]值为false时 将停指循环，同时由于arr.length动态变化时可能会造成死循环</p></li></ul><h2 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> arr)&#123;</span><br><span class="line">     arr1.push(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>es6推出的迭代器，最简洁，可以是用 break，continue和return 终止循环</p><h2 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> arr)&#123;</span><br><span class="line">     arr1.push(arr[key])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for…in 一般用于遍历对象，他会将本身属性和原型链上的属性（除系统内置属性）全部遍历出来即便是不可枚举属性（enumerable:false), 可以通过 <code>items.hasOwnProperty</code>来遍历本身属性,由于查询到自己的原型链上，所以性能方面比较差</p><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    arr1.push(value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>数组的迭代方法，没有返回值</p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span>  arr1.push(value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>浅拷贝原数组，并且返回一个新数组</p><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><table><thead><tr><th>测试次数</th><th>常规for</th><th>cache for</th><th>倒序 for</th><th>倒叙简版 for</th><th>正序简版 for</th><th>for..of</th><th>for..in</th><th>forEach</th><th>map</th></tr></thead><tbody><tr><td>1</td><td>542.121ms</td><td>573.618ms</td><td>764.181ms</td><td>755.961ms</td><td>571.464ms</td><td>945.199ms</td><td>4077.020ms</td><td>625.859ms</td><td>3573.946ms</td></tr><tr><td>2</td><td>430.008ms</td><td>541.933ms</td><td>524.474ms</td><td>668.276ms</td><td>553.475ms</td><td>897.442ms</td><td>4402.246ms</td><td>605.271ms</td><td>2732.859ms</td></tr><tr><td>3</td><td>409.531ms</td><td>661.765ms</td><td>534.167ms</td><td>655.481ms</td><td>600.939ms</td><td>1141.093ms</td><td>3806.704ms</td><td>584.712ms</td><td>2779.192ms</td></tr><tr><td>4</td><td>412.972ms</td><td>643.868ms</td><td>536.026ms</td><td>674.081ms</td><td>725.149ms</td><td>930.655ms</td><td>3201.387ms</td><td>599.780ms</td><td>3152.499ms</td></tr><tr><td>5</td><td>417.034ms</td><td>624.323ms</td><td>520.674ms</td><td>799.568ms</td><td>574.713ms</td><td>943.449ms</td><td>3261.512ms</td><td>587.182ms</td><td>2954.195ms</td></tr><tr><td>6</td><td>525.771ms</td><td>955.737ms</td><td>526.208ms</td><td>771.443ms</td><td>531.962ms</td><td>954.199ms</td><td>4351.009ms</td><td>608.264ms</td><td>2888.752ms</td></tr><tr><td>7</td><td>498.039ms</td><td>602.703ms</td><td>555.588ms</td><td>531.464ms</td><td>541.599ms</td><td>916.678ms</td><td>3264.334ms</td><td>596.168ms</td><td>2834.663ms</td></tr><tr><td>8</td><td>431.694ms</td><td>523.381ms</td><td>544.974ms</td><td>527.472ms</td><td>517.833ms</td><td>1049.283ms</td><td>3744.972ms</td><td>600.286ms</td><td>3467.499ms</td></tr><tr><td>9</td><td>417.521ms</td><td>518.093ms</td><td>547.404ms</td><td>611.024ms</td><td>594.503ms</td><td>767.059ms</td><td>4979.348ms</td><td>601.420ms</td><td>3638.023ms</td></tr><tr><td>10</td><td>424.806ms</td><td>557.961ms</td><td>535.541ms</td><td>837.561ms</td><td>541.882ms</td><td>772.686ms</td><td>3284.424ms</td><td>602.443ms</td><td>3599.642ms</td></tr><tr><td>11</td><td>409.402ms</td><td>521.131ms</td><td>534.265ms</td><td>517.709ms</td><td>551.397ms</td><td>752.101ms</td><td>3228.123ms</td><td>629.625ms</td><td>3535.545ms</td></tr><tr><td>12</td><td>425.362ms</td><td>532.882ms</td><td>406.637ms</td><td>522.287ms</td><td>570.259ms</td><td>914.135ms</td><td>3449.256ms</td><td>800.857ms</td><td>3429.123ms</td></tr><tr><td>平均值</td><td>439.2738ms</td><td>578.3565ms</td><td>553.1468ms</td><td>651.7057ms</td><td>507.8718ms</td><td>909.0785ms</td><td>3,686.96ms</td><td>605.6298ms</td><td>3,221.5056ms</td></tr><tr><td>堆值差</td><td>357245536 Byte</td><td>357245808 Byte</td><td>357245624 Byte</td><td>357245872 Byte</td><td>357246824 Byte</td><td>199268080 Byte</td><td>757187208 Byte</td><td>357244456 Byte</td><td>437247640 Byte</td></tr></tbody></table><p><strong>测试总结</strong></p><ol><li><strong>运行效率:</strong> <code>常规for</code> &gt; <code>正序简版 for</code>&gt; <code>倒序 for</code> &gt; <code>cache for</code> &gt; <code>倒叙简版 for</code>&gt; <code>forEach</code> &gt; <code>for..of</code>    &gt; <code>map</code> &gt; <code>for..in</code></li><li>几种普通 for 循环占用内存相差不大, 而 <code>for..of</code> 占用运行内存最小</li><li><code>for..in</code> 性能最差，内存占用高，速度很慢</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;for-for…of-for…in-array-iteration-运行速度测试&quot;&gt;&lt;a href=&quot;#for-for…of-for…in-array-iteration-运行速度测试&quot; class=&quot;headerlink&quot; title=&quot;for,for…of, 
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://owen027.github.io/categories/JavaScript/"/>
    
    
      <category term="Iteration" scheme="https://owen027.github.io/tags/Iteration/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript定时器</title>
    <link href="https://owen027.github.io/2019/06/28/timer/"/>
    <id>https://owen027.github.io/2019/06/28/timer/</id>
    <published>2019-06-28T08:31:41.000Z</published>
    <updated>2019-07-27T14:28:23.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是定时器"><a href="#什么是定时器" class="headerlink" title="什么是定时器"></a>什么是定时器</h1><ul><li>在一段时间间隔后执行一个函数或执行一段代码的方法</li><li>JavaScript 原生提供几种定时器 <code>setInterval</code>、<code>setTimeout</code> 、<code>requestAnimationFrame</code></li><li>执行函数中的作用域未全局作用域this指向全局，可通过 <code>bind</code> 方法给执行函数传递参数或指定作用域 (严格模式下，setTimeout( )的回调函数里面的this仍然默认指向window对象， 并不是undefined)</li></ul><h2 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h2><ul><li>每相隔一段时间间隔执行一个函数或执行一段代码的方法</li><li>通过<code>clearInterval</code>方法来取消定时器<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timerInterID =  <span class="built_in">window</span>.setInterval(callback,delay[,param...])</span><br><span class="line"> setTimeout( clearInterval.bind(<span class="literal">null</span>,timerInterID),<span class="number">1000</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>callback</strong> 重复执行的函数或代码段（不推荐使用一段字符串构成的代码，应为这样做不安全，会被不法分子利用）</li><li><strong>delay</strong> 时间间隔，单位为毫秒（ms）实际间隔可能会稍长（最小间隔是4ms）</li><li><strong>timerInterID</strong> 每次调用<code>setInterval</code>方法返回的唯一 ID，可通过调用 <code>clearInterval</code>方法来清除<code>setInterval</code>方法</li><li><strong>param1, …, paramN</strong> 传递给执行函数（callback）的参数 (<label>IE9 及更早的 IE 浏览器不支持向回调函数传递额外参数。如果你想要在IE中达到同样的功能,你必须使用一种兼容代码</label> )</li></ul><h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h2><ul><li>在一段时间间隔后执行一个函数或执行一段代码的方法</li><li>通过<code>clearTimeout</code>方法来清除定时器<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timerTimeID = setTimeout(callback,delay[,param1, ..., paramN ])</span><br></pre></td></tr></table></figure></li></ul><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>callback</strong> 重复执行的函数或代码段（不推荐使用一段字符串构成的代码，应为这样做不安全，会被不法分子利用）</li><li><strong>delay</strong> 时间间隔，单位为毫秒（ms），默认为0实际间隔可能会稍长（最小间隔为 4ms ）</li><li><strong>timerTimeID</strong> 每次调用<code>setTimeout</code>方法返回的唯一 ID，可通过调用 <code>clearTimeout</code>方法来清除<code>setTimeout</code>方法</li><li><strong>param1, …, paramN</strong> 传递给执行函数（callback）的参数 (<label>IE9 及更早的 IE 浏览器不支持向回调函数传递额外参数。如果你想要在IE中达到同样的功能,你必须使用一种兼容代码</label> )</li></ul><h2 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h2><ul><li>类似于<code>setInterval</code>方法，执行动画时推荐使用</li><li>会在浏览器下次重绘前执行函数</li><li>执行间隔通常是每秒60次，当运行在后台标签页或隐藏在 <code>iframe</code>时，会暂停调用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> frameID = <span class="built_in">window</span>.requestAnimationFrame(callback)</span><br><span class="line">setTimeout(cancelAnimationFrame.bind(<span class="literal">null</span>,FrameID),<span class="number">1000</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>callback</strong> 更新动画帧所调用的函数</li><li>一帧大约 16.7ms</li></ul><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p><img src="/static/img/requestAnimationFrame.png" alt="requestAnimationFrame"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是定时器&quot;&gt;&lt;a href=&quot;#什么是定时器&quot; class=&quot;headerlink&quot; title=&quot;什么是定时器&quot;&gt;&lt;/a&gt;什么是定时器&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在一段时间间隔后执行一个函数或执行一段代码的方法&lt;/li&gt;
&lt;li&gt;JavaScript 原生提
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://owen027.github.io/categories/JavaScript/"/>
    
    
      <category term="timer" scheme="https://owen027.github.io/tags/timer/"/>
    
  </entry>
  
  <entry>
    <title>闭包（closure）</title>
    <link href="https://owen027.github.io/2019/06/27/closure/"/>
    <id>https://owen027.github.io/2019/06/27/closure/</id>
    <published>2019-06-27T06:15:07.000Z</published>
    <updated>2019-07-21T15:53:32.516Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是闭包（closure）？"><a href="#什么是闭包（closure）？" class="headerlink" title="什么是闭包（closure）？"></a>什么是闭包（closure）？</h1><p>在理解闭包前，须理解变量<a href="https://zh.wikipedia.org/zh-hans/%E4%BD%9C%E7%94%A8%E5%9F%9F" target="_blank" rel="noopener">作用域</a>。作用域分全局和局部作用域，是指代码中定义变量的区域。(变量有效访问的范围。)</p><p><strong>静态作用域</strong></p><blockquote><p>静态作用域又叫做词法作用域，采用词法作用域的变量叫词法变量。词法变量有一个在编译时静态确定的作用域。(JavaScript 采用的是词法作用域) 词法变量的作用域可以是一个函数或一段代码，该变量在这段代码区域内可见（visibility）；在这段区域以外该变量不可见（或无法访问）。词法作用域里，取变量的值时，会检查函数定义时的文本环境，捕捉函数定义时对该变量的绑定。</p></blockquote><p><strong>动态作用域</strong></p><blockquote><p>动态作用域的变量叫做动态变量。程序正在执行定义了动态变量的代码段，那么在这段时间内，该变量一直存在；代码段执行结束，该变量便消失。(函数的作用域在函数调用时才决定。)动态作用域里，取变量的值时，会由内向外逐层检查函数的调用链，并打印第一次遇到的那个绑定的值。显然，最外层的绑定即是全局状态下的那个值。</p></blockquote><p>变量无权访问子作用域，只能访问自己和父级以上的作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"Owen"</span>; <span class="comment">// 全局变量</span></span><br><span class="line"><span class="keyword">var</span> sex = <span class="string">"Man"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name) <span class="comment">// "Owen"</span></span><br><span class="line">    <span class="keyword">var</span> age = <span class="string">"18"</span></span><br><span class="line">    <span class="keyword">var</span> sex = <span class="string">"man"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(sex) <span class="comment">// "man"  优先访问 局部变量 sex</span></span><br><span class="line">&#125;</span><br><span class="line">person()</span><br><span class="line"><span class="built_in">console</span>.log(age) <span class="comment">//   age is not defined  无法访问 person 中的 age 局部变量</span></span><br></pre></td></tr></table></figure><h2 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h2><p>当函数执行时，会创建一个执行期上下文(即作用域)的对象AO(存储在<code>[[scope]]</code>中), 一个新的AO指向 定义了一个函数执行时的环境。<br>函数执行时对应的AO, 是独一无二的，每次调用函数就创建一个OA， 函数执行完毕 AO的指向就会销毁</p><p><code>[[scope]]</code>: 每个函数都是对象，对象中有些属性可访问，有些不可以，<code>[[scope]]</code>就不可访问，它存储了运行期上下文的集合(<code>[GO,AO]</code>)。<br>作用域链：就是<code>[[scope]]</code>中所存储的AO对象集合，呈链式链接</p><h3 id="查找变量："><a href="#查找变量：" class="headerlink" title="查找变量："></a>查找变量：</h3><p>函数刚定义就存储了 所在环境的执行期上下文,执行时 创建自己的AO</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);<span class="comment">// function</span></span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">123</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">      <span class="built_in">console</span>.log(a)<span class="comment">// 123  函数声明已提升所以不用管</span></span><br><span class="line">    <span class="keyword">var</span> b =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(b);<span class="comment">//function 因为是函数表达式，只提升了 变量b， 这样的函数体不会提升</span></span><br><span class="line">&#125;</span><br><span class="line">fun(<span class="number">1</span>); <span class="comment">//函数 123 123 函数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">代码执行</span></span><br><span class="line"><span class="comment">1. 会创建 一个（全局为GO）AO(Activation  Object)对象（执行期上下文/作用域）一个存储空间库</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2. 找形参和变量声明，将形参和变量名作为AO的属性名，值为undefined,重复的只用写一个</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3. 将实参值和形参统一</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4. 在函数体里找函数声明，值为函数体</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">5. if/return 不用管 声明还是会提升</span></span><br><span class="line"><span class="comment">AO&#123;</span></span><br><span class="line"><span class="comment">   a:function a ()&#123;&#125;;</span></span><br><span class="line"><span class="comment">   b:undefined</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">记住函数是一等公民权限最高</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>函数内部声明变量的时候，一定要使用var，let or const命令。如果不用的话，你实际上声明了一个全局变量！</strong></p><h3 id="变量的生命周期"><a href="#变量的生命周期" class="headerlink" title="变量的生命周期"></a>变量的生命周期</h3><p><strong>内存生命周期：</strong></p><ol><li><p>分配你所需要的内存</p></li><li><p>使用分配到的内存（读, 写）</p></li><li><p>不需要时将其释放/归还</p></li></ol><p><strong>全局变量可永久访问，除非主动销毁，而局部变量在函数运行结束时就会随之销毁，当局部变量还能被外界访问时，将会保留，不被销毁</strong></p><h2 id="闭包简单理解："><a href="#闭包简单理解：" class="headerlink" title="闭包简单理解："></a>闭包简单理解：</h2><p>在Javascript语言中，只有函数内部的子函数才能访问该函数的变量，而定义在一个函数内部的函数并且外部能接收到这个函数，那么这个函数就是闭包。(能够读取其他函数内部变量的函数。)</p><ul><li>闭包是由函数以及创建该函数的词法环境组合而成。这个环境包含了这个闭包创建时所能访问的所有局部变量。</li></ul><p><strong>特点：</strong></p><ol><li>函数套函数，并且外部能访问嵌套函数。</li><li>父函数被销毁 的情况下，子函数的<code>[[scope]]</code>中仍然保留着父级的变量对象和作用域链，因此可以继续访问父级的变量对象,进而改变父作用域内部的变量值</li><li>占用内存，过多使用会产生性能问题，在IE中可能会导致内存泄漏。（可在销毁函数前，将无用的变量删除）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">  B = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"><span class="title">A</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"><span class="title">B</span>(<span class="params"></span>) // 1</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//例二</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"> <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">A()()<span class="comment">//1</span></span><br></pre></td></tr></table></figure><h3 id="闭包与内存泄漏"><a href="#闭包与内存泄漏" class="headerlink" title="闭包与内存泄漏"></a>闭包与内存泄漏</h3><blockquote><p><strong>内存泄漏是指，页面随着时间的延长使用的内存越来越多而没有及时释放。</strong></p></blockquote><p>javascript中 不需要开发人员像C语言一样手动使用 <code>malloc()</code>分配内存，也不需要用完后使用<code>free()</code>回收；而是使用垃圾回收策略来自动管理内存，即找出那些不再使用的值，然后释放所占用的内存。</p><p><strong>垃圾回收只针对局部变量进行回收销毁，全局变量只有网页关闭才会消除。垃圾回收有两种方法引用计数和标记清除</strong><br>垃圾回收算法主要依赖于引用的概念</p><blockquote><p>什么是引用：在内存管理的环境中，一个对象如果有访问另一个对象的权限（隐式或者显式），叫做一个对象引用另一个对象。</p></blockquote><p><strong>引用计数</strong></p><blockquote><p>引用计数是跟踪记录每个值被引用的次数。即看一个对象是否有指向它的引用。如果没有其他对象指向它（零引用），说明该对象已经不再需要了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name:<span class="string">'owen'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此时 对象 &#123; name:'owen' &#125; 被创建并引用一次</span></span><br><span class="line">obj = <span class="literal">null</span></span><br><span class="line"><span class="comment">// 此时 对象引用次数为零，将被回收机制销毁</span></span><br></pre></td></tr></table></figure></p></blockquote><p><strong>引用计数有一个循环引用的问题：如果两个对象互相引用，它们的引用次数永远不会为零，将永远不会被回收，从而占据内存</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">obj</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    name:<span class="string">'owen'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时 对象 &#123; name:'owen' &#125; 被创建并引用一次</span></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;&#125;</span><br><span class="line"></span><br><span class="line">obj2.name = obj1</span><br><span class="line">obj1.name = obj2</span><br><span class="line"><span class="comment">// 此时 两个对象相互引用 ，俩个对象引用次数为二，永远也不会被收回</span></span><br><span class="line">&#125;</span><br><span class="line">obj()</span><br></pre></td></tr></table></figure></p><p><strong>标记清除</strong></p><blockquote><p>现代浏览器常用的方法，当变量进入环境时（例如，在函数中声明一个变量），这个变量标记为“进入环境”；而当变量离开环境时，则将其标记为“离开环境”。</p></blockquote><p>把”对象是否不再需要”简化定义为”对象是否可以获得”。如把JavaScript想象一个树，每个JS都存在一个根(浏览器中为window对象,Node中为global对象 )，每当一个函数执行，就会生成一个节点。嵌套的函数调用就会有子节点。当函数执行完时，内部的变量都是无法被其他代码访问的，所以它就被标记为“无法被访问”。GC 时，JS 引擎统一对所有这些状态的对象进行回收。<br><strong>当进行一轮垃圾回收时，主线程会被阻塞，各个浏览器的时间不同可能是10ms、50ms、1s</strong></p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="封装变量"><a href="#封装变量" class="headerlink" title="封装变量"></a>封装变量</h3><p>将不需要暴露在全局的变量封装成”私有变量”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 乘积</span></span><br><span class="line"><span class="keyword">let</span> mult = <span class="function">(<span class="params">...args</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> args )&#123;</span><br><span class="line">          num *= val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 由于每次运行函数都会完全遍历所以形参，效率较低下，我们可以加入缓存机制提供函数性能</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mult1 = <span class="function">(<span class="params">(</span>)=&gt;</span>&#123;</span><br><span class="line"> <span class="keyword">let</span> cache = &#123;&#125;;</span><br><span class="line"> <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">if</span>(cache[args.join(<span class="string">','</span>)])  <span class="keyword">return</span> cache[args.join (<span class="string">','</span>)];</span><br><span class="line">        <span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> args )&#123;</span><br><span class="line">          num *= val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cache[args.join(<span class="string">','</span>)]= num; <span class="comment">// 缓存数值</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们看到 cache 变量仅仅在 mult 函数中使用，我们可以将它封装在函数内部，减少全局变量，变量发生不必要的错误</span></span><br></pre></td></tr></table></figure><p><strong>如果一个大函数中有些代码块能够独立出来，我们常常把这些代码块封装在独立的小函数里并有个良好的命名，将有助于复用，和注释作用；如果小函数不需要在其他程序中使用，最好使用闭包封装起来</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mult1 = <span class="function">(<span class="params">(</span>)=&gt;</span>&#123;</span><br><span class="line"> <span class="keyword">let</span> cache = &#123;&#125;;</span><br><span class="line"> <span class="keyword">let</span> calculate = <span class="function">(<span class="params">...args</span>)=&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> args )&#123;</span><br><span class="line">            num *= val;</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">        &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> property = args.join(<span class="string">','</span>)</span><br><span class="line">        <span class="keyword">if</span>(cache[property])  <span class="keyword">return</span> cache[property];</span><br><span class="line">        <span class="keyword">return</span> cache[property]= calculate.apply(<span class="literal">null</span>,args); <span class="comment">// 缓存数值</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><h3 id="延续变量"><a href="#延续变量" class="headerlink" title="延续变量"></a>延续变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// img案例</span></span><br><span class="line"><span class="keyword">let</span> imgSrc = <span class="function">(<span class="params">src</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">  img.src = src;</span><br><span class="line">&#125;</span><br><span class="line">imgSrc(<span class="string">'http://xxxx.com/img'</span>)</span><br><span class="line"><span class="comment">// 在一些低版本浏览器中使用 imgSrc 函数，会丢失一些数据，因为当函数调用结束后 img变量会随之销毁，此时可能未及时发出HTTP请求</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用闭包解决数据丢失问题</span></span><br><span class="line"><span class="keyword">let</span> imgSrc = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> imgs = [];</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">src</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">  imgs.push(img)</span><br><span class="line">  img.src = src;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">imgSrc(<span class="string">'http://xxxx.com/img'</span>)</span><br></pre></td></tr></table></figure><h3 id="三种方法解决循环中-var-定义函数的问题"><a href="#三种方法解决循环中-var-定义函数的问题" class="headerlink" title="三种方法解决循环中 var 定义函数的问题"></a>三种方法解决循环中 var 定义函数的问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//one 利用闭包</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(j);</span><br><span class="line">    &#125;, j * <span class="number">1000</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//two 设置第三个参数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params">j</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(j)</span><br><span class="line">  &#125;, i * <span class="number">1000</span>,i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//three  利用 let</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;, i * <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为 <code>setTimeout</code> 是个异步函数，所以会先把循环全部执行完毕，这时候<code>i</code> 就是 固定了，所以会输出一堆 固定值。</p><h2 id="函数中的this对象"><a href="#函数中的this对象" class="headerlink" title="函数中的this对象"></a>函数中的this对象</h2><h3 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h3><p>this 指向取决于 调用它时处在的执行上下文</p><h3 id="对于new-的方式来说，this-被永远绑定在了赋值变量上面，不会被任何方式改变-this"><a href="#对于new-的方式来说，this-被永远绑定在了赋值变量上面，不会被任何方式改变-this" class="headerlink" title="对于new 的方式来说，this 被永远绑定在了赋值变量上面，不会被任何方式改变 this"></a>对于new 的方式来说，this 被永远绑定在了赋值变量上面，不会被任何方式改变 this</h3><p><strong>箭头函数</strong><br>箭头函数中的 this 只取决包裹箭头函数的<code>第一个普通函数</code>的 this 否则指向全局。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是闭包（closure）？&quot;&gt;&lt;a href=&quot;#什么是闭包（closure）？&quot; class=&quot;headerlink&quot; title=&quot;什么是闭包（closure）？&quot;&gt;&lt;/a&gt;什么是闭包（closure）？&lt;/h1&gt;&lt;p&gt;在理解闭包前，须理解变量&lt;a hre
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://owen027.github.io/categories/JavaScript/"/>
    
    
      <category term="closure" scheme="https://owen027.github.io/tags/closure/"/>
    
  </entry>
  
  <entry>
    <title>fetch</title>
    <link href="https://owen027.github.io/2019/06/24/fetch/"/>
    <id>https://owen027.github.io/2019/06/24/fetch/</id>
    <published>2019-06-24T08:15:59.000Z</published>
    <updated>2019-07-21T15:53:32.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h1><ul><li>一个获取资源的接口，类似于<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/AJAX" target="_blank" rel="noopener">ajax</a></li><li>是基于 <code>Promise</code>之上设计，旧版本IE 完全不支持，须借助 <a href="https://github.com/stefanpenner/es6-promise" target="_blank" rel="noopener">polyfill</a>来兼容</li><li>提供了对 Request 和 Response （以及其他与网络请求有关的）对象的通用定义</li><li>发送请求或者获取资源，需要使用 window.fetch or WindowOrWorkerGlobalScope.fetch 方法。</li></ul><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><h3 id="资源路径（url-string）"><a href="#资源路径（url-string）" class="headerlink" title="资源路径（url string）"></a>资源路径（url string）</h3><ul><li>他必须接收一个需要请求的资源路径，返回一个<code>promise</code>对象，请求成功的数据返回到<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Response/Response" target="_blank" rel="noopener">Responese</a>回调中，请求失败的信息返回到 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Request" target="_blank" rel="noopener">Request</a>中。</li><li>当接收到一个代表错误的 HTTP状态码时，<code>fetch</code>返回的<code>promise</code>不会被标记为 <code>reject</code>而会被标记为<code>resolve</code>，比如状态码为 404，500.只有网络故障或请求被阻止时才被标记为<code>reject</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'https://api.apiopen.top/musicDetails1'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> response.json();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">myJson</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(myJson); <span class="comment">//&#123;code: 400, message: "404 Not Found", result: "https://api.apiopen.top/musicDetails1"&#125;</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><ul><li><code>fetch</code> 默认是不会从服务端发送接收或发送任何 <code>cookie</code>,如果需要则必须设置 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WindowOrWorkerGlobalScope/fetch#%E5%8F%82%E6%95%B0" target="_blank" rel="noopener">credentials</a>,自 2017/8 起默认的credentials政策变更为same-originFirefox也在61.0b13中改变默认值</li></ul><h3 id="config"><a href="#config" class="headerlink" title="[, config]"></a>[, config]</h3><ul><li>配置项对象，包括所有对请求的设置</li></ul><ol><li><p><code>method</code>: 请求使用的方法，如 GET、POST。</p></li><li><p><code>headers</code>: 请求的头信息，形式为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Headers" target="_blank" rel="noopener">Headers</a> 的对象或包含 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ByteString" target="_blank" rel="noopener">ByteString</a>值的对象字面量。</p></li><li><p><code>body</code>:<br> 请求的 <code>body</code>信息：<br> 可能是:<br>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob" target="_blank" rel="noopener">Blob</a>（ 表示一个不可变、原始数据的类文件对象）、<code>BufferSource</code> （ 用于表示自身为ArrayBuffer或者TypedArray提供对象的对象ArrayBufferView。）、<br>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FormData" target="_blank" rel="noopener">FormData</a>（表示表单数据的键值对的构造方式，经过它的数据可以使用<code>XMLHttpRequest.send()</code> 方法送出，本接口和此方法都相当简单直接。如果送出时的编码类型被设为 “multipart/form-data”，它会使用和表单一样的格式。）、<br>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams" target="_blank" rel="noopener">URLSearchParams</a> （接口定义了一些实用的方法来处理 URL 的查询字符串）<br>  或者 <code>USVString</code> 对象。</p>   <label>注意<code>GET</code> 或<code>HEAD</code>方法的请求不能包含 body 信息。</label></li><li><p><code>mode</code>: 请求的模式，如 <code>cors、 no-cors</code> 或者 <code>same-origin</code>。</p></li><li><p><code>credentials</code>: 请求的 <code>credentials</code>，如 <code>omit、same-origin</code> 或者 <code>include</code>。为了在当前域名内自动发送 cookie ， 必须提供这个选项， 从 Chrome 50 开始， 这个属性也可以接受 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FederatedCredential" target="_blank" rel="noopener">FederatedCredential</a> 实例或是一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/PasswordCredential" target="_blank" rel="noopener">PasswordCredential</a> 实例。</p><ul><li>如果需要跨域请求需设置为 “include”</li><li>如果只在同域内发送cookie 则设置为 “same-origin”</li><li>如果任何情况都不发送cookie 则设置为 “omit”</li></ul></li><li><p><code>cache</code>:  请求的 <code>cache</code> 模式: <code>default 、 no-store 、 reload 、 no-cache 、 force-cache</code> 或者 <code>only-if-cached</code> 。</p></li><li><p><code>redirect</code>: 可用的<code>redirect</code> 模式:<code>follow</code>(自动重定向), <code>error</code> (如果产生重定向将自动终止并且抛出一个错误), 或者<code>manual</code> (手动处理重定向). 在Chrome中，Chrome 47之前的默认值是 <code>follow</code>，从 Chrome 47开始是<code>manual</code>。</p></li><li><p><code>referrer</code>: 一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/USVString" target="_blank" rel="noopener">USVString</a> 可以是 <code>no-referrer、client</code>或一个<code>URL</code>。默认是<code>client</code>。</p></li><li><p><code>referrerPolicy</code>:指定引用HTTP头的值。可能是一个 <code>no-referrer、 no-referrer-when-downgrade、 origin、 origin-when-cross-origin、 unsafe-url 。</code></p></li><li><p><code>integrity</code>: 包括请求的<a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/%E5%AD%90%E8%B5%84%E6%BA%90%E5%AE%8C%E6%95%B4%E6%80%A7" target="_blank" rel="noopener">subresource integrity</a>值（例如：  sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=）。</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Fetch = <span class="function"><span class="keyword">function</span> (<span class="params">url,config</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span>(config) !== <span class="string">'object'</span> || config === <span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">throw</span> <span class="string">`Config needs to pass an object type`</span></span><br><span class="line">  <span class="keyword">let</span> data = config || &#123;&#125; ;</span><br><span class="line">  <span class="keyword">let</span> &#123;method = <span class="string">'GET'</span>, param = <span class="literal">null</span>, mode = <span class="string">"cors"</span>, cache = <span class="string">"no-cache"</span>,headers = &#123;<span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span>,</span><br><span class="line">    <span class="string">'content-type'</span>: <span class="string">'application/json'</span>&#125;, redirect = <span class="string">"follow"</span>, credentials = <span class="string">"include"</span>, referrer = <span class="string">"no-referrer"</span>&#125; = data;</span><br><span class="line">  <span class="comment">/*  // 传输 JSON 数据 需将 param 转换 </span></span><br><span class="line"><span class="comment">    JSON.stringify(param)</span></span><br><span class="line"><span class="comment">    //上传文件 需传输 formData 格式</span></span><br><span class="line"><span class="comment">    let formData = new FormData()</span></span><br><span class="line"><span class="comment">    let fileField = document.querySelector("#myFile")</span></span><br><span class="line"><span class="comment">    formData.append('title',"My File")</span></span><br><span class="line"><span class="comment">    formData.append('fileField ',fileField .files[0])</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span>  fetch(url,&#123;</span><br><span class="line">   method:method.toUpperCase(),</span><br><span class="line">   body:param,</span><br><span class="line">   mode,</span><br><span class="line">   cache,</span><br><span class="line">   headers,</span><br><span class="line">   redirect,</span><br><span class="line">   credentials,</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(res.ok) <span class="keyword">return</span> res.json() </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Network response fail："</span>+res.status)</span><br><span class="line">&#125;</span><br><span class="line">).catch(<span class="function"><span class="params">err</span>=&gt;</span><span class="built_in">console</span>.error(err))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Fetch(<span class="string">'https://api.apiopen.top/musicDetails1'</span>,&#123;<span class="attr">credentials</span>:<span class="string">'omit'</span>&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span><span class="built_in">console</span>.log(res)).catch(<span class="function"><span class="params">err</span>=&gt;</span><span class="built_in">console</span>.error(err))</span><br></pre></td></tr></table></figure><h3 id="Headers-constructor"><a href="#Headers-constructor" class="headerlink" title="Headers constructor"></a>Headers constructor</h3><ul><li>创建一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Headers" target="_blank" rel="noopener">headers</a> 对象</li></ul><h4 id="一个-headers-对象是一个简单的多名值对："><a href="#一个-headers-对象是一个简单的多名值对：" class="headerlink" title="一个 headers 对象是一个简单的多名值对："></a>一个 headers 对象是一个简单的多名值对：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> content = <span class="string">"Hello World"</span>;</span><br><span class="line"><span class="keyword">let</span> myHeaders = <span class="keyword">new</span> Headers();</span><br><span class="line">myHeaders.append(<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>);</span><br><span class="line">myHeaders.append(<span class="string">"Content-Length"</span>, content.length.toString());</span><br><span class="line">myHeaders.append(<span class="string">"X-Custom-Header"</span>, <span class="string">"ProcessThisImmediately"</span>);</span><br></pre></td></tr></table></figure><h4 id="可以传一个多维数组或者对象字面量："><a href="#可以传一个多维数组或者对象字面量：" class="headerlink" title="可以传一个多维数组或者对象字面量："></a>可以传一个多维数组或者对象字面量：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> content = <span class="string">"Hello World"</span>;</span><br><span class="line"><span class="keyword">let</span> myHeaders = <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">  <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>,</span><br><span class="line">  <span class="string">"Content-Length"</span>: content.length.toString(),</span><br><span class="line">  <span class="string">"X-Custom-Header"</span>: <span class="string">"ProcessThisImmediately"</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取和设置</span></span><br><span class="line"><span class="built_in">console</span>.log(myHeaders.has(<span class="string">"Content-Type"</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(myHeaders.has(<span class="string">"Set-Cookie"</span>)); <span class="comment">// false</span></span><br><span class="line">myHeaders.set(<span class="string">"Content-Type"</span>, <span class="string">"text/html"</span>);</span><br><span class="line">myHeaders.append(<span class="string">"X-Custom-Header"</span>, <span class="string">"AnotherValue"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(myHeaders.get(<span class="string">"Content-Length"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(myHeaders.getAll(<span class="string">"X-Custom-Header"</span>)); <span class="comment">// ["ProcessThisImmediately", "AnotherValue"]</span></span><br><span class="line"> </span><br><span class="line">myHeaders.delete(<span class="string">"X-Custom-Header"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myHeaders.getAll(<span class="string">"X-Custom-Header"</span>)); <span class="comment">// [ ]</span></span><br></pre></td></tr></table></figure><p>如果使用了一个不合法的HTTP Header属性名，那么Headers的方法通常都抛出 TypeError 异常。如果不小心写入了一个不可写的属性，也会抛出一个 TypeError 异常。除此以外的情况，失败了并不抛出异常。</p><h4 id="检查-content-type-是否正确"><a href="#检查-content-type-是否正确" class="headerlink" title="检查 content type 是否正确"></a>检查 content type 是否正确</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fetch(myRequest).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(response.headers.get(<span class="string">"content-type"</span>) === <span class="string">"application/json"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> response.json().then(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// process your JSON further</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Oops, we haven't got JSON!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Response-对象"><a href="#Response-对象" class="headerlink" title="Response 对象"></a>Response 对象</h3><ul><li><code>fetch</code> 返回的对象</li></ul><h4 id="对象中常用的属性"><a href="#对象中常用的属性" class="headerlink" title="对象中常用的属性"></a>对象中常用的属性</h4><ol><li>status： 响应状态码 如 200 404 等</li><li>statusText：返回和状态码对应信息</li><li>ok 检查状态码是否 在 200-299之间，返回true or false</li></ol><h2 id="检查环境支持度"><a href="#检查环境支持度" class="headerlink" title="检查环境支持度"></a>检查环境支持度</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.fetch) &#123;</span><br><span class="line">    <span class="comment">// run my fetch request here</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// do something with XMLHttpRequest?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p><img src="/static/img/fetch.png" alt="fetch"></p><p><a href="https://fetch.spec.whatwg.org/" target="_blank" rel="noopener">Fetch规范</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;fetch&quot;&gt;&lt;a href=&quot;#fetch&quot; class=&quot;headerlink&quot; title=&quot;fetch&quot;&gt;&lt;/a&gt;fetch&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;一个获取资源的接口，类似于&lt;a href=&quot;https://developer.mozilla.org/
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://owen027.github.io/categories/JavaScript/"/>
    
    
      <category term="fetch" scheme="https://owen027.github.io/tags/fetch/"/>
    
  </entry>
  
  <entry>
    <title>filter</title>
    <link href="https://owen027.github.io/2019/06/21/filter/"/>
    <id>https://owen027.github.io/2019/06/21/filter/</id>
    <published>2019-06-21T06:15:48.000Z</published>
    <updated>2019-06-30T16:03:54.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h1><ul><li>将模糊或者颜色偏移等图像效果用于元素，通常用于调整图像，背景和边框的渲染</li><li>css 标准中已内置一些预定义效果的函数，也可通过url使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Element/filter" target="_blank" rel="noopener">SVG滤镜</a></li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* URL to SVG filter */</span></span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">url</span>(<span class="selector-tag">filter</span><span class="selector-class">.svg</span><span class="selector-id">#id</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &lt;filter-function&gt; values */</span></span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">blur</span>(5<span class="selector-tag">px</span>);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">brightness</span>(0<span class="selector-class">.4</span>);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">contrast</span>(200%);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">drop-shadow</span>(16<span class="selector-tag">px</span> 16<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> <span class="selector-tag">blue</span>);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">grayscale</span>(50%);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">hue-rotate</span>(90<span class="selector-tag">deg</span>);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">invert</span>(75%);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">opacity</span>(25%);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">saturate</span>(30%);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">sepia</span>(60%);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Multiple filters */</span></span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">contrast</span>(175%) <span class="selector-tag">brightness</span>(3%);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Global values */</span></span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">inherit</span>;</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">initial</span>;</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">unset</span>;</span><br></pre></td></tr></table></figure><h2 id="滤镜属性"><a href="#滤镜属性" class="headerlink" title="滤镜属性"></a>滤镜属性</h2><ul><li>需要设定某一函数的值。如果该值无效，函数返回“none“。</li></ul><h3 id="url"><a href="#url" class="headerlink" title="url()"></a>url()</h3><ul><li>url 函数接收一个XML文件，该文件是一个<code>SVG filter</code>，并且包含一个ID值 来指定哪一个滤镜<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span><span class="selector-pseudo">:url(resources.svg</span><span class="selector-id">#c1</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="blur"><a href="#blur" class="headerlink" title="blur()"></a>blur()</h3><ul><li>定义模糊度</li><li>可以接受css长度单位，不接受百分比<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span><span class="selector-pseudo">:blur(5px)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="brightness"><a href="#brightness" class="headerlink" title="brightness()"></a>brightness()</h3><ul><li>定义亮度</li><li>默认为1， 1-0 逐渐变暗，1以上逐渐变亮 </li><li>可以是百分比， 不能为负数</li></ul><h3 id="contrast"><a href="#contrast" class="headerlink" title="contrast()"></a>contrast()</h3><ul><li>定义对比度 </li><li>1-0 逐渐变成灰黑 1以上颜色逐渐变艳丽</li><li>可以是百分比， 不能为负数</li></ul><h3 id="drop-shadow"><a href="#drop-shadow" class="headerlink" title="drop-shadow()"></a>drop-shadow()</h3><ul><li>定义阴影效果，合成在图像下面，</li><li>参数 和 <code>shadow</code>, <code>box-shadow</code> 相似 </li><li>和<code>shadow</code>, <code>box-shadow</code>属性不同之处在于通过filter，一些浏览器为了提升性能会提供硬件加速。<br>  传参顺序从左至右：<ol><li>水平偏移距离正值右偏，负值左偏（offset-x）。<label>必传</label></li><li>垂直偏移距离正值向下偏，负值上偏（offset-y）。<label>必传</label></li><li>一个length值(表示距离尺寸的一种css数据格式) 值越大，越模糊阴影会变得更大更淡.）<label>不允许负值</label> 默认为0 （blur-radius）<label>可选</label></li><li>一个length值，正值会使阴影扩张和变大，负值会是阴影缩小，默认 0</li><li>color 色值，在Gecko (Firefox), Presto (Opera)和Trident (Internet Explorer)中， 会应用<code>color</code> 属性的值,颜色值省略，WebKit中阴影是透明的。</li></ol></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span><span class="selector-pseudo">:drop-shadow(16px</span> 16<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> <span class="selector-tag">black</span>)</span><br></pre></td></tr></table></figure><h3 id="grayscale"><a href="#grayscale" class="headerlink" title="grayscale()"></a>grayscale()</h3><ul><li>定义灰度</li><li>取值0 - 1的数值之间，可设置百分比，不可为负数<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span><span class="selector-pseudo">:grayscale(50</span>%);</span><br></pre></td></tr></table></figure></li></ul><h3 id="hue-rotate"><a href="#hue-rotate" class="headerlink" title="hue-rotate()"></a>hue-rotate()</h3><ul><li>定义颜色，色相旋转调整</li><li>单位 deg</li><li>可为负值</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">hue-rotate</span>(90<span class="selector-tag">deg</span>)</span><br></pre></td></tr></table></figure><h3 id="invert"><a href="#invert" class="headerlink" title="invert()"></a>invert()</h3><ul><li>反向输入图，定义转换比例</li><li>默认0  0%和100%之间，则是效果的线性乘子。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">invert</span>(100%)</span><br></pre></td></tr></table></figure></li></ul><h3 id="opacity"><a href="#opacity" class="headerlink" title="opacity()"></a>opacity()</h3><ul><li>转化图像的透明程度</li><li>类似于css的<code>opacity</code>属性 </li><li>1-0 逐渐变透明，支持百分比 ，不能为负数</li><li>和opacity属性不同之处在于通过filter，一些浏览器为了提升性能会提供硬件加速。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">opacity</span>(50%)</span><br></pre></td></tr></table></figure></li></ul><h3 id="saturate"><a href="#saturate" class="headerlink" title="saturate()"></a>saturate()</h3><ul><li>定义图像饱和度</li><li>1-0 至完全不包和，1为正常， 1以上饱和度更高，更艳丽，支持百分比</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span><span class="selector-pseudo">:saturate(369</span>%)</span><br></pre></td></tr></table></figure><h3 id="sepia"><a href="#sepia" class="headerlink" title="sepia()"></a>sepia()</h3><ul><li>定义深褐色的色度</li><li>0 - 1 逐渐变为深褐色 支持百分比，不支持负数</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">sepia</span>(100%)</span><br></pre></td></tr></table></figure><h3 id="组合函数"><a href="#组合函数" class="headerlink" title="组合函数"></a>组合函数</h3><ul><li>可以将任意数量的函数一起控制渲染，其中有一个不符合规范将全部失效<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span><span class="selector-pseudo">:sepia(100</span>%) <span class="selector-tag">saturate</span>(369%) <span class="selector-tag">opacity</span>(50%)</span><br></pre></td></tr></table></figure></li></ul><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p><img src="/static/img/filter.png" alt="filter"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;filter&quot;&gt;&lt;a href=&quot;#filter&quot; class=&quot;headerlink&quot; title=&quot;filter&quot;&gt;&lt;/a&gt;filter&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;将模糊或者颜色偏移等图像效果用于元素，通常用于调整图像，背景和边框的渲染&lt;/li&gt;
&lt;li&gt;cs
      
    
    </summary>
    
    
      <category term="filter" scheme="https://owen027.github.io/tags/filter/"/>
    
  </entry>
  
  <entry>
    <title>setProperty</title>
    <link href="https://owen027.github.io/2019/06/18/setProperty/"/>
    <id>https://owen027.github.io/2019/06/18/setProperty/</id>
    <published>2019-06-18T08:31:50.000Z</published>
    <updated>2019-06-24T16:14:37.070Z</updated>
    
    <content type="html"><![CDATA[<h1 id="css3-原生-var-变量"><a href="#css3-原生-var-变量" class="headerlink" title="css3 原生 var 变量"></a>css3 原生 var 变量</h1><ul><li>可以降低维护成本，有更高性能，文件更高压缩率。</li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ol><li><p>声明 <code>--*</code></p><ul><li><code>*</code> 表示变量名称，对于命名不能包含特殊字符（ $，[，^，(，%  ）等等</li><li>必须在块级（<code>{}</code>）区域内声明,且只能给属性名的值，设值，不能给属性设置<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">     <span class="attribute">--color</span>: purple; </span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用</p></li></ol><ul><li>通过<code>var(x,y)</code>函数调用</li><li>函数的可选第二个参数用作回退值。如果第一个参数引用的自定义属性无效，则该函数将使用第二个值。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="CSS变量不合法的缺省特性"><a href="#CSS变量不合法的缺省特性" class="headerlink" title="CSS变量不合法的缺省特性"></a>CSS变量不合法的缺省特性</h2><ul><li>CSS变量，只要语法是正确的，就会作为正常的声明解析</li><li>如果发现变量值是不合法的，就让默认值代替<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">--color</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--color, #000);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 等同于 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="CSS变量不合法的空格尾随特性"><a href="#CSS变量不合法的空格尾随特性" class="headerlink" title="CSS变量不合法的空格尾随特性"></a>CSS变量不合法的空格尾随特性</h2><ul><li>变量值后面会尾随空格,所以变量值最好加单位<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">--width</span>: <span class="number">20</span>;</span><br><span class="line"> <span class="attribute">width</span>: <span class="built_in">var</span>(--width)<span class="built_in">px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 等同于 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="comment">/* 宽度失效 */</span></span><br><span class="line"> <span class="attribute">width</span>: <span class="number">20</span> px; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="CSS变量的相互传递特性"><a href="#CSS变量的相互传递特性" class="headerlink" title="CSS变量的相互传递特性"></a>CSS变量的相互传递特性</h2><ul><li>声明CSS变量时候可以引入其他变量<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">--width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">--width</span>: <span class="built_in">var</span>(--width);</span><br><span class="line">  <span class="attribute">--height</span>: <span class="built_in">calc</span>( var(--width) / <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p><img src="/static/img/var.png" alt="var"></p><hr><h1 id="setProperty"><a href="#setProperty" class="headerlink" title="setProperty"></a>setProperty</h1><ul><li>给一个样式设置新值 <code>dom.style.setProperty(propertyName, value, priority);</code></li></ul><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ol><li>propertyName 必须是一个字符串，代表被更改的CSS属性。</li><li><code>value</code> 对应 <code>propertyName</code> css 属性值。如果未传，则为空字符串</li><li>priority 设置css 的权重 “important” ,”undefined”, “”</li><li>如果不设置权重 则可简写为 <code>dom.style.propertyName = &quot;value&quot;</code></li></ol><hr><h1 id="getPropertyPriority"><a href="#getPropertyPriority" class="headerlink" title="getPropertyPriority"></a>getPropertyPriority</h1><ul><li>获取一个样式属性的权重</li><li><code>dom.getPropertyPriority(&#39;property&#39;)</code></li><li>返回值 ‘important’ 或  ‘’</li></ul><hr><h1 id="removeProperty"><a href="#removeProperty" class="headerlink" title="removeProperty"></a>removeProperty</h1><ul><li>删除属性 <code>dom.getPropertyPriority(&#39;property&#39;)</code></li><li>返回被删除的属性值</li><li>多个单词组成的属性要用连字符连接各个单词，不接收驼峰命名法的形式。</li></ul><hr><h1 id="getComputedStyle"><a href="#getComputedStyle" class="headerlink" title="getComputedStyle"></a>getComputedStyle</h1><ul><li>兼容 IE9及以上</li><li>获取当前元素所以最终使用的 CSS属性值</li><li>返回一个实时的 <code>CSSStyleDeclaration</code> 对象，当元素的样式更改时，它会自动更新本身。</li></ul><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><ul><li><code>let styles = window.getComputedStyle(element, [pseudoElt]);</code></li><li><code>element</code>: Dom 元素</li><li><code>[pseudoElt]</code>: 可选指定一个伪元素 （在Gecko2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)之前版本，参数pseudoElt是必要的。如果为null，则不指定其他主要浏览器必须指定此参数。Gecko已经更改为匹配其他浏览器的行为。）</li></ul><h2 id="getComputedStyle-和-style-区别"><a href="#getComputedStyle-和-style-区别" class="headerlink" title="getComputedStyle 和 style 区别"></a><code>getComputedStyle</code> 和 <code>style</code> 区别</h2><ul><li><code>element.style</code> 同样可以获取 <code>css</code> 对象，可读写，而<code>getComputedStyle(el)</code> 只能读</li><li><code>element.style</code>返回已设置的样式属性,而 <code>getComputedStyle(el)</code> 会将所有属性给返回<br><code>getComputedStyle(el)</code><br><img src="/static/img/CSSStyleDeclaration.png" alt="CSSStyleDeclaration"><br><code>element.style</code><br><img src="/static/img/elStyle.png" alt="el.style"></li></ul><h2 id="defaultView"><a href="#defaultView" class="headerlink" title="defaultView"></a>defaultView</h2><ul><li>此属性只读。</li><li>在浏览器中，<code>document.defaultView</code> 返回window与文档关联的对象，或者null如果没有可用的对象。</li><li><code>getComputedStyle</code> 不仅挂载在 window对象上，而且还挂载在 <code>defaultView</code>对象上</li><li>因为在firefox3.6上访问（iframe)必须 <code>defaultView</code>对象上访问</li></ul><h2 id="css属性解析值（resolved-value），计算值（computed-value）-和-应用值（used-value）"><a href="#css属性解析值（resolved-value），计算值（computed-value）-和-应用值（used-value）" class="headerlink" title="css属性解析值（resolved value），计算值（computed value） 和 应用值（used value）"></a>css属性解析值（resolved value），计算值（computed value） 和 应用值（used value）</h2><ul><li>属于 <code>getComputedStyle</code>方法返回的值，大多数属性是一个计算值，有些是应用值</li></ul><h3 id="计算值（computed-value）"><a href="#计算值（computed-value）" class="headerlink" title="计算值（computed value）"></a>计算值（computed value）</h3><ul><li>子元素继承父元素的值，通过指定值计算出来</li><li>处理特殊的值 <code>inherit</code>(元素获取其父元素的计算值),<code>initial</code>(属性的初始默认值),<code>unset</code>(优先用 <code>inherit</code> 的样式，其次会应该用<code>initial</code>的样式)</li><li>进行计算，达到对应属性值的要求</li><li>计算值所需要的计算通常包括将相对值（em,rem %,)转换成绝对值（px）</li></ul><h3 id="应用值（used-value）"><a href="#应用值（used-value）" class="headerlink" title="应用值（used value）"></a>应用值（used value）</h3><ul><li>完成所有计算后最终使用的值</li></ul><p>计算出CSS属性的最终值有三个步骤</p><ol><li>指定值（Specified value） 从样式表中接收（按权重规则来接收）未设置将使用继承值或者默认值</li><li>按规范算出计算值（span 指定 position: absolute 后display 变为 block） </li><li>计算布局（尺寸比如 auto 或 百分数 换算为像素值） 最后就是应用值， 只能使用 <code>getComputedStyle</code>来获取最终的应用值</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;css3-原生-var-变量&quot;&gt;&lt;a href=&quot;#css3-原生-var-变量&quot; class=&quot;headerlink&quot; title=&quot;css3 原生 var 变量&quot;&gt;&lt;/a&gt;css3 原生 var 变量&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;可以降低维护成本，有更高性能，文
      
    
    </summary>
    
      <category term="CSS" scheme="https://owen027.github.io/categories/CSS/"/>
    
    
      <category term="setProperty" scheme="https://owen027.github.io/tags/setProperty/"/>
    
  </entry>
  
  <entry>
    <title>zoomAndScale</title>
    <link href="https://owen027.github.io/2019/06/17/zoomAndScale/"/>
    <id>https://owen027.github.io/2019/06/17/zoomAndScale/</id>
    <published>2019-06-17T10:24:26.000Z</published>
    <updated>2019-06-24T16:14:37.071Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zoom"><a href="#zoom" class="headerlink" title="zoom"></a><code>zoom</code></h1><ul><li>不是标准属性</li><li>对文字最小缩到 12pX</li><li>缩放位置相对于左上角缩放</li><li>调整时改变了元素占据的空间大小、尺寸，等比例缩放元素</li><li><code>*zoom:1</code> 用来给老版本IE浏览器（IE6/7）清除浮动</li><li>由于缩小改变原来的空间尺寸，所以整个页面会重新渲染<h2 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h2></li></ul><ol><li>百分比 <code>zoom:50%</code> 缩小到原来的一半</li><li>数值 <code>zoom:0.5</code> 等同 <code>zoom:50%</code>，不能为负数</li><li><code>zoom:normal</code> 等同于 <code>zoom:1</code> </li></ol><h1 id="scale"><a href="#scale" class="headerlink" title="scale"></a>scale</h1><ul><li>等比例缩放元素  <code>transform: scale(1)</code></li><li>对文字等比缩放</li><li>改变时不会从新渲染页面</li><li>默认居中缩放,原始尺寸不变</li><li>属于 <code>w3c</code> 规范 IE9以上都支持此属性</li><li>使用 transform 会覆盖以前的 transform 属性，即 以前 transform 对应的属性将被全部替换</li><li>可控制方向 transform:scale(x,y), transform:scaleX(x)  or transform:scaleY(y)<h2 id="单位-1"><a href="#单位-1" class="headerlink" title="单位"></a>单位</h2></li></ul><ol><li>只能是数值</li><li>可以为负数</li></ol><h2 id="chrome-中-同时使用两者效果会叠加"><a href="#chrome-中-同时使用两者效果会叠加" class="headerlink" title="chrome 中  同时使用两者效果会叠加"></a>chrome 中  同时使用两者效果会叠加</h2><h1 id="transform-变换"><a href="#transform-变换" class="headerlink" title="transform 变换"></a>transform 变换</h1><ul><li>支持 3D 变换</li><li>可以 拉伸，压缩，旋转，偏移目标元素</li><li>只能转换由盒子模型定位的元素。根据经验，如果元素具有display: block，则由盒模型定位元素。（转换行内元素，须设置display样式属性）</li><li>支持 IE10以上 IE9 需加私有前缀 -ms-（IE） -webkit-(chrome，safari) -o-（opera）-moz- （Firefox)<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><h3 id="skew"><a href="#skew" class="headerlink" title="skew"></a>skew</h3></li><li>对目标对象进行歪斜变换 <code>transform: skew()</code></li></ul><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul><li>X,Y <code>transform: skew(X,Y)</code>  表示沿着 X轴和 Y轴 扭曲角度 默认为0</li></ul><h4 id="单位-2"><a href="#单位-2" class="headerlink" title="单位"></a>单位</h4><ol><li>degress (度)  <code>transform: skew(100deg,100deg)</code></li><li>grad (百分度)  <code>transform: skew(10grad,10grad)</code></li><li>rad（弧度）  一个完整的圆 为2π <code>transform: skew(10rad,10rad)</code></li><li>turn (圈数) 一个完整的圆 为1turn <code>transform: skew(0.25turn，1.2turn)</code></li><li>可以为负数</li></ol><h3 id="scale-1"><a href="#scale-1" class="headerlink" title="scale"></a>scale</h3><ul><li>等比例缩放元素 <code>transform: scale(1)</code><h4 id="单位-3"><a href="#单位-3" class="headerlink" title="单位"></a>单位</h4></li></ul><ol><li>只能是数值</li><li>可以为负数</li></ol><h3 id="rotate"><a href="#rotate" class="headerlink" title="rotate"></a>rotate</h3><ul><li>旋转元素 <code>transform: rotate(x,y)</code></li><li>默认以目标对象中心为圆点转动<h4 id="单位-4"><a href="#单位-4" class="headerlink" title="单位"></a>单位</h4>同 <code>skew</code></li></ul><h3 id="translate"><a href="#translate" class="headerlink" title="translate"></a>translate</h3><ul><li>平移目标元素 <code>transform: translate(x,y)</code></li></ul><h4 id="单位-5"><a href="#单位-5" class="headerlink" title="单位"></a>单位</h4><p>同 <code>skew</code></p><hr><h1 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h1><ul><li>平滑的改变CSS的值</li><li>只要CSS 属性值发生改变都会实现过渡效果</li><li>支持IE10 以上<h2 id="类型-1"><a href="#类型-1" class="headerlink" title="类型"></a>类型</h2></li></ul><h3 id="transition-property"><a href="#transition-property" class="headerlink" title="transition-property"></a>transition-property</h3><ul><li>指定过度属性 <code>transition-property:height</code>   height 就会参与过渡</li></ul><h3 id="transition-duration"><a href="#transition-duration" class="headerlink" title="transition-duration"></a>transition-duration</h3><ul><li>指定持续时间  <code>transition-duration:2s</code>  指过渡持续 2S</li></ul><h4 id="单位-6"><a href="#单位-6" class="headerlink" title="单位"></a>单位</h4><ul><li>s (秒) ms(毫秒)<h3 id="transition-delay"><a href="#transition-delay" class="headerlink" title="transition-delay"></a>transition-delay</h3></li><li>过渡开始作用之前需要等待的时间。 <code>transition-delay:0.2s</code> 等待0.2S 后执行过渡<h4 id="单位-7"><a href="#单位-7" class="headerlink" title="单位"></a>单位</h4></li><li>s (秒) ms(毫秒)<h3 id="transition-timing-function"><a href="#transition-timing-function" class="headerlink" title="transition-timing-function"></a>transition-timing-function</h3></li><li>指定动画运动时的节奏 <code>transition-timing-function:ease</code> 匀速运行</li></ul><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><ul><li>ease</li><li>ease-in 由慢到快</li><li>ease-out 由快到慢</li><li>ease-in-out 由慢到快在到慢</li><li>linear 线性过度</li><li>step-start </li><li>step-end</li><li>steps(5,end)</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/timing-function" target="_blank" rel="noopener">其它参数设置</a></li></ul><h2 id="transition-简写"><a href="#transition-简写" class="headerlink" title="transition 简写"></a>transition 简写</h2><ul><li>transition: property-color duration timing-function; <code>transition: height 0.3s ease;</code></li></ul><hr><h1 id="animations"><a href="#animations" class="headerlink" title="animations"></a>animations</h1><ul><li>用来指定一组或多组动画，每组之间用逗号相隔</li><li>支持IE10以上<h2 id="类型-2"><a href="#类型-2" class="headerlink" title="类型"></a>类型</h2></li></ul><h3 id="webkit-animation-name"><a href="#webkit-animation-name" class="headerlink" title="-webkit-animation-name;"></a>-webkit-animation-name;</h3><ul><li>指定应用的一系列动画，每个名称代表一个由@keyframes定义的动画序列</li></ul><h4 id="值"><a href="#值" class="headerlink" title="值"></a>值</h4><ul><li>none 默认静止</li><li>定义 @keyframes 后的 名字 </li><li>由大小写不敏感的字母a-z、数字0-9、下划线(_)和/或横线(-)组成。第一个非横线字符必须是字母，数字不能在字母前面，不允许两个横线出现在开始位置。<h5 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cylon_eye</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-animation-name</span>: resize;</span><br><span class="line">&#125;</span><br><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> resize &#123; <span class="selector-tag">from</span> &#123; <span class="attribute">margin-left</span>: -<span class="number">20%</span>; &#125; <span class="selector-tag">to</span> &#123; <span class="attribute">margin-left</span>: <span class="number">100%</span>; &#125;  &#125;</span><br><span class="line">        @<span class="keyword">keyframes</span> resize &#123; <span class="selector-tag">from</span> &#123; <span class="attribute">margin-left</span>: -<span class="number">20%</span>; &#125; <span class="selector-tag">to</span> &#123; <span class="attribute">margin-left</span>: <span class="number">100%</span>; &#125;  &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="webkit-animation-duration"><a href="#webkit-animation-duration" class="headerlink" title="-webkit-animation-duration"></a>-webkit-animation-duration</h3><ul><li>指定一个动画周期的时长</li><li>默认为 0 无动画</li></ul><h4 id="单位-8"><a href="#单位-8" class="headerlink" title="单位"></a>单位</h4><ul><li>s , ms <code>-webkit-animation-duration: 1.5s;</code></li></ul><h3 id="webkit-animation-iteration-count"><a href="#webkit-animation-iteration-count" class="headerlink" title="-webkit-animation-iteration-count"></a>-webkit-animation-iteration-count</h3><ul><li>定义动画运行的次数 <code>-webkit-animation-iteration-count:4</code></li></ul><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li>默认运行一次</li><li>infinite 无限循环</li><li>播放的次数 不可为负值. 可以用小数定义循环(0.5 将播放动画到关键帧的一半 </li></ul><h3 id="webkit-animation-direction"><a href="#webkit-animation-direction" class="headerlink" title="-webkit-animation-direction"></a>-webkit-animation-direction</h3><ul><li>指示动画是否反向播放 <code>-webkit-animation-direction: alternate;</code></li></ul><h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><ul><li>normal 默认 每个动画循环结束，动画重置到起点重新开始</li><li>alternate  动画交替反向运行，反向运行时，动画按步后退，同时，带时间功能的函数也反向 计数取决于开始时是奇数迭代还是偶数迭代</li><li>reverse 反向运行动画，每周期结束动画由尾到头运行。</li><li>alternate-reverse 动画第一次运行时是反向的，然后下一次是正向，后面依次循环。决定奇数次或偶数次的计数从1开始。<br>  -webkit-animation-timing-function: ease-in-out;<h3 id="animation-timing-function"><a href="#animation-timing-function" class="headerlink" title="animation-timing-function"></a>animation-timing-function</h3></li><li>每一个动画周期中执行的节奏，作用于一个关键帧周期而非整个动画周期<h4 id="值-1"><a href="#值-1" class="headerlink" title="值"></a>值</h4>同 <code>transition-timing-function</code> </li></ul><h2 id="简写语法"><a href="#简写语法" class="headerlink" title="简写语法"></a>简写语法</h2><ul><li>animation-name，animation-duration, animation-timing-function，animation-delay，animation-iteration-count，animation-direction，animation-fill-mode 和 animation-play-state 属性的一个简写属性形式<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cylon_eye</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right,</span><br><span class="line">      rgba(0, 0, 0, .9) <span class="number">25%</span>,</span><br><span class="line">      <span class="built_in">rgba</span>(0, 0, 0, .1) <span class="number">50%</span>,</span><br><span class="line">      <span class="built_in">rgba</span>(0, 0, 0, .9) <span class="number">75%</span>);</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line"><span class="comment">/* 调用动画 指定对应 持续时间 运动时的节奏 延迟时间 循环次数 对应动画 */</span></span><br><span class="line">  <span class="attribute">-webkit-animation</span>: <span class="number">4s</span> linear <span class="number">0s</span> infinite alternate move_eye;</span><br><span class="line">          <span class="attribute">animation</span>: <span class="number">4s</span> linear <span class="number">0s</span> infinite alternate move_eye;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 定义动画 */</span></span><br><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> move_eye &#123; <span class="selector-tag">from</span> &#123; <span class="attribute">margin-left</span>: -<span class="number">20%</span>; &#125; <span class="selector-tag">to</span> &#123; <span class="attribute">margin-left</span>: <span class="number">100%</span>; &#125;  &#125;</span><br><span class="line">        @<span class="keyword">keyframes</span> move_eye &#123; <span class="selector-tag">from</span> &#123; <span class="attribute">margin-left</span>: -<span class="number">20%</span>; &#125; <span class="selector-tag">to</span> &#123; <span class="attribute">margin-left</span>: <span class="number">100%</span>; &#125;  &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;zoom&quot;&gt;&lt;a href=&quot;#zoom&quot; class=&quot;headerlink&quot; title=&quot;zoom&quot;&gt;&lt;/a&gt;&lt;code&gt;zoom&lt;/code&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;不是标准属性&lt;/li&gt;
&lt;li&gt;对文字最小缩到 12pX&lt;/li&gt;
&lt;li&gt;缩放位置相
      
    
    </summary>
    
      <category term="CSS" scheme="https://owen027.github.io/categories/CSS/"/>
    
    
      <category term="zoom and transform:scale" scheme="https://owen027.github.io/tags/zoom-and-transform-scale/"/>
    
  </entry>
  
  <entry>
    <title>vueNotes</title>
    <link href="https://owen027.github.io/2019/06/13/vueNotes/"/>
    <id>https://owen027.github.io/2019/06/13/vueNotes/</id>
    <published>2019-06-13T10:17:27.000Z</published>
    <updated>2019-06-24T16:14:37.070Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初始渲染的钩子函数-created-mounted-等"><a href="#初始渲染的钩子函数-created-mounted-等" class="headerlink" title="初始渲染的钩子函数 created  mounted 等"></a>初始渲染的钩子函数 created  mounted 等</h3><ol><li><p>可以取到 data 中的数据，取不到 props 中的数据，可以通过 computed 或者 watch 属性监听变化</p></li><li><p>如果想要组件或者原生HTML节点重新渲染可以使用 v-if</p></li><li><p>使用 prototype 挂载自定义方法或插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$bus = Bus; </span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">Vue.use(bus);</span><br></pre></td></tr></table></figure></li><li><p>获取本机 IP 地址</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>);</span><br><span class="line"><span class="keyword">const</span> ip = showObj(os.networkInterfaces());</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showObj</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="comment">/*     for (let devName in obj)&#123;</span></span><br><span class="line"><span class="comment">        let iface = obj[devName];</span></span><br><span class="line"><span class="comment">        for (let i = 0;i &lt; iface.length;i++)&#123;</span></span><br><span class="line"><span class="comment">            let alias = iface[i];</span></span><br><span class="line"><span class="comment">            if (alias.family === 'IPv4' </span></span><br><span class="line"><span class="comment">                &amp;&amp; alias.address !== '127.0.0.1' </span></span><br><span class="line"><span class="comment">                &amp;&amp; !alias.internal)&#123;</span></span><br><span class="line"><span class="comment">                return alias.address;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> devName <span class="keyword">in</span> obj)&#123;</span><br><span class="line">             <span class="keyword">let</span> iface = obj[devName];</span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">let</span> alias <span class="keyword">of</span> iface )&#123;</span><br><span class="line">                <span class="keyword">if</span> ( alias.family === <span class="string">'IPv4'</span>  &amp;&amp; alias.address !== <span class="string">'127.0.0.1'</span>  &amp;&amp; !alias.internal) <span class="keyword">return</span> alias.address;</span><br><span class="line">             &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;初始渲染的钩子函数-created-mounted-等&quot;&gt;&lt;a href=&quot;#初始渲染的钩子函数-created-mounted-等&quot; class=&quot;headerlink&quot; title=&quot;初始渲染的钩子函数 created  mounted 等&quot;&gt;&lt;/a&gt;初始渲染
      
    
    </summary>
    
      <category term="notes" scheme="https://owen027.github.io/categories/notes/"/>
    
    
      <category term="vue question" scheme="https://owen027.github.io/tags/vue-question/"/>
    
  </entry>
  
  <entry>
    <title>array method</title>
    <link href="https://owen027.github.io/2019/05/20/array/"/>
    <id>https://owen027.github.io/2019/05/20/array/</id>
    <published>2019-05-20T10:25:19.000Z</published>
    <updated>2019-06-30T16:03:54.947Z</updated>
    
    <content type="html"><![CDATA[<p>js 内置 7种类型</p><blockquote><p>基本类型: string number boolean null undefined symbol </p></blockquote><blockquote><p>引用类型: object</p></blockquote><hr><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><blockquote><p>es3/es5:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//改变原数组</span></span><br><span class="line"><span class="comment">//push :向数组尾部添加数据 可添加多位</span></span><br><span class="line"><span class="comment">//自定义push</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.push =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//pop :剪切尾部一项数据</span></span><br><span class="line"><span class="comment">//unshift : 向数组前方添加数据</span></span><br><span class="line"><span class="comment">//revesre : 翻转数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//splice : 第一个参数从第几位开始，第二个参数，截取几位，第三个参数覆盖截取的数据，返回截取的数据</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">sort :排序</span></span><br><span class="line"><span class="comment">一个函数为参数 ，同时 函数必须有两参数(a,b)</span></span><br><span class="line"><span class="comment">1. 函数返回值为正时 b在a前面</span></span><br><span class="line"><span class="comment">2. 为负数时 a在b前面</span></span><br><span class="line"><span class="comment">3. 0 时 不动</span></span><br><span class="line"><span class="comment">原理冒泡排序 */</span></span><br><span class="line"> <span class="keyword">var</span> obj = [&#123;<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">name</span>:<span class="string">'1'</span>&#125;,&#123;<span class="attr">age</span>:<span class="number">38</span>,<span class="attr">name</span>:<span class="string">'1'</span>&#125;,&#123;<span class="attr">age</span>:<span class="number">14</span>,<span class="attr">name</span>:<span class="string">'1'</span>&#125;,&#123;<span class="attr">age</span>:<span class="number">28</span>,<span class="attr">name</span>:<span class="string">'1'</span>&#125;], </span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.age - b.age;<span class="comment">//升序</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//打乱有序的数组</span></span><br><span class="line"></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random() - <span class="number">0.6</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//不改变原数组需要变量接收</span></span><br><span class="line">concat ： 拼接数组并返回 </span><br><span class="line"></span><br><span class="line">join : 将数组每一位以传进的参数链接</span><br><span class="line"></span><br><span class="line">slice : 第一个参数 开始截取为，第二个参数 截取到的位置</span><br><span class="line"></span><br><span class="line"><span class="comment">//将类数组转化为数组 </span></span><br><span class="line"><span class="keyword">var</span> arr=[].slice.call(<span class="built_in">arguments</span>)</span><br></pre></td></tr></table></figure></p></blockquote><hr><h4 id="string-methods"><a href="#string-methods" class="headerlink" title="string methods"></a>string methods</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str =<span class="string">'123'</span></span><br><span class="line">str.split(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//camelize: 连字符转驼峰</span></span><br><span class="line"><span class="keyword">const</span> camelizeRE = <span class="regexp">/-(\w)/g</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> camelize = cached((str: string): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> str.replace(camelizeRE, ( _, c) =&gt; c ? c.toUpperCase() : <span class="string">''</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//变量的值转换为 string 类型并返回</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">toString</span> (<span class="params">val: any</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val == <span class="literal">null</span></span><br><span class="line">    ? <span class="string">''</span></span><br><span class="line">    : <span class="keyword">typeof</span> val === <span class="string">'object'</span></span><br><span class="line">      ? <span class="built_in">JSON</span>.stringify(val, <span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line">      : <span class="built_in">String</span>(val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="interation-method"><a href="#interation-method" class="headerlink" title="interation method"></a>interation method</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">const</span> inventors = [</span><br><span class="line">      &#123; <span class="attr">first</span>: <span class="string">'Albert'</span>, <span class="attr">last</span>: <span class="string">'Einstein'</span>, <span class="attr">year</span>: <span class="number">1879</span>, <span class="attr">passed</span>: <span class="number">1955</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">first</span>: <span class="string">'Isaac'</span>, <span class="attr">last</span>: <span class="string">'Newton'</span>, <span class="attr">year</span>: <span class="number">1643</span>, <span class="attr">passed</span>: <span class="number">1727</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">first</span>: <span class="string">'Galileo'</span>, <span class="attr">last</span>: <span class="string">'Galilei'</span>, <span class="attr">year</span>: <span class="number">1564</span>, <span class="attr">passed</span>: <span class="number">1642</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">first</span>: <span class="string">'Marie'</span>, <span class="attr">last</span>: <span class="string">'Curie'</span>, <span class="attr">year</span>: <span class="number">1867</span>, <span class="attr">passed</span>: <span class="number">1934</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">first</span>: <span class="string">'Johannes'</span>, <span class="attr">last</span>: <span class="string">'Kepler'</span>, <span class="attr">year</span>: <span class="number">1571</span>, <span class="attr">passed</span>: <span class="number">1630</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">first</span>: <span class="string">'Nicolaus'</span>, <span class="attr">last</span>: <span class="string">'Copernicus'</span>, <span class="attr">year</span>: <span class="number">1473</span>, <span class="attr">passed</span>: <span class="number">1543</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">first</span>: <span class="string">'Max'</span>, <span class="attr">last</span>: <span class="string">'Planck'</span>, <span class="attr">year</span>: <span class="number">1858</span>, <span class="attr">passed</span>: <span class="number">1947</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">first</span>: <span class="string">'Katherine'</span>, <span class="attr">last</span>: <span class="string">'Blodgett'</span>, <span class="attr">year</span>: <span class="number">1898</span>, <span class="attr">passed</span>: <span class="number">1979</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">first</span>: <span class="string">'Ada'</span>, <span class="attr">last</span>: <span class="string">'Lovelace'</span>, <span class="attr">year</span>: <span class="number">1815</span>, <span class="attr">passed</span>: <span class="number">1852</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">first</span>: <span class="string">'Sarah E.'</span>, <span class="attr">last</span>: <span class="string">'Goode'</span>, <span class="attr">year</span>: <span class="number">1855</span>, <span class="attr">passed</span>: <span class="number">1905</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">first</span>: <span class="string">'Lise'</span>, <span class="attr">last</span>: <span class="string">'Meitner'</span>, <span class="attr">year</span>: <span class="number">1878</span>, <span class="attr">passed</span>: <span class="number">1968</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">first</span>: <span class="string">'Hanna'</span>, <span class="attr">last</span>: <span class="string">'Hammarström'</span>, <span class="attr">year</span>: <span class="number">1829</span>, <span class="attr">passed</span>: <span class="number">1909</span> &#125;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.prototype.filter()</span></span><br><span class="line"><span class="comment">// 1. Filter the list of inventors for those who were born in the 1500's</span></span><br><span class="line"><span class="keyword">let</span> Filters= inventors.filter(<span class="function"><span class="params">el</span> =&gt;</span> el.year&lt;<span class="number">1600</span> )</span><br><span class="line">     <span class="built_in">console</span>.table(Filters)</span><br><span class="line"><span class="comment">// Array.prototype.map()</span></span><br><span class="line"><span class="comment">// 2. Give us an array of the inventors' first and last names</span></span><br><span class="line"><span class="keyword">let</span> maps = inventors.map(<span class="function"><span class="params">el</span> =&gt;</span><span class="string">`<span class="subst">$&#123;el.first&#125;</span> <span class="subst">$&#123;el.last&#125;</span>`</span>)</span><br><span class="line">     <span class="built_in">console</span>.log(maps)</span><br><span class="line"><span class="comment">// Array.prototype.sort()</span></span><br><span class="line"><span class="comment">// 3. Sort the inventors by birthdate, oldest to youngest</span></span><br><span class="line">     inventors.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a.year-b.year)</span><br><span class="line">     <span class="built_in">console</span>.table(inventors)</span><br><span class="line"><span class="comment">// Array.prototype.reduce()</span></span><br><span class="line"><span class="comment">// 4. How many years did all the inventors live?</span></span><br><span class="line">     <span class="keyword">let</span> lives = inventors.reduce(<span class="function">(<span class="params">first,second</span>)=&gt;</span>(first+(second.passed - second.year)), <span class="number">0</span>)</span><br><span class="line">     <span class="built_in">console</span>.table(lives)</span><br><span class="line"><span class="comment">// 5. Sort the inventors by years lived</span></span><br><span class="line">     inventors.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> -((a.passed-a.year)-(b.passed-b.year)))</span><br><span class="line">     <span class="built_in">console</span>.table(inventors)</span><br><span class="line">      <span class="keyword">const</span> people = [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'Wes'</span>, <span class="attr">year</span>: <span class="number">1988</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'Kait'</span>, <span class="attr">year</span>: <span class="number">1986</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'Irv'</span>, <span class="attr">year</span>: <span class="number">1970</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'Lux'</span>, <span class="attr">year</span>: <span class="number">2015</span> &#125;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> coms = [</span><br><span class="line">     &#123; <span class="attr">text</span>: <span class="string">'Love this!'</span>, <span class="attr">id</span>: <span class="number">523423</span> &#125;,</span><br><span class="line">     &#123; <span class="attr">text</span>: <span class="string">'Super good'</span>, <span class="attr">id</span>: <span class="number">823423</span> &#125;,</span><br><span class="line">     &#123; <span class="attr">text</span>: <span class="string">'You are the best'</span>, <span class="attr">id</span>: <span class="number">2039842</span> &#125;,</span><br><span class="line">     &#123; <span class="attr">text</span>: <span class="string">'Ramen is my fav food ever'</span>, <span class="attr">id</span>: <span class="number">123523</span> &#125;,</span><br><span class="line">     &#123; <span class="attr">text</span>: <span class="string">'Nice Nice Nice!'</span>, <span class="attr">id</span>: <span class="number">542328</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Some and Every Checks</span></span><br><span class="line"><span class="comment">// Array.prototype.some() // is at least one person 19 or older?</span></span><br><span class="line"><span class="keyword">let</span> isNineOld = people.some(<span class="function"><span class="params">el</span>=&gt;</span> (<span class="keyword">new</span> <span class="built_in">Date</span>()).getFullYear() - el.year&gt;=<span class="number">19</span>)</span><br><span class="line"><span class="comment">// Array.prototype.every() // is everyone 19 or older?</span></span><br><span class="line"><span class="keyword">let</span> everyone=people.every(<span class="function"><span class="params">el</span>=&gt;</span> (<span class="keyword">new</span> <span class="built_in">Date</span>()).getFullYear() - el.year&gt;=<span class="number">19</span>)</span><br><span class="line"><span class="comment">// Array.prototype.find()</span></span><br><span class="line"><span class="comment">// Find is like filter, but instead returns just the one you are looking for</span></span><br><span class="line"><span class="comment">// find the comment with the ID of 823423</span></span><br><span class="line"><span class="keyword">let</span> comment = coms.find(<span class="function"><span class="params">el</span>=&gt;</span>el.id ===<span class="number">823423</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.prototype.findIndex()</span></span><br><span class="line"><span class="comment">// Find the comment with this ID</span></span><br><span class="line"><span class="keyword">let</span> i = coms.findIndex(<span class="function"><span class="params">el</span>=&gt;</span>el.id ===<span class="number">823423</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete the comment with the ID of 823423</span></span><br><span class="line"><span class="keyword">let</span> newcoms = [...coms.slice(<span class="number">0</span>,i),coms.slice(i+<span class="number">1</span>)]</span><br><span class="line">coms.splice(i,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 举一个比较典型的例子，看完后即明白 Label 的应用：（未添加 Label）</span></span><br><span class="line">        <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++)&#123;</span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span> ; j &lt; <span class="number">10</span> ; j++)&#123;</span><br><span class="line">                  <span class="keyword">if</span>( i == <span class="number">5</span> &amp;&amp; j == <span class="number">5</span> )&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">             num++;</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        alert(num); <span class="comment">// 循环在 i 为5，j 为5的时候跳出 j循环，但会继续执行 i 循环，输出 95</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对比使用了 Label 之后的程序：（添加 Label 后）</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">    outPoint:</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++)&#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span> ; j &lt; <span class="number">10</span> ; j++)&#123;</span><br><span class="line">              <span class="keyword">if</span>( i == <span class="number">5</span> &amp;&amp; j == <span class="number">5</span> )&#123;</span><br><span class="line">                    <span class="keyword">break</span> outPoint;</span><br><span class="line">              &#125;</span><br><span class="line">         num++;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    alert(num); <span class="comment">// 循环在 i 为5，j 为5的时候跳出双循环，返回到outPoint层继续执行，输出 55</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;js 内置 7种类型&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;基本类型: string number boolean null undefined symbol &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;引用类型: object&lt;/p&gt;
&lt;/bl
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://owen027.github.io/categories/JavaScript/"/>
    
    
      <category term="es5" scheme="https://owen027.github.io/tags/es5/"/>
    
  </entry>
  
  <entry>
    <title>algorithm</title>
    <link href="https://owen027.github.io/2019/04/21/algorithm/"/>
    <id>https://owen027.github.io/2019/04/21/algorithm/</id>
    <published>2019-04-21T15:39:47.000Z</published>
    <updated>2019-06-05T15:15:29.020Z</updated>
    
    <content type="html"><![CDATA[<h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><ul><li>时间复杂度: 一个算法执行所耗费的时间。<blockquote><p>一个算法花费的时间与算法中语句的执行次数成正比例,一个算法中的语句执行次数称为语句频度或时间频度。记为T(n)。<br>n称为问题的规模，当n不断变化时，时间频度T(n)也会不断变化，要知道变化时呈现什么规律就引入了时间复杂度概念<br>算法中基本操作重复执行的次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n),使得当n趋近于无穷大时，T（n)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作T(n)=Ｏ(f(n)),称Ｏ(f(n)) 为算法的渐进时间复杂度，简称时间复杂度。</p></blockquote></li><li>空间复杂度: 运行完一个程序所需内存的大小。<blockquote><p>一个算法所需的存储空间用f(n)表示。S(n)=O(f(n))　　其中n为问题的规模，S(n)表示空间复杂度。</p></blockquote></li><li>内排序：所有排序操作都在内存中完成； 外排序：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</li><li>稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面； 不稳定：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面；<br><img src="/static/img/big-o-graph.png" alt="复杂度"></li></ul><p><a href="https://liuchuanliang.com/time-and-space-complexity/" target="_blank" rel="noopener">更多信息</a></p><hr><h3 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h3><ul><li>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素(自己不能跟自己加起来等于target)。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure><p>解答：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; target</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 方法一  嵌套循环  时间复杂度：O(n^2) 空间：O(2)</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> [i,k] <span class="keyword">of</span> nums.entries())&#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">let</span> j = i+<span class="number">1</span>; j&lt; nums.length; j++) &#123;</span><br><span class="line">              <span class="keyword">if</span>(  (target - k) === nums[j]) &#123;</span><br><span class="line">               <span class="keyword">return</span>  [i,j];</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 方法二 嵌套循环 比 方法一 更快 </span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> len = nums.length;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> j = i+<span class="number">1</span>; j&lt;len; j++) &#123;</span><br><span class="line">                   <span class="keyword">if</span>( (target - nums[i]) === nums[j]) &#123;</span><br><span class="line">                   <span class="keyword">return</span>  [i,j];</span><br><span class="line">                 &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 方法三 has表   时间复杂度：O(n) 空间：O(n)</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存储对应的值 和 索引 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;userManage</span><br><span class="line">      <span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">      <span class="keyword">const</span> len = nums.length；</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++ ) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(m.has(nums[i]) &amp;&amp; m.get(nums[i]) !== i)&#123;</span><br><span class="line">            <span class="keyword">return</span> [m.get(nums[i]),i]</span><br><span class="line">        &#125;</span><br><span class="line">            m.set((target - nums[i]),i); </span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">      <span class="keyword">const</span> len = nums.length；</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++ ) &#123;</span><br><span class="line">        <span class="keyword">let</span>  res = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span>(m.has(res) &amp;&amp; m.get(res) !== i)&#123;</span><br><span class="line">            <span class="keyword">return</span> [m.get(res),i]</span><br><span class="line">        &#125;</span><br><span class="line">            m.set(nums[i],i); </span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="整数反转"><a href="#整数反转" class="headerlink" title="整数反转"></a>整数反转</h3><ul><li>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。<blockquote><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; x</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverse = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">let</span> res =( x+<span class="string">''</span> ).split(<span class="string">""</span>);</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(res[<span class="number">0</span>] !== <span class="string">'-'</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> num = <span class="built_in">parseInt</span>(res.reverse().join(<span class="string">''</span>),<span class="number">10</span>);</span><br><span class="line">         <span class="keyword">if</span>( num&gt; <span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">31</span>) <span class="number">-1</span>)&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">         &#125;</span><br><span class="line">       <span class="keyword">return</span> num; </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.reverse().pop();</span><br><span class="line">      <span class="keyword">let</span> num = <span class="built_in">parseInt</span>(res.join(<span class="string">''</span>),<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span>( num&gt; <span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">31</span>) <span class="number">-1</span>)&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">'-'</span> + num; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h3><ul><li><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数 。</p><blockquote><p>输入: 121 输出: true<br>输入: -121 输出: false  解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。<br>输入: 10  输出: false  解释: 从右向左读, 为 01 。因此它不是一个回文数。<br>注意 0 是回文数</p></blockquote></li><li><p>进阶: 不将整数转为字符串来解决这个问题 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; x</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">// 方法 一 转化未字符串</span></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span>  x &lt; <span class="number">0</span>? <span class="literal">false</span>: (<span class="built_in">parseInt</span>((x+<span class="string">''</span>).split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)) === x ? <span class="literal">true</span> : <span class="literal">false</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法二  中间数的右边反转后 等于 左边 </span></span><br><span class="line"><span class="comment"> * 提取中间数的右边 通过 *10 、 %10 来提取   </span></span><br><span class="line"><span class="comment"> * */</span> </span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">int</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(int &lt; <span class="number">0</span> ||  (int%<span class="number">10</span> === <span class="number">0</span> &amp;&amp; int !== <span class="number">0</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (int &gt; num )&#123;</span><br><span class="line">        num = num * <span class="number">10</span> + int % <span class="number">10</span>;</span><br><span class="line">        int = <span class="built_in">parseInt</span>(int/<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">console</span>.log(int,num)</span><br><span class="line">    <span class="keyword">return</span>  int === num || int === <span class="built_in">parseInt</span>(num/<span class="number">10</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;术语&quot;&gt;&lt;a href=&quot;#术语&quot; class=&quot;headerlink&quot; title=&quot;术语&quot;&gt;&lt;/a&gt;术语&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;时间复杂度: 一个算法执行所耗费的时间。&lt;blockquote&gt;
&lt;p&gt;一个算法花费的时间与算法中语句的执行次数成正比例,一个算
      
    
    </summary>
    
      <category term="algorithm" scheme="https://owen027.github.io/categories/algorithm/"/>
    
    
      <category term="Sum of two numbers" scheme="https://owen027.github.io/tags/Sum-of-two-numbers/"/>
    
  </entry>
  
  <entry>
    <title>Axios</title>
    <link href="https://owen027.github.io/2019/04/17/axios/"/>
    <id>https://owen027.github.io/2019/04/17/axios/</id>
    <published>2019-04-17T12:40:28.000Z</published>
    <updated>2019-06-24T16:14:37.068Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原生Ajax"><a href="#原生Ajax" class="headerlink" title="原生Ajax"></a>原生Ajax</h3><ul><li>异步的JavaScript与XML技术（ Asynchronous JavaScript and XML ）</li><li>Ajax 不需要任何浏览器插件，能在不更新整个页面的前提下维护数据，但需要用户允许JavaScript在浏览器上执行。<h4 id="XMLHttpRequest-对象"><a href="#XMLHttpRequest-对象" class="headerlink" title="XMLHttpRequest 对象"></a><code>XMLHttpRequest</code> 对象</h4></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ajax</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.url = obj.url ||<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">this</span>.type = obj.type || <span class="string">'get'</span>;</span><br><span class="line">    <span class="keyword">this</span>.data = obj.data ||&#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.success = obj.success || <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.error = obj.error || <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 再原型上创建方法</span></span><br><span class="line">Ajax.prototype.send = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span>  toStr = <span class="built_in">Object</span>.prototype.toString; </span><br><span class="line">    <span class="keyword">if</span> (self.data === <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> self.data !== <span class="string">'object'</span> &amp;&amp; <span class="built_in">Array</span>.isArray(obj)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 实例化 XML对象</span></span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            <span class="keyword">var</span> data = <span class="string">''</span>;</span><br><span class="line">            <span class="comment">// 序列化参数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> self.data)&#123;</span><br><span class="line">                    data += k + <span class="string">'='</span> + self.data[k] + <span class="string">'&amp;'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            data = data.substr(<span class="number">0</span>,data.length - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 接收回调函数             </span></span><br><span class="line">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span> || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">                        isFunction(self.success)  &amp;&amp;  self.success(xhr.responseText)</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        isFunction(self.error)  &amp;&amp; self.error(xhr)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 初始化请求</span></span><br><span class="line">            <span class="keyword">if</span>(self.type.toLocaleLowerCase() === <span class="string">'post'</span>)&#123;</span><br><span class="line">                    xhr.open (<span class="string">'post'</span>,self.url,<span class="literal">true</span>)</span><br><span class="line">                    <span class="comment">// 设置请求头</span></span><br><span class="line">                    xhr.setRequestHeader(<span class="string">'Content-Type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">                    <span class="comment">//发送请求</span></span><br><span class="line">                    xhr.send(data)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    xhr.open(<span class="string">'get'</span>, self.url + <span class="string">"?"</span> + data,<span class="literal">true</span>)</span><br><span class="line">                    xhr.send(<span class="literal">null</span>)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> toStr.call(obj) === <span class="string">"[object Function]"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ajax = <span class="keyword">new</span> Ajax(&#123;</span><br><span class="line">     type:<span class="string">'post'</span>,</span><br><span class="line">     url:<span class="string">"/login"</span>,</span><br><span class="line">     data:&#123; </span><br><span class="line">         loginname:<span class="string">"admin"</span>,</span><br><span class="line">         password:<span class="string">"admin"</span> </span><br><span class="line">        &#125;,</span><br><span class="line">      success:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(e)</span><br><span class="line">            &#125;, </span><br><span class="line">       error:<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(err)</span><br><span class="line">              &#125;,</span><br><span class="line">        &#125;).send();</span><br></pre></td></tr></table></figure><h4 id="XMLHttpRequest-Level-2-相比于-老版本的-XMLHttpRequest-新增以下内容："><a href="#XMLHttpRequest-Level-2-相比于-老版本的-XMLHttpRequest-新增以下内容：" class="headerlink" title="XMLHttpRequest Level 2 相比于 老版本的 XMLHttpRequest 新增以下内容："></a><code>XMLHttpRequest Level 2</code> 相比于 老版本的 <code>XMLHttpRequest</code> 新增以下内容：</h4><h5 id="可以设置-HTTP-请求超时时间"><a href="#可以设置-HTTP-请求超时时间" class="headerlink" title="可以设置 HTTP 请求超时时间"></a>可以设置 HTTP 请求超时时间</h5>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'GET'</span>,<span class="string">'url'</span>);</span><br><span class="line"><span class="comment">// 超时 2s</span></span><br><span class="line">xhr.timeout = <span class="number">2000</span>;</span><br><span class="line"><span class="comment">// 超时处理</span></span><br><span class="line">xhr.ontimeout = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;</span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure><h5 id="可以通过-FormData-发送表单数据"><a href="#可以通过-FormData-发送表单数据" class="headerlink" title="可以通过 FormData 发送表单数据"></a>可以通过 <code>FormData</code> 发送表单数据</h5>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 实例化 FormData</span></span><br><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line"> <span class="comment">// 添加数据</span></span><br><span class="line"> formData.append(key,value);</span><br><span class="line"></span><br><span class="line"> xhr.open(<span class="string">'POST'</span>,<span class="string">'url'</span>);</span><br><span class="line"> xhr.send(formData);</span><br></pre></td></tr></table></figure><h5 id="可以上传文件"><a href="#可以上传文件" class="headerlink" title="可以上传文件"></a>可以上传文件</h5><ul><li><code>FormData</code> 除了可以添加字符串数据，也可以添加 <code>blob、file</code> 类型的数据，因此可以用于上传文件。</li><li><p>在浏览器中，一般是通过文件上传输入框来获取 file 对象，比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">'uploadFile'</span> <span class="attr">id</span>=<span class="string">"upload-file"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'upload-file'</span>)</span><br><span class="line">        .addEventListener(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">            <span class="comment">// 获取数据</span></span><br><span class="line">              formData.append(<span class="string">'uploadFile'</span>, <span class="keyword">this</span>.files[<span class="number">0</span>])</span><br><span class="line">               xhr.send(formData)</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="支持跨域请求"><a href="#支持跨域请求" class="headerlink" title="支持跨域请求"></a>支持跨域请求</h5><ul><li>浏览器默认是不允许跨域请求的，有时候又是必要的，在以前通常使用<a href="https://baike.baidu.com/item/JSONP" target="_blank" rel="noopener"><code>JSONP</code></a>来解决（IE10 以下不支持）</li><li>为了标准化跨域请求， W3C提出 <a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享</a>（CORS）前端无须修改代码，只需 服务器返回 <code>Access-Control-Allow-Origin</code> 响应头，指定允许对应的域</li><li><code>CORS</code> 默认不发送 <code>cookie</code> 如果需要发送，前端需要设置 <code>withCredentials</code>属性，同时服务器需要 返回 <code>Access-Control-Allow-Credentials: true</code>,<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></li></ul><h5 id="可以获取服务端二进制数据"><a href="#可以获取服务端二进制数据" class="headerlink" title="可以获取服务端二进制数据"></a>可以获取服务端二进制数据</h5><ol><li>使用 <code>overrideMimeType</code> 方法覆写服务器指定的 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="noopener"><code>MIME</code></a> 类型，从而改变浏览器解析数据的方式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数 MIME 类型</span></span><br><span class="line"><span class="comment">// 告诉浏览器，服务器响应的内容是用户自定义的字符集 </span></span><br><span class="line">xhr.overrideMimeType(<span class="string">'text/plain; charset=x-user-defined'</span>);</span><br><span class="line"><span class="comment">// 浏览器就会将服务器返回的二进制数据当成文本处理，我们需要做进一步的转换才能拿到真实的数据</span></span><br><span class="line">  <span class="comment">// 获取二进制数据的第 i 位的值</span></span><br><span class="line">  <span class="keyword">var</span> byte = xhr.responseText.charCodeAt(i) &amp; <span class="number">0xff</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>“&amp; 0xff” 运算 参考 <a href="http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html" target="_blank" rel="noopener">阮一峰的文章</a></li></ul><ol start="2"><li>xhr.responseType 用于设置服务器返回的数据的类型,将<code>返回类型设置为 blob 或者 arraybuffer</code>，然后就可以从 <code>xhr.response</code> 属性获取到对应类型的服务器返回数据。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xhr.responseType = <span class="string">'arraybuffer'</span></span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> arrayBuffer = xhr.response</span><br><span class="line"><span class="comment">// 接下来对 arrayBuffer 做进一步处理...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="可以获取数据传输进度信息-参考资料"><a href="#可以获取数据传输进度信息-参考资料" class="headerlink" title="可以获取数据传输进度信息 参考资料"></a>可以获取数据传输进度信息 <a href="https://dev.opera.com/articles/xhr2/" target="_blank" rel="noopener">参考资料</a></h5><ul><li>使用  onload 监听了一个数据传输完成的事件。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上传进度监听</span></span><br><span class="line">xhr.upload.addEventListener(<span class="string">'progress'</span>, onProgressHandler, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传输成功完成</span></span><br><span class="line">xhr.upload.addEventListener(<span class="string">'load'</span>, onLoadHandler, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 传输失败信息</span></span><br><span class="line">xhr.upload.addEventListener(<span class="string">'error'</span>, onErrorHandler, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h4><p><img src="/static/img/xml.png" alt="XMLHttpRequest"></p><p>更多资料参考:<br><a href="http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html" target="_blank" rel="noopener">阮一峰的文章</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">MDN</a></p><hr><h3 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h3><ul><li>基于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise</a> 的 Http 库 </li><li>可以在客户端 和 nodeJs中使用</li><li>在客户端创基 XMLHttpRequests</li><li>在nodeJs 创建 <a href="https://nodejs.org/api/http.html" target="_blank" rel="noopener">HTTP</a> 请求</li><li>支持Promise</li><li>可拦截转化请求和响应数据</li><li>取消请求</li><li>自动转化JSON数据</li><li>支持客户端 <a href="https://en.wikipedia.org/wiki/Cross-site_request_forgery" target="_blank" rel="noopener">XSRF</a></li></ul><h4 id="兼容性-1"><a href="#兼容性-1" class="headerlink" title="兼容性"></a>兼容性</h4><p><img src="/static/img/axios.png" alt="axios"></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><h4 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h4><h5 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>)</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'url?id=xxx'</span>)</span><br><span class="line">     .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(res)</span><br><span class="line">     &#125;)</span><br><span class="line">     .catch(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(err)</span><br><span class="line">     &#125;)</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">axios.get(<span class="string">'url'</span>,&#123;</span><br><span class="line">  params:&#123;</span><br><span class="line">    id:<span class="string">'xxxxx'</span></span><br><span class="line">  &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">   .then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(res)</span><br><span class="line">   &#125;)</span><br><span class="line">   .catch(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(err)</span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure><ul><li><p>同样的传参方法有 delete</p><h5 id="post"><a href="#post" class="headerlink" title="post"></a>post</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="string">'url'</span>,&#123;<span class="attr">name</span>:<span class="string">'Owen'</span>&#125;)</span><br><span class="line">     .then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(res)</span><br><span class="line">     &#125;)</span><br><span class="line">     .catch(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(err)</span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure></li><li><p>同样的传参方法有  put patch</p><h5 id="concurrent-requests"><a href="#concurrent-requests" class="headerlink" title="concurrent requests"></a>concurrent requests</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.all([axios.get(<span class="string">'url1'</span>),axios.get(<span class="string">'url2'</span>)])</span><br></pre></td></tr></table></figure></li></ul><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><ul><li><code>axios(config)</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">axios(&#123;</span><br><span class="line">  method:<span class="string">'get'</span>, <span class="comment">// default is get </span></span><br><span class="line">  url:<span class="string">'url'</span>, <span class="comment">// request  url</span></span><br><span class="line">  data:&#123; <span class="comment">// 仅支持post，put和patch方法，数据作为请求主体发送 ( Only the post,put and patch methods are supported, and the data is sent as the request body )</span></span><br><span class="line">  <span class="comment">/* 浏览器仅支持传递 FormData, File, Blob （The browser only supports passing FormData, File and Blob)</span></span><br><span class="line"><span class="comment">     Node 仅支持传递 Stream, Buffer (The Node only supports passing Stream, Buffer)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    name:<span class="string">'owen'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  baseURL:<span class="string">'base/url'</span>, <span class="comment">// 除非url是绝对路径，否则将baseURL添加到url的前面 (Add baseURL to then front of the url unless the url is an absolute path)</span></span><br><span class="line">  transformRequest: [<span class="function"><span class="keyword">function</span> (<span class="params">data, headers</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 可以修改发送的请求数据和请求头，只支持put，post和patch，回调函数必须返回Buffer，ArrayBuffer，FormData或Stream数据</span></span><br><span class="line">    <span class="comment">// Can modify the sent request data and request header,only support put, post and patch.</span></span><br><span class="line">    <span class="comment">// Callback must return Buffer, ArrayBuffer, FormData or Stream data</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Do whatever you want to transform the data</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line">  transformResponse: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">     <span class="comment">// 修改响应数据，再传递给 then或catch 方法 （Modify the response data and pass it to the then or catch method)</span></span><br><span class="line">    <span class="comment">// Do whatever you want to transform the data</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line">  headers: &#123;<span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span>&#125;, <span class="comment">// 自定义请求头 (Custom request header)</span></span><br><span class="line">  params:&#123; <span class="comment">// 添加到url尾部的参数，一般用于get 和 delete（ Parameters addde to the end of the url,generally used for get and delete )</span></span><br><span class="line">    id:<span class="string">'xxx'</span></span><br><span class="line">  &#125;,</span><br><span class="line">   paramsSerializer: <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123; <span class="comment">//序列化 [params] (https://www.npmjs.com/package/qs)</span></span><br><span class="line">    <span class="keyword">return</span> Qs.stringify(params, &#123;<span class="attr">arrayFormat</span>: <span class="string">'brackets'</span>&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  timeout:<span class="number">1000</span>,<span class="comment">// default is 0 , 设置请求超时时间，单位毫秒 （ Set request timeout in milliseconds )</span></span><br><span class="line">  withCredentials: <span class="literal">true</span>, <span class="comment">// default is false, 跨域时是否携带cookie（ Whether to carry cookies when crossing domains )</span></span><br><span class="line">  adapter: <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/*拦截响应数据*/</span></span><br><span class="line">      <span class="comment">// At this point:</span></span><br><span class="line">    <span class="comment">//  - config has been merged with defaults</span></span><br><span class="line">    <span class="comment">//  - request transformers have already run</span></span><br><span class="line">    <span class="comment">//  - request interceptors have already run</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Make the request using config provided</span></span><br><span class="line">    <span class="comment">// Upon response settle the Promise</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">var</span> response = &#123;</span><br><span class="line">      data: responseData,</span><br><span class="line">      status: request.status,</span><br><span class="line">      statusText: request.statusText,</span><br><span class="line">      headers: responseHeaders,</span><br><span class="line">      config: config,</span><br><span class="line">      request: request</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    settle(resolve, reject, response);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// From here:</span></span><br><span class="line">    <span class="comment">//  - response transformers will run</span></span><br><span class="line">    <span class="comment">//  - response interceptors will run</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * Resolve or reject a Promise based on response status.</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       * @param &#123;Function&#125; resolve A function that resolves the promise.</span></span><br><span class="line"><span class="comment">       * @param &#123;Function&#125; reject A function that rejects the promise.</span></span><br><span class="line"><span class="comment">       * @param &#123;object&#125; response The response.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">settle</span>(<span class="params">resolve, reject, response</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> validateStatus = response.config.validateStatus;</span><br><span class="line">            <span class="keyword">if</span> (!validateStatus || validateStatus(response.status)) &#123;</span><br><span class="line">              resolve(response);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              reject(createError(</span><br><span class="line">                <span class="string">'Request failed with status code '</span> + response.status,</span><br><span class="line">                response.config,</span><br><span class="line">                <span class="literal">null</span>,</span><br><span class="line">                response.request,</span><br><span class="line">                response</span><br><span class="line">              ));</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Create an Error with the specified message, config, error code, request and response.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @param &#123;string&#125; message The error message.</span></span><br><span class="line"><span class="comment">         * @param &#123;Object&#125; config The config.</span></span><br><span class="line"><span class="comment">         * @param &#123;string&#125; [code] The error code (for example, 'ECONNABORTED').</span></span><br><span class="line"><span class="comment">         * @param &#123;Object&#125; [request] The request.</span></span><br><span class="line"><span class="comment">         * @param &#123;Object&#125; [response] The response.</span></span><br><span class="line"><span class="comment">         * @returns &#123;Error&#125; The created error.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">createError</span>(<span class="params">message, config, code, request, response</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> error = <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">        <span class="keyword">return</span> enhanceError(error, config, code, request, response);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Update an Error with the specified config, error code, and response.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @param &#123;Error&#125; error The error to update.</span></span><br><span class="line"><span class="comment">         * @param &#123;Object&#125; config The config.</span></span><br><span class="line"><span class="comment">         * @param &#123;string&#125; [code] The error code (for example, 'ECONNABORTED').</span></span><br><span class="line"><span class="comment">         * @param &#123;Object&#125; [request] The request.</span></span><br><span class="line"><span class="comment">         * @param &#123;Object&#125; [response] The response.</span></span><br><span class="line"><span class="comment">         * @returns &#123;Error&#125; The error.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">enhanceError</span>(<span class="params">error, config, code, request, response</span>) </span>&#123;</span><br><span class="line">            error.config = config;</span><br><span class="line">            <span class="keyword">if</span> (code) &#123;</span><br><span class="line">              error.code = code;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            error.request = request;</span><br><span class="line">            error.response = response;</span><br><span class="line">            error.isAxiosError = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            error.toJSON = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="comment">// Standard</span></span><br><span class="line">                message: <span class="keyword">this</span>.message,</span><br><span class="line">                name: <span class="keyword">this</span>.name,</span><br><span class="line">                <span class="comment">// Microsoft</span></span><br><span class="line">                description: <span class="keyword">this</span>.description,</span><br><span class="line">                number: <span class="keyword">this</span>.number,</span><br><span class="line">                <span class="comment">// Mozilla</span></span><br><span class="line">                fileName: <span class="keyword">this</span>.fileName,</span><br><span class="line">                lineNumber: <span class="keyword">this</span>.lineNumber,</span><br><span class="line">                columnNumber: <span class="keyword">this</span>.columnNumber,</span><br><span class="line">                stack: <span class="keyword">this</span>.stack,</span><br><span class="line">                <span class="comment">// Axios</span></span><br><span class="line">                config: <span class="keyword">this</span>.config,</span><br><span class="line">                code: <span class="keyword">this</span>.code</span><br><span class="line">              &#125;;</span><br><span class="line">            &#125;;</span><br><span class="line">          <span class="keyword">return</span> error;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  auth:&#123; <span class="comment">//  表示应使用HTTP Basic身份验证，并提供凭据 ( indicates that HTTP Basic auth should be used, and supplies credentials. )</span></span><br><span class="line">    user:<span class="string">'xxx'</span>,</span><br><span class="line">    password:<span class="string">'***'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  responseType: <span class="string">'json'</span>,<span class="comment">/* 服务器响应的数据类型（ The server response data type ） </span></span><br><span class="line"><span class="comment">                         支持 arraybuffer, blob, document, json, text, stream </span></span><br><span class="line"><span class="comment">                        */</span></span><br><span class="line">  responseEncoding:<span class="string">'utf8'</span>, <span class="comment">// 用于解码响应的编码 (Encoding for decoding the response )</span></span><br><span class="line">  xsrfCookieName: <span class="string">'XSRF-TOKEN'</span>, <span class="comment">// default is XSRF-TOKEN , csrf令牌Cookie 名称</span></span><br><span class="line">  xsrfHeaderName: <span class="string">'X-XSRF-TOKEN'</span>, <span class="comment">//default is X-XSRF-TOKEN, xsrf标记值的http标头的名称</span></span><br><span class="line">onUploadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123; <span class="comment">//上传进度事件 （handling of progress events for uploads ）</span></span><br><span class="line">    <span class="built_in">console</span>.log(progressEvent)</span><br><span class="line">  &#125;,</span><br><span class="line">onDownloadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123; <span class="comment">// 下载进度事件 （ handling of progress events for downloads）</span></span><br><span class="line">   <span class="built_in">console</span>.log(progressEvent)</span><br><span class="line">  &#125;,</span><br><span class="line">maxContentLength: <span class="number">2000</span>, <span class="comment">// 允许响应内容的最大字节 （defines the max size of the http response content in bytes allowed）</span></span><br><span class="line">validateStatus: <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123; <span class="comment">// 返回给定HTTP状态范围, 如果状态在给定范围内，响应数据传给`then` ，否则传给 `catch` ( Returns the given HTTP status range, if the status is within the give range, the respones data is passed to `then`, otherwise passed to `catch` ) </span></span><br><span class="line">    <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>; <span class="comment">// default</span></span><br><span class="line">  &#125;,</span><br><span class="line">  maxRedirects: <span class="number">5</span>, <span class="comment">// default is 5  // 定义Node 中最大重定向数  ( defines the maximunn number of redirects in Node )</span></span><br><span class="line">  socketPath: <span class="literal">null</span>, <span class="comment">//  default is null 定义要在node.js中使用的 UNIX socket</span></span><br><span class="line">  httpAgent: <span class="keyword">new</span> http.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;), <span class="comment">// node 中 http 和 https 的代理</span></span><br><span class="line">  httpsAgent: <span class="keyword">new</span> https.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),<span class="comment">// http://nodejs.cn/api/http.html</span></span><br><span class="line">  proxy: &#123; <span class="comment">// 代理配置</span></span><br><span class="line">    host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port: <span class="number">9000</span>,</span><br><span class="line">    auth: &#123;</span><br><span class="line">      username: <span class="string">'mikeymike'</span>,</span><br><span class="line">      password: <span class="string">'rapunz3l'</span></span><br><span class="line">          &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">    cancelToken: <span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span> (<span class="params">cancel</span>) </span>&#123; <span class="comment">// 取消请求的 token</span></span><br><span class="line">  &#125;)</span><br><span class="line">  &#125;)  </span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(res)</span><br><span class="line">     &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(err)</span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h5><ul><li><p>通过 <code>axios.create</code> 方法来替换全局配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'base/url'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>通过<code>axios.defaults</code> 对象替换全局默认配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">instance.defaults.headers.common[<span class="string">'Authorization'</span>] = AUTH_TOKEN;</span><br><span class="line">instance.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span>;</span><br></pre></td></tr></table></figure></li></ul><h5 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h5><ul><li><p>拦截请求前的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li><li><p>拦截响应数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something with response data</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something with response error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li><li><p>删除拦截器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myInterceptor = axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/*...*/</span>&#125;);</span><br><span class="line">axios.interceptors.request.eject(myInterceptor);</span><br></pre></td></tr></table></figure></li></ul><h4 id="二次封装"><a href="#二次封装" class="headerlink" title="二次封装"></a>二次封装</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @desc: axios封装</span></span><br><span class="line"><span class="comment"> * @author: ggw </span></span><br><span class="line"><span class="comment"> * @module: axios</span></span><br><span class="line"><span class="comment"> * @description: 配合使用 饿了么的 Message和Loading</span></span><br><span class="line"><span class="comment"> * @Date: 2018 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    Message,</span><br><span class="line">    Loading</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'../router'</span>; </span><br><span class="line"><span class="keyword">let</span> loading;</span><br><span class="line"><span class="keyword">let</span> headerNone = &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded; charset=UTF-8'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> headerTwo = &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/json; charset=UTF-8'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> baseURL = <span class="built_in">window</span>.location.origin ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * @description: 定义初始化Loading</span></span><br><span class="line"><span class="comment"> * @method: startLoading </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">const</span> startLoading = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    loading = Loading.service(&#123;</span><br><span class="line">        target: <span class="string">'.content-box'</span>,</span><br><span class="line">        background: <span class="string">'rgba(220, 220, 220, 0.51)'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * @description: 显示Loading 同时多个发送请求 只开启一次Loading</span></span><br><span class="line"><span class="comment"> * @method: showLoading  &amp;&amp; hideLoading</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">const</span> showLoading = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (count === <span class="number">0</span>) startLoading();</span><br><span class="line">    count++;</span><br><span class="line">&#125;;</span><br><span class="line"> <span class="keyword">const</span> hideLoading = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    count--;</span><br><span class="line">    <span class="keyword">if</span> (count === <span class="number">0</span>) &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">           loading.close();</span><br><span class="line">        &#125;, <span class="number">300</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> filiter = <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="built_in">Object</span>.keys(r)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (r[item] === <span class="string">' '</span> || r[item] === <span class="string">''</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> r[item];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * @description: 出口</span></span><br><span class="line"><span class="comment"> * @exports api</span></span><br><span class="line"><span class="comment"> * @param:options 必须是对象</span></span><br><span class="line"><span class="comment"> * options 对象为 axios对应参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (options) =&gt; &#123;</span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * @description: 用来初始化承诺的回调。</span></span><br><span class="line"><span class="comment">     * 这个回调被传递了两个参数：</span></span><br><span class="line"><span class="comment">     * 一个解析回调用一个值或另一个承诺的结果来解析承诺，</span></span><br><span class="line"><span class="comment">     * 以及一个拒绝回调，用来拒绝承诺的原因或错误。</span></span><br><span class="line"><span class="comment">     * @constructor: Promise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">            withCredentials: <span class="literal">true</span>,</span><br><span class="line">            headers: headerNone,</span><br><span class="line">            baseURL</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 请求拦截器</span></span><br><span class="line">        instance.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">             <span class="keyword">let</span> &#123;load = <span class="literal">true</span>&#125; = config.data || config.params || &#123;&#125; ;</span><br><span class="line">            <span class="keyword">if</span> (load) showLoading();</span><br><span class="line">            <span class="comment">//  过滤无值参数</span></span><br><span class="line">            <span class="keyword">if</span> (config.params) &#123;</span><br><span class="line">               <span class="keyword">delete</span> config.params.load;</span><br><span class="line">                filiter(config.params);</span><br><span class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (config.data) &#123;</span><br><span class="line">                filiter(config.data);</span><br><span class="line">               <span class="keyword">delete</span> config.data.load;</span><br><span class="line">               &#125;</span><br><span class="line">            <span class="keyword">if</span> (</span><br><span class="line">                config.method.toLocaleLowerCase() === <span class="string">'post'</span> ||</span><br><span class="line">                config.method.toLocaleLowerCase() === <span class="string">'put'</span></span><br><span class="line">            ) &#123;</span><br><span class="line">                <span class="comment">// json 格式传递</span></span><br><span class="line">                <span class="keyword">if</span> (config.json) &#123;</span><br><span class="line">                    config.headers = headerTwo;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    config.data = qs.stringify(config.data);</span><br><span class="line">                    config.data = config.data + <span class="string">'&amp;t='</span> + <span class="built_in">Date</span>.now();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> config;</span><br><span class="line">        &#125;, error =&gt; &#123;</span><br><span class="line">             hideLoading();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 响应拦截器</span></span><br><span class="line">        instance.interceptors.response.use(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">           setTimeout(hideLoading,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">let</span> data;</span><br><span class="line">            <span class="comment">// IE9时response.data是undefined，因此需要使用response.request.responseText(Stringify后的字符串)</span></span><br><span class="line">            <span class="keyword">if</span> (!response.data ) &#123;</span><br><span class="line">                data = response.request.responseText;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                data = response.data;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (data.code) &#123; <span class="comment">// 接口定义字段</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'001'</span>:</span><br><span class="line">                    Message(&#123;</span><br><span class="line">                        showClose: <span class="literal">true</span>,</span><br><span class="line">                        message: data.msg || <span class="string">'未知错误,请联系管理员'</span>,</span><br><span class="line">                        type: <span class="string">'error'</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                    router.push(&#123;</span><br><span class="line">                        path: <span class="string">'/login'</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">default</span>:</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;, err =&gt; &#123;</span><br><span class="line">          hideLoading();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (err &amp;&amp; err.response) &#123;</span><br><span class="line">                <span class="keyword">let</span> msg = &#123;</span><br><span class="line">                    <span class="number">400</span>: <span class="string">'请求错误'</span>,</span><br><span class="line">                    <span class="number">401</span>: <span class="string">'未授权，请登录'</span>,</span><br><span class="line">                    <span class="number">403</span>: <span class="string">'拒绝访问'</span>,</span><br><span class="line">                    <span class="number">404</span>: <span class="string">`请求地址出错: <span class="subst">$&#123;err.response.request.responseURL&#125;</span>`</span>,</span><br><span class="line">                    <span class="number">408</span>: <span class="string">'请求超时'</span>,</span><br><span class="line">                    <span class="number">500</span>: <span class="string">'服务器内部错误'</span>,</span><br><span class="line">                    <span class="number">501</span>: <span class="string">'服务未实现'</span>,</span><br><span class="line">                    <span class="number">502</span>: <span class="string">'网关错误'</span>,</span><br><span class="line">                    <span class="number">503</span>: <span class="string">'服务不可用'</span>,</span><br><span class="line">                    <span class="number">504</span>: <span class="string">'网关超时'</span>,</span><br><span class="line">                    <span class="number">505</span>: <span class="string">'HTTP版本不受支持'</span></span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">let</span> status = <span class="built_in">parseInt</span>(err.response.status,<span class="number">10</span>);</span><br><span class="line">                Message(&#123;</span><br><span class="line">                    showClose: <span class="literal">true</span>,</span><br><span class="line">                    message: msg[status] || <span class="string">''</span>,</span><br><span class="line">                    type: <span class="string">'error'</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Message(&#123;</span><br><span class="line">                    message: err.config ? <span class="string">`请求地址出错: <span class="subst">$&#123;err.config.url&#125;</span>`</span> : err,</span><br><span class="line">                    type: <span class="string">'error'</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 请求</span></span><br><span class="line">        instance(options)</span><br><span class="line">            .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                resolve(res);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                  reject(error);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;原生Ajax&quot;&gt;&lt;a href=&quot;#原生Ajax&quot; class=&quot;headerlink&quot; title=&quot;原生Ajax&quot;&gt;&lt;/a&gt;原生Ajax&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;异步的JavaScript与XML技术（ Asynchronous JavaScript and
      
    
    </summary>
    
      <category term="XMLHttpRequest" scheme="https://owen027.github.io/categories/XMLHttpRequest/"/>
    
    
      <category term="axios" scheme="https://owen027.github.io/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>class</title>
    <link href="https://owen027.github.io/2019/04/17/class/"/>
    <id>https://owen027.github.io/2019/04/17/class/</id>
    <published>2019-04-17T10:32:50.000Z</published>
    <updated>2019-06-24T16:14:37.069Z</updated>
    
    <content type="html"><![CDATA[<h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><ul><li>生成类的实例对象的写法，与 ES5 完全一样，也是使用new命令</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">var</span> point = Point(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">var</span> point = <span class="keyword">new</span> Point(<span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>实例的属性除非显式定义在其本身（即定义在this对象上）， 否则都是定义在原型上（即定义在class上）。 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> point = <span class="keyword">new</span> Point(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">point.toString() <span class="comment">// (2, 3)</span></span><br><span class="line"></span><br><span class="line">point.hasOwnProperty(<span class="string">'x'</span>) <span class="comment">// true</span></span><br><span class="line">point.hasOwnProperty(<span class="string">'y'</span>) <span class="comment">// true</span></span><br><span class="line">point.hasOwnProperty(<span class="string">'toString'</span>) <span class="comment">// false</span></span><br><span class="line">point.__proto__.hasOwnProperty(<span class="string">'toString'</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><label>与 ES5 一样，类的所有实例共享一个原型对象。</label></li><li><p>避免对环境产生依赖，生产环境中，我们可以使用 <code>Object.getPrototypeOf</code><br>方法来获取实例对象的原型，然后再来为原型添加方法/属性。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Point(<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">p1.__proto__.printName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'Oops'</span> &#125;;</span><br><span class="line"></span><br><span class="line">p1.printName() <span class="comment">// "Oops"</span></span><br><span class="line">p2.printName() <span class="comment">// "Oops"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> Point(<span class="number">4</span>,<span class="number">2</span>);</span><br><span class="line">p3.printName() <span class="comment">// "Oops"</span></span><br></pre></td></tr></table></figure><p>由于p1的原型就是p2的原型，因此p2也可以调用这个方法。 而且，此后新建的实例p3也可以调用这个方法。这意味着，使用实例的<code>__proto__</code>属性改写原型，必须相当谨慎，不推荐使用，因为这会改变“类”的原始定义，影响到所有实例。</p><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><ul><li>constructor方法是类的默认方法, <label>通过new命令生成对象实例时</label>，自动调用该方法。</li></ul><p>一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。<br>相当于es5 new Vue </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125; <span class="comment">//JavaScript 引擎会自动为它添加一个空的constructor方法。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">new</span> Point ()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>constructor方法默认返回实例对象（即this），完全可以指定返回另外一个对象。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Foo() <span class="keyword">instanceof</span> Foo</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><label>类必须使用new调用</label>，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用new也可以执行。</p><h3 id="表达式定义"><a href="#表达式定义" class="headerlink" title="表达式定义"></a>表达式定义</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyClass = <span class="class"><span class="keyword">class</span> <span class="title">Me</span> </span>&#123;</span><br><span class="line">  getClassName() &#123;</span><br><span class="line">    <span class="keyword">return</span> Me.name;</span><br><span class="line">    <span class="comment">//这个类的名字是MyClass而不是Me，Me只在 Class 的内部代码可用，指代当前类。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//内部没用到Me的话可以省略Me</span></span><br><span class="line"><span class="keyword">const</span> YouClass = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>采用 Class 表达式，可以写出立即执行的 Class。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sayName() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(<span class="string">'张三'</span>);</span><br><span class="line"></span><br><span class="line">person.sayName(); <span class="comment">// "张三"</span></span><br></pre></td></tr></table></figure><ul><li>不存在变量提升 （hoist），必须保证子类在父类之后定义 ，这一点与 ES5 完全不同。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Foo(); <span class="comment">// ReferenceError</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><p>继承类<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> Foo = <span class="class"><span class="keyword">class</span> </span>&#123;&#125;;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="comment">//Bar继承Foo</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h3><p>私有方法是常见需求，但 ES6 不提供，只能通过变通方法模拟实现。<br>有三种方法可模拟</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 公有方法</span></span><br><span class="line">  foo (baz) &#123;</span><br><span class="line">    <span class="keyword">this</span>._bar(baz);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 私有方法</span></span><br><span class="line">  _bar(baz) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.snaf = baz;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// _bar方法前面的下划线，表示这是一个只限于内部使用的私有方法 但是，在类的外部，还是可以调用到这个方法。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> </span>&#123;</span><br><span class="line">  foo (baz) &#123;</span><br><span class="line">    bar.call(<span class="keyword">this</span>, baz);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 内部调用了bar.call(this, baz)，成为了当前模块的私有方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//私有方法移出模块</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">baz</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.snaf = baz;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="built_in">Symbol</span>(<span class="string">'bar'</span>);</span><br><span class="line"><span class="keyword">const</span> snaf = <span class="built_in">Symbol</span>(<span class="string">'snaf'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">myClass</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 公有方法</span></span><br><span class="line">  foo(baz) &#123;</span><br><span class="line">    <span class="keyword">this</span>[bar](baz);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 私有方法 </span></span><br><span class="line">  [bar](baz) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[snaf] = baz;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 利用Symbol值的唯一性，将私有方法的名字命名为一个Symbol值。</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="私有属性的提案"><a href="#私有属性的提案" class="headerlink" title="私有属性的提案"></a><strong>私有属性的提案</strong></h3><ul><li><p>方法是在属性名之前，使用#表示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  #x=0;// 私有属性可以指定初始值，在构造函数执行时进行初始化。</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(x = 0) &#123;</span><br><span class="line">    #x = +x; // 写成 this.#x 亦可</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get #x() &#123; return #x &#125;</span><br><span class="line">  set #x(value) &#123; #x = +value &#125;</span><br><span class="line">  #sum() &#123; return #a + #b; &#125;  //私有方法</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//  #x是一个私有属性，它的读写都通过get #x()和set #x()来完成。 #x和x是两个不同的属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//JavaScript 是一门动态语言，没有类型声明，使用独立的符号似乎是唯一的比较方便可靠的方法，能够准确地区分一种属性是否为私有属性。@已经留给了 Decorator。</span></span><br></pre></td></tr></table></figure></li><li><p>私有属性不限于从this引用，类的实例也可以引用私有属性  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  #privateValue = 42;</span><br><span class="line">  <span class="keyword">static</span> getPrivateValue(foo) &#123;</span><br><span class="line">    return foo.#privateValue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.getPrivateValue(<span class="keyword">new</span> Foo()); <span class="comment">// 42</span></span><br><span class="line">console.log(Foo.#privateValue) // 报错</span><br></pre></td></tr></table></figure></li></ul><h4 id="class-的取值函数（getter）和存值函数（setter）"><a href="#class-的取值函数（getter）和存值函数（setter）" class="headerlink" title="class 的取值函数（getter）和存值函数（setter）"></a>class 的取值函数（getter）和存值函数（setter）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> prop() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'getter'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> prop(value) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setter: '</span>+value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> inst = <span class="keyword">new</span> MyClass();</span><br><span class="line"></span><br><span class="line">inst.prop = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// setter: 123</span></span><br><span class="line"></span><br><span class="line">inst.prop</span><br><span class="line"><span class="comment">// 'getter'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;class&quot;&gt;&lt;a href=&quot;#class&quot; class=&quot;headerlink&quot; title=&quot;class&quot;&gt;&lt;/a&gt;class&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;生成类的实例对象的写法，与 ES5 完全一样，也是使用new命令&lt;/li&gt;
&lt;/ul&gt;
&lt;figure 
      
    
    </summary>
    
      <category term="ES6" scheme="https://owen027.github.io/categories/ES6/"/>
    
    
      <category term="class" scheme="https://owen027.github.io/tags/class/"/>
    
  </entry>
  
  <entry>
    <title>JSQuestion</title>
    <link href="https://owen027.github.io/2019/04/10/JSquestion/"/>
    <id>https://owen027.github.io/2019/04/10/JSquestion/</id>
    <published>2019-04-10T02:39:57.000Z</published>
    <updated>2019-06-30T16:03:54.946Z</updated>
    
    <content type="html"><![CDATA[<h3 id="赋值运算符多次出现，优先计算问题-结合性"><a href="#赋值运算符多次出现，优先计算问题-结合性" class="headerlink" title="赋值运算符多次出现，优先计算问题(结合性)"></a>赋值运算符多次出现，优先计算问题(结合性)</h3><blockquote><p>赋值表达式为右结合<br>先从左到右解析各个引用，然后计算最右侧的表达式的值，最后把值从右到左赋给各个引用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">a = b = c = v</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">先解析 左侧的操作数</span></span><br><span class="line"><span class="comment">1. refa</span></span><br><span class="line"><span class="comment">2. refb</span></span><br><span class="line"><span class="comment">3. refc</span></span><br><span class="line"><span class="comment">4. value v</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">refa = (refb = (refc = value v))</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 再计算右侧表达式的值 然后和从右到左赋值</span></span><br><span class="line"><span class="comment">1. value v 赋值 refc</span></span><br><span class="line"><span class="comment">2. value v 赋值 refb</span></span><br><span class="line"><span class="comment">3. calue v 赋值 refa</span></span><br><span class="line"><span class="comment">4. 返回 value v</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//example</span></span><br><span class="line"><span class="keyword">var</span> foo = &#123;<span class="attr">n</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> bar = foo;</span><br><span class="line"></span><br><span class="line">foo.x = foo = &#123;<span class="attr">n</span>:<span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">变量名 存储在栈中， 引用对象存储在堆中</span></span><br><span class="line"><span class="comment">根据规则 先解析 =号左侧的引用 </span></span><br><span class="line"><span class="comment"> refx = (refo = &#123;n:2&#125;)</span></span><br><span class="line"><span class="comment">再赋值</span></span><br><span class="line"><span class="comment">refo = &#123;n:2&#125; //refo  开辟新指针 foo  指向 &#123;n:2&#125; </span></span><br><span class="line"><span class="comment">refx =  &#123;n:2&#125; // 在原refo指针对象中开辟新指针 指向 &#123;n:2&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">结果  refo.x == undefined</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">或者</span></span><br><span class="line"><span class="comment"> foo.x赋值前是&#123;n:1,x:unfiend&#125;;</span></span><br><span class="line"><span class="comment">赋值后&#123;n:1,x:&#123;n:2&#125;&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">foo.x <span class="comment">//undefined</span></span><br><span class="line">bar.x <span class="comment">// &#123;n: 1, x: &#123;n:2&#125;&#125;;</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'81 newO'</span>.split(<span class="string">''</span>) <span class="comment">//["8", "1", " ", "n", "e", "w", "O"] </span></span><br><span class="line"></span><br><span class="line"><span class="string">'81 newO'</span>.split(<span class="string">' '</span>)<span class="comment">// ["81", "newO"]</span></span><br><span class="line"></span><br><span class="line"><span class="string">'81 newO'</span>.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line"><span class="comment">//"Owen 18"</span></span><br></pre></td></tr></table></figure><p>###</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;赋值运算符多次出现，优先计算问题-结合性&quot;&gt;&lt;a href=&quot;#赋值运算符多次出现，优先计算问题-结合性&quot; class=&quot;headerlink&quot; title=&quot;赋值运算符多次出现，优先计算问题(结合性)&quot;&gt;&lt;/a&gt;赋值运算符多次出现，优先计算问题(结合性)&lt;/h3
      
    
    </summary>
    
    
      <category term="JSQuestion" scheme="https://owen027.github.io/tags/JSQuestion/"/>
    
  </entry>
  
  <entry>
    <title>Interator</title>
    <link href="https://owen027.github.io/2019/04/04/Interator/"/>
    <id>https://owen027.github.io/2019/04/04/Interator/</id>
    <published>2019-04-04T11:32:22.000Z</published>
    <updated>2019-05-19T14:21:27.638Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Interator"><a href="#Interator" class="headerlink" title="Interator"></a>Interator</h2><blockquote><p>“集合”数据的结构主要有 <code>Array</code> 、<code>Object</code>、 <code>Set</code>  and <code>Map</code> ，任何数据结构只要部署 Iterator 接口，就可完成遍历操作</p></blockquote><p><strong>遍历过程：</strong> </p><ul><li>创建指针，指向当前数据结构起始位。（遍历对象本质是一个指针对象）。</li><li>依次循环调用指针对象的 <code>next</code>方法，对应指向数据结构成员，直至结束。<br><code>每次调用</code>next<code>方法，返回对象当前成员的信息</code>{value：text,done:true}<code>,其中</code>value<code>表示成员值，</code>done` 表示遍历是否结束</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'Owen'</span>,<span class="string">'18'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> makeInterator = <span class="function"><span class="params">array</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span>  index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">       next ()&#123;</span><br><span class="line">        <span class="keyword">return</span> index &lt; array.length ? </span><br><span class="line">        &#123;<span class="attr">value</span>:array[index++],<span class="attr">done</span>:<span class="literal">false</span>&#125; : </span><br><span class="line">        &#123;<span class="attr">value</span>:<span class="literal">undefined</span>, <span class="attr">done</span>:<span class="literal">true</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span>  inter = makeInterator(arr);</span><br><span class="line">inter.next()</span><br><span class="line">it.next() <span class="comment">// &#123; value: "Owen", done: false &#125;</span></span><br><span class="line">it.next() <span class="comment">// &#123; value: 18, done: false &#125;</span></span><br><span class="line">it.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><p>对与遍历器对象来说 <code>done: false</code> and <code>value:undefined</code> 可省略</p><p>原生具备 Iterator 的数据结构：<code>Array</code> 、 <code>String</code> 、 <code>Map</code>、 <code>Set</code> 、<code>arguments</code> and <code>NodeList</code></p><blockquote><p>都默认部署 <code>[Symbol.iterator]</code> 方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator] : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      next: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          value: <span class="number">1</span>,</span><br><span class="line">          done: <span class="literal">true</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj[<span class="built_in">Symbol</span>.iterator]().next() <span class="comment">//&#123;value: 1, done: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">let</span> iter = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"></span><br><span class="line">iter.next() <span class="comment">// &#123; value: 'a', done: false &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: 'b', done: false &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: 'c', done: false &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>对象（Object）之所以没有默认部署 Iterator 接口，是因为对象的哪个属性先遍历，哪个属性后遍历是不确定的，需要开发者手动指定。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//原型上部署Interator</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RangeIterator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(start, stop) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value = start;</span><br><span class="line">    <span class="keyword">this</span>.stop = stop;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]() &#123; <span class="keyword">return</span> <span class="keyword">this</span>; &#125;</span><br><span class="line"></span><br><span class="line">  next() &#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="keyword">this</span>.value;</span><br><span class="line">    <span class="keyword">if</span> (value &lt; <span class="keyword">this</span>.stop) &#123;</span><br><span class="line">      <span class="keyword">this</span>.value++;</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: value&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">true</span>, <span class="attr">value</span>: <span class="literal">undefined</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">range</span>(<span class="params">start, stop</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> RangeIterator(start, stop);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> range(<span class="number">0</span>, <span class="number">3</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value); <span class="comment">// 0, 1, 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象上部署Interator</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Obj</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.value = value;</span><br><span class="line">  <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Obj.prototype[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> iterator = &#123; <span class="attr">next</span>: next &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> current = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (current) &#123;</span><br><span class="line">      <span class="keyword">var</span> value = current.value;</span><br><span class="line">      current = current.next;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: value &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> iterator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> one = <span class="keyword">new</span> Obj(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> two = <span class="keyword">new</span> Obj(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> three = <span class="keyword">new</span> Obj(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">one.next = two;</span><br><span class="line">two.next = three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">of</span> one)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i); <span class="comment">// 1, 2, 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="类似数组对象，可引用-Array-prototype-Symbol-iterator"><a href="#类似数组对象，可引用-Array-prototype-Symbol-iterator" class="headerlink" title="类似数组对象，可引用 Array.prototype[Symbol.iterator]"></a>类似数组对象，可引用 <code>Array.prototype[Symbol.iterator]</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//NodeList</span></span><br><span class="line">NodeList.prototype[<span class="built_in">Symbol</span>.iterator] = <span class="built_in">Array</span>.prototype[<span class="built_in">Symbol</span>.iterator];</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">NodeList.prototype[<span class="built_in">Symbol</span>.iterator] = [][<span class="built_in">Symbol</span>.iterator];</span><br><span class="line"></span><br><span class="line">[...document.querySelectorAll(<span class="string">'div'</span>)] </span><br><span class="line"></span><br><span class="line"><span class="comment">//obj</span></span><br><span class="line"><span class="keyword">let</span> iterable = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'a'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'c'</span>,</span><br><span class="line">  length: <span class="number">3</span>,</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]: <span class="built_in">Array</span>.prototype[<span class="built_in">Symbol</span>.iterator]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item); <span class="comment">// 'a', 'b', 'c'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一些-默认调用-Iterator-的操作"><a href="#一些-默认调用-Iterator-的操作" class="headerlink" title="一些 默认调用 Iterator 的操作"></a>一些 默认调用 Iterator 的操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 解构赋值</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set().add('a').add('b').add('c');</span><br><span class="line"></span><br><span class="line">let [x,y] = <span class="keyword">set</span>; // x='a'; y='b'</span><br><span class="line"></span><br><span class="line">let [first, ...rest] = <span class="keyword">set</span>; // first='a'; rest=['b','c'];</span><br><span class="line"></span><br><span class="line">//扩展运算符</span><br><span class="line"></span><br><span class="line">var str = 'hello';</span><br><span class="line">[...str] //  ['h','e','l','l','o']</span><br><span class="line"></span><br><span class="line">let arr = ['b', 'c'];</span><br><span class="line">['a', ...arr, 'd']  // ['a', 'b', 'c', 'd']</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//yield*后面跟的是一个可遍历的结构，它会调用该结构的遍历器接口。</span><br><span class="line"></span><br><span class="line">let generator = function* () &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span>* [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iterator = generator();</span><br><span class="line"></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: 3, done: false &#125;</span></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: 4, done: false &#125;</span></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: 5, done: false &#125;</span></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for...of</span></span><br><span class="line"><span class="comment">//for...of循环可以使用的范围包括数组、Set 和 Map 结构、某些类似数组的对象（比如arguments对象、DOM NodeList 对象）、 Generator 对象，以及字符串。</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="built_in">document</span>.querySelectorAll(<span class="string">"p"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr ) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 其他操作*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from()</span><br><span class="line"><span class="built_in">Map</span>(), <span class="built_in">Set</span>(), <span class="built_in">WeakMap</span>(), <span class="built_in">WeakSet</span>() <span class="comment">//生成对应数据结构</span></span><br><span class="line"><span class="built_in">Promise</span>.all()</span><br><span class="line"><span class="built_in">Promise</span>.race()</span><br></pre></td></tr></table></figure><h3 id="遍历器return方法和throw方法"><a href="#遍历器return方法和throw方法" class="headerlink" title="遍历器return方法和throw方法"></a>遍历器return方法和throw方法</h3><h4 id="return"><a href="#return" class="headerlink" title="return()"></a>return()</h4><blockquote><p>return方法必须返回一个对象。<br>如果一个对象在完成遍历前，需要清理或释放资源，就可以部署return方法。<br>如果for…of循环提前退出（通常是因为出错，或者有break语句），就会调用return方法。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                next() &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">done</span>:<span class="literal">false</span>&#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="keyword">return</span>()&#123;</span><br><span class="line">                    file.close()</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">done</span>:<span class="literal">true</span>&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//触发 return()</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> line <span class="keyword">of</span> readFile(fileName)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(line);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//触发 return()</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> line <span class="keyword">of</span> readLinesSync(fileName)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(line);</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for…of-和其他遍历语法对比"><a href="#for…of-和其他遍历语法对比" class="headerlink" title="for…of 和其他遍历语法对比"></a>for…of 和其他遍历语法对比</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="comment">//普通 `for`循环</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt;arr.length; index++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[index]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 书写比较麻烦</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.forEach </span></span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 无法跳出循环，无法使用 break or return </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for...in</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[index]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.数组键名为字符串形式的数字</span></span><br><span class="line"><span class="comment"> * 2.会遍历出原型链上的键，和手动添加的键</span></span><br><span class="line"><span class="comment"> * 3.有些情况是无顺序遍历</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.语法简洁</span></span><br><span class="line"><span class="comment"> * 2.没有 for...in 的缺点</span></span><br><span class="line"><span class="comment"> * 3.可以使用 return、break and continue</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Interator&quot;&gt;&lt;a href=&quot;#Interator&quot; class=&quot;headerlink&quot; title=&quot;Interator&quot;&gt;&lt;/a&gt;Interator&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;“集合”数据的结构主要有 &lt;code&gt;Array&lt;/cod
      
    
    </summary>
    
      <category term="ES6" scheme="https://owen027.github.io/categories/ES6/"/>
    
    
      <category term="Interator" scheme="https://owen027.github.io/tags/Interator/"/>
    
  </entry>
  
</feed>
