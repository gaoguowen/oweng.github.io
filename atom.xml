<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Owen</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://owen027.github.io/"/>
  <updated>2019-06-24T16:14:37.069Z</updated>
  <id>https://owen027.github.io/</id>
  
  <author>
    <name>Owen Gao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>fetch</title>
    <link href="https://owen027.github.io/2019/06/24/fetch/"/>
    <id>https://owen027.github.io/2019/06/24/fetch/</id>
    <published>2019-06-24T08:15:59.000Z</published>
    <updated>2019-06-24T16:14:37.069Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h1><ul><li>一个获取资源的接口，类似于<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/AJAX" target="_blank" rel="noopener">ajax</a></li><li>提供了对 Request 和 Response （以及其他与网络请求有关的）对象的通用定义</li><li>发送请求或者获取资源，需要使用 window.fetch or WindowOrWorkerGlobalScope.fetch 方法。</li></ul><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><h3 id="资源路径（url-string）"><a href="#资源路径（url-string）" class="headerlink" title="资源路径（url string）"></a>资源路径（url string）</h3><ul><li>他必须接收一个需要请求的资源路径，返回一个<code>promise</code>对象，请求成功的数据返回到<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Response/Response" target="_blank" rel="noopener">Responese</a>回调中，请求失败的信息返回到 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Request" target="_blank" rel="noopener">Request</a>中。</li><li>当接收到一个代表错误的 HTTP状态码时，<code>fetch</code>返回的<code>promise</code>不会被标记为 <code>reject</code>而会被标记为<code>resolve</code>，比如状态码为 404，500.只有网络故障或请求被阻止时才被标记为<code>reject</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'https://api.apiopen.top/musicDetails1'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> response.json();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">myJson</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(myJson); <span class="comment">//&#123;code: 400, message: "404 Not Found", result: "https://api.apiopen.top/musicDetails1"&#125;</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><ul><li><code>fetch</code> 默认是不会从服务端发送接收或发送任何 <code>cookie</code>,如果需要则必须设置 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WindowOrWorkerGlobalScope/fetch#%E5%8F%82%E6%95%B0" target="_blank" rel="noopener">credentials</a>,自 2017/8 起默认的credentials政策变更为same-originFirefox也在61.0b13中改变默认值</li></ul><h3 id="config"><a href="#config" class="headerlink" title="[, config]"></a>[, config]</h3><ul><li>配置项对象，包括所有对请求的设置</li></ul><ol><li><p><code>method</code>: 请求使用的方法，如 GET、POST。</p></li><li><p><code>headers</code>: 请求的头信息，形式为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Headers" target="_blank" rel="noopener">Headers</a> 的对象或包含 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ByteString" target="_blank" rel="noopener">ByteString</a>值的对象字面量。</p></li><li><p><code>body</code>:<br> 请求的 <code>body</code>信息：<br> 可能是:<br>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob" target="_blank" rel="noopener">Blob</a>（ 表示一个不可变、原始数据的类文件对象）、<code>BufferSource</code> （ 用于表示自身为ArrayBuffer或者TypedArray提供对象的对象ArrayBufferView。）、<br>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FormData" target="_blank" rel="noopener">FormData</a>（表示表单数据的键值对的构造方式，经过它的数据可以使用<code>XMLHttpRequest.send()</code> 方法送出，本接口和此方法都相当简单直接。如果送出时的编码类型被设为 “multipart/form-data”，它会使用和表单一样的格式。）、<br>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams" target="_blank" rel="noopener">URLSearchParams</a> （接口定义了一些实用的方法来处理 URL 的查询字符串）<br>  或者 <code>USVString</code> 对象。</p>   <label>注意<code>GET</code> 或<code>HEAD</code>方法的请求不能包含 body 信息。</label></li><li><p><code>mode</code>: 请求的模式，如 <code>cors、 no-cors</code> 或者 <code>same-origin</code>。</p></li><li><p><code>credentials</code>: 请求的 <code>credentials</code>，如 <code>omit、same-origin</code> 或者 <code>include</code>。为了在当前域名内自动发送 cookie ， 必须提供这个选项， 从 Chrome 50 开始， 这个属性也可以接受 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FederatedCredential" target="_blank" rel="noopener">FederatedCredential</a> 实例或是一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/PasswordCredential" target="_blank" rel="noopener">PasswordCredential</a> 实例。</p></li></ol><ul><li>如果需要跨域请求需设置未 “include”</li><li>如果只在同域内发送cookie 则设置为 “same-origin”</li><li>如果任何情况都不发送cookie 则设置为 “omit”</li></ul><ol start="6"><li><p><code>cache</code>:  请求的 <code>cache</code> 模式: <code>default 、 no-store 、 reload 、 no-cache 、 force-cache</code> 或者 <code>only-if-cached</code> 。</p></li><li><p><code>redirect</code>: 可用的<code>redirect</code> 模式:<code>follow</code>(自动重定向), <code>error</code> (如果产生重定向将自动终止并且抛出一个错误), 或者<code>manual</code> (手动处理重定向). 在Chrome中，Chrome 47之前的默认值是 <code>follow</code>，从 Chrome 47开始是<code>manual</code>。</p></li><li><p><code>referrer</code>: 一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/USVString" target="_blank" rel="noopener">USVString</a> 可以是 <code>no-referrer、client</code>或一个<code>URL</code>。默认是<code>client</code>。</p></li><li><p><code>referrerPolicy</code>:指定引用HTTP头的值。可能是一个 <code>no-referrer、 no-referrer-when-downgrade、 origin、 origin-when-cross-origin、 unsafe-url 。</code></p></li><li><p><code>integrity</code>: 包括请求的  <a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/%E5%AD%90%E8%B5%84%E6%BA%90%E5%AE%8C%E6%95%B4%E6%80%A7" target="_blank" rel="noopener">subresource integrity</a>值 （ 例如：  sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=）。</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Fetch = <span class="function">(<span class="params">url,data</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;method = <span class="string">'GET'</span>, param = <span class="literal">null</span>, mode = <span class="string">"cors"</span>, cache = <span class="string">"no-cache"</span>,headers = &#123;<span class="string">'user-agent'</span>: <span class="string">'Mozilla/4.0 MDN Example'</span>,</span><br><span class="line">    <span class="string">'content-type'</span>: <span class="string">'application/json'</span>&#125;, redirect = <span class="string">"follow"</span>, credentials = <span class="string">"include"</span>, referrer = <span class="string">"no-referrer"</span>&#125; = data;</span><br><span class="line">  <span class="comment">/*  // 传输 JSON 数据 需将 param 转换 </span></span><br><span class="line"><span class="comment">    JSON.stringify(param)</span></span><br><span class="line"><span class="comment">    //上传文件 需传输 formData 格式</span></span><br><span class="line"><span class="comment">    let formData = new FormData()</span></span><br><span class="line"><span class="comment">    let fileField = document.querySelector("#myFile")</span></span><br><span class="line"><span class="comment">    formData.append('title',"My File")</span></span><br><span class="line"><span class="comment">    formData.append('fileField ',fileField .files[0])</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span>  fetch(url,&#123;</span><br><span class="line">   method:method.toUpperCase(),</span><br><span class="line">   body:param,</span><br><span class="line">   mode,</span><br><span class="line">   cache,</span><br><span class="line">   headers,</span><br><span class="line">   redirect,</span><br><span class="line">   credentials,</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> res.ok?res.json():thow <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Network response fail："</span>+res.status)).catch(<span class="function"><span class="params">err</span>=&gt;</span><span class="built_in">console</span>.error(err))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Headers-constructor"><a href="#Headers-constructor" class="headerlink" title="Headers constructor"></a>Headers constructor</h3><ul><li>创建一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Headers" target="_blank" rel="noopener">headers</a> 对象</li></ul><h4 id="一个-headers-对象是一个简单的多名值对："><a href="#一个-headers-对象是一个简单的多名值对：" class="headerlink" title="一个 headers 对象是一个简单的多名值对："></a>一个 headers 对象是一个简单的多名值对：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> content = <span class="string">"Hello World"</span>;</span><br><span class="line"><span class="keyword">let</span> myHeaders = <span class="keyword">new</span> Headers();</span><br><span class="line">myHeaders.append(<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>);</span><br><span class="line">myHeaders.append(<span class="string">"Content-Length"</span>, content.length.toString());</span><br><span class="line">myHeaders.append(<span class="string">"X-Custom-Header"</span>, <span class="string">"ProcessThisImmediately"</span>);</span><br></pre></td></tr></table></figure><h4 id="可以传一个多维数组或者对象字面量："><a href="#可以传一个多维数组或者对象字面量：" class="headerlink" title="可以传一个多维数组或者对象字面量："></a>可以传一个多维数组或者对象字面量：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> content = <span class="string">"Hello World"</span>;</span><br><span class="line"><span class="keyword">let</span> myHeaders = <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">  <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>,</span><br><span class="line">  <span class="string">"Content-Length"</span>: content.length.toString(),</span><br><span class="line">  <span class="string">"X-Custom-Header"</span>: <span class="string">"ProcessThisImmediately"</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取和设置</span></span><br><span class="line"><span class="built_in">console</span>.log(myHeaders.has(<span class="string">"Content-Type"</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(myHeaders.has(<span class="string">"Set-Cookie"</span>)); <span class="comment">// false</span></span><br><span class="line">myHeaders.set(<span class="string">"Content-Type"</span>, <span class="string">"text/html"</span>);</span><br><span class="line">myHeaders.append(<span class="string">"X-Custom-Header"</span>, <span class="string">"AnotherValue"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(myHeaders.get(<span class="string">"Content-Length"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(myHeaders.getAll(<span class="string">"X-Custom-Header"</span>)); <span class="comment">// ["ProcessThisImmediately", "AnotherValue"]</span></span><br><span class="line"> </span><br><span class="line">myHeaders.delete(<span class="string">"X-Custom-Header"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myHeaders.getAll(<span class="string">"X-Custom-Header"</span>)); <span class="comment">// [ ]</span></span><br></pre></td></tr></table></figure><p>如果使用了一个不合法的HTTP Header属性名，那么Headers的方法通常都抛出 TypeError 异常。如果不小心写入了一个不可写的属性，也会抛出一个 TypeError 异常。除此以外的情况，失败了并不抛出异常。</p><h4 id="检查-content-type-是否正确"><a href="#检查-content-type-是否正确" class="headerlink" title="检查 content type 是否正确"></a>检查 content type 是否正确</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fetch(myRequest).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(response.headers.get(<span class="string">"content-type"</span>) === <span class="string">"application/json"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> response.json().then(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// process your JSON further</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Oops, we haven't got JSON!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Response-对象"><a href="#Response-对象" class="headerlink" title="Response 对象"></a>Response 对象</h3><ul><li><code>fetch</code> 返回的对象</li></ul><h4 id="对象中常用的属性"><a href="#对象中常用的属性" class="headerlink" title="对象中常用的属性"></a>对象中常用的属性</h4><ol><li>status： 响应状态码 如 200 404 等</li><li>statusText：返回和状态码对应信息</li><li>ok 检查状态码是否 在 200-299之间，返回true or false</li></ol><h2 id="检查环境支持度"><a href="#检查环境支持度" class="headerlink" title="检查环境支持度"></a>检查环境支持度</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.fetch) &#123;</span><br><span class="line">    <span class="comment">// run my fetch request here</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// do something with XMLHttpRequest?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p><img src="/static/img/fetch.png" alt="fetch"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;fetch&quot;&gt;&lt;a href=&quot;#fetch&quot; class=&quot;headerlink&quot; title=&quot;fetch&quot;&gt;&lt;/a&gt;fetch&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;一个获取资源的接口，类似于&lt;a href=&quot;https://developer.mozilla.org/
      
    
    </summary>
    
    
      <category term="fetch" scheme="https://owen027.github.io/tags/fetch/"/>
    
  </entry>
  
  <entry>
    <title>filter</title>
    <link href="https://owen027.github.io/2019/06/21/filter/"/>
    <id>https://owen027.github.io/2019/06/21/filter/</id>
    <published>2019-06-21T06:15:48.000Z</published>
    <updated>2019-06-24T14:33:58.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h1><ul><li>将模糊或者颜色偏移等图像效果用于元素，通常用于调整图像，背景和边框的渲染</li><li>css 标准中已内置一些预定义效果的函数，也可通过url使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Element/filter" target="_blank" rel="noopener">SVG滤镜</a></li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* URL to SVG filter */</span></span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">url</span>(<span class="selector-tag">filter</span><span class="selector-class">.svg</span><span class="selector-id">#id</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &lt;filter-function&gt; values */</span></span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">blur</span>(5<span class="selector-tag">px</span>);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">brightness</span>(0<span class="selector-class">.4</span>);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">contrast</span>(200%);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">drop-shadow</span>(16<span class="selector-tag">px</span> 16<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> <span class="selector-tag">blue</span>);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">grayscale</span>(50%);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">hue-rotate</span>(90<span class="selector-tag">deg</span>);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">invert</span>(75%);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">opacity</span>(25%);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">saturate</span>(30%);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">sepia</span>(60%);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Multiple filters */</span></span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">contrast</span>(175%) <span class="selector-tag">brightness</span>(3%);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Global values */</span></span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">inherit</span>;</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">initial</span>;</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">unset</span>;</span><br></pre></td></tr></table></figure><h2 id="滤镜属性"><a href="#滤镜属性" class="headerlink" title="滤镜属性"></a>滤镜属性</h2><ul><li>需要设定某一函数的值。如果该值无效，函数返回“none“。</li></ul><h3 id="url"><a href="#url" class="headerlink" title="url()"></a>url()</h3><ul><li>url 函数接收一个XML文件，该文件是一个<code>SVG filter</code>，并且包含一个ID值 来指定哪一个滤镜<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span><span class="selector-pseudo">:url(resources.svg</span><span class="selector-id">#c1</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="blur"><a href="#blur" class="headerlink" title="blur()"></a>blur()</h3><ul><li>定义模糊度</li><li>可以接受css长度单位，不接受百分比<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span><span class="selector-pseudo">:blur(5px)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="brightness"><a href="#brightness" class="headerlink" title="brightness()"></a>brightness()</h3><ul><li>定义亮度</li><li>默认为1， 1-0 逐渐变暗，1以上逐渐变亮 </li><li>可以是百分比， 不能为负数</li></ul><h3 id="contrast"><a href="#contrast" class="headerlink" title="contrast()"></a>contrast()</h3><ul><li>定义对比度 </li><li>1-0 逐渐变成灰黑 1以上颜色逐渐变艳丽</li><li>可以是百分比， 不能为负数</li></ul><h3 id="drop-shadow"><a href="#drop-shadow" class="headerlink" title="drop-shadow()"></a>drop-shadow()</h3><ul><li>定义阴影效果，合成在图像下面，</li><li>参数 和 <code>shadow</code>, <code>box-shadow</code> 相似 </li><li>和<code>shadow</code>, <code>box-shadow</code>属性不同之处在于通过filter，一些浏览器为了提升性能会提供硬件加速。<br>  传参顺序从左至右：<ol><li>水平偏移距离正值右偏，负值左偏（offset-x）。<label>必传</label></li><li>垂直偏移距离正值向下偏，负值上偏（offset-y）。<label>必传</label></li><li>一个length值(表示距离尺寸的一种css数据格式) 值越大，越模糊阴影会变得更大更淡.）<label>不允许负值</label> 默认为0 （blur-radius）<label>可选</label></li><li>一个length值，正值会使阴影扩张和变大，负值会是阴影缩小，默认 0</li><li>color 色值，在Gecko (Firefox), Presto (Opera)和Trident (Internet Explorer)中， 会应用<code>color</code> 属性的值,颜色值省略，WebKit中阴影是透明的。</li></ol></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span><span class="selector-pseudo">:drop-shadow(16px</span> 16<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> <span class="selector-tag">black</span>)</span><br></pre></td></tr></table></figure><h3 id="grayscale"><a href="#grayscale" class="headerlink" title="grayscale()"></a>grayscale()</h3><ul><li>定义灰度</li><li>取值0 - 1的数值之间，可设置百分比，不可为负数<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span><span class="selector-pseudo">:grayscale(50</span>%);</span><br></pre></td></tr></table></figure></li></ul><h3 id="hue-rotate"><a href="#hue-rotate" class="headerlink" title="hue-rotate()"></a>hue-rotate()</h3><ul><li>定义颜色，色相旋转调整</li><li>单位 deg</li><li>可为负值</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">hue-rotate</span>(90<span class="selector-tag">deg</span>)</span><br></pre></td></tr></table></figure><h3 id="invert"><a href="#invert" class="headerlink" title="invert()"></a>invert()</h3><ul><li>反向输入图，定义转换比例</li><li>默认0  0%和100%之间，则是效果的线性乘子。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">invert</span>(100%)</span><br></pre></td></tr></table></figure></li></ul><h3 id="opacity"><a href="#opacity" class="headerlink" title="opacity()"></a>opacity()</h3><ul><li>转化图像的透明程度</li><li>类似于css的<code>opacity</code>属性 </li><li>1-0 逐渐变透明，支持百分比 ，不能为负数</li><li>和opacity属性不同之处在于通过filter，一些浏览器为了提升性能会提供硬件加速。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">opacity</span>(50%)</span><br></pre></td></tr></table></figure></li></ul><h3 id="saturate"><a href="#saturate" class="headerlink" title="saturate()"></a>saturate()</h3><ul><li>定义图像饱和度</li><li>1-0 至完全不包和，1为正常， 1以上饱和度更高，更艳丽，支持百分比</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span><span class="selector-pseudo">:saturate(369</span>%)</span><br></pre></td></tr></table></figure><h3 id="sepia"><a href="#sepia" class="headerlink" title="sepia()"></a>sepia()</h3><ul><li>定义深褐色的色度</li><li>0 - 1 逐渐变为深褐色 支持百分比，不支持负数</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">sepia</span>(100%)</span><br></pre></td></tr></table></figure><h3 id="组合函数"><a href="#组合函数" class="headerlink" title="组合函数"></a>组合函数</h3><ul><li>可以将任意数量的函数一起控制渲染，其中有一个不符合规范将全部失效<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span><span class="selector-pseudo">:sepia(100</span>%) <span class="selector-tag">saturate</span>(369%) <span class="selector-tag">opacity</span>(50%)</span><br></pre></td></tr></table></figure></li></ul><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p><img src="/static/img/filter.png" alt="filter"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;filter&quot;&gt;&lt;a href=&quot;#filter&quot; class=&quot;headerlink&quot; title=&quot;filter&quot;&gt;&lt;/a&gt;filter&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;将模糊或者颜色偏移等图像效果用于元素，通常用于调整图像，背景和边框的渲染&lt;/li&gt;
&lt;li&gt;cs
      
    
    </summary>
    
    
      <category term="filter" scheme="https://owen027.github.io/tags/filter/"/>
    
  </entry>
  
  <entry>
    <title>setProperty</title>
    <link href="https://owen027.github.io/2019/06/18/setProperty/"/>
    <id>https://owen027.github.io/2019/06/18/setProperty/</id>
    <published>2019-06-18T08:31:50.000Z</published>
    <updated>2019-06-24T14:33:58.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="css3-原生-var-变量"><a href="#css3-原生-var-变量" class="headerlink" title="css3 原生 var 变量"></a>css3 原生 var 变量</h1><ul><li>可以降低维护成本，有更高性能，文件更高压缩率。</li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ol><li><p>声明 <code>--*</code></p><ul><li><code>*</code> 表示变量名称，对于命名不能包含特殊字符（ $，[，^，(，%  ）等等</li><li>必须在块级（<code>{}</code>）区域内声明,且只能给属性名的值，设值，不能给属性设置<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">     <span class="attribute">--color</span>: purple; </span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用</p></li></ol><ul><li>通过<code>var(x,y)</code>函数调用</li><li>函数的可选第二个参数用作回退值。如果第一个参数引用的自定义属性无效，则该函数将使用第二个值。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="CSS变量不合法的缺省特性"><a href="#CSS变量不合法的缺省特性" class="headerlink" title="CSS变量不合法的缺省特性"></a>CSS变量不合法的缺省特性</h2><ul><li>CSS变量，只要语法是正确的，就会作为正常的声明解析</li><li>如果发现变量值是不合法的，就让默认值代替<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">--color</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--color, #000);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 等同于 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="CSS变量不合法的空格尾随特性"><a href="#CSS变量不合法的空格尾随特性" class="headerlink" title="CSS变量不合法的空格尾随特性"></a>CSS变量不合法的空格尾随特性</h2><ul><li>变量值后面会尾随空格,所以变量值最好加单位<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">--width</span>: <span class="number">20</span>;</span><br><span class="line"> <span class="attribute">width</span>: <span class="built_in">var</span>(--width)<span class="built_in">px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 等同于 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="comment">/* 宽度失效 */</span></span><br><span class="line"> <span class="attribute">width</span>: <span class="number">20</span> px; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="CSS变量的相互传递特性"><a href="#CSS变量的相互传递特性" class="headerlink" title="CSS变量的相互传递特性"></a>CSS变量的相互传递特性</h2><ul><li>声明CSS变量时候可以引入其他变量<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">--width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">--width</span>: <span class="built_in">var</span>(--width);</span><br><span class="line">  <span class="attribute">--height</span>: <span class="built_in">calc</span>( var(--width) / <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p><img src="/static/img/var.png" alt="var"></p><hr><h1 id="setProperty"><a href="#setProperty" class="headerlink" title="setProperty"></a>setProperty</h1><ul><li>给一个样式设置新值 <code>dom.style.setProperty(propertyName, value, priority);</code></li></ul><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ol><li>propertyName 必须是一个字符串，代表被更改的CSS属性。</li><li><code>value</code> 对应 <code>propertyName</code> css 属性值。如果未传，则为空字符串</li><li>priority 设置css 的权重 “important” ,”undefined”, “”</li><li>如果不设置权重 则可简写为 <code>dom.style.propertyName = &quot;value&quot;</code></li></ol><hr><h1 id="getPropertyPriority"><a href="#getPropertyPriority" class="headerlink" title="getPropertyPriority"></a>getPropertyPriority</h1><ul><li>获取一个样式属性的权重</li><li><code>dom.getPropertyPriority(&#39;property&#39;)</code></li><li>返回值 ‘important’ 或  ‘’</li></ul><hr><h1 id="removeProperty"><a href="#removeProperty" class="headerlink" title="removeProperty"></a>removeProperty</h1><ul><li>删除属性 <code>dom.getPropertyPriority(&#39;property&#39;)</code></li><li>返回被删除的属性值</li><li>多个单词组成的属性要用连字符连接各个单词，不接收驼峰命名法的形式。</li></ul><hr><h1 id="getComputedStyle"><a href="#getComputedStyle" class="headerlink" title="getComputedStyle"></a>getComputedStyle</h1><ul><li>兼容 IE9及以上</li><li>获取当前元素所以最终使用的 CSS属性值</li><li>返回一个实时的 <code>CSSStyleDeclaration</code> 对象，当元素的样式更改时，它会自动更新本身。</li></ul><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><ul><li><code>let styles = window.getComputedStyle(element, [pseudoElt]);</code></li><li><code>element</code>: Dom 元素</li><li><code>[pseudoElt]</code>: 可选指定一个伪元素 （在Gecko2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)之前版本，参数pseudoElt是必要的。如果为null，则不指定其他主要浏览器必须指定此参数。Gecko已经更改为匹配其他浏览器的行为。）</li></ul><h2 id="getComputedStyle-和-style-区别"><a href="#getComputedStyle-和-style-区别" class="headerlink" title="getComputedStyle 和 style 区别"></a><code>getComputedStyle</code> 和 <code>style</code> 区别</h2><ul><li><code>element.style</code> 同样可以获取 <code>css</code> 对象，可读写，而<code>getComputedStyle(el)</code> 只能读</li><li><code>element.style</code>返回已设置的样式属性,而 <code>getComputedStyle(el)</code> 会将所有属性给返回<br><code>getComputedStyle(el)</code><br><img src="/static/img/CSSStyleDeclaration.png" alt="CSSStyleDeclaration"><br><code>element.style</code><br><img src="/static/img/elStyle.png" alt="el.style"></li></ul><h2 id="defaultView"><a href="#defaultView" class="headerlink" title="defaultView"></a>defaultView</h2><ul><li>此属性只读。</li><li>在浏览器中，<code>document.defaultView</code> 返回window与文档关联的对象，或者null如果没有可用的对象。</li><li><code>getComputedStyle</code> 不仅挂载在 window对象上，而且还挂载在 <code>defaultView</code>对象上</li><li>因为在firefox3.6上访问（iframe)必须 <code>defaultView</code>对象上访问</li></ul><h2 id="css属性解析值（resolved-value），计算值（computed-value）-和-应用值（used-value）"><a href="#css属性解析值（resolved-value），计算值（computed-value）-和-应用值（used-value）" class="headerlink" title="css属性解析值（resolved value），计算值（computed value） 和 应用值（used value）"></a>css属性解析值（resolved value），计算值（computed value） 和 应用值（used value）</h2><ul><li>属于 <code>getComputedStyle</code>方法返回的值，大多数属性是一个计算值，有些是应用值</li></ul><h3 id="计算值（computed-value）"><a href="#计算值（computed-value）" class="headerlink" title="计算值（computed value）"></a>计算值（computed value）</h3><ul><li>子元素继承父元素的值，通过指定值计算出来</li><li>处理特殊的值 <code>inherit</code>(元素获取其父元素的计算值),<code>initial</code>(属性的初始默认值),<code>unset</code>(优先用 <code>inherit</code> 的样式，其次会应该用<code>initial</code>的样式)</li><li>进行计算，达到对应属性值的要求</li><li>计算值所需要的计算通常包括将相对值（em,rem %,)转换成绝对值（px）</li></ul><h3 id="应用值（used-value）"><a href="#应用值（used-value）" class="headerlink" title="应用值（used value）"></a>应用值（used value）</h3><ul><li>完成所有计算后最终使用的值</li></ul><p>计算出CSS属性的最终值有三个步骤</p><ol><li>指定值（Specified value） 从样式表中接收（按权重规则来接收）未设置将使用继承值或者默认值</li><li>按规范算出计算值（span 指定 position: absolute 后display 变为 block） </li><li>计算布局（尺寸比如 auto 或 百分数 换算为像素值） 最后就是应用值， 只能使用 <code>getComputedStyle</code>来获取最终的应用值</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;css3-原生-var-变量&quot;&gt;&lt;a href=&quot;#css3-原生-var-变量&quot; class=&quot;headerlink&quot; title=&quot;css3 原生 var 变量&quot;&gt;&lt;/a&gt;css3 原生 var 变量&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;可以降低维护成本，有更高性能，文
      
    
    </summary>
    
      <category term="CSS" scheme="https://owen027.github.io/categories/CSS/"/>
    
    
      <category term="setProperty" scheme="https://owen027.github.io/tags/setProperty/"/>
    
  </entry>
  
  <entry>
    <title>zoomAndScale</title>
    <link href="https://owen027.github.io/2019/06/17/zoomAndScale/"/>
    <id>https://owen027.github.io/2019/06/17/zoomAndScale/</id>
    <published>2019-06-17T10:24:26.000Z</published>
    <updated>2019-06-24T14:33:58.463Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zoom"><a href="#zoom" class="headerlink" title="zoom"></a><code>zoom</code></h1><ul><li>不是标准属性</li><li>对文字最小缩到 12pX</li><li>缩放位置相对于左上角缩放</li><li>调整时改变了元素占据的空间大小、尺寸，等比例缩放元素</li><li><code>*zoom:1</code> 用来给老版本IE浏览器（IE6/7）清除浮动</li><li>由于缩小改变原来的空间尺寸，所以整个页面会重新渲染<h2 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h2></li></ul><ol><li>百分比 <code>zoom:50%</code> 缩小到原来的一半</li><li>数值 <code>zoom:0.5</code> 等同 <code>zoom:50%</code>，不能为负数</li><li><code>zoom:normal</code> 等同于 <code>zoom:1</code> </li></ol><h1 id="scale"><a href="#scale" class="headerlink" title="scale"></a>scale</h1><ul><li>等比例缩放元素  <code>transform: scale(1)</code></li><li>对文字等比缩放</li><li>改变时不会从新渲染页面</li><li>默认居中缩放,原始尺寸不变</li><li>属于 <code>w3c</code> 规范 IE9以上都支持此属性</li><li>使用 transform 会覆盖以前的 transform 属性，即 以前 transform 对应的属性将被全部替换</li><li>可控制方向 transform:scale(x,y), transform:scaleX(x)  or transform:scaleY(y)<h2 id="单位-1"><a href="#单位-1" class="headerlink" title="单位"></a>单位</h2></li></ul><ol><li>只能是数值</li><li>可以为负数</li></ol><h2 id="chrome-中-同时使用两者效果会叠加"><a href="#chrome-中-同时使用两者效果会叠加" class="headerlink" title="chrome 中  同时使用两者效果会叠加"></a>chrome 中  同时使用两者效果会叠加</h2><h1 id="transform-变换"><a href="#transform-变换" class="headerlink" title="transform 变换"></a>transform 变换</h1><ul><li>支持 3D 变换</li><li>可以 拉伸，压缩，旋转，偏移目标元素</li><li>只能转换由盒子模型定位的元素。根据经验，如果元素具有display: block，则由盒模型定位元素。（转换行内元素，须设置display样式属性）</li><li>支持 IE10以上 IE9 需加私有前缀 -ms-（IE） -webkit-(chrome，safari) -o-（opera）-moz- （Firefox)<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><h3 id="skew"><a href="#skew" class="headerlink" title="skew"></a>skew</h3></li><li>对目标对象进行歪斜变换 <code>transform: skew()</code></li></ul><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul><li>X,Y <code>transform: skew(X,Y)</code>  表示沿着 X轴和 Y轴 扭曲角度 默认为0</li></ul><h4 id="单位-2"><a href="#单位-2" class="headerlink" title="单位"></a>单位</h4><ol><li>degress (度)  <code>transform: skew(100deg,100deg)</code></li><li>grad (百分度)  <code>transform: skew(10grad,10grad)</code></li><li>rad（弧度）  一个完整的圆 为2π <code>transform: skew(10rad,10rad)</code></li><li>turn (圈数) 一个完整的圆 为1turn <code>transform: skew(0.25turn，1.2turn)</code></li><li>可以为负数</li></ol><h3 id="scale-1"><a href="#scale-1" class="headerlink" title="scale"></a>scale</h3><ul><li>等比例缩放元素 <code>transform: scale(1)</code><h4 id="单位-3"><a href="#单位-3" class="headerlink" title="单位"></a>单位</h4></li></ul><ol><li>只能是数值</li><li>可以为负数</li></ol><h3 id="rotate"><a href="#rotate" class="headerlink" title="rotate"></a>rotate</h3><ul><li>旋转元素 <code>transform: rotate(x,y)</code></li><li>默认以目标对象中心为圆点转动<h4 id="单位-4"><a href="#单位-4" class="headerlink" title="单位"></a>单位</h4>同 <code>skew</code></li></ul><h3 id="translate"><a href="#translate" class="headerlink" title="translate"></a>translate</h3><ul><li>平移目标元素 <code>transform: translate(x,y)</code></li></ul><h4 id="单位-5"><a href="#单位-5" class="headerlink" title="单位"></a>单位</h4><p>同 <code>skew</code></p><hr><h1 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h1><ul><li>平滑的改变CSS的值</li><li>只要CSS 属性值发生改变都会实现过渡效果</li><li>支持IE10 以上<h2 id="类型-1"><a href="#类型-1" class="headerlink" title="类型"></a>类型</h2></li></ul><h3 id="transition-property"><a href="#transition-property" class="headerlink" title="transition-property"></a>transition-property</h3><ul><li>指定过度属性 <code>transition-property:height</code>   height 就会参与过渡</li></ul><h3 id="transition-duration"><a href="#transition-duration" class="headerlink" title="transition-duration"></a>transition-duration</h3><ul><li>指定持续时间  <code>transition-duration:2s</code>  指过渡持续 2S</li></ul><h4 id="单位-6"><a href="#单位-6" class="headerlink" title="单位"></a>单位</h4><ul><li>s (秒) ms(毫秒)<h3 id="transition-delay"><a href="#transition-delay" class="headerlink" title="transition-delay"></a>transition-delay</h3></li><li>过渡开始作用之前需要等待的时间。 <code>transition-delay:0.2s</code> 等待0.2S 后执行过渡<h4 id="单位-7"><a href="#单位-7" class="headerlink" title="单位"></a>单位</h4></li><li>s (秒) ms(毫秒)<h3 id="transition-timing-function"><a href="#transition-timing-function" class="headerlink" title="transition-timing-function"></a>transition-timing-function</h3></li><li>指定动画运动时的节奏 <code>transition-timing-function:ease</code> 匀速运行</li></ul><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><ul><li>ease</li><li>ease-in 由慢到快</li><li>ease-out 由快到慢</li><li>ease-in-out 由慢到快在到慢</li><li>linear 线性过度</li><li>step-start </li><li>step-end</li><li>steps(5,end)</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/timing-function" target="_blank" rel="noopener">其它参数设置</a></li></ul><h2 id="transition-简写"><a href="#transition-简写" class="headerlink" title="transition 简写"></a>transition 简写</h2><ul><li>transition: property-color duration timing-function; <code>transition: height 0.3s ease;</code></li></ul><hr><h1 id="animations"><a href="#animations" class="headerlink" title="animations"></a>animations</h1><ul><li>用来指定一组或多组动画，每组之间用逗号相隔</li><li>支持IE10以上<h2 id="类型-2"><a href="#类型-2" class="headerlink" title="类型"></a>类型</h2></li></ul><h3 id="webkit-animation-name"><a href="#webkit-animation-name" class="headerlink" title="-webkit-animation-name;"></a>-webkit-animation-name;</h3><ul><li>指定应用的一系列动画，每个名称代表一个由@keyframes定义的动画序列</li></ul><h4 id="值"><a href="#值" class="headerlink" title="值"></a>值</h4><ul><li>none 默认静止</li><li>定义 @keyframes 后的 名字 </li><li>由大小写不敏感的字母a-z、数字0-9、下划线(_)和/或横线(-)组成。第一个非横线字符必须是字母，数字不能在字母前面，不允许两个横线出现在开始位置。<h5 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cylon_eye</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-animation-name</span>: resize;</span><br><span class="line">&#125;</span><br><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> resize &#123; <span class="selector-tag">from</span> &#123; <span class="attribute">margin-left</span>: -<span class="number">20%</span>; &#125; <span class="selector-tag">to</span> &#123; <span class="attribute">margin-left</span>: <span class="number">100%</span>; &#125;  &#125;</span><br><span class="line">        @<span class="keyword">keyframes</span> resize &#123; <span class="selector-tag">from</span> &#123; <span class="attribute">margin-left</span>: -<span class="number">20%</span>; &#125; <span class="selector-tag">to</span> &#123; <span class="attribute">margin-left</span>: <span class="number">100%</span>; &#125;  &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="webkit-animation-duration"><a href="#webkit-animation-duration" class="headerlink" title="-webkit-animation-duration"></a>-webkit-animation-duration</h3><ul><li>指定一个动画周期的时长</li><li>默认为 0 无动画</li></ul><h4 id="单位-8"><a href="#单位-8" class="headerlink" title="单位"></a>单位</h4><ul><li>s , ms <code>-webkit-animation-duration: 1.5s;</code></li></ul><h3 id="webkit-animation-iteration-count"><a href="#webkit-animation-iteration-count" class="headerlink" title="-webkit-animation-iteration-count"></a>-webkit-animation-iteration-count</h3><ul><li>定义动画运行的次数 <code>-webkit-animation-iteration-count:4</code></li></ul><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li>默认运行一次</li><li>infinite 无限循环</li><li>播放的次数 不可为负值. 可以用小数定义循环(0.5 将播放动画到关键帧的一半 </li></ul><h3 id="webkit-animation-direction"><a href="#webkit-animation-direction" class="headerlink" title="-webkit-animation-direction"></a>-webkit-animation-direction</h3><ul><li>指示动画是否反向播放 <code>-webkit-animation-direction: alternate;</code></li></ul><h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><ul><li>normal 默认 每个动画循环结束，动画重置到起点重新开始</li><li>alternate  动画交替反向运行，反向运行时，动画按步后退，同时，带时间功能的函数也反向 计数取决于开始时是奇数迭代还是偶数迭代</li><li>reverse 反向运行动画，每周期结束动画由尾到头运行。</li><li>alternate-reverse 动画第一次运行时是反向的，然后下一次是正向，后面依次循环。决定奇数次或偶数次的计数从1开始。<br>  -webkit-animation-timing-function: ease-in-out;<h3 id="animation-timing-function"><a href="#animation-timing-function" class="headerlink" title="animation-timing-function"></a>animation-timing-function</h3></li><li>每一个动画周期中执行的节奏，作用于一个关键帧周期而非整个动画周期<h4 id="值-1"><a href="#值-1" class="headerlink" title="值"></a>值</h4>同 <code>transition-timing-function</code> </li></ul><h2 id="简写语法"><a href="#简写语法" class="headerlink" title="简写语法"></a>简写语法</h2><ul><li>animation-name，animation-duration, animation-timing-function，animation-delay，animation-iteration-count，animation-direction，animation-fill-mode 和 animation-play-state 属性的一个简写属性形式<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cylon_eye</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right,</span><br><span class="line">      rgba(0, 0, 0, .9) <span class="number">25%</span>,</span><br><span class="line">      <span class="built_in">rgba</span>(0, 0, 0, .1) <span class="number">50%</span>,</span><br><span class="line">      <span class="built_in">rgba</span>(0, 0, 0, .9) <span class="number">75%</span>);</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line"><span class="comment">/* 调用动画 指定对应 持续时间 运动时的节奏 延迟时间 循环次数 对应动画 */</span></span><br><span class="line">  <span class="attribute">-webkit-animation</span>: <span class="number">4s</span> linear <span class="number">0s</span> infinite alternate move_eye;</span><br><span class="line">          <span class="attribute">animation</span>: <span class="number">4s</span> linear <span class="number">0s</span> infinite alternate move_eye;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 定义动画 */</span></span><br><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> move_eye &#123; <span class="selector-tag">from</span> &#123; <span class="attribute">margin-left</span>: -<span class="number">20%</span>; &#125; <span class="selector-tag">to</span> &#123; <span class="attribute">margin-left</span>: <span class="number">100%</span>; &#125;  &#125;</span><br><span class="line">        @<span class="keyword">keyframes</span> move_eye &#123; <span class="selector-tag">from</span> &#123; <span class="attribute">margin-left</span>: -<span class="number">20%</span>; &#125; <span class="selector-tag">to</span> &#123; <span class="attribute">margin-left</span>: <span class="number">100%</span>; &#125;  &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;zoom&quot;&gt;&lt;a href=&quot;#zoom&quot; class=&quot;headerlink&quot; title=&quot;zoom&quot;&gt;&lt;/a&gt;&lt;code&gt;zoom&lt;/code&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;不是标准属性&lt;/li&gt;
&lt;li&gt;对文字最小缩到 12pX&lt;/li&gt;
&lt;li&gt;缩放位置相
      
    
    </summary>
    
      <category term="CSS" scheme="https://owen027.github.io/categories/CSS/"/>
    
    
      <category term="zoom and transform:scale" scheme="https://owen027.github.io/tags/zoom-and-transform-scale/"/>
    
  </entry>
  
  <entry>
    <title>vueNotes</title>
    <link href="https://owen027.github.io/2019/06/13/vueNotes/"/>
    <id>https://owen027.github.io/2019/06/13/vueNotes/</id>
    <published>2019-06-13T10:17:27.000Z</published>
    <updated>2019-06-24T14:33:58.462Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初始渲染的钩子函数-created-mounted-等"><a href="#初始渲染的钩子函数-created-mounted-等" class="headerlink" title="初始渲染的钩子函数 created  mounted 等"></a>初始渲染的钩子函数 created  mounted 等</h3><ol><li><p>可以取到 data 中的数据，取不到 props 中的数据，可以通过 computed 或者 watch 属性监听变化</p></li><li><p>如果想要组件或者原生HTML节点重新渲染可以使用 v-if</p></li><li><p>使用 prototype 挂载自定义方法或插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$bus = Bus; </span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">Vue.use(bus);</span><br></pre></td></tr></table></figure></li><li><p>获取本机 IP 地址</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>);</span><br><span class="line"><span class="keyword">const</span> ip = showObj(os.networkInterfaces());</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showObj</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="comment">/*     for (let devName in obj)&#123;</span></span><br><span class="line"><span class="comment">        let iface = obj[devName];</span></span><br><span class="line"><span class="comment">        for (let i = 0;i &lt; iface.length;i++)&#123;</span></span><br><span class="line"><span class="comment">            let alias = iface[i];</span></span><br><span class="line"><span class="comment">            if (alias.family === 'IPv4' </span></span><br><span class="line"><span class="comment">                &amp;&amp; alias.address !== '127.0.0.1' </span></span><br><span class="line"><span class="comment">                &amp;&amp; !alias.internal)&#123;</span></span><br><span class="line"><span class="comment">                return alias.address;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> devName <span class="keyword">in</span> obj)&#123;</span><br><span class="line">             <span class="keyword">let</span> iface = obj[devName];</span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">let</span> alias <span class="keyword">of</span> iface )&#123;</span><br><span class="line">                <span class="keyword">if</span> ( alias.family === <span class="string">'IPv4'</span>  &amp;&amp; alias.address !== <span class="string">'127.0.0.1'</span>  &amp;&amp; !alias.internal) <span class="keyword">return</span> alias.address;</span><br><span class="line">             &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;初始渲染的钩子函数-created-mounted-等&quot;&gt;&lt;a href=&quot;#初始渲染的钩子函数-created-mounted-等&quot; class=&quot;headerlink&quot; title=&quot;初始渲染的钩子函数 created  mounted 等&quot;&gt;&lt;/a&gt;初始渲染
      
    
    </summary>
    
      <category term="notes" scheme="https://owen027.github.io/categories/notes/"/>
    
    
      <category term="vue question" scheme="https://owen027.github.io/tags/vue-question/"/>
    
  </entry>
  
  <entry>
    <title>array method</title>
    <link href="https://owen027.github.io/2019/05/20/array/"/>
    <id>https://owen027.github.io/2019/05/20/array/</id>
    <published>2019-05-20T10:25:19.000Z</published>
    <updated>2019-06-05T15:15:29.020Z</updated>
    
    <content type="html"><![CDATA[<p>js 内置 7种类型</p><blockquote><p>基本类型: string number boolean null undefined symbol </p></blockquote><blockquote><p>引用类型: object</p></blockquote><hr><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><blockquote><p>es3/es5:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//改变原数组</span></span><br><span class="line"><span class="comment">//push :向数组尾部添加数据 可添加多位</span></span><br><span class="line"><span class="comment">//自定义push</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.push =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//pop :剪切尾部一项数据</span></span><br><span class="line"><span class="comment">//unshift : 向数组前方添加数据</span></span><br><span class="line"><span class="comment">//revesre : 翻转数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//splice : 第一个参数从第几位开始，第二个参数，截取几位，第三个参数覆盖截取的数据，返回截取的数据</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">sort :排序</span></span><br><span class="line"><span class="comment">一个函数为参数 ，同时 函数必须有两参数(a,b)</span></span><br><span class="line"><span class="comment">1. 函数返回值为正时 b在a前面</span></span><br><span class="line"><span class="comment">2. 为负数时 a在b前面</span></span><br><span class="line"><span class="comment">3. 0 时 不动</span></span><br><span class="line"><span class="comment">原理冒泡排序 */</span></span><br><span class="line"> <span class="keyword">var</span> obj = [&#123;<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">name</span>:<span class="string">'1'</span>&#125;,&#123;<span class="attr">age</span>:<span class="number">38</span>,<span class="attr">name</span>:<span class="string">'1'</span>&#125;,&#123;<span class="attr">age</span>:<span class="number">14</span>,<span class="attr">name</span>:<span class="string">'1'</span>&#125;,&#123;<span class="attr">age</span>:<span class="number">28</span>,<span class="attr">name</span>:<span class="string">'1'</span>&#125;], </span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.age - b.age;<span class="comment">//升序</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//打乱有序的数组</span></span><br><span class="line"></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random() - <span class="number">0.6</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//不改变原数组需要变量接收</span></span><br><span class="line">concat ： 拼接数组并返回 </span><br><span class="line"></span><br><span class="line">join : 将数组每一位以传进的参数链接</span><br><span class="line"></span><br><span class="line">slice : 第一个参数 开始截取为，第二个参数 截取到的位置</span><br><span class="line"></span><br><span class="line"><span class="comment">//将类数组转化为数组 </span></span><br><span class="line"><span class="keyword">var</span> arr=[].slice.call(<span class="built_in">arguments</span>)</span><br></pre></td></tr></table></figure></p></blockquote><hr><h4 id="string-methods"><a href="#string-methods" class="headerlink" title="string methods"></a>string methods</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str =<span class="string">'123'</span></span><br><span class="line">str.split(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//camelize: 连字符转驼峰</span></span><br><span class="line"><span class="keyword">const</span> camelizeRE = <span class="regexp">/-(\w)/g</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> camelize = cached((str: string): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> str.replace(camelizeRE, ( _, c) =&gt; c ? c.toUpperCase() : <span class="string">''</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//变量的值转换为 string 类型并返回</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">toString</span> (<span class="params">val: any</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val == <span class="literal">null</span></span><br><span class="line">    ? <span class="string">''</span></span><br><span class="line">    : <span class="keyword">typeof</span> val === <span class="string">'object'</span></span><br><span class="line">      ? <span class="built_in">JSON</span>.stringify(val, <span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line">      : <span class="built_in">String</span>(val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 举一个比较典型的例子，看完后即明白 Label 的应用：（未添加 Label）</span></span><br><span class="line">        <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++)&#123;</span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span> ; j &lt; <span class="number">10</span> ; j++)&#123;</span><br><span class="line">                  <span class="keyword">if</span>( i == <span class="number">5</span> &amp;&amp; j == <span class="number">5</span> )&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">             num++;</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        alert(num); <span class="comment">// 循环在 i 为5，j 为5的时候跳出 j循环，但会继续执行 i 循环，输出 95</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对比使用了 Label 之后的程序：（添加 Label 后）</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">    outPoint:</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++)&#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span> ; j &lt; <span class="number">10</span> ; j++)&#123;</span><br><span class="line">              <span class="keyword">if</span>( i == <span class="number">5</span> &amp;&amp; j == <span class="number">5</span> )&#123;</span><br><span class="line">                    <span class="keyword">break</span> outPoint;</span><br><span class="line">              &#125;</span><br><span class="line">         num++;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    alert(num); <span class="comment">// 循环在 i 为5，j 为5的时候跳出双循环，返回到outPoint层继续执行，输出 55</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;js 内置 7种类型&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;基本类型: string number boolean null undefined symbol &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;引用类型: object&lt;/p&gt;
&lt;/bl
      
    
    </summary>
    
    
      <category term="es5" scheme="https://owen027.github.io/tags/es5/"/>
    
  </entry>
  
  <entry>
    <title>algorithm</title>
    <link href="https://owen027.github.io/2019/04/21/algorithm/"/>
    <id>https://owen027.github.io/2019/04/21/algorithm/</id>
    <published>2019-04-21T15:39:47.000Z</published>
    <updated>2019-06-05T15:15:29.020Z</updated>
    
    <content type="html"><![CDATA[<h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><ul><li>时间复杂度: 一个算法执行所耗费的时间。<blockquote><p>一个算法花费的时间与算法中语句的执行次数成正比例,一个算法中的语句执行次数称为语句频度或时间频度。记为T(n)。<br>n称为问题的规模，当n不断变化时，时间频度T(n)也会不断变化，要知道变化时呈现什么规律就引入了时间复杂度概念<br>算法中基本操作重复执行的次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n),使得当n趋近于无穷大时，T（n)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作T(n)=Ｏ(f(n)),称Ｏ(f(n)) 为算法的渐进时间复杂度，简称时间复杂度。</p></blockquote></li><li>空间复杂度: 运行完一个程序所需内存的大小。<blockquote><p>一个算法所需的存储空间用f(n)表示。S(n)=O(f(n))　　其中n为问题的规模，S(n)表示空间复杂度。</p></blockquote></li><li>内排序：所有排序操作都在内存中完成； 外排序：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</li><li>稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面； 不稳定：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面；<br><img src="/static/img/big-o-graph.png" alt="复杂度"></li></ul><p><a href="https://liuchuanliang.com/time-and-space-complexity/" target="_blank" rel="noopener">更多信息</a></p><hr><h3 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h3><ul><li>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素(自己不能跟自己加起来等于target)。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure><p>解答：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; target</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 方法一  嵌套循环  时间复杂度：O(n^2) 空间：O(2)</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> [i,k] <span class="keyword">of</span> nums.entries())&#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">let</span> j = i+<span class="number">1</span>; j&lt; nums.length; j++) &#123;</span><br><span class="line">              <span class="keyword">if</span>(  (target - k) === nums[j]) &#123;</span><br><span class="line">               <span class="keyword">return</span>  [i,j];</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 方法二 嵌套循环 比 方法一 更快 </span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> len = nums.length;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> j = i+<span class="number">1</span>; j&lt;len; j++) &#123;</span><br><span class="line">                   <span class="keyword">if</span>( (target - nums[i]) === nums[j]) &#123;</span><br><span class="line">                   <span class="keyword">return</span>  [i,j];</span><br><span class="line">                 &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 方法三 has表   时间复杂度：O(n) 空间：O(n)</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存储对应的值 和 索引 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;userManage</span><br><span class="line">      <span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">      <span class="keyword">const</span> len = nums.length；</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++ ) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(m.has(nums[i]) &amp;&amp; m.get(nums[i]) !== i)&#123;</span><br><span class="line">            <span class="keyword">return</span> [m.get(nums[i]),i]</span><br><span class="line">        &#125;</span><br><span class="line">            m.set((target - nums[i]),i); </span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">      <span class="keyword">const</span> len = nums.length；</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++ ) &#123;</span><br><span class="line">        <span class="keyword">let</span>  res = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span>(m.has(res) &amp;&amp; m.get(res) !== i)&#123;</span><br><span class="line">            <span class="keyword">return</span> [m.get(res),i]</span><br><span class="line">        &#125;</span><br><span class="line">            m.set(nums[i],i); </span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="整数反转"><a href="#整数反转" class="headerlink" title="整数反转"></a>整数反转</h3><ul><li>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。<blockquote><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; x</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverse = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">let</span> res =( x+<span class="string">''</span> ).split(<span class="string">""</span>);</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(res[<span class="number">0</span>] !== <span class="string">'-'</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> num = <span class="built_in">parseInt</span>(res.reverse().join(<span class="string">''</span>),<span class="number">10</span>);</span><br><span class="line">         <span class="keyword">if</span>( num&gt; <span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">31</span>) <span class="number">-1</span>)&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">         &#125;</span><br><span class="line">       <span class="keyword">return</span> num; </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.reverse().pop();</span><br><span class="line">      <span class="keyword">let</span> num = <span class="built_in">parseInt</span>(res.join(<span class="string">''</span>),<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span>( num&gt; <span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">31</span>) <span class="number">-1</span>)&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">'-'</span> + num; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h3><ul><li><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数 。</p><blockquote><p>输入: 121 输出: true<br>输入: -121 输出: false  解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。<br>输入: 10  输出: false  解释: 从右向左读, 为 01 。因此它不是一个回文数。<br>注意 0 是回文数</p></blockquote></li><li><p>进阶: 不将整数转为字符串来解决这个问题 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; x</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">// 方法 一 转化未字符串</span></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span>  x &lt; <span class="number">0</span>? <span class="literal">false</span>: (<span class="built_in">parseInt</span>((x+<span class="string">''</span>).split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)) === x ? <span class="literal">true</span> : <span class="literal">false</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法二  中间数的右边反转后 等于 左边 </span></span><br><span class="line"><span class="comment"> * 提取中间数的右边 通过 *10 、 %10 来提取   </span></span><br><span class="line"><span class="comment"> * */</span> </span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">int</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(int &lt; <span class="number">0</span> ||  (int%<span class="number">10</span> === <span class="number">0</span> &amp;&amp; int !== <span class="number">0</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (int &gt; num )&#123;</span><br><span class="line">        num = num * <span class="number">10</span> + int % <span class="number">10</span>;</span><br><span class="line">        int = <span class="built_in">parseInt</span>(int/<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">console</span>.log(int,num)</span><br><span class="line">    <span class="keyword">return</span>  int === num || int === <span class="built_in">parseInt</span>(num/<span class="number">10</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;术语&quot;&gt;&lt;a href=&quot;#术语&quot; class=&quot;headerlink&quot; title=&quot;术语&quot;&gt;&lt;/a&gt;术语&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;时间复杂度: 一个算法执行所耗费的时间。&lt;blockquote&gt;
&lt;p&gt;一个算法花费的时间与算法中语句的执行次数成正比例,一个算
      
    
    </summary>
    
      <category term="algorithm" scheme="https://owen027.github.io/categories/algorithm/"/>
    
    
      <category term="Sum of two numbers" scheme="https://owen027.github.io/tags/Sum-of-two-numbers/"/>
    
  </entry>
  
  <entry>
    <title>Axios</title>
    <link href="https://owen027.github.io/2019/04/17/axios/"/>
    <id>https://owen027.github.io/2019/04/17/axios/</id>
    <published>2019-04-17T12:40:28.000Z</published>
    <updated>2019-06-24T14:33:58.460Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原生Ajax"><a href="#原生Ajax" class="headerlink" title="原生Ajax"></a>原生Ajax</h3><ul><li>异步的JavaScript与XML技术（ Asynchronous JavaScript and XML ）</li><li>Ajax 不需要任何浏览器插件，能在不更新整个页面的前提下维护数据，但需要用户允许JavaScript在浏览器上执行。<h4 id="XMLHttpRequest-对象"><a href="#XMLHttpRequest-对象" class="headerlink" title="XMLHttpRequest 对象"></a><code>XMLHttpRequest</code> 对象</h4></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ajax</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.url = obj.url ||<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">this</span>.type = obj.type || <span class="string">'get'</span>;</span><br><span class="line">    <span class="keyword">this</span>.data = obj.data ||&#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.success = obj.success || <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.error = obj.error || <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 再原型上创建方法</span></span><br><span class="line">Ajax.prototype.send = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span>  toStr = <span class="built_in">Object</span>.prototype.toString; </span><br><span class="line">    <span class="keyword">if</span> (self.data === <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> self.data !== <span class="string">'object'</span> &amp;&amp; <span class="built_in">Array</span>.isArray(obj)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 实例化 XML对象</span></span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            <span class="keyword">var</span> data = <span class="string">''</span>;</span><br><span class="line">            <span class="comment">// 序列化参数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> self.data)&#123;</span><br><span class="line">                    data += k + <span class="string">'='</span> + self.data[k] + <span class="string">'&amp;'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            data = data.substr(<span class="number">0</span>,data.length - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 接收回调函数             </span></span><br><span class="line">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span> || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">                        isFunction(self.success)  &amp;&amp;  self.success(xhr.responseText)</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        isFunction(self.error)  &amp;&amp; self.error(xhr)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 初始化请求</span></span><br><span class="line">            <span class="keyword">if</span>(self.type.toLocaleLowerCase() === <span class="string">'post'</span>)&#123;</span><br><span class="line">                    xhr.open (<span class="string">'post'</span>,self.url,<span class="literal">true</span>)</span><br><span class="line">                    <span class="comment">// 设置请求头</span></span><br><span class="line">                    xhr.setRequestHeader(<span class="string">'Content-Type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">                    <span class="comment">//发送请求</span></span><br><span class="line">                    xhr.send(data)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    xhr.open(<span class="string">'get'</span>, self.url + <span class="string">"?"</span> + data,<span class="literal">true</span>)</span><br><span class="line">                    xhr.send(<span class="literal">null</span>)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> toStr.call(obj) === <span class="string">"[object Function]"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ajax = <span class="keyword">new</span> Ajax(&#123;</span><br><span class="line">     type:<span class="string">'post'</span>,</span><br><span class="line">     url:<span class="string">"/login"</span>,</span><br><span class="line">     data:&#123; </span><br><span class="line">         loginname:<span class="string">"admin"</span>,</span><br><span class="line">         password:<span class="string">"admin"</span> </span><br><span class="line">        &#125;,</span><br><span class="line">      success:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(e)</span><br><span class="line">            &#125;, </span><br><span class="line">       error:<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(err)</span><br><span class="line">              &#125;,</span><br><span class="line">        &#125;).send();</span><br></pre></td></tr></table></figure><h4 id="XMLHttpRequest-Level-2-相比于-老版本的-XMLHttpRequest-新增以下内容："><a href="#XMLHttpRequest-Level-2-相比于-老版本的-XMLHttpRequest-新增以下内容：" class="headerlink" title="XMLHttpRequest Level 2 相比于 老版本的 XMLHttpRequest 新增以下内容："></a><code>XMLHttpRequest Level 2</code> 相比于 老版本的 <code>XMLHttpRequest</code> 新增以下内容：</h4><h5 id="可以设置-HTTP-请求超时时间"><a href="#可以设置-HTTP-请求超时时间" class="headerlink" title="可以设置 HTTP 请求超时时间"></a>可以设置 HTTP 请求超时时间</h5>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'GET'</span>,<span class="string">'url'</span>);</span><br><span class="line"><span class="comment">// 超时 2s</span></span><br><span class="line">xhr.timeout = <span class="number">2000</span>;</span><br><span class="line"><span class="comment">// 超时处理</span></span><br><span class="line">xhr.ontimeout = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;</span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure><h5 id="可以通过-FormData-发送表单数据"><a href="#可以通过-FormData-发送表单数据" class="headerlink" title="可以通过 FormData 发送表单数据"></a>可以通过 <code>FormData</code> 发送表单数据</h5>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 实例化 FormData</span></span><br><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line"> <span class="comment">// 添加数据</span></span><br><span class="line"> formData.append(key,value);</span><br><span class="line"></span><br><span class="line"> xhr.open(<span class="string">'POST'</span>,<span class="string">'url'</span>);</span><br><span class="line"> xhr.send(formData);</span><br></pre></td></tr></table></figure><h5 id="可以上传文件"><a href="#可以上传文件" class="headerlink" title="可以上传文件"></a>可以上传文件</h5><ul><li><code>FormData</code> 除了可以添加字符串数据，也可以添加 <code>blob、file</code> 类型的数据，因此可以用于上传文件。</li><li><p>在浏览器中，一般是通过文件上传输入框来获取 file 对象，比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">'uploadFile'</span> <span class="attr">id</span>=<span class="string">"upload-file"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'upload-file'</span>)</span><br><span class="line">        .addEventListener(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">            <span class="comment">// 获取数据</span></span><br><span class="line">              formData.append(<span class="string">'uploadFile'</span>, <span class="keyword">this</span>.files[<span class="number">0</span>])</span><br><span class="line">               xhr.send(formData)</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="支持跨域请求"><a href="#支持跨域请求" class="headerlink" title="支持跨域请求"></a>支持跨域请求</h5><ul><li>浏览器默认是不允许跨域请求的，有时候又是必要的，在以前通常使用<a href="https://baike.baidu.com/item/JSONP" target="_blank" rel="noopener"><code>JSONP</code></a>来解决（IE10 以下不支持）</li><li>为了标准化跨域请求， W3C提出 <a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享</a>（CORS）前端无须修改代码，只需 服务器返回 <code>Access-Control-Allow-Origin</code> 响应头，指定允许对应的域</li><li><code>CORS</code> 默认不发送 <code>cookie</code> 如果需要发送，前端需要设置 <code>withCredentials</code>属性，同时服务器需要 返回 <code>Access-Control-Allow-Credentials: true</code>,<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></li></ul><h5 id="可以获取服务端二进制数据"><a href="#可以获取服务端二进制数据" class="headerlink" title="可以获取服务端二进制数据"></a>可以获取服务端二进制数据</h5><ol><li>使用 <code>overrideMimeType</code> 方法覆写服务器指定的 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="noopener"><code>MIME</code></a> 类型，从而改变浏览器解析数据的方式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数 MIME 类型</span></span><br><span class="line"><span class="comment">// 告诉浏览器，服务器响应的内容是用户自定义的字符集 </span></span><br><span class="line">xhr.overrideMimeType(<span class="string">'text/plain; charset=x-user-defined'</span>);</span><br><span class="line"><span class="comment">// 浏览器就会将服务器返回的二进制数据当成文本处理，我们需要做进一步的转换才能拿到真实的数据</span></span><br><span class="line">  <span class="comment">// 获取二进制数据的第 i 位的值</span></span><br><span class="line">  <span class="keyword">var</span> byte = xhr.responseText.charCodeAt(i) &amp; <span class="number">0xff</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>“&amp; 0xff” 运算 参考 <a href="http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html" target="_blank" rel="noopener">阮一峰的文章</a></li></ul><ol start="2"><li>xhr.responseType 用于设置服务器返回的数据的类型,将<code>返回类型设置为 blob 或者 arraybuffer</code>，然后就可以从 <code>xhr.response</code> 属性获取到对应类型的服务器返回数据。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xhr.responseType = <span class="string">'arraybuffer'</span></span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> arrayBuffer = xhr.response</span><br><span class="line"><span class="comment">// 接下来对 arrayBuffer 做进一步处理...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="可以获取数据传输进度信息-参考资料"><a href="#可以获取数据传输进度信息-参考资料" class="headerlink" title="可以获取数据传输进度信息 参考资料"></a>可以获取数据传输进度信息 <a href="https://dev.opera.com/articles/xhr2/" target="_blank" rel="noopener">参考资料</a></h5><ul><li>使用  onload 监听了一个数据传输完成的事件。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上传进度监听</span></span><br><span class="line">xhr.upload.addEventListener(<span class="string">'progress'</span>, onProgressHandler, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传输成功完成</span></span><br><span class="line">xhr.upload.addEventListener(<span class="string">'load'</span>, onLoadHandler, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 传输失败信息</span></span><br><span class="line">xhr.upload.addEventListener(<span class="string">'error'</span>, onErrorHandler, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h4><p><img src="/static/img/xml.png" alt="XMLHttpRequest"></p><p>更多资料参考:<br><a href="http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html" target="_blank" rel="noopener">阮一峰的文章</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">MDN</a></p><hr><h3 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h3><ul><li>基于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise</a> 的 Http 库 </li><li>可以在客户端 和 nodeJs中使用</li><li>在客户端创基 XMLHttpRequests</li><li>在nodeJs 创建 <a href="https://nodejs.org/api/http.html" target="_blank" rel="noopener">HTTP</a> 请求</li><li>支持Promise</li><li>可拦截转化请求和响应数据</li><li>取消请求</li><li>自动转化JSON数据</li><li>支持客户端 <a href="https://en.wikipedia.org/wiki/Cross-site_request_forgery" target="_blank" rel="noopener">XSRF</a></li></ul><h4 id="兼容性-1"><a href="#兼容性-1" class="headerlink" title="兼容性"></a>兼容性</h4><p><img src="/static/img/axios.png" alt="axios"></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><h4 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h4><h5 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>)</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'url?id=xxx'</span>)</span><br><span class="line">     .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(res)</span><br><span class="line">     &#125;)</span><br><span class="line">     .catch(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(err)</span><br><span class="line">     &#125;)</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">axios.get(<span class="string">'url'</span>,&#123;</span><br><span class="line">  params:&#123;</span><br><span class="line">    id:<span class="string">'xxxxx'</span></span><br><span class="line">  &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">   .then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(res)</span><br><span class="line">   &#125;)</span><br><span class="line">   .catch(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(err)</span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure><ul><li><p>同样的传参方法有 delete</p><h5 id="post"><a href="#post" class="headerlink" title="post"></a>post</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="string">'url'</span>,&#123;<span class="attr">name</span>:<span class="string">'Owen'</span>&#125;)</span><br><span class="line">     .then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(res)</span><br><span class="line">     &#125;)</span><br><span class="line">     .catch(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(err)</span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure></li><li><p>同样的传参方法有  put patch</p><h5 id="concurrent-requests"><a href="#concurrent-requests" class="headerlink" title="concurrent requests"></a>concurrent requests</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.all([axios.get(<span class="string">'url1'</span>),axios.get(<span class="string">'url2'</span>)])</span><br></pre></td></tr></table></figure></li></ul><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><ul><li><code>axios(config)</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">axios(&#123;</span><br><span class="line">  method:<span class="string">'get'</span>, <span class="comment">// default is get </span></span><br><span class="line">  url:<span class="string">'url'</span>, <span class="comment">// request  url</span></span><br><span class="line">  data:&#123; <span class="comment">// 仅支持post，put和patch方法，数据作为请求主体发送 ( Only the post,put and patch methods are supported, and the data is sent as the request body )</span></span><br><span class="line">  <span class="comment">/* 浏览器仅支持传递 FormData, File, Blob （The browser only supports passing FormData, File and Blob)</span></span><br><span class="line"><span class="comment">     Node 仅支持传递 Stream, Buffer (The Node only supports passing Stream, Buffer)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    name:<span class="string">'owen'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  baseURL:<span class="string">'base/url'</span>, <span class="comment">// 除非url是绝对路径，否则将baseURL添加到url的前面 (Add baseURL to then front of the url unless the url is an absolute path)</span></span><br><span class="line">  transformRequest: [<span class="function"><span class="keyword">function</span> (<span class="params">data, headers</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 可以修改发送的请求数据和请求头，只支持put，post和patch，回调函数必须返回Buffer，ArrayBuffer，FormData或Stream数据</span></span><br><span class="line">    <span class="comment">// Can modify the sent request data and request header,only support put, post and patch.</span></span><br><span class="line">    <span class="comment">// Callback must return Buffer, ArrayBuffer, FormData or Stream data</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Do whatever you want to transform the data</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line">  transformResponse: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">     <span class="comment">// 修改响应数据，再传递给 then或catch 方法 （Modify the response data and pass it to the then or catch method)</span></span><br><span class="line">    <span class="comment">// Do whatever you want to transform the data</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line">  headers: &#123;<span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span>&#125;, <span class="comment">// 自定义请求头 (Custom request header)</span></span><br><span class="line">  params:&#123; <span class="comment">// 添加到url尾部的参数，一般用于get 和 delete（ Parameters addde to the end of the url,generally used for get and delete )</span></span><br><span class="line">    id:<span class="string">'xxx'</span></span><br><span class="line">  &#125;,</span><br><span class="line">   paramsSerializer: <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123; <span class="comment">//序列化 [params] (https://www.npmjs.com/package/qs)</span></span><br><span class="line">    <span class="keyword">return</span> Qs.stringify(params, &#123;<span class="attr">arrayFormat</span>: <span class="string">'brackets'</span>&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  timeout:<span class="number">1000</span>,<span class="comment">// default is 0 , 设置请求超时时间，单位毫秒 （ Set request timeout in milliseconds )</span></span><br><span class="line">  withCredentials: <span class="literal">true</span>, <span class="comment">// default is false, 跨域时是否携带cookie（ Whether to carry cookies when crossing domains )</span></span><br><span class="line">  adapter: <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/*拦截响应数据*/</span></span><br><span class="line">      <span class="comment">// At this point:</span></span><br><span class="line">    <span class="comment">//  - config has been merged with defaults</span></span><br><span class="line">    <span class="comment">//  - request transformers have already run</span></span><br><span class="line">    <span class="comment">//  - request interceptors have already run</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Make the request using config provided</span></span><br><span class="line">    <span class="comment">// Upon response settle the Promise</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">var</span> response = &#123;</span><br><span class="line">      data: responseData,</span><br><span class="line">      status: request.status,</span><br><span class="line">      statusText: request.statusText,</span><br><span class="line">      headers: responseHeaders,</span><br><span class="line">      config: config,</span><br><span class="line">      request: request</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    settle(resolve, reject, response);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// From here:</span></span><br><span class="line">    <span class="comment">//  - response transformers will run</span></span><br><span class="line">    <span class="comment">//  - response interceptors will run</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * Resolve or reject a Promise based on response status.</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       * @param &#123;Function&#125; resolve A function that resolves the promise.</span></span><br><span class="line"><span class="comment">       * @param &#123;Function&#125; reject A function that rejects the promise.</span></span><br><span class="line"><span class="comment">       * @param &#123;object&#125; response The response.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">settle</span>(<span class="params">resolve, reject, response</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> validateStatus = response.config.validateStatus;</span><br><span class="line">            <span class="keyword">if</span> (!validateStatus || validateStatus(response.status)) &#123;</span><br><span class="line">              resolve(response);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              reject(createError(</span><br><span class="line">                <span class="string">'Request failed with status code '</span> + response.status,</span><br><span class="line">                response.config,</span><br><span class="line">                <span class="literal">null</span>,</span><br><span class="line">                response.request,</span><br><span class="line">                response</span><br><span class="line">              ));</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Create an Error with the specified message, config, error code, request and response.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @param &#123;string&#125; message The error message.</span></span><br><span class="line"><span class="comment">         * @param &#123;Object&#125; config The config.</span></span><br><span class="line"><span class="comment">         * @param &#123;string&#125; [code] The error code (for example, 'ECONNABORTED').</span></span><br><span class="line"><span class="comment">         * @param &#123;Object&#125; [request] The request.</span></span><br><span class="line"><span class="comment">         * @param &#123;Object&#125; [response] The response.</span></span><br><span class="line"><span class="comment">         * @returns &#123;Error&#125; The created error.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">createError</span>(<span class="params">message, config, code, request, response</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> error = <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">        <span class="keyword">return</span> enhanceError(error, config, code, request, response);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Update an Error with the specified config, error code, and response.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @param &#123;Error&#125; error The error to update.</span></span><br><span class="line"><span class="comment">         * @param &#123;Object&#125; config The config.</span></span><br><span class="line"><span class="comment">         * @param &#123;string&#125; [code] The error code (for example, 'ECONNABORTED').</span></span><br><span class="line"><span class="comment">         * @param &#123;Object&#125; [request] The request.</span></span><br><span class="line"><span class="comment">         * @param &#123;Object&#125; [response] The response.</span></span><br><span class="line"><span class="comment">         * @returns &#123;Error&#125; The error.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">enhanceError</span>(<span class="params">error, config, code, request, response</span>) </span>&#123;</span><br><span class="line">            error.config = config;</span><br><span class="line">            <span class="keyword">if</span> (code) &#123;</span><br><span class="line">              error.code = code;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            error.request = request;</span><br><span class="line">            error.response = response;</span><br><span class="line">            error.isAxiosError = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            error.toJSON = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="comment">// Standard</span></span><br><span class="line">                message: <span class="keyword">this</span>.message,</span><br><span class="line">                name: <span class="keyword">this</span>.name,</span><br><span class="line">                <span class="comment">// Microsoft</span></span><br><span class="line">                description: <span class="keyword">this</span>.description,</span><br><span class="line">                number: <span class="keyword">this</span>.number,</span><br><span class="line">                <span class="comment">// Mozilla</span></span><br><span class="line">                fileName: <span class="keyword">this</span>.fileName,</span><br><span class="line">                lineNumber: <span class="keyword">this</span>.lineNumber,</span><br><span class="line">                columnNumber: <span class="keyword">this</span>.columnNumber,</span><br><span class="line">                stack: <span class="keyword">this</span>.stack,</span><br><span class="line">                <span class="comment">// Axios</span></span><br><span class="line">                config: <span class="keyword">this</span>.config,</span><br><span class="line">                code: <span class="keyword">this</span>.code</span><br><span class="line">              &#125;;</span><br><span class="line">            &#125;;</span><br><span class="line">          <span class="keyword">return</span> error;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  auth:&#123; <span class="comment">//  表示应使用HTTP Basic身份验证，并提供凭据 ( indicates that HTTP Basic auth should be used, and supplies credentials. )</span></span><br><span class="line">    user:<span class="string">'xxx'</span>,</span><br><span class="line">    password:<span class="string">'***'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  responseType: <span class="string">'json'</span>,<span class="comment">/* 服务器响应的数据类型（ The server response data type ） </span></span><br><span class="line"><span class="comment">                         支持 arraybuffer, blob, document, json, text, stream </span></span><br><span class="line"><span class="comment">                        */</span></span><br><span class="line">  responseEncoding:<span class="string">'utf8'</span>, <span class="comment">// 用于解码响应的编码 (Encoding for decoding the response )</span></span><br><span class="line">  xsrfCookieName: <span class="string">'XSRF-TOKEN'</span>, <span class="comment">// default is XSRF-TOKEN , csrf令牌Cookie 名称</span></span><br><span class="line">  xsrfHeaderName: <span class="string">'X-XSRF-TOKEN'</span>, <span class="comment">//default is X-XSRF-TOKEN, xsrf标记值的http标头的名称</span></span><br><span class="line">onUploadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123; <span class="comment">//上传进度事件 （handling of progress events for uploads ）</span></span><br><span class="line">    <span class="built_in">console</span>.log(progressEvent)</span><br><span class="line">  &#125;,</span><br><span class="line">onDownloadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123; <span class="comment">// 下载进度事件 （ handling of progress events for downloads）</span></span><br><span class="line">   <span class="built_in">console</span>.log(progressEvent)</span><br><span class="line">  &#125;,</span><br><span class="line">maxContentLength: <span class="number">2000</span>, <span class="comment">// 允许响应内容的最大字节 （defines the max size of the http response content in bytes allowed）</span></span><br><span class="line">validateStatus: <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123; <span class="comment">// 返回给定HTTP状态范围, 如果状态在给定范围内，响应数据传给`then` ，否则传给 `catch` ( Returns the given HTTP status range, if the status is within the give range, the respones data is passed to `then`, otherwise passed to `catch` ) </span></span><br><span class="line">    <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>; <span class="comment">// default</span></span><br><span class="line">  &#125;,</span><br><span class="line">  maxRedirects: <span class="number">5</span>, <span class="comment">// default is 5  // 定义Node 中最大重定向数  ( defines the maximunn number of redirects in Node )</span></span><br><span class="line">  socketPath: <span class="literal">null</span>, <span class="comment">//  default is null 定义要在node.js中使用的 UNIX socket</span></span><br><span class="line">  httpAgent: <span class="keyword">new</span> http.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;), <span class="comment">// node 中 http 和 https 的代理</span></span><br><span class="line">  httpsAgent: <span class="keyword">new</span> https.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),<span class="comment">// http://nodejs.cn/api/http.html</span></span><br><span class="line">  proxy: &#123; <span class="comment">// 代理配置</span></span><br><span class="line">    host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port: <span class="number">9000</span>,</span><br><span class="line">    auth: &#123;</span><br><span class="line">      username: <span class="string">'mikeymike'</span>,</span><br><span class="line">      password: <span class="string">'rapunz3l'</span></span><br><span class="line">          &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">    cancelToken: <span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span> (<span class="params">cancel</span>) </span>&#123; <span class="comment">// 取消请求的 token</span></span><br><span class="line">  &#125;)</span><br><span class="line">  &#125;)  </span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(res)</span><br><span class="line">     &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(err)</span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h5><ul><li><p>通过 <code>axios.create</code> 方法来替换全局配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'base/url'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>通过<code>axios.defaults</code> 对象替换全局默认配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">instance.defaults.headers.common[<span class="string">'Authorization'</span>] = AUTH_TOKEN;</span><br><span class="line">instance.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span>;</span><br></pre></td></tr></table></figure></li></ul><h5 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h5><ul><li><p>拦截请求前的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li><li><p>拦截响应数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something with response data</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something with response error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li><li><p>删除拦截器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myInterceptor = axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/*...*/</span>&#125;);</span><br><span class="line">axios.interceptors.request.eject(myInterceptor);</span><br></pre></td></tr></table></figure></li></ul><h4 id="二次封装"><a href="#二次封装" class="headerlink" title="二次封装"></a>二次封装</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @desc: axios封装</span></span><br><span class="line"><span class="comment"> * @author: ggw </span></span><br><span class="line"><span class="comment"> * @module: axios</span></span><br><span class="line"><span class="comment"> * @description: 配合使用 饿了么的 Message和Loading</span></span><br><span class="line"><span class="comment"> * @Date: 2018 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    Message,</span><br><span class="line">    Loading</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'../router'</span>; </span><br><span class="line"><span class="keyword">let</span> loading;</span><br><span class="line"><span class="keyword">let</span> headerNone = &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded; charset=UTF-8'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> headerTwo = &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/json; charset=UTF-8'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> baseURL = <span class="built_in">window</span>.location.origin ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * @description: 定义初始化Loading</span></span><br><span class="line"><span class="comment"> * @method: startLoading </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">const</span> startLoading = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    loading = Loading.service(&#123;</span><br><span class="line">        target: <span class="string">'.content-box'</span>,</span><br><span class="line">        background: <span class="string">'rgba(220, 220, 220, 0.51)'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * @description: 显示Loading 同时多个发送请求 只开启一次Loading</span></span><br><span class="line"><span class="comment"> * @method: showLoading  &amp;&amp; hideLoading</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">const</span> showLoading = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (count === <span class="number">0</span>) startLoading();</span><br><span class="line">    count++;</span><br><span class="line">&#125;;</span><br><span class="line"> <span class="keyword">const</span> hideLoading = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    count--;</span><br><span class="line">    <span class="keyword">if</span> (count === <span class="number">0</span>) &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">           loading.close();</span><br><span class="line">        &#125;, <span class="number">300</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> filiter = <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="built_in">Object</span>.keys(r)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (r[item] === <span class="string">' '</span> || r[item] === <span class="string">''</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> r[item];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * @description: 出口</span></span><br><span class="line"><span class="comment"> * @exports api</span></span><br><span class="line"><span class="comment"> * @param:options 必须是对象</span></span><br><span class="line"><span class="comment"> * options 对象为 axios对应参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (options) =&gt; &#123;</span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * @description: 用来初始化承诺的回调。</span></span><br><span class="line"><span class="comment">     * 这个回调被传递了两个参数：</span></span><br><span class="line"><span class="comment">     * 一个解析回调用一个值或另一个承诺的结果来解析承诺，</span></span><br><span class="line"><span class="comment">     * 以及一个拒绝回调，用来拒绝承诺的原因或错误。</span></span><br><span class="line"><span class="comment">     * @constructor: Promise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">            withCredentials: <span class="literal">true</span>,</span><br><span class="line">            headers: headerNone,</span><br><span class="line">            baseURL</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 请求拦截器</span></span><br><span class="line">        instance.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">             <span class="keyword">let</span> &#123;load = <span class="literal">true</span>&#125; = config.data || config.params || &#123;&#125; ;</span><br><span class="line">            <span class="keyword">if</span> (load) showLoading();</span><br><span class="line">            <span class="comment">//  过滤无值参数</span></span><br><span class="line">            <span class="keyword">if</span> (config.params) &#123;</span><br><span class="line">               <span class="keyword">delete</span> config.params.load;</span><br><span class="line">                filiter(config.params);</span><br><span class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (config.data) &#123;</span><br><span class="line">                filiter(config.data);</span><br><span class="line">               <span class="keyword">delete</span> config.data.load;</span><br><span class="line">               &#125;</span><br><span class="line">            <span class="keyword">if</span> (</span><br><span class="line">                config.method.toLocaleLowerCase() === <span class="string">'post'</span> ||</span><br><span class="line">                config.method.toLocaleLowerCase() === <span class="string">'put'</span></span><br><span class="line">            ) &#123;</span><br><span class="line">                <span class="comment">// json 格式传递</span></span><br><span class="line">                <span class="keyword">if</span> (config.json) &#123;</span><br><span class="line">                    config.headers = headerTwo;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    config.data = qs.stringify(config.data);</span><br><span class="line">                    config.data = config.data + <span class="string">'&amp;t='</span> + <span class="built_in">Date</span>.now();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> config;</span><br><span class="line">        &#125;, error =&gt; &#123;</span><br><span class="line">             hideLoading();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 响应拦截器</span></span><br><span class="line">        instance.interceptors.response.use(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">           setTimeout(hideLoading,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">let</span> data;</span><br><span class="line">            <span class="comment">// IE9时response.data是undefined，因此需要使用response.request.responseText(Stringify后的字符串)</span></span><br><span class="line">            <span class="keyword">if</span> (!response.data ) &#123;</span><br><span class="line">                data = response.request.responseText;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                data = response.data;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (data.code) &#123; <span class="comment">// 接口定义字段</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'001'</span>:</span><br><span class="line">                    Message(&#123;</span><br><span class="line">                        showClose: <span class="literal">true</span>,</span><br><span class="line">                        message: data.msg || <span class="string">'未知错误,请联系管理员'</span>,</span><br><span class="line">                        type: <span class="string">'error'</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                    router.push(&#123;</span><br><span class="line">                        path: <span class="string">'/login'</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">default</span>:</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;, err =&gt; &#123;</span><br><span class="line">          hideLoading();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (err &amp;&amp; err.response) &#123;</span><br><span class="line">                <span class="keyword">let</span> msg = &#123;</span><br><span class="line">                    <span class="number">400</span>: <span class="string">'请求错误'</span>,</span><br><span class="line">                    <span class="number">401</span>: <span class="string">'未授权，请登录'</span>,</span><br><span class="line">                    <span class="number">403</span>: <span class="string">'拒绝访问'</span>,</span><br><span class="line">                    <span class="number">404</span>: <span class="string">`请求地址出错: <span class="subst">$&#123;err.response.request.responseURL&#125;</span>`</span>,</span><br><span class="line">                    <span class="number">408</span>: <span class="string">'请求超时'</span>,</span><br><span class="line">                    <span class="number">500</span>: <span class="string">'服务器内部错误'</span>,</span><br><span class="line">                    <span class="number">501</span>: <span class="string">'服务未实现'</span>,</span><br><span class="line">                    <span class="number">502</span>: <span class="string">'网关错误'</span>,</span><br><span class="line">                    <span class="number">503</span>: <span class="string">'服务不可用'</span>,</span><br><span class="line">                    <span class="number">504</span>: <span class="string">'网关超时'</span>,</span><br><span class="line">                    <span class="number">505</span>: <span class="string">'HTTP版本不受支持'</span></span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">let</span> status = <span class="built_in">parseInt</span>(err.response.status,<span class="number">10</span>);</span><br><span class="line">                Message(&#123;</span><br><span class="line">                    showClose: <span class="literal">true</span>,</span><br><span class="line">                    message: msg[status] || <span class="string">''</span>,</span><br><span class="line">                    type: <span class="string">'error'</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Message(&#123;</span><br><span class="line">                    message: err.config ? <span class="string">`请求地址出错: <span class="subst">$&#123;err.config.url&#125;</span>`</span> : err,</span><br><span class="line">                    type: <span class="string">'error'</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 请求</span></span><br><span class="line">        instance(options)</span><br><span class="line">            .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                resolve(res);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                  reject(error);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;原生Ajax&quot;&gt;&lt;a href=&quot;#原生Ajax&quot; class=&quot;headerlink&quot; title=&quot;原生Ajax&quot;&gt;&lt;/a&gt;原生Ajax&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;异步的JavaScript与XML技术（ Asynchronous JavaScript and
      
    
    </summary>
    
      <category term="XMLHttpRequest" scheme="https://owen027.github.io/categories/XMLHttpRequest/"/>
    
    
      <category term="axios" scheme="https://owen027.github.io/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>class</title>
    <link href="https://owen027.github.io/2019/04/17/class/"/>
    <id>https://owen027.github.io/2019/04/17/class/</id>
    <published>2019-04-17T10:32:50.000Z</published>
    <updated>2019-06-24T14:33:58.461Z</updated>
    
    <content type="html"><![CDATA[<h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><ul><li>生成类的实例对象的写法，与 ES5 完全一样，也是使用new命令</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">var</span> point = Point(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">var</span> point = <span class="keyword">new</span> Point(<span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>实例的属性除非显式定义在其本身（即定义在this对象上）， 否则都是定义在原型上（即定义在class上）。 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> point = <span class="keyword">new</span> Point(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">point.toString() <span class="comment">// (2, 3)</span></span><br><span class="line"></span><br><span class="line">point.hasOwnProperty(<span class="string">'x'</span>) <span class="comment">// true</span></span><br><span class="line">point.hasOwnProperty(<span class="string">'y'</span>) <span class="comment">// true</span></span><br><span class="line">point.hasOwnProperty(<span class="string">'toString'</span>) <span class="comment">// false</span></span><br><span class="line">point.__proto__.hasOwnProperty(<span class="string">'toString'</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><label>与 ES5 一样，类的所有实例共享一个原型对象。</label></li><li><p>避免对环境产生依赖，生产环境中，我们可以使用 <code>Object.getPrototypeOf</code><br>方法来获取实例对象的原型，然后再来为原型添加方法/属性。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Point(<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">p1.__proto__.printName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'Oops'</span> &#125;;</span><br><span class="line"></span><br><span class="line">p1.printName() <span class="comment">// "Oops"</span></span><br><span class="line">p2.printName() <span class="comment">// "Oops"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> Point(<span class="number">4</span>,<span class="number">2</span>);</span><br><span class="line">p3.printName() <span class="comment">// "Oops"</span></span><br></pre></td></tr></table></figure><p>由于p1的原型就是p2的原型，因此p2也可以调用这个方法。 而且，此后新建的实例p3也可以调用这个方法。这意味着，使用实例的<code>__proto__</code>属性改写原型，必须相当谨慎，不推荐使用，因为这会改变“类”的原始定义，影响到所有实例。</p><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><ul><li>constructor方法是类的默认方法, <label>通过new命令生成对象实例时</label>，自动调用该方法。</li></ul><p>一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。<br>相当于es5 new Vue </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125; <span class="comment">//JavaScript 引擎会自动为它添加一个空的constructor方法。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">new</span> Point ()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>constructor方法默认返回实例对象（即this），完全可以指定返回另外一个对象。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Foo() <span class="keyword">instanceof</span> Foo</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><label>类必须使用new调用</label>，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用new也可以执行。</p><h3 id="表达式定义"><a href="#表达式定义" class="headerlink" title="表达式定义"></a>表达式定义</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyClass = <span class="class"><span class="keyword">class</span> <span class="title">Me</span> </span>&#123;</span><br><span class="line">  getClassName() &#123;</span><br><span class="line">    <span class="keyword">return</span> Me.name;</span><br><span class="line">    <span class="comment">//这个类的名字是MyClass而不是Me，Me只在 Class 的内部代码可用，指代当前类。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//内部没用到Me的话可以省略Me</span></span><br><span class="line"><span class="keyword">const</span> YouClass = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>采用 Class 表达式，可以写出立即执行的 Class。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sayName() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(<span class="string">'张三'</span>);</span><br><span class="line"></span><br><span class="line">person.sayName(); <span class="comment">// "张三"</span></span><br></pre></td></tr></table></figure><ul><li>不存在变量提升 （hoist），必须保证子类在父类之后定义 ，这一点与 ES5 完全不同。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Foo(); <span class="comment">// ReferenceError</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><p>继承类<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> Foo = <span class="class"><span class="keyword">class</span> </span>&#123;&#125;;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="comment">//Bar继承Foo</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h3><p>私有方法是常见需求，但 ES6 不提供，只能通过变通方法模拟实现。<br>有三种方法可模拟</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 公有方法</span></span><br><span class="line">  foo (baz) &#123;</span><br><span class="line">    <span class="keyword">this</span>._bar(baz);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 私有方法</span></span><br><span class="line">  _bar(baz) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.snaf = baz;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// _bar方法前面的下划线，表示这是一个只限于内部使用的私有方法 但是，在类的外部，还是可以调用到这个方法。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> </span>&#123;</span><br><span class="line">  foo (baz) &#123;</span><br><span class="line">    bar.call(<span class="keyword">this</span>, baz);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 内部调用了bar.call(this, baz)，成为了当前模块的私有方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//私有方法移出模块</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">baz</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.snaf = baz;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="built_in">Symbol</span>(<span class="string">'bar'</span>);</span><br><span class="line"><span class="keyword">const</span> snaf = <span class="built_in">Symbol</span>(<span class="string">'snaf'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">myClass</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 公有方法</span></span><br><span class="line">  foo(baz) &#123;</span><br><span class="line">    <span class="keyword">this</span>[bar](baz);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 私有方法 </span></span><br><span class="line">  [bar](baz) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[snaf] = baz;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 利用Symbol值的唯一性，将私有方法的名字命名为一个Symbol值。</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="私有属性的提案"><a href="#私有属性的提案" class="headerlink" title="私有属性的提案"></a><strong>私有属性的提案</strong></h3><ul><li><p>方法是在属性名之前，使用#表示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  #x=0;// 私有属性可以指定初始值，在构造函数执行时进行初始化。</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(x = 0) &#123;</span><br><span class="line">    #x = +x; // 写成 this.#x 亦可</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get #x() &#123; return #x &#125;</span><br><span class="line">  set #x(value) &#123; #x = +value &#125;</span><br><span class="line">  #sum() &#123; return #a + #b; &#125;  //私有方法</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//  #x是一个私有属性，它的读写都通过get #x()和set #x()来完成。 #x和x是两个不同的属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//JavaScript 是一门动态语言，没有类型声明，使用独立的符号似乎是唯一的比较方便可靠的方法，能够准确地区分一种属性是否为私有属性。@已经留给了 Decorator。</span></span><br></pre></td></tr></table></figure></li><li><p>私有属性不限于从this引用，类的实例也可以引用私有属性  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  #privateValue = 42;</span><br><span class="line">  <span class="keyword">static</span> getPrivateValue(foo) &#123;</span><br><span class="line">    return foo.#privateValue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.getPrivateValue(<span class="keyword">new</span> Foo()); <span class="comment">// 42</span></span><br><span class="line">console.log(Foo.#privateValue) // 报错</span><br></pre></td></tr></table></figure></li></ul><h4 id="class-的取值函数（getter）和存值函数（setter）"><a href="#class-的取值函数（getter）和存值函数（setter）" class="headerlink" title="class 的取值函数（getter）和存值函数（setter）"></a>class 的取值函数（getter）和存值函数（setter）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> prop() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'getter'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> prop(value) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setter: '</span>+value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> inst = <span class="keyword">new</span> MyClass();</span><br><span class="line"></span><br><span class="line">inst.prop = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// setter: 123</span></span><br><span class="line"></span><br><span class="line">inst.prop</span><br><span class="line"><span class="comment">// 'getter'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;class&quot;&gt;&lt;a href=&quot;#class&quot; class=&quot;headerlink&quot; title=&quot;class&quot;&gt;&lt;/a&gt;class&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;生成类的实例对象的写法，与 ES5 完全一样，也是使用new命令&lt;/li&gt;
&lt;/ul&gt;
&lt;figure 
      
    
    </summary>
    
      <category term="ES6" scheme="https://owen027.github.io/categories/ES6/"/>
    
    
      <category term="class" scheme="https://owen027.github.io/tags/class/"/>
    
  </entry>
  
  <entry>
    <title>JSquestion</title>
    <link href="https://owen027.github.io/2019/04/10/JSquestion/"/>
    <id>https://owen027.github.io/2019/04/10/JSquestion/</id>
    <published>2019-04-10T02:39:57.000Z</published>
    <updated>2019-06-05T15:15:29.019Z</updated>
    
    <content type="html"><![CDATA[<h3 id="赋值运算符多次出现，优先计算问题-结合性"><a href="#赋值运算符多次出现，优先计算问题-结合性" class="headerlink" title="赋值运算符多次出现，优先计算问题(结合性)"></a>赋值运算符多次出现，优先计算问题(结合性)</h3><blockquote><p>赋值表达式为右结合<br>先从左到右解析各个引用，然后计算最右侧的表达式的值，最后把值从右到左赋给各个引用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">a = b = c = v</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">先解析 左侧的操作数</span></span><br><span class="line"><span class="comment">1. refa</span></span><br><span class="line"><span class="comment">2. refb</span></span><br><span class="line"><span class="comment">3. refc</span></span><br><span class="line"><span class="comment">4. value v</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">refa = (refb = (refc = value v))</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 再计算右侧表达式的值 然后和从右到左赋值</span></span><br><span class="line"><span class="comment">1. value v 赋值 refc</span></span><br><span class="line"><span class="comment">2. value v 赋值 refb</span></span><br><span class="line"><span class="comment">3. calue v 赋值 refa</span></span><br><span class="line"><span class="comment">4. 返回 value v</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//example</span></span><br><span class="line"><span class="keyword">var</span> foo = &#123;<span class="attr">n</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> bar = foo;</span><br><span class="line"></span><br><span class="line">foo.x = foo = &#123;<span class="attr">n</span>:<span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">变量名 存储在栈中， 引用对象存储在堆中</span></span><br><span class="line"><span class="comment">根据规则 先解析 =号左侧的引用 </span></span><br><span class="line"><span class="comment"> refx = (refo = &#123;n:2&#125;)</span></span><br><span class="line"><span class="comment">再赋值</span></span><br><span class="line"><span class="comment">refo = &#123;n:2&#125; //refo  开辟新指针 foo  指向 &#123;n:2&#125; </span></span><br><span class="line"><span class="comment">refx =  &#123;n:2&#125; // 在原refo指针对象中开辟新指针 指向 &#123;n:2&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">结果  refo.x == undefined</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">或者</span></span><br><span class="line"><span class="comment"> foo.x赋值前是&#123;n:1,x:unfiend&#125;;</span></span><br><span class="line"><span class="comment">赋值后&#123;n:1,x:&#123;n:2&#125;&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">foo.x <span class="comment">//undefined</span></span><br><span class="line">bar.x <span class="comment">// &#123;n: 1, x: &#123;n:2&#125;&#125;;</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'81 newO'</span>.split(<span class="string">''</span>) <span class="comment">//["8", "1", " ", "n", "e", "w", "O"] </span></span><br><span class="line"></span><br><span class="line"><span class="string">'81 newO'</span>.split(<span class="string">' '</span>)<span class="comment">// ["81", "newO"]</span></span><br><span class="line"></span><br><span class="line"><span class="string">'81 newO'</span>.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line"><span class="comment">//"Owen 18"</span></span><br></pre></td></tr></table></figure><p>###</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;赋值运算符多次出现，优先计算问题-结合性&quot;&gt;&lt;a href=&quot;#赋值运算符多次出现，优先计算问题-结合性&quot; class=&quot;headerlink&quot; title=&quot;赋值运算符多次出现，优先计算问题(结合性)&quot;&gt;&lt;/a&gt;赋值运算符多次出现，优先计算问题(结合性)&lt;/h3
      
    
    </summary>
    
    
      <category term="JSquestion" scheme="https://owen027.github.io/tags/JSquestion/"/>
    
  </entry>
  
  <entry>
    <title>Interator</title>
    <link href="https://owen027.github.io/2019/04/04/Interator/"/>
    <id>https://owen027.github.io/2019/04/04/Interator/</id>
    <published>2019-04-04T11:32:22.000Z</published>
    <updated>2019-05-19T14:21:27.638Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Interator"><a href="#Interator" class="headerlink" title="Interator"></a>Interator</h2><blockquote><p>“集合”数据的结构主要有 <code>Array</code> 、<code>Object</code>、 <code>Set</code>  and <code>Map</code> ，任何数据结构只要部署 Iterator 接口，就可完成遍历操作</p></blockquote><p><strong>遍历过程：</strong> </p><ul><li>创建指针，指向当前数据结构起始位。（遍历对象本质是一个指针对象）。</li><li>依次循环调用指针对象的 <code>next</code>方法，对应指向数据结构成员，直至结束。<br><code>每次调用</code>next<code>方法，返回对象当前成员的信息</code>{value：text,done:true}<code>,其中</code>value<code>表示成员值，</code>done` 表示遍历是否结束</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'Owen'</span>,<span class="string">'18'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> makeInterator = <span class="function"><span class="params">array</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span>  index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">       next ()&#123;</span><br><span class="line">        <span class="keyword">return</span> index &lt; array.length ? </span><br><span class="line">        &#123;<span class="attr">value</span>:array[index++],<span class="attr">done</span>:<span class="literal">false</span>&#125; : </span><br><span class="line">        &#123;<span class="attr">value</span>:<span class="literal">undefined</span>, <span class="attr">done</span>:<span class="literal">true</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span>  inter = makeInterator(arr);</span><br><span class="line">inter.next()</span><br><span class="line">it.next() <span class="comment">// &#123; value: "Owen", done: false &#125;</span></span><br><span class="line">it.next() <span class="comment">// &#123; value: 18, done: false &#125;</span></span><br><span class="line">it.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><p>对与遍历器对象来说 <code>done: false</code> and <code>value:undefined</code> 可省略</p><p>原生具备 Iterator 的数据结构：<code>Array</code> 、 <code>String</code> 、 <code>Map</code>、 <code>Set</code> 、<code>arguments</code> and <code>NodeList</code></p><blockquote><p>都默认部署 <code>[Symbol.iterator]</code> 方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator] : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      next: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          value: <span class="number">1</span>,</span><br><span class="line">          done: <span class="literal">true</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj[<span class="built_in">Symbol</span>.iterator]().next() <span class="comment">//&#123;value: 1, done: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">let</span> iter = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"></span><br><span class="line">iter.next() <span class="comment">// &#123; value: 'a', done: false &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: 'b', done: false &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: 'c', done: false &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>对象（Object）之所以没有默认部署 Iterator 接口，是因为对象的哪个属性先遍历，哪个属性后遍历是不确定的，需要开发者手动指定。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//原型上部署Interator</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RangeIterator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(start, stop) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value = start;</span><br><span class="line">    <span class="keyword">this</span>.stop = stop;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]() &#123; <span class="keyword">return</span> <span class="keyword">this</span>; &#125;</span><br><span class="line"></span><br><span class="line">  next() &#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="keyword">this</span>.value;</span><br><span class="line">    <span class="keyword">if</span> (value &lt; <span class="keyword">this</span>.stop) &#123;</span><br><span class="line">      <span class="keyword">this</span>.value++;</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: value&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">true</span>, <span class="attr">value</span>: <span class="literal">undefined</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">range</span>(<span class="params">start, stop</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> RangeIterator(start, stop);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> range(<span class="number">0</span>, <span class="number">3</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value); <span class="comment">// 0, 1, 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象上部署Interator</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Obj</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.value = value;</span><br><span class="line">  <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Obj.prototype[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> iterator = &#123; <span class="attr">next</span>: next &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> current = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (current) &#123;</span><br><span class="line">      <span class="keyword">var</span> value = current.value;</span><br><span class="line">      current = current.next;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: value &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> iterator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> one = <span class="keyword">new</span> Obj(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> two = <span class="keyword">new</span> Obj(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> three = <span class="keyword">new</span> Obj(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">one.next = two;</span><br><span class="line">two.next = three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">of</span> one)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i); <span class="comment">// 1, 2, 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="类似数组对象，可引用-Array-prototype-Symbol-iterator"><a href="#类似数组对象，可引用-Array-prototype-Symbol-iterator" class="headerlink" title="类似数组对象，可引用 Array.prototype[Symbol.iterator]"></a>类似数组对象，可引用 <code>Array.prototype[Symbol.iterator]</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//NodeList</span></span><br><span class="line">NodeList.prototype[<span class="built_in">Symbol</span>.iterator] = <span class="built_in">Array</span>.prototype[<span class="built_in">Symbol</span>.iterator];</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">NodeList.prototype[<span class="built_in">Symbol</span>.iterator] = [][<span class="built_in">Symbol</span>.iterator];</span><br><span class="line"></span><br><span class="line">[...document.querySelectorAll(<span class="string">'div'</span>)] </span><br><span class="line"></span><br><span class="line"><span class="comment">//obj</span></span><br><span class="line"><span class="keyword">let</span> iterable = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'a'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'c'</span>,</span><br><span class="line">  length: <span class="number">3</span>,</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]: <span class="built_in">Array</span>.prototype[<span class="built_in">Symbol</span>.iterator]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item); <span class="comment">// 'a', 'b', 'c'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一些-默认调用-Iterator-的操作"><a href="#一些-默认调用-Iterator-的操作" class="headerlink" title="一些 默认调用 Iterator 的操作"></a>一些 默认调用 Iterator 的操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 解构赋值</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set().add('a').add('b').add('c');</span><br><span class="line"></span><br><span class="line">let [x,y] = <span class="keyword">set</span>; // x='a'; y='b'</span><br><span class="line"></span><br><span class="line">let [first, ...rest] = <span class="keyword">set</span>; // first='a'; rest=['b','c'];</span><br><span class="line"></span><br><span class="line">//扩展运算符</span><br><span class="line"></span><br><span class="line">var str = 'hello';</span><br><span class="line">[...str] //  ['h','e','l','l','o']</span><br><span class="line"></span><br><span class="line">let arr = ['b', 'c'];</span><br><span class="line">['a', ...arr, 'd']  // ['a', 'b', 'c', 'd']</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//yield*后面跟的是一个可遍历的结构，它会调用该结构的遍历器接口。</span><br><span class="line"></span><br><span class="line">let generator = function* () &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span>* [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iterator = generator();</span><br><span class="line"></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: 3, done: false &#125;</span></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: 4, done: false &#125;</span></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: 5, done: false &#125;</span></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for...of</span></span><br><span class="line"><span class="comment">//for...of循环可以使用的范围包括数组、Set 和 Map 结构、某些类似数组的对象（比如arguments对象、DOM NodeList 对象）、 Generator 对象，以及字符串。</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="built_in">document</span>.querySelectorAll(<span class="string">"p"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr ) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 其他操作*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from()</span><br><span class="line"><span class="built_in">Map</span>(), <span class="built_in">Set</span>(), <span class="built_in">WeakMap</span>(), <span class="built_in">WeakSet</span>() <span class="comment">//生成对应数据结构</span></span><br><span class="line"><span class="built_in">Promise</span>.all()</span><br><span class="line"><span class="built_in">Promise</span>.race()</span><br></pre></td></tr></table></figure><h3 id="遍历器return方法和throw方法"><a href="#遍历器return方法和throw方法" class="headerlink" title="遍历器return方法和throw方法"></a>遍历器return方法和throw方法</h3><h4 id="return"><a href="#return" class="headerlink" title="return()"></a>return()</h4><blockquote><p>return方法必须返回一个对象。<br>如果一个对象在完成遍历前，需要清理或释放资源，就可以部署return方法。<br>如果for…of循环提前退出（通常是因为出错，或者有break语句），就会调用return方法。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                next() &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">done</span>:<span class="literal">false</span>&#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="keyword">return</span>()&#123;</span><br><span class="line">                    file.close()</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">done</span>:<span class="literal">true</span>&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//触发 return()</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> line <span class="keyword">of</span> readFile(fileName)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(line);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//触发 return()</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> line <span class="keyword">of</span> readLinesSync(fileName)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(line);</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for…of-和其他遍历语法对比"><a href="#for…of-和其他遍历语法对比" class="headerlink" title="for…of 和其他遍历语法对比"></a>for…of 和其他遍历语法对比</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="comment">//普通 `for`循环</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt;arr.length; index++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[index]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 书写比较麻烦</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.forEach </span></span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 无法跳出循环，无法使用 break or return </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for...in</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[index]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.数组键名为字符串形式的数字</span></span><br><span class="line"><span class="comment"> * 2.会遍历出原型链上的键，和手动添加的键</span></span><br><span class="line"><span class="comment"> * 3.有些情况是无顺序遍历</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.语法简洁</span></span><br><span class="line"><span class="comment"> * 2.没有 for...in 的缺点</span></span><br><span class="line"><span class="comment"> * 3.可以使用 return、break and continue</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Interator&quot;&gt;&lt;a href=&quot;#Interator&quot; class=&quot;headerlink&quot; title=&quot;Interator&quot;&gt;&lt;/a&gt;Interator&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;“集合”数据的结构主要有 &lt;code&gt;Array&lt;/cod
      
    
    </summary>
    
      <category term="ES6" scheme="https://owen027.github.io/categories/ES6/"/>
    
    
      <category term="Interator" scheme="https://owen027.github.io/tags/Interator/"/>
    
  </entry>
  
  <entry>
    <title>Generator</title>
    <link href="https://owen027.github.io/2019/04/04/generator/"/>
    <id>https://owen027.github.io/2019/04/04/generator/</id>
    <published>2019-04-04T11:28:27.000Z</published>
    <updated>2019-06-05T15:15:29.023Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><blockquote><p> ES6 提供的一种异步编程解决方案<br>Generator 函数是一个状态机，封装了多个内部状态。还是一个遍历器对象生成函数。返回<label>遍历器对象</label>，可以依次遍历 Generator 函数内部的每一个状态。</p></blockquote><p>Generator 函数特征</p><ul><li><code>function</code>关键字和函数名之间 有 <code>*</code>  ES6 没有规定，function关键字与函数名之间的星号，写在哪个位置。</li><li>函数体内部有 <code>yield</code> 表达式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span>  <span class="string">'Owen'</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'end'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象 Iterator </span></span><br><span class="line"><span class="keyword">let</span> person = generator();</span><br><span class="line"></span><br><span class="line">person.next() <span class="comment">//&#123;value:'Owen',done:false&#125;</span></span><br><span class="line">person.next() <span class="comment">//&#123;value:18,done:false&#125;</span></span><br><span class="line">person.next() <span class="comment">//&#123;value:'end',done:true&#125;</span></span><br><span class="line">person.next() <span class="comment">//&#123;value:undefined,done:true&#125;</span></span><br><span class="line">person.next() <span class="comment">//&#123;value:undefined,done:true&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><blockquote><p>yield 后面的表达式以分号作为结束语句<br>一种可以暂停函数执行的表达式，配合 <code>next</code>方法使用。<br>只能再在 <code>Generator</code> 函数中使用，普通函数中使用会报错.<br><code>yield</code> 如果用<label>在另一个表达式中,必须用圆括号包起来</label>，作为函数参数或者赋值表达式右边可以不用加括号。</p></blockquote><p><code>next</code> 运行逻辑</p><ul><li>调用 <code>next</code> 遇到 <code>yield</code>表达式 暂停执行函数后面的操作，并且 <label> 紧跟 <code>yield</code> 后面的表达式的值</label>作为返回对象 <code>value</code> 属性的值。</li><li>再次调用 <code>next</code>,继续执行<code>yield</code>表达式 后面的逻辑代码，直到下一个 <code>yield</code>表达式 或者 <code>return</code> 语句，返回值为 对象 <code>value</code> 属性的值。</li><li>如果没有  <code>return</code> 语句 ，则  <code>value</code> 属性的值为 <code>undefined</code>。</li><li><label>只有调用<code>next</code>方法，才会执行对应 <code>yield</code> 后面的表达式</label><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">g</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span> + <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> num = g() </span><br><span class="line">num <span class="comment">//g &#123;&lt;suspended&gt;&#125;</span></span><br><span class="line">num.next() <span class="comment">//&#123;value:3,done:false&#125;</span></span><br><span class="line">num.next() <span class="comment">//&#123;value:undefined,done:true&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="使用-Interator"><a href="#使用-Interator" class="headerlink" title="使用 Interator"></a>使用 Interator</h3><blockquote><p>由于 <code>Generator</code> 函数是遍历器生成函数，因此 把它赋值给对象的 <code>[Symbol.interator]</code>属性，该对象就可以被遍历<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iter = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">iter[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[...iter] <span class="comment">//[1, 2, 3]</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="next-参数"><a href="#next-参数" class="headerlink" title="next 参数"></a>next 参数</h3><blockquote><p><code>yield</code> 本身的返回值为 undefined， 而 <code>next</code>方法可以带一个参数，当作<label>上一个 <code>yield</code>的返回值<label></label></label></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> g = fn();</span><br><span class="line"></span><br><span class="line"> g.next() <span class="comment">//&#123;value:0,done:false&#125;</span></span><br><span class="line"> g.next() <span class="comment">//&#123;value:1,done:false&#125;</span></span><br><span class="line"> g.next() <span class="comment">//&#123;value:2,done:false&#125;</span></span><br><span class="line"> g.next(<span class="number">1</span>) <span class="comment">//&#123;value:0,done:false&#125;</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span>* <span class="title">fn</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span>  i = <span class="number">0</span>; <span class="literal">true</span>; i++)&#123;</span><br><span class="line">         <span class="keyword">let</span> reset = <span class="keyword">yield</span> i;</span><br><span class="line">         <span class="keyword">if</span>(reset) i = <span class="number">-1</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">dataConsumer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Started'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`1. <span class="subst">$&#123;<span class="keyword">yield</span>&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`2. <span class="subst">$&#123;<span class="keyword">yield</span>&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'result'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> genObj = dataConsumer();</span><br><span class="line">genObj.next();</span><br><span class="line"><span class="comment">// Started</span></span><br><span class="line"><span class="comment">//&#123;value: "undefined", done: fales&#125;</span></span><br><span class="line">genObj.next(<span class="string">'a'</span>)</span><br><span class="line"><span class="comment">//1. a</span></span><br><span class="line"><span class="comment">//&#123;value: "undefined", done: fales&#125;</span></span><br><span class="line">genObj.next(<span class="string">'b'</span>)</span><br><span class="line"><span class="comment">//2. b</span></span><br><span class="line"><span class="comment">//&#123;value: "result", done: true&#125;</span></span><br></pre></td></tr></table></figure><h3 id="for…of-中使用-Generator"><a href="#for…of-中使用-Generator" class="headerlink" title="for…of 中使用 Generator"></a>for…of 中使用 Generator</h3><blockquote><p>可以不用调用 <code>next</code> 方法</p><p><label> 如果 返回对象 done属性值为 true， 循环终并且不包含该对象返回值；<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> fn())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">    <span class="comment">//1 2 3 4 5 undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//斐波那契数列</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fibonacci</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span>  [prev, curr] = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">      <span class="keyword">yield</span> curr;</span><br><span class="line">      [prev,curr] = [curr, prev + curr];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> f <span class="keyword">of</span> fibonacci()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (f &gt; <span class="number">1000</span>) <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历任意对象方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">objectEntries</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> propKeys = <span class="built_in">Reflect</span>.ownKeys(obj);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> propKeys)&#123;</span><br><span class="line">         <span class="keyword">yield</span> [key,obj[key]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>:<span class="string">'Owen'</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key,value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(person))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key,value);</span><br><span class="line">    <span class="comment">//name Owen</span></span><br><span class="line">    <span class="comment">// age 18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key,value] <span class="keyword">of</span> objectEntries(person))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key,value);</span><br><span class="line">     <span class="comment">//name Owen</span></span><br><span class="line">    <span class="comment">// age 18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"></span><br><span class="line">person[<span class="built_in">Symbol</span>.interator] = objectEntries</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key,value] <span class="keyword">of</span> person)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key,value);</span><br><span class="line">     <span class="comment">//name Owen</span></span><br><span class="line">    <span class="comment">// age 18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></label></p></blockquote><h3 id="Generator-throw"><a href="#Generator-throw" class="headerlink" title="Generator throw"></a>Generator throw</h3><blockquote><p>在函数体外抛出错误，再在 函数体内捕获。<br>throw方法抛出的错误要被内部捕获，前提是必须至少执行过一次next方法。因为只有执行一次 <code>next</code>方法，函数才开始执行。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;  <span class="keyword">yield</span>;  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'内部1'</span>,e )</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123; <span class="keyword">yield</span>; &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'内部2'</span>,e)</span><br><span class="line">    &#125;; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span>  t = g();</span><br><span class="line">t.next(); <span class="comment">//&#123;value: undefined, done: false&#125;</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    t.throw(<span class="string">'a'</span>);</span><br><span class="line">    t.throw(<span class="string">'b'</span>);</span><br><span class="line">    t.throw(<span class="string">'c'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'外部'</span>,e)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内部1 a</span></span><br><span class="line"><span class="comment">//内部2 b</span></span><br><span class="line"><span class="comment">//外部 c</span></span><br></pre></td></tr></table></figure><h3 id="Generator-return"><a href="#Generator-return" class="headerlink" title="Generator return"></a>Generator return</h3><blockquote><p>结束 Generator 函数 并且给定对象返回值<br>如果有 <code>try...finally</code>，且在执行中，return方法会等待<code>finally</code> 执行完毕，再执行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">g</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ge = g();</span><br><span class="line"></span><br><span class="line">ge.next(); <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">ge.return(<span class="string">'Owen'</span>); <span class="comment">// &#123; value:"Owen", done: true &#125;</span></span><br><span class="line">ge.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// try...finally</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">numbers</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">yield</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> nun = numbers();</span><br><span class="line">nun.next() <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">nun.next() <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line">nun.return(<span class="number">7</span>) <span class="comment">// &#123; value: 4, done: false &#125;</span></span><br><span class="line">nun.next() <span class="comment">// &#123; value: 5, done: false &#125;</span></span><br><span class="line">nun.next() <span class="comment">// &#123; value: 7, done: true &#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><p><strong>next()、throw()、return()</strong></p><blockquote><p>都是让 Generator 恢复执行，并且使用不同语句替换 <code>yield</code>  </p></blockquote><h3 id="yield-1"><a href="#yield-1" class="headerlink" title="yield*"></a>yield*</h3><blockquote><p>Generator 函数默认不在内部调用另一个 Generator 函数 是没有效果的，如果<label>放到 <code>yield</code> 后面 会返回一个遍历器对象</label><br><code>yield*</code> 后面的 <code>Generator</code> 函数（没有return语句时），等同于在 <code>Generator</code> 函数内部，部署一个 <code>for...of</code> 循环。<br>如果 <code>yield*</code> 后面紧跟数组，会遍历数组成员（数组原始支持遍历器）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">g</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'x'</span>;</span><br><span class="line">    f();</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'y'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span>  g())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key)</span><br><span class="line">    <span class="comment">//"x" "y"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//yield*</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">y</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'x'</span>;</span><br><span class="line">    <span class="keyword">yield</span>* f();</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'y'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">of</span> y()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(k);</span><br><span class="line">    <span class="comment">// "x" "y" 1 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无 return</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">concat</span>(<span class="params">iter1, iter2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span>* iter1;</span><br><span class="line">  <span class="keyword">yield</span>* iter2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">concat</span>(<span class="params">iter1, iter2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> iter1) &#123;</span><br><span class="line">    <span class="keyword">yield</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> iter2) &#123;</span><br><span class="line">    <span class="keyword">yield</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// yield* array 如果去掉 * 会返回整个数组</span></span><br><span class="line"><span class="comment">//任何数据结构只要有 Iterator 接口，就可以被yield*遍历。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">yield</span>* [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> g = gen();</span><br><span class="line"></span><br><span class="line">g.next() <span class="comment">//&#123;value: "a", done: false&#125;</span></span><br><span class="line">g.next() <span class="comment">//&#123;value: "b", done: false&#125;</span></span><br><span class="line">g.next() <span class="comment">//&#123;value: "c", done: false&#125;</span></span><br><span class="line">g.next() <span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//取出嵌套数组的所有成员</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">iterTree</span>(<span class="params">tree</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(tree))&#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">let</span> arr <span class="keyword">of</span> tree) &#123;</span><br><span class="line">             <span class="keyword">yield</span>* iterTree(arr)</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">yield</span> tree</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tree = [<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>],<span class="number">7</span>],<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> iterTree(tree))&#123;</span><br><span class="line"><span class="built_in">console</span>.log(v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1 2 3 4 5 6 7 8</span></span><br><span class="line"></span><br><span class="line">[...iterTree(tree)] <span class="comment">//[1, 2, 3, 4, 5, 6, 7, 8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历完全二叉树</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面是二叉树的构造函数，</span></span><br><span class="line"><span class="comment">// 三个参数分别是左树、当前节点和右树</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tree</span>(<span class="params">left, label, right</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.left = left;</span><br><span class="line">  <span class="keyword">this</span>.label = label;</span><br><span class="line">  <span class="keyword">this</span>.right = right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面是中序（inorder）遍历函数。</span></span><br><span class="line"><span class="comment">// 由于返回的是一个遍历器，所以要用generator函数。</span></span><br><span class="line"><span class="comment">// 函数体内采用递归算法，所以左树和右树要用yield*遍历</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">inorder</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (t) &#123;</span><br><span class="line">    <span class="keyword">yield</span>* inorder(t.left);</span><br><span class="line">    <span class="keyword">yield</span> t.label;</span><br><span class="line">    <span class="keyword">yield</span>* inorder(t.right);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面生成二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断是否为叶节点</span></span><br><span class="line">  <span class="keyword">if</span> (array.length == <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">new</span> Tree(<span class="literal">null</span>, array[<span class="number">0</span>], <span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Tree(make(array[<span class="number">0</span>]), array[<span class="number">1</span>], make(array[<span class="number">2</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tree = make([[[<span class="string">'a'</span>], <span class="string">'b'</span>, [<span class="string">'c'</span>]], <span class="string">'d'</span>, [[<span class="string">'e'</span>], <span class="string">'f'</span>, [<span class="string">'g'</span>]]]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历二叉树</span></span><br><span class="line"><span class="keyword">var</span> result = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> node <span class="keyword">of</span> inorder(tree)) &#123;</span><br><span class="line">  result.push(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result <span class="comment">// ['a', 'b', 'c', 'd', 'e', 'f', 'g']</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="对象属性中的-Generator-函数"><a href="#对象属性中的-Generator-函数" class="headerlink" title="对象属性中的 Generator 函数"></a>对象属性中的 Generator 函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    * generator()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    generator :<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Generator-函数的this"><a href="#Generator-函数的this" class="headerlink" title="Generator 函数的this"></a>Generator 函数的this</h3><blockquote><p>Generator 函数不能和 new 一起使用</p><p><label>函数总返回一个遍历器，并且它指向 函数实例，同时继承 函数原型对象上的方法</label><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">18</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Owen"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj =g() <span class="comment">//g &#123;&lt;suspended&gt;&#125;</span></span><br><span class="line">obj <span class="keyword">instanceof</span> g <span class="comment">//true</span></span><br><span class="line">obj.say() <span class="comment">//"Owen"</span></span><br><span class="line"></span><br><span class="line">obj.next() <span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br><span class="line">obj.say() <span class="comment">//"Owen"</span></span><br><span class="line"><span class="comment">//因为 next 返回的是遍历器对象而不是 this 对象,所以不会返回 18</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过call 绑定this</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">Gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">this</span>.name = <span class="string">"Owen"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = Gen.call(Gen.prototype);</span><br><span class="line">obj.next()</span><br><span class="line">obj.age <span class="comment">// 18</span></span><br><span class="line">obj.next();</span><br><span class="line">obj.name <span class="comment">//"Owen"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 new 的变通方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">G</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Gen.call(Gen.prototype)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="keyword">new</span> G();</span><br><span class="line">obj1.next()</span><br><span class="line">obj1.age <span class="comment">// 18</span></span><br><span class="line">obj1.next();</span><br><span class="line">obj1.name <span class="comment">//"Owen"</span></span><br></pre></td></tr></table></figure></p></blockquote><h2 id="Generator-函数异步应用"><a href="#Generator-函数异步应用" class="headerlink" title="Generator 函数异步应用"></a>Generator 函数异步应用</h2><blockquote><p>异步: 执行一个任务的时候还不能马上返回结果，那么先将其搁置到后台，执行其他任务，等到有结果返回之后放到消息队列中，等主线程任务执行完毕后，再从消息队列中取出对应任务（callback），执行。<br>同步： 执行一个任务，中间无法中断，只能等待任务返回结果，才能执行其他任务。</p></blockquote><p>异步编程：</p><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url:&apos;url&apos;,</span><br><span class="line">  success:function(res)&#123;</span><br><span class="line">    console.log(res)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><blockquote><p>起初由网景公司知道一套事件驱动机制（事件捕获），之后IE 推出自己的驱动机制（事件冒泡）<br>利用驱动机制实现事件代理委托<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">el.addEventListener(event,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;,boolean);</span><br><span class="line"></span><br><span class="line"><span class="comment">//IE8 以下</span></span><br><span class="line">el.attachEvent(event,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//事件代理委托</span></span><br><span class="line"><span class="keyword">var</span> parent = <span class="built_in">document</span>.getElementById(<span class="string">'parent'</span>);</span><br><span class="line">parent.addEventListener(<span class="string">'click'</span>,showColor,<span class="literal">false</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showColor</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> son = e.target;</span><br><span class="line">        <span class="keyword">if</span>(son.nodeName.toLowerCase() === <span class="string">'li'</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'The color is '</span> + son.innerHTML);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="发布-订阅（观察者模式）"><a href="#发布-订阅（观察者模式）" class="headerlink" title="发布/订阅（观察者模式）"></a>发布/订阅（观察者模式）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现一个简单的发布订阅</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  订阅一个事件，发布对应事件并且执行方法</span></span><br><span class="line"><span class="comment">  需要先有代理主题 message proxy</span></span><br><span class="line"><span class="comment">  然后订阅者去订阅</span></span><br><span class="line"><span class="comment">  然后发布者发布消息执行方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">PubSub</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  <span class="comment">// message proxy</span></span><br><span class="line">  PubSub.prototype.message = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// publish</span></span><br><span class="line">  PubSub.prototype.pub = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="comment">// Turn arguments  into real array</span></span><br><span class="line">    <span class="keyword">let</span> args = [].slice.call(<span class="built_in">arguments</span>,<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> event = args.shift();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.message[event]) <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> list = <span class="keyword">this</span>.message[event];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span>  list) &#123;</span><br><span class="line">       item.apply(<span class="keyword">this</span>,args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// subscribe</span></span><br><span class="line">  PubSub.prototype.sub = <span class="function"><span class="keyword">function</span> (<span class="params">event,callback</span>)</span>&#123;      </span><br><span class="line">    <span class="keyword">if</span>( !<span class="keyword">this</span>.message[event]) &#123;</span><br><span class="line">        <span class="keyword">this</span>.message[event] = [];</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.message[event].push(callback);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="comment">// unsubscribe</span></span><br><span class="line">  PubSub.prototype.unsub = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (!<span class="keyword">this</span>.message[event]) <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">this</span>.message[event] = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Promise-对象"><a href="#Promise-对象" class="headerlink" title="Promise 对象"></a>Promise 对象</h3><blockquote><p>为了解决 “回调地狱”（callback hell）而提出的写法<br>允许将 <code>callback</code> 变成链式调用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// read I/O</span></span><br><span class="line"><span class="keyword">let</span> readFile = <span class="built_in">require</span>(<span class="string">'fs-readfile-promise'</span>);</span><br><span class="line"></span><br><span class="line">readFile(fileA)</span><br><span class="line">    .then( <span class="function">(<span class="params">data</span>) =&gt;</span> <span class="built_in">console</span>.log(data.toString()))</span><br><span class="line">    .then( <span class="function"><span class="params">()</span> =&gt;</span>   readFile(fileB))</span><br><span class="line">    .then( <span class="function">(<span class="params">data</span>) =&gt;</span> <span class="built_in">console</span>.log(data.toString()))</span><br><span class="line">    .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(err));</span><br></pre></td></tr></table></figure></p></blockquote><p>Promise 的最大问题是代码冗余，原来的任务被 Promise 包装了一下，不管什么操作，一眼看去都是一堆then，原来的语义变得很不清楚。</p><h3 id="Generator-函数（es6）"><a href="#Generator-函数（es6）" class="headerlink" title="Generator 函数（es6）"></a>Generator 函数（es6）</h3><h4 id="协程"><a href="#协程" class="headerlink" title="协程"></a><strong>协程</strong></h4><blockquote><p>多个线程相互协作，完成异步任务<br>步骤</p><ul><li>A方法开始任务</li><li>A方法执行到一半，暂停，将执行权转移到主线程</li><li>一段时间后主线程交还执行权</li><li>A方法恢复执行</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//example</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">async</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//... do something</span></span><br><span class="line">  <span class="keyword">let</span> file = <span class="keyword">yield</span> readFile(fileA);</span><br><span class="line">  <span class="comment">//... do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//异步操作需要暂停的地方，都用yield语句注明。</span></span><br></pre></td></tr></table></figure><label> 协程代码的写法非常像同步操作，Generator 函数最大优点是可以交出函数执行权</label><p>函数通过<code>next</code> 进行数据交换，通过 <code>throw</code>进行错误处理<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">async</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> n;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">     n =  <span class="keyword">yield</span> ++num;</span><br><span class="line">  &#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> g = <span class="keyword">async</span>(<span class="number">1</span>);</span><br><span class="line">g.next()</span><br><span class="line">g.throw(<span class="string">'error'</span>);</span><br></pre></td></tr></table></figure></p><h4 id="封装异步任务"><a href="#封装异步任务" class="headerlink" title="封装异步任务"></a>封装异步任务</h4><p>使用<code>node-fetch</code> 模块 返回一个Promise 对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> fetch = <span class="built_in">require</span>(<span class="string">'node-fetch'</span>);</span><br><span class="line"><span class="keyword">let</span> g = gen();</span><br><span class="line"><span class="keyword">let</span> result = g.next();</span><br><span class="line"></span><br><span class="line">result.value.then(<span class="function">(<span class="params">data</span>) =&gt;</span> data.json())</span><br><span class="line">            .then(<span class="function">(<span class="params">data</span>) =&gt;</span> g.next(data) );</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> url = <span class="string">'/index.json'</span>;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">yield</span> fetch(url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Thunk-形实转换"><a href="#Thunk-形实转换" class="headerlink" title="Thunk (形实转换)"></a>Thunk (形实转换)</h4><p><strong>函数传值策略</strong></p><ul><li>传值调用（参数在传入函数前计算）,简单易懂，不过可能会造成性能损失</li><li>传名调用（将参数放到一个临时函数，再将这个临时函数传入函数体（<code>Thunk</code> 函数)）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传值</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">x,b</span>) </span>&#123; <span class="keyword">return</span> x * <span class="number">3</span> &#125;;</span><br><span class="line">fn(x + <span class="number">1</span>) <span class="comment">//   4 * 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//传名</span></span><br><span class="line">fn(x + <span class="number">1</span>)  <span class="comment">//    (x + 1) * 3 </span></span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">var</span> thunk = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123; <span class="keyword">return</span> x + <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">fn (thunk) <span class="comment">// thunk() * 3</span></span><br></pre></td></tr></table></figure><h3 id="async-await（es7"><a href="#async-await（es7" class="headerlink" title="async/await（es7)"></a>async/await（es7)</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Generator&quot;&gt;&lt;a href=&quot;#Generator&quot; class=&quot;headerlink&quot; title=&quot;Generator&quot;&gt;&lt;/a&gt;Generator&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt; ES6 提供的一种异步编程解决方案&lt;br&gt;Generat
      
    
    </summary>
    
      <category term="ES6" scheme="https://owen027.github.io/categories/ES6/"/>
    
    
      <category term="async" scheme="https://owen027.github.io/tags/async/"/>
    
      <category term="Generator" scheme="https://owen027.github.io/tags/Generator/"/>
    
  </entry>
  
  <entry>
    <title>Reflect</title>
    <link href="https://owen027.github.io/2019/04/02/Reflect/"/>
    <id>https://owen027.github.io/2019/04/02/Reflect/</id>
    <published>2019-04-02T08:22:02.000Z</published>
    <updated>2019-04-21T15:59:13.596Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h2><blockquote><p>将<code>Object</code>对象中一些属于语言内部的方法，放到 <code>Reflect</code>对象中<br>会逐渐替换<code>Object</code>对象 中对应的方法<br>优化一些放法返回的结果<br>只要是 Proxy 对象的方法，就能在 Reflect 对象上找到对应的方法,不管 Proxy 怎么修改默认行为，你总可以在 Reflect 上获取默认行为。</p></blockquote><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><blockquote><p>13 个静态方法  作用对应Object同名方法</p><label>所有方法第一个参数，必须是对象，否则报错</label></blockquote><h3 id="Reflect-apply-target-thisArg-args"><a href="#Reflect-apply-target-thisArg-args" class="headerlink" title="Reflect.apply(target, thisArg, args)"></a>Reflect.apply(target, thisArg, args)</h3><blockquote><p>等同于 <code>Function</code> 构造函数中的<code>Function.prototype.apply.call(func, thisArg, args)</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ages = [<span class="number">11</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">96</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">const</span> youngest = <span class="built_in">Math</span>.min.apply(<span class="built_in">Math</span>, ages);</span><br><span class="line"><span class="keyword">const</span> oldest = <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, ages);</span><br><span class="line"><span class="keyword">const</span> type = <span class="built_in">Object</span>.prototype.toString.call(youngest);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reflect</span></span><br><span class="line"><span class="keyword">const</span> youngest = <span class="built_in">Reflect</span>.apply(<span class="built_in">Math</span>.min, <span class="built_in">Math</span>, ages);</span><br><span class="line"><span class="keyword">const</span> oldest = <span class="built_in">Reflect</span>.apply(<span class="built_in">Math</span>.max, <span class="built_in">Math</span>, ages);</span><br><span class="line"><span class="keyword">const</span> type = <span class="built_in">Reflect</span>.apply(<span class="built_in">Object</span>.prototype.toString, youngest, []);</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-construct-target-args"><a href="#Reflect-construct-target-args" class="headerlink" title="Reflect.construct(target, args)"></a>Reflect.construct(target, args)</h3><blockquote><p>对应 <code>new target(...args)</code>  提供了一种不使用 new，来调用构造函数的方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greeting</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// new 的写法</span></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> Greeting(<span class="string">'Owen'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reflect.construct 的写法</span></span><br><span class="line"><span class="keyword">const</span> instance = <span class="built_in">Reflect</span>.construct(Greeting, [<span class="string">'Owen'</span>]);</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-get-target-name-receiver"><a href="#Reflect-get-target-name-receiver" class="headerlink" title="Reflect.get(target, name, receiver)"></a>Reflect.get(target, name, receiver)</h3><blockquote><p>查找目标对象属性值并返回<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name : <span class="string">'Owen'</span>,</span><br><span class="line">    age:<span class="number">18</span>,</span><br><span class="line">    <span class="keyword">get</span> baz()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="keyword">this</span>.age </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.get(obj,<span class="string">'name'</span>) <span class="comment">//'Owen'</span></span><br><span class="line"><span class="built_in">Reflect</span>.get(obj,<span class="string">'baz'</span>)  <span class="comment">//'Owen18'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// receiver 改变 get 函数 this 指向</span></span><br><span class="line"><span class="keyword">let</span> obj1 =&#123;</span><br><span class="line">     name : <span class="string">'Owen'</span>,</span><br><span class="line">    age:<span class="number">16</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Reflect</span>.get(obj,<span class="string">'baz'</span>,obj1) <span class="comment">//'Owen16</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-set-target-name-value-receiver"><a href="#Reflect-set-target-name-value-receiver" class="headerlink" title="Reflect.set(target, name, value, receiver)"></a>Reflect.set(target, name, value, receiver)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name : <span class="string">'Owen'</span>,</span><br><span class="line">    age:<span class="number">18</span>,</span><br><span class="line">    <span class="keyword">set</span> baz(val)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.age = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Reflect</span>.set(obj,<span class="string">'name'</span>,<span class="string">'wen'</span>) </span><br><span class="line">obj.name <span class="comment">//'wen'</span></span><br><span class="line"><span class="built_in">Reflect</span>.set(obj,<span class="string">'baz'</span>, <span class="number">16</span>)</span><br><span class="line">obj.age <span class="comment">// 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//receiver 改变 set this 指向</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  name: <span class="string">'wen'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Reflect</span>.set(obj,<span class="string">'baz'</span>, <span class="number">16</span>,obj1)</span><br><span class="line">obj.name <span class="comment">// wen</span></span><br></pre></td></tr></table></figure><blockquote><p>如果 <code>Proxy</code>和 <code>Reflect</code> 联合使用，<label>并且传入 <code>receiver</code> </label>， 那么 <code>Reflect.set</code> 会触发<code>Proxy.defineProperty</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> proxy = &#123;</span><br><span class="line">    name:<span class="string">'Owen'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">    <span class="keyword">set</span> (target, key, value, receiver)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'set'</span>)</span><br><span class="line">        Refelect.set(target, key, value, receiver)</span><br><span class="line">    &#125;,</span><br><span class="line">    defineProerty(target, key, attribute)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'defineProperty'</span>)</span><br><span class="line">        <span class="built_in">Reflect</span>.defineProperty(target, key, attribute)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(proxy,handler)</span><br><span class="line">obj.name = <span class="string">'wen'</span>;</span><br><span class="line"><span class="comment">// set</span></span><br><span class="line"><span class="comment">// defineProperty</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">因为Proxy.set的receiver参数总是指向当前的 Proxy实例（即上例的obj），</span></span><br><span class="line"><span class="comment">而Reflect.set一旦传入receiver，就会将属性赋值到receiver上面（即obj），导致触发defineProperty拦截。</span></span><br><span class="line"><span class="comment">如果Reflect.set没有传入receiver，那么就不会触发defineProperty拦截。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-defineProperty-target-propertykey-attribute"><a href="#Reflect-defineProperty-target-propertykey-attribute" class="headerlink" title="Reflect.defineProperty(target, propertykey, attribute)"></a>Reflect.defineProperty(target, propertykey, attribute)</h3><blockquote><p>对应 <code>Object.defineProperty</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyDate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*…*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(MyDate, <span class="string">'now'</span>, &#123;</span><br><span class="line">  value: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Date</span>.now()</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="built_in">Reflect</span>.defineProperty(MyDate, <span class="string">'now'</span>, &#123;</span><br><span class="line">  value: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Date</span>.now()</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-deleteProperty-target-name"><a href="#Reflect-deleteProperty-target-name" class="headerlink" title="Reflect.deleteProperty(target, name)"></a>Reflect.deleteProperty(target, name)</h3><blockquote><p>对应 <code>delete obj.name</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name:<span class="string">'Owen'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//es5 </span></span><br><span class="line"><span class="keyword">delete</span> obj.name</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reflect</span></span><br><span class="line"><span class="built_in">Reflect</span>.deleteProperty(obj,<span class="string">'name'</span>)</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-has-target-name"><a href="#Reflect-has-target-name" class="headerlink" title="Reflect.has(target, name)"></a>Reflect.has(target, name)</h3><blockquote><p>对应 <code>name in obj</code>  中的 in 运算<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name:<span class="string">'Owen'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//es5</span></span><br><span class="line"> <span class="string">'name'</span> <span class="keyword">in</span> obj <span class="comment">// ture</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Reflect</span></span><br><span class="line"><span class="built_in">Reflect</span>.has(obj,<span class="string">'name'</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-ownKeys-target"><a href="#Reflect-ownKeys-target" class="headerlink" title="Reflect.ownKeys(target)"></a>Reflect.ownKeys(target)</h3><blockquote><p>对应 <code>Object.getOwnPropertyNames</code> and <code>Object.getOwnPropertySymbols</code>  返回对象所有属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name:<span class="string">'Owen'</span>,</span><br><span class="line">  age:<span class="number">18</span>,</span><br><span class="line">  [<span class="built_in">Symbol</span>.for(<span class="string">'name'</span>)]:<span class="string">'Owen'</span>,</span><br><span class="line">  [<span class="built_in">Symbol</span>.for(<span class="string">'age'</span>)]:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(obj)</span><br><span class="line"><span class="comment">// ['name', 'age']</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertySymbols(obj)</span><br><span class="line"><span class="comment">//[Symbol(name), Symbol(age)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="built_in">Reflect</span>.ownKeys(obj)</span><br><span class="line"><span class="comment">//['name', 'age',Symbol(name), Symbol(age)]</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-isExtensible-target"><a href="#Reflect-isExtensible-target" class="headerlink" title="Reflect.isExtensible(target)"></a>Reflect.isExtensible(target)</h3><blockquote><p>对应 <code>Object.isExtensible</code>  返回 <code>boolean</code>，表示当前对象是否可扩展。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj =&#123;&#125;</span><br><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="built_in">Object</span>.isExtensible(obj) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="built_in">Reflect</span>.isExtensible(obj) <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-preventExtensions-target"><a href="#Reflect-preventExtensions-target" class="headerlink" title="Reflect.preventExtensions(target)"></a>Reflect.preventExtensions(target)</h3><blockquote><p> 对应 <code>Object.preventExtensions</code>  让一个对象变为不可扩展。它返回 <code>boolean</code>，表示是否操作成功。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj =&#123;&#125;</span><br><span class="line"><span class="comment">// es5 </span></span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(obj) <span class="comment">// Object &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="built_in">Reflect</span>.preventExtensions(obj) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-getOwnPropertyDescriptor-target-propertyKey"><a href="#Reflect-getOwnPropertyDescriptor-target-propertyKey" class="headerlink" title="Reflect.getOwnPropertyDescriptor(target, propertyKey)"></a>Reflect.getOwnPropertyDescriptor(target, propertyKey)</h3><blockquote><p>对应 <code>Object.getOwnPropertyDescriptors</code>   返回对象所有自身属性（非继承） 的描述对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj t = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'hidden'</span>, &#123;</span><br><span class="line">  value: <span class="literal">true</span>,</span><br><span class="line">  enumerable: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">var</span> theDescriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">'hidden'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line">theDescriptor = <span class="built_in">Reflect</span>.getOwnPropertyDescriptor(obj, <span class="string">'hidden'</span>);</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-getPrototypeOf-target"><a href="#Reflect-getPrototypeOf-target" class="headerlink" title="Reflect.getPrototypeOf(target)"></a>Reflect.getPrototypeOf(target)</h3><blockquote><p>获取对象原型<br>参数不是对象，Object.getPrototypeOf会将这个参数转为对象，然后再运行，而Reflect.getPrototypeOf会报错。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObj = <span class="keyword">new</span> FancyThing();</span><br><span class="line"></span><br><span class="line"><span class="comment">// es5 </span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(myObj) === FancyThing.prototype;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reflect</span></span><br><span class="line"><span class="built_in">Reflect</span>.getPrototypeOf(myObj) === FancyThing.prototype;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Reflect-setPrototypeOf-target-prototype"><a href="#Reflect-setPrototypeOf-target-prototype" class="headerlink" title="Reflect.setPrototypeOf(target, prototype)"></a>Reflect.setPrototypeOf(target, prototype)</h4><blockquote><p>对应<code>Object.setPrototypeOf</code> 设置 原型对象， 返回 <code>Boolean</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj,Person.prototype);</span><br><span class="line"></span><br><span class="line"><span class="comment">//es6 </span></span><br><span class="line"><span class="built_in">Reflect</span>.setPrototypeOf(obj,Person.prototype);</span><br><span class="line"></span><br><span class="line">obj.length <span class="comment">//0</span></span><br></pre></td></tr></table></figure><h2 id="Proxy-Observer-Mode"><a href="#Proxy-Observer-Mode" class="headerlink" title="Proxy Observer  Mode"></a>Proxy Observer  Mode</h2><blockquote><p>函数字段观察数据对象，如果数据改变，函数自动执行</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//队列函数</span></span><br><span class="line"><span class="keyword">const</span> observe = <span class="function"><span class="params">callback</span> =&gt;</span> queue.add(callback);</span><br><span class="line"></span><br><span class="line"><span class="comment">//观察目标</span></span><br><span class="line"><span class="keyword">const</span> observable = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj,&#123;<span class="keyword">set</span>&#125;);</span><br><span class="line"></span><br><span class="line">//自动执行</span><br><span class="line">function <span class="keyword">set</span> (target,key,value,receiver)&#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.set(target,key,value,receiver);</span><br><span class="line">  queue.forEach(<span class="function"><span class="params">observer</span> =&gt;</span> observer() );</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = observable(&#123;  </span><br><span class="line">    name:<span class="string">'Owen'</span>,</span><br><span class="line">    age:<span class="number">18</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span>  <span class="title">auto</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;person.name&#125;</span>,<span class="subst">$&#123;person.age&#125;</span>`</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">observe(auto);</span><br><span class="line">person.name = <span class="string">'Owen'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">先定义一个Set集合，所有观察者函数都放进这个集合。然后，observable函数返回原始对象的代理，拦截赋值操作。</span></span><br><span class="line"><span class="comment">拦截函数set之中，会自动执行所有观察者。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Reflect&quot;&gt;&lt;a href=&quot;#Reflect&quot; class=&quot;headerlink&quot; title=&quot;Reflect&quot;&gt;&lt;/a&gt;Reflect&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;将&lt;code&gt;Object&lt;/code&gt;对象中一些属于语言内部的方法，放到
      
    
    </summary>
    
      <category term="ES6" scheme="https://owen027.github.io/categories/ES6/"/>
    
    
      <category term="Reflect" scheme="https://owen027.github.io/tags/Reflect/"/>
    
  </entry>
  
  <entry>
    <title>proxy</title>
    <link href="https://owen027.github.io/2019/03/26/proxy/"/>
    <id>https://owen027.github.io/2019/03/26/proxy/</id>
    <published>2019-03-26T14:51:32.000Z</published>
    <updated>2019-04-21T15:59:13.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><blockquote><p>用于修改某些操作的默认行为。（对编程语言进行编程）<br>在目标对象之前架设一层‘门户’，外界访问对象时，必须先访问这个门户，<label>对外界的访问进行过滤和改写</label></p></blockquote><p><strong>生成:</strong></p><blockquote><p>ES6中 所有proxy实例 通过 Proxy 构造函数生成<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">new</span> <span class="built_in">Proxy</span>(target,handler);</span><br><span class="line"><span class="comment">// target对象 要访问的对象， handler对象 拦截行为</span></span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  <span class="keyword">get</span>: function(target, property) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">35</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy.time <span class="comment">// 35</span></span><br><span class="line">proxy.name <span class="comment">// 35</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Proxy-支持的操作"><a href="#Proxy-支持的操作" class="headerlink" title="Proxy 支持的操作"></a>Proxy 支持的操作</h3><h4 id="get-target-propKey-proxy"><a href="#get-target-propKey-proxy" class="headerlink" title="get(target, propKey, proxy)"></a>get(target, propKey, proxy)</h4><blockquote><p>拦截对象属性的读取，比如proxy.foo和proxy[‘foo’]。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*get 接收三个参数</span></span><br><span class="line"><span class="comment">*target 目标对象</span></span><br><span class="line"><span class="comment">*property 属性名</span></span><br><span class="line"><span class="comment">*proxy 实例本身</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">"Owen"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;</span><br><span class="line">  <span class="keyword">get</span>: function(target, property) &#123;</span><br><span class="line">    <span class="keyword">if</span> (property <span class="keyword">in</span> target) &#123;</span><br><span class="line">      <span class="keyword">return</span> target[property];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">ReferenceError</span>(<span class="string">"Property \""</span> + property + <span class="string">"\" does not exist."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy.name <span class="comment">// "Owen"</span></span><br><span class="line">proxy.age <span class="comment">// error:Property "age" does not exist.</span></span><br><span class="line"><span class="comment">//如果访问目标对象不存在的属性，会抛出一个错误。如果没有这个拦截函数，访问不存在的属性，只会返回undefined。</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="set-target-propKey-value-proxy"><a href="#set-target-propKey-value-proxy" class="headerlink" title="set(target, propKey, value, proxy)"></a>set(target, propKey, value, proxy)</h4><blockquote><p>拦截对象属性的设置，比如proxy.foo = v或proxy[‘foo’] = v，返回一个布尔值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*set 有4 个参数</span></span><br><span class="line"><span class="comment">*target 目标对象</span></span><br><span class="line"><span class="comment">*property 属性名</span></span><br><span class="line"><span class="comment">*value 属性值</span></span><br><span class="line"><span class="comment">*proxy 实例本身</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">let</span> validator = &#123;</span><br><span class="line">  <span class="keyword">set</span>: function(obj, prop, value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prop === <span class="string">'age'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">Number</span>.isInteger(value)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'The age is not an integer'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (value &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeError</span>(<span class="string">'The age seems invalid'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对于满足条件的 age 属性以及其他属性，直接保存</span></span><br><span class="line">    obj[prop] = value;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">//严格模式下 return false or undefined 会报错 </span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, validator);</span><br><span class="line">obj.age = <span class="number">18</span>;</span><br><span class="line">obj.age =<span class="string">'18'</span>; <span class="comment">//error</span></span><br><span class="line">obj.age =<span class="number">101</span>;<span class="comment">//error</span></span><br><span class="line"><span class="comment">//每当对象发生变化时，会自动更新 DOM。</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="has-target-propKey"><a href="#has-target-propKey" class="headerlink" title="has(target, propKey)"></a>has(target, propKey)</h4><blockquote><p>拦截propKey in proxy的操作，返回一个布尔值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*接收两个参数</span></span><br><span class="line"><span class="comment">*target目标对象</span></span><br><span class="line"><span class="comment">*key 查询的属性名</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  has (target, key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">'_'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> key <span class="keyword">in</span> target;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">_prop</span>: <span class="string">'Owen'</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="string">'_prop'</span> <span class="keyword">in</span> proxy <span class="comment">// false</span></span><br><span class="line"><span class="comment">//拦截以‘_’开头的属性名 对for ...in 遍历不生效</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="deleteProperty-target-propKey"><a href="#deleteProperty-target-propKey" class="headerlink" title="deleteProperty(target, propKey)"></a>deleteProperty(target, propKey)</h4><blockquote><p>拦截delete proxy[propKey]的操作，返回一个布尔值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  deleteProperty (target, key) &#123;</span><br><span class="line">    invariant(key, <span class="string">'delete'</span>);</span><br><span class="line">    <span class="keyword">delete</span> target[key];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invariant</span> (<span class="params">key, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">'_'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Invalid attempt to <span class="subst">$&#123;action&#125;</span> private "<span class="subst">$&#123;key&#125;</span>" property`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">_prop</span>: <span class="string">'foo'</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="keyword">delete</span> proxy._prop</span><br><span class="line"><span class="comment">// Error: Invalid attempt to delete private "_prop" property</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="ownKeys-target"><a href="#ownKeys-target" class="headerlink" title="ownKeys(target)"></a>ownKeys(target)</h4><blockquote><p>拦截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for…in循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而Object.keys()的返回结果仅包括目标对象自身的可遍历属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拦截对象自身属性的读取操作</span></span><br><span class="line"><span class="keyword">let</span> target = &#123;</span><br><span class="line">  _bar: <span class="string">'foo'</span>,</span><br><span class="line">  _prop: <span class="string">'bar'</span>,</span><br><span class="line">  prop: <span class="string">'Owen'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">  ownKeys (target) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.ownKeys(target).filter(<span class="function"><span class="params">key</span> =&gt;</span> key[<span class="number">0</span>] !== <span class="string">'_'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(proxy)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(target[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//会自动过滤 不存在的属性，Symbol，不可遍历属性</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="getOwnPropertyDescriptor-target-propKey"><a href="#getOwnPropertyDescriptor-target-propKey" class="headerlink" title="getOwnPropertyDescriptor(target, propKey)"></a>getOwnPropertyDescriptor(target, propKey)</h4><blockquote><p>拦截Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  getOwnPropertyDescriptor (target, key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">'_'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.getOwnPropertyDescriptor(target, key);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">_foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="string">'tar'</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(proxy, <span class="string">'wat'</span>)</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(proxy, <span class="string">'_foo'</span>)</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(proxy, <span class="string">'baz'</span>)</span><br><span class="line"><span class="comment">// &#123; value: 'tar', writable: true, enumerable: true, configurable: true &#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="defineProperty-target-propKey-propDesc"><a href="#defineProperty-target-propKey-propDesc" class="headerlink" title="defineProperty(target, propKey, propDesc)"></a>defineProperty(target, propKey, propDesc)</h4><blockquote><p>拦截 Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一个布尔值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  defineProperty (target, key, descriptor) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line">proxy.owen = <span class="string">'Owen'</span> <span class="comment">// 不会生效</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="preventExtensions-target"><a href="#preventExtensions-target" class="headerlink" title="preventExtensions(target)"></a>preventExtensions(target)</h4><blockquote><p>拦截<code>Object.preventExtensions(proxy)</code>，返回一个布尔值。<br>该方法必须返回一个布尔值，否则会被自动转为布尔值。<br>目标对象不可扩展时（<label>即Object.isExtensible(proxy)为false</label>），<code>proxy.preventExtensions</code>才能返回true<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  preventExtensions: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(proxy)</span><br><span class="line"><span class="comment">//error</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="getPrototypeOf-target"><a href="#getPrototypeOf-target" class="headerlink" title="getPrototypeOf(target)"></a>getPrototypeOf(target)</h4><blockquote><p>拦截Object.getPrototypeOf(proxy)，返回一个对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主要拦截获取对象原型</span></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">*Object.prototype.__proto__</span></span><br><span class="line"><span class="comment">*Object.prototype.isPrototypeOf()</span></span><br><span class="line"><span class="comment">*Object.getPrototypeOf()</span></span><br><span class="line"><span class="comment">*Reflect.getPrototypeOf()</span></span><br><span class="line"><span class="comment">*instanceof</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">var</span> proto = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  getPrototypeOf(target) &#123;</span><br><span class="line">    <span class="keyword">return</span> proto;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(p) === proto <span class="comment">// true</span></span><br><span class="line"><span class="comment">//返回值必须是对象或者null，否则报错</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="isExtensible-target"><a href="#isExtensible-target" class="headerlink" title="isExtensible(target)"></a>isExtensible(target)</h4><blockquote><p>拦截Object.isExtensible(proxy)，返回一个布尔值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  isExtensible: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Owen"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.isExtensible(p)</span><br><span class="line"><span class="comment">//返回值必须是Boolean</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="setPrototypeOf-target-proto"><a href="#setPrototypeOf-target-proto" class="headerlink" title="setPrototypeOf(target, proto)"></a>setPrototypeOf(target, proto)</h4><blockquote><p>拦截Object.setPrototypeOf(proxy, proto)，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  setPrototypeOf (target, proto) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Changing the prototype is forbidden'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> proto = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> target = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(proxy, proto);</span><br><span class="line"><span class="comment">// Error: Changing the prototype is forbidden</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="apply-target-object-args"><a href="#apply-target-object-args" class="headerlink" title="apply(target, object, args)"></a>apply(target, object, args)</h4><blockquote><p>拦截 Proxy 实例作为函数调用的操作，比如proxy(…args)、proxy.call(object, …args)、proxy.apply(…)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*接收三个参数 </span></span><br><span class="line"><span class="comment">*target 目标对象</span></span><br><span class="line"><span class="comment">*this  目标对象上下文</span></span><br><span class="line"><span class="comment">*目标对象的参数数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> target = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'I am the target'</span>; &#125;;</span><br><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  apply: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'I am the proxy'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"></span><br><span class="line">p()</span><br><span class="line"><span class="comment">// "I am the proxy"</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="construct-target-args"><a href="#construct-target-args" class="headerlink" title="construct(target, args)"></a>construct(target, args)</h4><blockquote><p>拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(…args)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接收两个参数</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*target 目标对象</span></span><br><span class="line"><span class="comment">*args 构造函数参数对象</span></span><br><span class="line"><span class="comment">函数必须返回对象，否则会报错</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">let</span> obj = &#123;</span><br><span class="line">      construct: <span class="function"><span class="keyword">function</span>(<span class="params">target, args</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Owen: '</span> + args.join(<span class="string">', '</span>));</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">value</span>: args[<span class="number">0</span>] * <span class="number">10</span> &#125;;</span><br><span class="line">   <span class="comment">// retirn '18'; error</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, obj)</span><br><span class="line"> <span class="keyword">new</span> p(<span class="number">2</span>).value <span class="comment">// 20</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Proxy-revocable"><a href="#Proxy-revocable" class="headerlink" title="Proxy.revocable"></a>Proxy.revocable</h3><blockquote><p><code>Proxy.revocable</code>方法返回一个可取消的 Proxy 实例。<br>使用场景： 目标对象不允许直接访问，必须通过代理访问，一旦访问结束，就收回代理权，不允许再次访问。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> handler = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;proxy, revoke&#125; = <span class="built_in">Proxy</span>.revocable(target,handler);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">Proxy.revocable(target, handler);</span></span><br><span class="line"><span class="comment">&#123;proxy: Proxy, revoke: ƒ&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">proxy.name = <span class="string">'Owen'</span></span><br><span class="line">proxy.name</span><br><span class="line"></span><br><span class="line">revoke() <span class="comment">//取消 proxy 实例</span></span><br><span class="line">proxy.name </span><br><span class="line"><span class="comment">//error</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Proxy-this"><a href="#Proxy-this" class="headerlink" title="Proxy this"></a>Proxy this</h3> <label> 在 Proxy 代理的情况下，目标对象内部的<code>this</code>关键字会指向 Proxy 代理。 </label> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">const</span> target = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">const</span> handler = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"></span><br><span class="line">proxy.getDate();</span><br><span class="line"><span class="comment">//error</span></span><br></pre></td></tr></table></figure><h3 id="Proxy-实例使用"><a href="#Proxy-实例使用" class="headerlink" title="Proxy 实例使用"></a>Proxy 实例使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = createWebService(<span class="string">'http://example.com/data'</span>);</span><br><span class="line"></span><br><span class="line">service.employees().then(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> employees = <span class="built_in">JSON</span>.parse(json);</span><br><span class="line">  <span class="comment">// ···</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWebService</span>(<span class="params">baseUrl</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">    <span class="keyword">get</span>(target, propKey, receiver) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> httpGet(baseUrl+<span class="string">'/'</span> + propKey);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Proxy&quot;&gt;&lt;a href=&quot;#Proxy&quot; class=&quot;headerlink&quot; title=&quot;Proxy&quot;&gt;&lt;/a&gt;Proxy&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;用于修改某些操作的默认行为。（对编程语言进行编程）&lt;br&gt;在目标对象之前架设一层‘门户’，
      
    
    </summary>
    
      <category term="ES6" scheme="https://owen027.github.io/categories/ES6/"/>
    
    
      <category term="Proxy" scheme="https://owen027.github.io/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>Extend</title>
    <link href="https://owen027.github.io/2019/03/19/extend/"/>
    <id>https://owen027.github.io/2019/03/19/extend/</id>
    <published>2019-03-19T11:28:30.000Z</published>
    <updated>2019-06-05T15:15:29.022Z</updated>
    
    <content type="html"><![CDATA[<h3 id="String-Extend"><a href="#String-Extend" class="headerlink" title="String Extend"></a>String Extend</h3><h4 id="被-for-of-遍历"><a href="#被-for-of-遍历" class="headerlink" title="被 for ... of 遍历"></a><strong>被 <code>for ... of</code> 遍历</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> <span class="string">'abc'</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">    <span class="comment">//a</span></span><br><span class="line">    <span class="comment">//b</span></span><br><span class="line">    <span class="comment">//c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找字符"><a href="#查找字符" class="headerlink" title="查找字符"></a><strong>查找字符</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'Hello Brother!'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//includes 是否包含参数字符串</span></span><br><span class="line">str.includes(<span class="string">'Br'</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//startsWith  开头是否存在参数字符串</span></span><br><span class="line">str.startsWith(<span class="string">'Hello'</span>) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//endsWith 结尾是否存在参数字符串</span></span><br><span class="line">str.endsWith(<span class="string">'er!'</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="重复字符"><a href="#重复字符" class="headerlink" title="重复字符"></a><strong>重复字符</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//repeat  重复 n 次，  n 为参数,返回新字符串</span></span><br><span class="line"><span class="keyword">let</span> re = <span class="string">'Hello Brother!'</span>;</span><br><span class="line"></span><br><span class="line">re.repeat(<span class="number">2</span>); <span class="comment">//"Hello Brother!Hello Brother!"</span></span><br><span class="line"></span><br><span class="line">re.repeat(<span class="number">-2</span>); <span class="comment">// Invalid count value</span></span><br><span class="line">re.repeat(<span class="literal">Infinity</span>); <span class="comment">// Invalid count value</span></span><br><span class="line"><span class="comment">//小数会取整 </span></span><br><span class="line">re.repeat(<span class="number">1.9</span>) <span class="comment">// "Hello Brother!"</span></span><br><span class="line">re.repeat(<span class="number">-0.9</span>) <span class="comment">// ""</span></span><br></pre></td></tr></table></figure><h4 id="补全字符"><a href="#补全字符" class="headerlink" title="补全字符"></a><strong>补全字符</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//补全开头 padStart 补齐尾部 padEnd</span></span><br><span class="line"><span class="keyword">let</span> pd = <span class="string">'Brother!'</span>; </span><br><span class="line">pd.padStart(<span class="number">14</span>,<span class="string">'Hello '</span>); <span class="comment">//"Hello Brother!"</span></span><br><span class="line"><span class="comment">//第一个参数为补齐的最大长度（整串字符） 第二个参数为补齐缺省的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果原始字符长度大于等于最大长度，返回原字符串</span></span><br><span class="line">pd.padStart(<span class="number">7</span>,<span class="string">'Hello '</span>)<span class="comment">// 'Brother!'</span></span><br><span class="line">pd.padStart(<span class="number">8</span>,<span class="string">'Hello '</span>)<span class="comment">// 'Brother!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果最大长度小于补齐长度，则去除超出部分</span></span><br><span class="line">pd.padStart(<span class="number">9</span>,<span class="string">'Aay '</span>)<span class="comment">//'ABrother!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果缺省第二个参数则 默认使用空格补齐</span></span><br><span class="line">pd.padStart(<span class="number">9</span>)<span class="comment">//' Brother!'</span></span><br></pre></td></tr></table></figure><h4 id="模板字符"><a href="#模板字符" class="headerlink" title="模板字符"></a><strong>模板字符</strong></h4><blockquote><p>通过反引号 “ <code></code> ” 当普通字符串使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有换行和空格会保留，嵌入变量，须将变量包含在 `$&#123;&#125;` 中，并且可进行运算,函数调用，对象调用</span></span><br><span class="line"><span class="keyword">let</span> num =<span class="number">1</span>,obj =&#123;<span class="attr">name</span>:<span class="string">'Owen'</span>&#125;, fn=<span class="function"><span class="params">()</span>=&gt;</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> str =<span class="string">` </span></span><br><span class="line"><span class="string"><span class="subst">$&#123;num * <span class="number">3</span> + <span class="number">1</span> + fn() + obj.name&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str)</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">" </span></span><br><span class="line"><span class="comment">7Owen"</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果紧更在函数名后，函数将被调用（标签模板）</span></span><br><span class="line">alert<span class="string">`123`</span>  <span class="comment">// 等同于</span></span><br><span class="line">alert(<span class="number">123</span>)</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="转义符"><a href="#转义符" class="headerlink" title="转义符 \"></a><strong>转义符 <code>\</code></strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以 x 开头,会被当做 16 进制</span></span><br><span class="line"></span><br><span class="line"> <span class="string">`\x23`</span> <span class="comment">// #</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//以 u 开头,会被当做 unicode  字符</span></span><br><span class="line"> <span class="string">`\u004F`</span> <span class="comment">//"O"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果无法编译将会报错</span></span><br></pre></td></tr></table></figure><p>ES2018 放松了对<code>标签模板</code>里面的字符串转义的限制，无法转义的返回<code>undefined</code>；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log<span class="string">`\uw`</span>;</span><br><span class="line"><span class="comment">//[undefined, raw: Array(1)]</span></span><br><span class="line"><span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><hr><h3 id="Function-Extend"><a href="#Function-Extend" class="headerlink" title="Function Extend"></a>Function Extend</h3><h4 id="形参指定默认值"><a href="#形参指定默认值" class="headerlink" title="形参指定默认值"></a><strong>形参指定默认值</strong></h4><blockquote><p>形参 不能再次使用 let 和 const 声明<br>形参不能重名<br>函数 length 不包含设置默认值和后面的形参个数<br>使用 <code>...arg</code> 中的参数 length 也不包含</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function">(<span class="params">x, y = <span class="string">'Owen'</span></span>) =&gt;</span>( <span class="built_in">console</span>.log(x,y));</span><br><span class="line">fn(<span class="number">1</span>) <span class="comment">// 1 "Owen"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认参数 惰性求值</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">99</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">y = x + <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(y);</span><br><span class="line">&#125;</span><br><span class="line">foo() <span class="comment">// 100</span></span><br><span class="line">x = <span class="number">100</span>;</span><br><span class="line">foo() <span class="comment">// 101</span></span><br><span class="line"><span class="comment">//调用一次计算一次</span></span><br></pre></td></tr></table></figure><blockquote><p>事实上 每次调用函数，如果不传递参数， 形参默认传递 <code>undefined</code><br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 默认参数最好定义再尾部，因为使用形参默认参数，那么那个位置的形参必传</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y = <span class="number">5</span>, z， ...arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y, z];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f() <span class="comment">// [undefined, 5, undefined]</span></span><br><span class="line">f(<span class="number">1</span>) <span class="comment">// [1, 5, undefined]</span></span><br><span class="line">f(<span class="number">1</span>, ,<span class="number">2</span>) <span class="comment">// 报错</span></span><br><span class="line">f(<span class="number">1</span>, <span class="literal">undefined</span>, <span class="number">2</span>) <span class="comment">// [1, 5, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//length 不包含设置默认值 和后面的形参 的个数，</span></span><br><span class="line">f().length <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a><strong>作用域</strong></h4><blockquote><p>函数中的<label>变量无法访问</label> 默认值<br>函数中的形参名不能和默认名一样<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数变量无法访问默认值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">y = x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f() <span class="comment">// ReferenceError: x is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数中的形参名不能和默认名一样</span></span><br><span class="line"><span class="comment">//参数x = x形成一个单独作用域。实际执行的是let x = x，由于暂时性死区的原因，这行代码会报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x = x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">f()<span class="comment">//  x is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y = function(</span>) </span>&#123; x = <span class="number">2</span>; &#125;) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">3</span>;</span><br><span class="line">  y();</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo() <span class="comment">// 3</span></span><br><span class="line">x <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p></blockquote><p>由于  var 声明的 x 和函数形参 x 不再同一个作用域 ， 因此调用 y() x值不变；<br>如果 去掉 var , 那么 x 就指向 形参 x ,调用 y() x = 2。</p><h4 id="reset-参数-（…）"><a href="#reset-参数-（…）" class="headerlink" title="reset 参数 （…）"></a><strong>reset 参数 （…）</strong></h4><blockquote><p>使用形式 <code>...arg</code>  实数以数组的形势赋给变量<br>reset 参数后不能再有形参，否则报错<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">a,...arg</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)<span class="comment">//[2,3,4,5]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">a,...arg,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ught SyntaxError: Rest parameter must be last formal parameter</span></span><br></pre></td></tr></table></figure></p></blockquote><label>只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错。 </label><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a, b = a</span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="comment">// code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params">&#123;a, b&#125;</span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="comment">// code</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function">(<span class="params">...a</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="comment">// code</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="comment">// 报错</span></span><br><span class="line">  fn(&#123;a, b&#125;) &#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br><br>####  <strong>箭头函数</strong><br>&gt;使用 <code>() =&gt;</code>  定义函数<br>注意：<br>- this 指向函数定义时所绑定的普通函数，不会被(bind,call,apply)更改,也不会被调用时的上下文改变。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span><span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">"Owen"</span>&#125;;</span><br><span class="line"></span><br><span class="line">fn.call(obj) <span class="comment">//window</span></span><br><span class="line"></span><br><span class="line">fn.bind(obj)</span><br><span class="line">fn() <span class="comment">//window</span></span><br><span class="line"></span><br><span class="line">fn.apply(obj)  <span class="comment">//window</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="comment">//可以通过改变宿主环境来改变 this 指向</span></span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>)&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">foo.call(obj)() <span class="comment">//&#123;name: "Owen"&#125;</span></span><br><span class="line">foo.call(obj)()() <span class="comment">//&#123;name: "Owen"&#125; &#123;name: "Owen"&#125;</span></span><br></pre></td></tr></table></figure><br><br>- 外层没有普通函数 ，严格模式和非严格模式下它的this都会指向window(全局对象)。<br><br>- 不可以当作构造函数，也就是说，不可以使用new命令，没有<code>prototype</code>属性，不支持<code>new.target</code>,否则会抛出一个错误。<br>- 参数和箭头之间不能换行<br>- 不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。<br><br>- 不可以使用yield命令，因此箭头函数不能用作 Generator 函数。<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//定义简单函数</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">'Owen'</span>;</span><br><span class="line">fn()<span class="comment">// 'Owen'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo = <span class="function"><span class="params">r</span> =&gt;</span> r;</span><br><span class="line">foo(<span class="string">'Owen'</span>) <span class="comment">// 'Owen'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f = <span class="function">(<span class="params">num1,num2</span>) =&gt;</span> num1 + num2;</span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>)<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果返回一个对象需要小括号包裹,f否则会报错</span></span><br><span class="line"><span class="keyword">let</span> f = <span class="function">(<span class="params">name,age</span>) =&gt;</span> (&#123;name,age&#125;);</span><br><span class="line">f(<span class="string">'Owen'</span>,<span class="number">18</span>)<span class="comment">//&#123;name: "Owen", age: 18&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果代码部分大于一条语句，那么需要 大括号包裹，使用return 返回值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fn1 = <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="keyword">return</span> r + a;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>####  <strong>不推荐使用场景</strong><br><br>- 在对象中使用 this.<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  gender:<span class="string">"man"</span>,</span><br><span class="line">  getSex: <span class="function"><span class="params">()</span> =&gt;</span>  &#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>.gender)&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.getSex() <span class="comment">//undefined</span></span><br><span class="line"><span class="comment">//this -&gt; global</span></span><br></pre></td></tr></table></figure><br><br>- 动态使用 this.<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelector(<span class="string">'li'</span>);</span><br><span class="line">lis.addEventListener(<span class="string">'click'</span>,() =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// this -&gt; global</span></span><br></pre></td></tr></table></figure><br><br>- 内部有大量的读写操作，不单纯是为了计算值，这时也不应该使用箭头函数<br><br><br>####  <strong>双冒号运算符 <code>::</code></strong><br><br>&gt; 目前只是一个提案，用来绑定函数的 this 类似于 (bind,call,apply)<br>&gt; 将做边的对象作为参数，绑定到右边函数上。<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bar:: fn</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">fn.bind(bar);</span><br><span class="line"></span><br><span class="line">bar::fn(...arguments);</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">fn.apply(bar, <span class="built_in">arguments</span>);</span><br></pre></td></tr></table></figure><br><br>####  <strong>函数调用</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   foo()</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   fn()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">f()</span><br></pre></td></tr></table></figure><br><br>&gt; 函数调用会在内存中形成一个 调用记录（<code>调用帧</code>），保存着调用位置和内部变量等信息。<br>&gt; 函数 <code>f</code>内部调用 <code>foo</code>函数，<code>f</code>调用帧的上方会形成 <code>foo</code>的调用帧， <code>foo</code>运行接受并且将结果返回给 <code>f</code>，<code>foo</code>的调用帧才会消失，同理，<code>foo</code>函数 内部调用<code>fn</code>函数，还会有 <code>fn</code> 的调用帧，以此类推，形成一个<code>调用栈</code>。<br><br>####  <strong>尾调用</strong><br>&gt; 指某个函数的最后一步是调用另一个函数。<br>&gt; 不一定出现在函数尾部，只要是最后一步操作即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尾调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fn(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//不属于尾调用</span></span><br><span class="line"><span class="comment">// 情况一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> y = g(x);</span><br><span class="line">  <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况二</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> g(x) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况三</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  g(x);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  g(x);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>——<br><br>### Array Extend<br><br>#### <strong>扩展运算 (…)</strong><br><br>&gt;主要用于函数调用， 将一个数组，变为参数序列。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(... [<span class="number">1</span>,<span class="number">2</span>]) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><br><br>##### <strong>clone数组</strong><br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//es5 </span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = arr.concat();</span><br><span class="line"></span><br><span class="line"> <span class="comment">//es6</span></span><br><span class="line"><span class="keyword">let</span> [...arr2] = arr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr];</span><br></pre></td></tr></table></figure><br><br>##### <strong>合并数组</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="keyword">let</span> arr3 = arr.concat(arr1,arr2);</span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="keyword">let</span> arr4 = [...arr,...arr1,...arr2];</span><br></pre></td></tr></table></figure><br><br>合并和clone 都是浅拷贝；<br><br>##### <strong>配合解构赋值</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">first <span class="comment">// 1</span></span><br><span class="line">rest  <span class="comment">// [2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [];</span><br><span class="line">first <span class="comment">// undefined</span></span><br><span class="line">rest  <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="string">"foo"</span>];</span><br><span class="line">first  <span class="comment">// "foo"</span></span><br><span class="line">rest   <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展运算符，只能放在参数的最后一位，否则会报错。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...middle, last] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">//error</span></span><br></pre></td></tr></table></figure><br><br>##### <strong>将伪数组(内部实现了Iterator)转化伪数组</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//内部实现Iterator</span></span><br><span class="line"><span class="comment">//字符串， Set, Map, Generator, NodeList, htmlcollection, classList ,argument内部都实现了迭代接口</span></span><br><span class="line"><span class="keyword">let</span> nodes = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> divs = [...nodes];</span><br><span class="line"></span><br><span class="line"><span class="comment">//内部未实现Iterator</span></span><br><span class="line"><span class="keyword">let</span> objs = &#123;</span><br><span class="line">  <span class="string">'0'</span>: <span class="string">'a'</span>,</span><br><span class="line">  <span class="string">'1'</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="string">'2'</span>: <span class="string">'c'</span>,</span><br><span class="line">  length: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> arr =[...objs];<span class="comment">//error</span></span><br><span class="line"><span class="comment">//可通过 Array.from方法转化</span></span><br><span class="line"><span class="keyword">let</span> arr1 = <span class="built_in">Array</span>.from(objs)</span><br></pre></td></tr></table></figure><br><br>#### Array.from<br>&gt; 将伪数组转化为数组<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrLike = &#123;</span><br><span class="line">  <span class="string">'0'</span>: <span class="string">'a'</span>,</span><br><span class="line">  <span class="string">'1'</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="string">'2'</span>: <span class="string">'c'</span>,</span><br><span class="line">  length: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(arrLike)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*第二个参数</span></span><br><span class="line"><span class="comment"> 遍历每个元素并返回运算结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">Array</span>.from(arrLike, x =&gt; x * x);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">Array</span>.from(arrLike).map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], (x) =&gt; x * x)</span><br><span class="line"><span class="comment">// [1, 4, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将布尔值为false的成员转为0</span></span><br><span class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>, , <span class="number">2</span>, , <span class="number">3</span>], (n) =&gt; n || <span class="number">0</span>)</span><br><span class="line"><span class="comment">// [1, 0, 2, 0, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取DOM 节点的文本内容。</span></span><br><span class="line"><span class="built_in">Array</span>.from</span><br><span class="line">(<span class="built_in">document</span>.querySelectorAll(<span class="string">'span.name'</span>);, s =&gt; s.textContent)</span><br><span class="line"><span class="comment">//第三个参数 绑定第二个参数中回调函数的this</span></span><br></pre></td></tr></table></figure><br><br>#### <strong>find and findIndex</strong><br>&gt; 回调函数遍历所有成员，返回符合条件的值， 没有则返回 undefined<br>&gt; find 返回值为，第一个符合条件的成员<br>&gt;findIndex ，没有则返回 -1<br>&gt; 回调函数接受三个参数（成员，位置，原数组）<br>&gt; 第二个参数 绑定回调函数 this<br>&gt; 可以识别NaN<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].find(<span class="function"><span class="keyword">function</span>(<span class="params">v,i,arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v&lt;<span class="number">0</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// -5</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].findIndex(<span class="function">(<span class="params">n</span>) =&gt;</span> n &lt; <span class="number">0</span>)</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><br><br>#### <strong>fill</strong><br>&gt; 填充数组,修改原数组<br>&gt; 第一个参数为填充值，第二个参数为开始填充的位置，第三个参数为结束位置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.fill(<span class="string">'Owen'</span>);</span><br><span class="line"><span class="comment">//["Owen","Owen","Owen"]</span></span><br><span class="line">arr.fill(<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">//[1,1,3]</span></span><br></pre></td></tr></table></figure><br><br>#### <strong>Interator</strong><br>&gt; keys,values,entries 对应属性遍历<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// keys</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'o'</span>,<span class="string">'w'</span>,<span class="string">'e'</span>,<span class="string">'n'</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> arr.keys())&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(key);</span><br><span class="line">   <span class="comment">//0 1 2 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr.values())&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(item);</span><br><span class="line">   <span class="comment">//o w e n</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [i,item] <span class="keyword">of</span> arr.entries())&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(i,item)</span><br><span class="line"><span class="comment">//1 "w"</span></span><br><span class="line"><span class="comment">//2 "e"</span></span><br><span class="line"><span class="comment">//3 "n"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>#### <strong>includes</strong><br>&gt; 返回一个Boolean ,数组是否包含给定的值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].includes(<span class="number">3</span>)<span class="comment">//true</span></span><br><span class="line"><span class="comment">//第二个参数为搜索的起始位置</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].includes(<span class="number">3</span>,<span class="number">4</span>)<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 是否支持 */</span></span><br><span class="line"><span class="keyword">const</span> contains = <span class="function">(<span class="params">(</span>) =&gt;</span></span><br><span class="line">  <span class="built_in">Array</span>.prototype.includes</span><br><span class="line">    ? <span class="function">(<span class="params">arr, value</span>) =&gt;</span> arr.includes(value)</span><br><span class="line">    : <span class="function">(<span class="params">arr, value</span>) =&gt;</span> arr.some(<span class="function"><span class="params">el</span> =&gt;</span> el === value)</span><br><span class="line">)();</span><br><span class="line">contains([<span class="string">'foo'</span>, <span class="string">'bar'</span>], <span class="string">'baz'</span>); <span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><br><br>#### <strong>flat ,flatMap</strong><br>&gt; 将二维数组变成一位数组，并返回新数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>]].flat()</span><br><span class="line"><span class="comment">//[1,2,3,4]</span></span><br><span class="line"><span class="comment">//默认拉平1层</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,[<span class="number">4</span>]]].flat(<span class="number">2</span>)</span><br><span class="line"><span class="comment">//[1,2,3,4]</span></span><br><span class="line"><span class="comment">//将所有维度变成一维</span></span><br><span class="line">array.flat(Infinty)</span><br><span class="line"><span class="comment">//会忽略空位</span></span><br><span class="line">[<span class="number">1</span>,,[<span class="number">3</span>,<span class="number">4</span>]].flat()</span><br><span class="line"><span class="comment">//[1,3,4]</span></span><br></pre></td></tr></table></figure><br><br>—<br>#### ES5 interator methods<br>##### every<br>-  访问每一个成员,给定某个条件，如果<label>所有成员满足条件</label>就返回true<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num  = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> n = num.every(<span class="function"><span class="keyword">function</span>(<span class="params">item,key,array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ( item&gt;<span class="number">2</span> )</span><br><span class="line">&#125;)</span><br><span class="line"> n <span class="comment">//false</span></span><br></pre></td></tr></table></figure><br><br>#### some<br>- 访问每一个成员,给定某个条件，<label>只要有一个成员满足条件就返回true</label><br>- 有一个满足条件的成员之后的不再执行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num  = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> n = num.some(<span class="function"><span class="keyword">function</span>(<span class="params">item,key,array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ( item &gt; <span class="number">2</span> )</span><br><span class="line">&#125;)</span><br><span class="line"> n <span class="comment">//true</span></span><br></pre></td></tr></table></figure><br><br>##### filter<br>- 访问每一个成员,给定某个条件，<label>将满足条件的成员组成数组返回</label>， 否则返回 <code>[]</code><br>- <label>只会在已经赋值的索引上被调用，对于那些已经被删除或者从未被赋值的索引不会被调用</label><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num  = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> n = num.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,key,array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ( item &gt; <span class="number">2</span> )</span><br><span class="line">&#125;)</span><br><span class="line"> n <span class="comment">//[3, 4, 5, 4, 3]</span></span><br></pre></td></tr></table></figure><h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><ul><li>访问每一个成员,将每次访问执行的结果组成数组返回，也就是说<label>每个成员都 必须要有return返回结果，否则都是<code>unndefined</code></label></li><li>map不支持continue跳出循环</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num  = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> n = num.map(<span class="function"><span class="keyword">function</span>(<span class="params">item,key,array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item * <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"> n <span class="comment">// [0, 2, 4, 4, 6, 8, 10, 6, 10]</span></span><br></pre></td></tr></table></figure><h5 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h5><ul><li>访问每一个成员,没有返回值</li><li>中途不能用常规操作跳出循环</li><li>不支持链式操作<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num  = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> n = num.map(<span class="function"><span class="keyword">function</span>(<span class="params">item,key,array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item * <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"> n <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="reduce-and-reduceRight"><a href="#reduce-and-reduceRight" class="headerlink" title="reduce and reduceRight"></a>reduce and reduceRight</h5><ul><li>reduce 从数组的第一项开始，逐个遍历到最后。</li><li>reduceRight  从数组的最后一项开始，向前遍历到第一项。</li><li>接收两个参数 回调函数和 回调函数第一个参数的值，默认数组第一个元素。</li><li>返回 累计处理的结果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @param</span></span><br><span class="line"><span class="comment">  *  prev 上次调用回调时的累积值</span></span><br><span class="line"><span class="comment">  *  cur  当前数组成员</span></span><br><span class="line"><span class="comment">  *  i  数组索引</span></span><br><span class="line"><span class="comment">  *  arrary 原数组</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">var</span> num  = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> n = num.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,cur,i,array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> prev*<span class="number">2</span> + cur</span><br><span class="line">&#125;)</span><br><span class="line"> n <span class="comment">// 431</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> num  = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> n = num.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,cur,i,array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> prev*<span class="number">2</span> + cur</span><br><span class="line">&#125;)</span><br><span class="line"> n <span class="comment">// 2186</span></span><br></pre></td></tr></table></figure><p> 以上都不会修改原数组，除非使用第三个参数做些操作，注意<label>数组成员是值类型，还是引用类型</label></p><h5 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h5><ul><li>对数组排序 默认排序按字母升序（根据字符串Unicode ）</li><li>参数为回调函数<code>callback(a,b)</code>  </li><li>返回值为负数 那么 a 会被排列到 b 之前</li><li>返回值为 0 位置不变</li><li>返回值为正数 b 会被排列到 a 之前<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">44</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>];</span><br><span class="line">num.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b</span><br><span class="line">&#125;)</span><br><span class="line">num <span class="comment">// [1, 2, 2, 3, 3, 4, 7, 9, 44]</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h4><ul><li>翻转数组<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">44</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>];</span><br><span class="line">num <span class="comment">//[9, 4, 3, 2, 44, 7, 2, 3, 1]</span></span><br><span class="line">num.reverse()</span><br></pre></td></tr></table></figure></li></ul><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><ul><li>has方法 会发生隐式转化 1 ==’1’ <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> unique = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">      <span class="keyword">var</span> res = [];     </span><br><span class="line">      arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,i</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(!obj[item])&#123;</span><br><span class="line">              obj[item] = <span class="literal">true</span>;</span><br><span class="line">              res.push(item) </span><br><span class="line">          &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">    <span class="keyword">return</span>  res</span><br><span class="line">&#125;</span><br><span class="line">unique(arr)</span><br><span class="line">&lt;&lt;<span class="xml"><span class="tag">&lt;&lt;&lt;&lt;&lt; <span class="attr">HEAD</span></span></span></span><br><span class="line"><span class="xml">=======</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">- map has方法 不会发生隐式转化</span></span><br><span class="line"><span class="xml">var unique = function(arr) &#123;</span></span><br><span class="line"><span class="xml">      var m = new Map();</span></span><br><span class="line"><span class="xml">      var res = [];     </span></span><br><span class="line"><span class="xml">      arr.forEach(function(item,i)&#123;</span></span><br><span class="line"><span class="xml">          if(!m.has(item))&#123;</span></span><br><span class="line"><span class="xml">              res.push(item) </span></span><br><span class="line"><span class="xml">          &#125;</span></span><br><span class="line"><span class="xml">          m.set(item,2);</span></span><br><span class="line"><span class="xml">       &#125;)</span></span><br><span class="line"><span class="xml">    return  res</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">unique(arr)</span></span><br><span class="line"><span class="xml">&gt;&gt;&gt;&gt;&gt;&gt;&gt; d71c39e5118389885ef986735a9a15598115e5b9</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>filter <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//会忽略 undefined</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> unique = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span>  arr.sort().filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,i,array</span>) </span>&#123; </span><br><span class="line">     <span class="keyword">return</span> item !== array[i+<span class="number">1</span>]; </span><br><span class="line">     &#125;)</span><br><span class="line">&#125;</span><br><span class="line"> unique(arr) <span class="comment">//  ["", 1, null]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> unique = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span>  arr.filter( <span class="function"><span class="keyword">function</span>(<span class="params">item, idx </span>)  </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr.indexOf(item) === idx;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unique(arr) <span class="comment">//[null, undefined, "", 1]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Object-extend"><a href="#Object-extend" class="headerlink" title="Object extend"></a>Object extend</h3><h4 id="对象中的简写"><a href="#对象中的简写" class="headerlink" title="对象中的简写"></a>对象中的简写</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数</span></span><br><span class="line"><span class="keyword">const</span> obj =&#123;</span><br><span class="line">  methode()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Owen'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  * m() &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'hello world'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">const</span> obj =&#123;</span><br><span class="line">  methode:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Owen'</span></span><br><span class="line">  &#125;</span><br><span class="line">  m:<span class="function"><span class="keyword">function</span>* (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'hello world'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用变量定义对象</span></span><br><span class="line">  <span class="comment">//默认情况下会自动将对象转为字符串[object Object]，这一点要特别小心。</span></span><br><span class="line"><span class="keyword">let</span> lastWord = <span class="string">'last word'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="string">'first word'</span>: <span class="string">'hello'</span>,</span><br><span class="line">  [lastWord]: <span class="string">'world'</span>,</span><br><span class="line">  [<span class="string">'h'</span> + <span class="string">'ello'</span>]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hi'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj[<span class="string">'first word'</span>] <span class="comment">// "hello"</span></span><br><span class="line">obj[lastWord] <span class="comment">// "world"</span></span><br><span class="line">obj[<span class="string">'last word'</span>] <span class="comment">// "world"</span></span><br><span class="line">obj.hello() <span class="comment">// hi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象中 函数 name属性</span></span><br><span class="line"><span class="comment">//对象的方法是一个 Symbol 值，那么name属性返回的是这个 Symbol 值的描述。</span></span><br><span class="line"><span class="keyword">const</span> key1 = <span class="built_in">Symbol</span>(<span class="string">'description'</span>);</span><br><span class="line"><span class="keyword">const</span> key2 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [key1]() &#123;&#125;,</span><br><span class="line">  [key2]() &#123;&#125;,</span><br><span class="line">  sayName() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Owen'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">get</span> foo() &#123;&#125;,</span><br><span class="line">  <span class="keyword">set</span> foo(x) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj[key1].name <span class="comment">// "[description]"</span></span><br><span class="line">obj[key2].name <span class="comment">// ""</span></span><br><span class="line">obj.sayName.name   <span class="comment">// "sayName"</span></span><br><span class="line"><span class="keyword">const</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">'foo'</span>);</span><br><span class="line"></span><br><span class="line">descriptor.get.name <span class="comment">// "get foo"</span></span><br><span class="line">descriptor.set.name <span class="comment">// "set foo"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过构造函数创立的函数</span></span><br><span class="line">(<span class="keyword">new</span> <span class="built_in">Function</span>()).name <span class="comment">// "anonymous"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过 bind 绑定的函数</span></span><br><span class="line"><span class="keyword">var</span> doSomething = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line">doSomething.bind().name <span class="comment">// "bound doSomething"</span></span><br></pre></td></tr></table></figure><h4 id="枚举和遍历"><a href="#枚举和遍历" class="headerlink" title="枚举和遍历"></a>枚举和遍历</h4><blockquote><p>Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name:<span class="string">'Owen'</span></span><br><span class="line">&#125;</span><br><span class="line">Objct.getOwnPropertyDescriptor(obj,<span class="string">'name'</span>);</span><br><span class="line"><span class="comment">//  &#123;</span></span><br><span class="line"><span class="comment">//    value: Owen,</span></span><br><span class="line"><span class="comment">//    writable: true,</span></span><br><span class="line"><span class="comment">//    enumerable: true, //可枚举</span></span><br><span class="line"><span class="comment">//    configurable: true</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br></pre></td></tr></table></figure><h5 id="如果-enumerable-为-false"><a href="#如果-enumerable-为-false" class="headerlink" title="如果 enumerable 为 false"></a><strong>如果 enumerable 为 false</strong></h5><p>有些操作会忽略，当前属性</p><ul><li>for…in循环：只遍历对象自身的和继承的可枚举的属性。</li><li>Object.keys()：返回对象自身的所有可枚举的属性的键名。</li><li>JSON.stringify()：只串行化对象自身的可枚举的属性。</li><li>(ES6) Object.assign()： 忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。</li></ul><blockquote><p>共有 5 种方法可以遍历对象的属性。</p><ul><li>for…in</li></ul></blockquote><p>for…in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。</p><ul><li>Object.keys(obj)</li></ul><p>Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。</p><ul><li>Object.getOwnPropertyNames(obj)</li></ul><p>Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。</p><ul><li>Object.getOwnPropertySymbols(obj)</li></ul><p>Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性的键名。</p><ul><li>Reflect.ownKeys(obj)<br>Reflect.ownKeys返回一个数组，包含对象自身的所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。</li></ul><h5 id="都遵守同样的属性遍历的次序规则。"><a href="#都遵守同样的属性遍历的次序规则。" class="headerlink" title="都遵守同样的属性遍历的次序规则。"></a><strong>都遵守同样的属性遍历的次序规则。</strong></h5><ul><li>首先遍历所有数值键，按照数值升序排列。</li><li>其次遍历所有字符串键，按照加入时间升序排列。</li><li>最后遍历所有 Symbol 键，按照加入时间升序排列。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Reflect</span>.ownKeys(&#123; [<span class="built_in">Symbol</span>()]:<span class="number">0</span>, <span class="attr">b</span>:<span class="number">0</span>, <span class="number">10</span>:<span class="number">0</span>, <span class="number">2</span>:<span class="number">0</span>, <span class="attr">a</span>:<span class="number">0</span> &#125;)</span><br><span class="line"><span class="comment">// ['2', '10', 'b', 'a', Symbol()]</span></span><br></pre></td></tr></table></figure></li></ul><p>上面代码中，Reflect.ownKeys方法返回一个数组，包含了参数对象的所有属性。这个数组的属性次序是这样的，首先是数值属性2和10，其次是字符串属性b和a，最后是 Symbol 属性。</p><p><strong>super</strong></p><blockquote><p><code>this</code> 总是指向函数所在的当前对象<br><code>super</code> 指向当前对象的原型对象。<br>super关键字表示原型对象时，<code>只能用在对象的方法之中</code>，用在其他地方都会报错。<br>目前，只有对象<label>方法的简写法可以让 JavaScript 引擎确认，定义的是对象的方法。</label><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proto = &#123;</span><br><span class="line">  foo: <span class="string">'hello'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  foo: <span class="string">'world'</span>,</span><br><span class="line">  find() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.foo;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, proto);</span><br><span class="line">obj.find() <span class="comment">// "hello"</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="对象扩展运算符"><a href="#对象扩展运算符" class="headerlink" title="对象扩展运算符"></a>对象扩展运算符</h4><blockquote><p>ES2018 将这个运算符引入了对象。<br>解构赋值的拷贝是浅拷贝<br>不能复制继承自原型对象的属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 解构</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//必须保证右方为对象，否则报错</span></span><br><span class="line"><span class="keyword">let</span> &#123; x, y, ...z &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br><span class="line">z <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//与函数参数扩展运算类似，解构赋值须最后一个参数</span></span><br><span class="line"><span class="keyword">let</span> &#123; ...x, y, z &#125; = someObject; <span class="comment">// 句法错误</span></span><br><span class="line"><span class="keyword">let</span> &#123; x, ...y, ...z &#125; = someObject; <span class="comment">// 句法错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//无法继承原型</span></span><br><span class="line"><span class="keyword">let</span> o1 = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> o2 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line">o2.__proto__ = o1;</span><br><span class="line"><span class="keyword">let</span> &#123; ...o3 &#125; = o2;</span><br><span class="line">o3 <span class="comment">// &#123; b: 2 &#125;</span></span><br><span class="line">o3.a <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展运算</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组是特殊的对象，所以对象的扩展运算符也可以用于数组</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123; ...[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>] &#125;;</span><br><span class="line">foo</span><br><span class="line"><span class="comment">// &#123;0: "a", 1: "b", 2: "c"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展运算符后面是一个空对象，无效果</span></span><br><span class="line">&#123;...&#123;&#125;, <span class="attr">a</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="comment">// &#123; a: 1 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展运算符后面不是对象，则会自动将其转为对象 </span></span><br><span class="line">&#123;..<span class="number">.1</span>&#125; <span class="comment">// &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展运算符后面是字符串，它会自动转成一个类似数组的对象</span></span><br><span class="line">&#123;...<span class="string">'Owen'</span>&#125;</span><br><span class="line"><span class="comment">//&#123;0: "O", 1: "w", 2: "e", 3: "n"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ab = &#123; ...a, ...b &#125;;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> ab = <span class="built_in">Object</span>.assign(&#123;&#125;, a, b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//完整克隆一个对象，还拷贝对象原型的属性，可以采用下面的写法。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法一 非浏览器环境不一定部署 __proto__</span></span><br><span class="line"><span class="keyword">const</span> clone1 = &#123;</span><br><span class="line">  __proto__: <span class="built_in">Object</span>.getPrototypeOf(obj),</span><br><span class="line">  ...obj</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">const</span> clone2 = <span class="built_in">Object</span>.assign(</span><br><span class="line">  <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.getPrototypeOf(obj)),</span><br><span class="line">  obj</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法三</span></span><br><span class="line"><span class="keyword">const</span> clone3 = <span class="built_in">Object</span>.create(</span><br><span class="line">  <span class="built_in">Object</span>.getPrototypeOf(obj),</span><br><span class="line">  <span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象的扩展运算符后面可以跟表达式</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  ...(x &gt; <span class="number">1</span> ? &#123;<span class="attr">a</span>: <span class="number">1</span>&#125; : &#123;&#125;),</span><br><span class="line">  b: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展运算符的参数对象之中，如果有取值函数get，这个函数是会执行let aWithXGetter = &#123;</span></span><br><span class="line">  ...a,</span><br><span class="line">  <span class="keyword">get</span> x() &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'not throw yet'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 会抛出错误，因为 x 属性被执行了</span></span><br><span class="line"><span class="keyword">let</span> runtimeError = &#123;</span><br><span class="line">  ...a,</span><br><span class="line">  ...&#123;</span><br><span class="line">    <span class="keyword">get</span> x() &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'throw now'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><hr><h3 id="New-method-for-objects"><a href="#New-method-for-objects" class="headerlink" title="New method for objects"></a>New method for objects</h3><h4 id="Object-is-比较两个值是否严格相等"><a href="#Object-is-比较两个值是否严格相等" class="headerlink" title="Object.is() 比较两个值是否严格相等"></a>Object.is() 比较两个值是否严格相等</h4><blockquote><p>和 <code>===</code> 的区别<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">0</span> === <span class="number">-0</span> <span class="comment">//true</span></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.is(+<span class="number">0</span>, <span class="number">-0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>) <span class="comment">// true</span></span><br><span class="line">es5 实现</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>,<span class="string">'is'</span>,&#123;</span><br><span class="line">  value: <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x === y) &#123;</span><br><span class="line">      <span class="comment">// 针对+0 不等于 -0的情况</span></span><br><span class="line">      <span class="keyword">return</span> x !== <span class="number">0</span> || <span class="number">1</span> / x === <span class="number">1</span> / y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 针对NaN的情况</span></span><br><span class="line">    <span class="keyword">return</span> x !== x &amp;&amp; y !== y;</span><br><span class="line">  &#125;,</span><br><span class="line">  configurable: <span class="literal">true</span>,</span><br><span class="line">  enumerable: <span class="literal">false</span>,</span><br><span class="line">  writable: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h4><blockquote><p>浅拷贝对象，无法拷贝原型,也不拷贝不可枚举的属性。<br>总是拷贝一个属性的值，而不会拷贝它背后的赋值方法或取值方法。<br>同属性后面的覆盖前面的值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(&#123;<span class="attr">b</span>: <span class="string">'c'</span>&#125;,</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(&#123;&#125;, <span class="string">'invisible'</span>, &#123;</span><br><span class="line">    enumerable: <span class="literal">false</span>,</span><br><span class="line">    value: <span class="string">'hello'</span></span><br><span class="line">  &#125;) )</span><br><span class="line"><span class="comment">// &#123; b: 'c' &#125;</span></span><br><span class="line"><span class="built_in">Object</span>.assign([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="comment">//[4,5,3]</span></span><br></pre></td></tr></table></figure><h4 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors()"></a>Object.getOwnPropertyDescriptors()</h4><blockquote><p>返回目标对象所有自身属性（非继承） 的描述对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  foo: <span class="number">123</span>,</span><br><span class="line">  <span class="keyword">get</span> bar() &#123; <span class="keyword">return</span> <span class="string">'Owen'</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span><br><span class="line"><span class="comment">// &#123; foo:</span></span><br><span class="line"><span class="comment">//    &#123; value: 123,</span></span><br><span class="line"><span class="comment">//      writable: true,</span></span><br><span class="line"><span class="comment">//      enumerable: true,</span></span><br><span class="line"><span class="comment">//      configurable: true &#125;,</span></span><br><span class="line"><span class="comment">//   bar:</span></span><br><span class="line"><span class="comment">//    &#123; get: [Function: get bar],</span></span><br><span class="line"><span class="comment">//      set: undefined,</span></span><br><span class="line"><span class="comment">//      enumerable: true,</span></span><br><span class="line"><span class="comment">//      configurable: true &#125; &#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>主要是为了解决Object.assign()无法正确拷贝get属性和set属性的问题。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source = &#123;</span><br><span class="line">  <span class="keyword">set</span> foo(value) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> shallowMerge = <span class="function">(<span class="params">target, source</span>) =&gt;</span> <span class="built_in">Object</span>.defineProperties(</span><br><span class="line">  target,</span><br><span class="line">  <span class="built_in">Object</span>.getOwnPropertyDescriptors(source)</span><br><span class="line">);</span><br><span class="line">shallowMerge(target,source)</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(target, <span class="string">'foo'</span>)</span><br><span class="line"><span class="comment">// &#123; get: undefined,</span></span><br><span class="line"><span class="comment">//   set: [Function: set foo],</span></span><br><span class="line"><span class="comment">//   enumerable: true,</span></span><br><span class="line"><span class="comment">//   configurable: true &#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>配合Object.create()方法，将对象属性克隆到一个新对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shallowClone = <span class="function">(<span class="params">obj</span>) =&gt;</span> <span class="built_in">Object</span>.create(</span><br><span class="line">  <span class="built_in">Object</span>.getPrototypeOf(obj),</span><br><span class="line">  <span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>实现一个对象继承另一个对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一</span></span><br><span class="line"><span class="keyword">const</span> obj1 = <span class="built_in">Object</span>.create(prot);</span><br><span class="line">obj.foo = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二</span></span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="built_in">Object</span>.assign(</span><br><span class="line">  <span class="built_in">Object</span>.create(prot),</span><br><span class="line">  &#123;</span><br><span class="line">    foo: <span class="number">123</span>,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//三</span></span><br><span class="line"><span class="keyword">const</span>  obj3 = <span class="built_in">Object</span>.create(prot,<span class="built_in">Object</span>.getOwnPropertyDescriptors(&#123;</span><br><span class="line">  name:<span class="string">'Owen'</span></span><br><span class="line">&#125;))</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>实现<code>Mixin</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mix = <span class="function">(<span class="params">obj</span>) =&gt;</span> (</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">with</span>:<span class="function">(<span class="params">...mixins</span>) =&gt;</span> mixins.reduce(</span><br><span class="line">      (c,mixin) =&gt; <span class="built_in">Object</span>.create(  c, <span class="built_in">Object</span>.getOwePropertyDescriptors( minxin )), obj</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="keyword">let</span> a = &#123;<span class="attr">a</span>: <span class="string">'a'</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> b = &#123;<span class="attr">b</span>: <span class="string">'b'</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> c = &#123;<span class="attr">c</span>: <span class="string">'c'</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> d = mix(c).with(a, b);</span><br><span class="line"></span><br><span class="line">d.c <span class="comment">// "c"</span></span><br><span class="line">d.b <span class="comment">// "b"</span></span><br><span class="line">d.a <span class="comment">// "a"</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="proto属性，Object-setPrototypeOf-，Object-getPrototypeOf"><a href="#proto属性，Object-setPrototypeOf-，Object-getPrototypeOf" class="headerlink" title="proto属性，Object.setPrototypeOf()，Object.getPrototypeOf()"></a><strong>proto</strong>属性，Object.setPrototypeOf()，Object.getPrototypeOf()</h4><blockquote><p>设置，和 获取原型<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//set</span></span><br><span class="line"><span class="keyword">let</span> proto = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">x</span>: <span class="number">10</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, proto);</span><br><span class="line"></span><br><span class="line">proto.y = <span class="number">20</span>;</span><br><span class="line">proto.z = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">obj.x <span class="comment">// 10</span></span><br><span class="line">obj.y <span class="comment">// 20</span></span><br><span class="line">obj.z <span class="comment">// 40</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//get</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rec = <span class="keyword">new</span> Rectangle();</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(rec) === Rectangle.prototype</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(rec, <span class="built_in">Object</span>.prototype);</span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(rec) === Rectangle.prototype</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Object-keys-，Object-values-，Object-entries"><a href="#Object-keys-，Object-values-，Object-entries" class="headerlink" title="Object.keys()，Object.values()，Object.entries()"></a>Object.keys()，Object.values()，Object.entries()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//keys</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;; <span class="comment">//es5</span></span><br><span class="line"><span class="built_in">Object</span>.keys(obj)</span><br><span class="line"><span class="comment">// ["foo", "baz"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//values</span></span><br><span class="line"><span class="built_in">Object</span>.values(obj)</span><br><span class="line"><span class="comment">//['bar,42]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.entries(obj)</span><br><span class="line"><span class="comment">// [['foo', 'bar'],  ['baz', 42]]</span></span><br></pre></td></tr></table></figure><h4 id="Object-fromEntries"><a href="#Object-fromEntries" class="headerlink" title="Object.fromEntries()"></a>Object.fromEntries()</h4><blockquote><p> Object.entries 方法的逆操作<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.fromEntries([</span><br><span class="line">  [<span class="string">'foo'</span>, <span class="string">'bar'</span>],</span><br><span class="line">  [<span class="string">'baz'</span>, <span class="number">42</span>]</span><br><span class="line">])</span><br><span class="line"><span class="comment">// &#123; foo: "bar", baz: 42 &#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><p>目前谷歌版本 Chrome/72.0.3626.121 Safari/537.36  及以下不支持</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;String-Extend&quot;&gt;&lt;a href=&quot;#String-Extend&quot; class=&quot;headerlink&quot; title=&quot;String Extend&quot;&gt;&lt;/a&gt;String Extend&lt;/h3&gt;&lt;h4 id=&quot;被-for-of-遍历&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="ES6" scheme="https://owen027.github.io/categories/ES6/"/>
    
    
      <category term="Extend Methods" scheme="https://owen027.github.io/tags/Extend-Methods/"/>
    
  </entry>
  
  <entry>
    <title>Map</title>
    <link href="https://owen027.github.io/2019/03/19/map/"/>
    <id>https://owen027.github.io/2019/03/19/map/</id>
    <published>2019-03-19T10:48:52.000Z</published>
    <updated>2019-04-21T15:59:13.599Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><blockquote><p>键值对的集合 键名的范围不限制于字符串</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>: <span class="string">'Owen'</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="comment">//设值</span></span><br><span class="line">m.set(obj,<span class="string">"boy"</span>); <span class="comment">//将 obj 作为键名， 给它赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以是对象，数组，甚至是函数，任何数据类型都可以当作属性名（键名）</span></span><br><span class="line">m.set(fn,<span class="number">1</span>) </span><br><span class="line"><span class="comment">//对同一个键名赋值，后面的将覆盖前面的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获值</span></span><br><span class="line">m.get(obj) <span class="comment">// 'boy'</span></span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line">m.has(obj) <span class="comment">// true</span></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">m.delete(obj)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="Map-参数"><a href="#Map-参数" class="headerlink" title="Map 参数"></a>Map 参数</h3><blockquote><p>任何 <code>Iterator</code> 接口，并且每个成员都是双元素数组的数据结构 都可以作为参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">3</span>]];</span><br><span class="line"><span class="keyword">const</span> ma = <span class="keyword">new</span> <span class="built_in">Map</span>(arr); <span class="comment">//Map(2) &#123;1 =&gt; 2, 2 =&gt; 3&#125;</span></span><br><span class="line">ma.get(<span class="number">1</span>) <span class="comment">//2</span></span><br><span class="line">ma.get(<span class="number">2</span>) <span class="comment">//3</span></span><br><span class="line"><span class="comment">//如果几组双元素成员相同那么只会生成一个值</span></span><br><span class="line">arr = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>]];</span><br><span class="line">mss = <span class="keyword">new</span> <span class="built_in">Map</span>(arr); <span class="comment">//Map(1) &#123;1 =&gt; 2&#125;</span></span><br><span class="line">ma.size<span class="comment">//2</span></span><br><span class="line">mss.size<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// keys 键名</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> ma.keys())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key)</span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">    <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//values 值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> ma.values())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val)</span><br><span class="line">    <span class="comment">//2</span></span><br><span class="line">    <span class="comment">//3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//entries  键值 等同于 遍历 ma 默认遍历的是entries </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key,val] <span class="keyword">of</span> ma.entries())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key,val)</span><br><span class="line">    <span class="comment">//1,2</span></span><br><span class="line">    <span class="comment">//2,3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//转化为数组</span></span><br><span class="line"></span><br><span class="line">[... ma.keys() ] <span class="comment">//[1,2]</span></span><br><span class="line"></span><br><span class="line">[... ma.values() ] <span class="comment">//[2,3]</span></span><br><span class="line"></span><br><span class="line">[... ma] <span class="comment">//[[1,2],[2,3]]</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Map&quot;&gt;&lt;a href=&quot;#Map&quot; class=&quot;headerlink&quot; title=&quot;Map&quot;&gt;&lt;/a&gt;Map&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;键值对的集合 键名的范围不限制于字符串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;
      
    
    </summary>
    
      <category term="ES6" scheme="https://owen027.github.io/categories/ES6/"/>
    
    
      <category term="Map" scheme="https://owen027.github.io/tags/Map/"/>
    
  </entry>
  
  <entry>
    <title>Set</title>
    <link href="https://owen027.github.io/2019/03/15/set/"/>
    <id>https://owen027.github.io/2019/03/15/set/</id>
    <published>2019-03-15T13:20:20.000Z</published>
    <updated>2019-04-21T15:59:13.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><blockquote><p>ES6 提供的数据结构类似于数组，值是唯一的，通过 <code>Set</code> 构造函数来生成</p></blockquote> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="comment">//参数可以是一个可以迭代的数据结构</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = new Set(arr); //Set(5)&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">[...set] <span class="comment">//[1,2,3,4,5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> set1 = <span class="keyword">new</span> <span class="built_in">Set</span>(<span class="string">'12343333433225'</span>);  <span class="comment">//Set(5) &#123;"1", "2", "3", "4", "5"&#125;</span></span><br><span class="line">set1.size <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组去重</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [... new <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>])];</span><br><span class="line"><span class="keyword">const</span> arr2 = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]));</span><br></pre></td></tr></table></figure><h3 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">  s.constructor <span class="comment">//指向 Set 函数 </span></span><br><span class="line">  s.size <span class="comment">//成员总数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作方法 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以通过 add()方法添加 只有一个参数</span></span><br><span class="line"><span class="keyword">const</span> set2 =<span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">set2.add(<span class="number">1</span>) <span class="comment">//Set(1) &#123;1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不会发生类型转换  NaN 会 = NaN </span></span><br><span class="line">set2.add(<span class="string">"1"</span>) <span class="comment">//Set(2) &#123;1,"1"&#125;</span></span><br><span class="line"></span><br><span class="line">set2.add(<span class="literal">NaN</span>).add(<span class="literal">NaN</span>)<span class="comment">// Set(3) &#123;1,"1",NaN&#125;  链式调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//两个对象不相等</span></span><br><span class="line">set2.add(&#123;&#125;)</span><br><span class="line">set2.size <span class="comment">//4</span></span><br><span class="line">set2.add(&#123;&#125;)</span><br><span class="line">set2.size <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过 delete() 删除某个值 返回 Boolean 值 </span></span><br><span class="line">set2.delete(<span class="number">1</span>) <span class="comment">//true</span></span><br><span class="line">set2.delete(&#123;&#125;) <span class="comment">//false </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//has()  是否存在某个值 </span></span><br><span class="line">set2.has(<span class="literal">NaN</span>) <span class="comment">//true</span></span><br><span class="line">set2.has(&#123;&#125;) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//clear() 清除所有成员</span></span><br><span class="line">set2.clear() <span class="comment">//Set(0) &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 遍历方法 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   keys 返回键名的迭代器， values 返回 键值的迭代器， 由于 Set 键名和键值 相同 所以</span></span><br><span class="line"><span class="comment"> * keys 和 values 方法返回值相同</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">const</span> sK = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]).keys()   <span class="comment">//SetIterator &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"> <span class="keyword">const</span> sV= <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]).values()   <span class="comment">//SetIterator &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//enters 返回键值对</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]).entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [1, 1]</span></span><br><span class="line"><span class="comment">// [2, 2]</span></span><br><span class="line"><span class="comment">// [3, 3]</span></span><br><span class="line"><span class="comment">// [4, 4]</span></span><br><span class="line"><span class="comment">// [5, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//推荐使用for of </span></span><br><span class="line"><span class="keyword">const</span> sI = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> sI) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(key); <span class="comment">//1 2 3 4 5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Set的遍历顺序就是插入顺序。使用 Set 保存一个回调函数列表，调用时能保证按照添加顺序调用。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//forEach</span></span><br><span class="line">sI.forEach(<span class="function">(<span class="params">value, key</span>) =&gt;</span> <span class="built_in">console</span>.log(key + <span class="string">' : '</span> + value))</span><br><span class="line"><span class="comment">// 1 : 1</span></span><br><span class="line"><span class="comment">// 2 : 2</span></span><br><span class="line"><span class="comment">// 3 : 3</span></span><br><span class="line"><span class="comment">// 4 : 4</span></span><br><span class="line"><span class="comment">// 5 : 5</span></span><br></pre></td></tr></table></figure><h3 id="weakSet"><a href="#weakSet" class="headerlink" title="weakSet"></a>weakSet</h3><blockquote><p>和Set 类似 但是只能存储对象，不可遍历<br>如果其他对象未应用该对象，垃圾回收机制会自动收回所占用的内存<br>适合存储临时对象和绑定对应对象的信息</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]]); <span class="comment">//WeakSet &#123;[1, 2], [3, 4]&#125;</span></span><br><span class="line"><span class="comment">//a 的成员自动成为 weakSet 的成员</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//add 方法</span></span><br><span class="line"><span class="keyword">let</span> arr =[[<span class="number">1</span>]];</span><br><span class="line">ws.add(arr);</span><br><span class="line"><span class="comment">//delete 删除对应成员</span></span><br><span class="line">ws.delete(arr); <span class="comment">//true</span></span><br><span class="line"><span class="comment">// has 是否包含</span></span><br><span class="line">ws.has(arr) <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>由于 WeakSet 的成员都是弱引用随时可能被回收，因此可以存储DOM节点，不用担心节点移除时，发生内存泄漏。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="keyword">new</span> <span class="built_in">WeakSet</span>()</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">   <span class="keyword">constructor</span>()&#123;</span><br><span class="line">     foo.add(<span class="keyword">this</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   method ()&#123;</span><br><span class="line">     <span class="keyword">if</span>(!foo.has (<span class="keyword">this</span>))&#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"method 只能在Foo 实例上使用"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Set&quot;&gt;&lt;a href=&quot;#Set&quot; class=&quot;headerlink&quot; title=&quot;Set&quot;&gt;&lt;/a&gt;Set&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;ES6 提供的数据结构类似于数组，值是唯一的，通过 &lt;code&gt;Set&lt;/code&gt; 构造函数来生成&lt;/p
      
    
    </summary>
    
      <category term="ES6" scheme="https://owen027.github.io/categories/ES6/"/>
    
    
      <category term="Set" scheme="https://owen027.github.io/tags/Set/"/>
    
  </entry>
  
  <entry>
    <title>symbol</title>
    <link href="https://owen027.github.io/2019/03/15/symbol/"/>
    <id>https://owen027.github.io/2019/03/15/symbol/</id>
    <published>2019-03-15T11:19:04.000Z</published>
    <updated>2019-04-21T15:59:13.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h2><blockquote><p>ES6 引入的原始数据类型，表示独一无二的值<br>通过 <code>Symbol</code>函数生成的原始值，不是对象，所以无法添加属性和方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> s1 = <span class="keyword">new</span> <span class="built_in">Symbol</span>(<span class="string">'s'</span>); <span class="comment">//TypeError</span></span><br><span class="line"><span class="comment">// 不能通过 new Symbol 否则会报错</span></span><br><span class="line"></span><br><span class="line">s.toString()<span class="comment">//"Symbol()"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>();</span><br><span class="line">s == s2 <span class="comment">// false</span></span><br><span class="line"><span class="comment">//独一无二的特性</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Boolean</span>(s) <span class="comment">//true</span></span><br><span class="line">!s <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">s + s1 <span class="comment">//error </span></span><br><span class="line">s + <span class="number">1</span>  <span class="comment">//error </span></span><br><span class="line">s + <span class="string">"1"</span> <span class="comment">// error </span></span><br><span class="line"><span class="comment">//symbol 不能参与任何值的运算</span></span><br></pre></td></tr></table></figure></p></blockquote><p>对象中的 symbol 无法通过 <code>.</code> 点运算访问<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sm = <span class="built_in">Symbol</span>()</span><br><span class="line"><span class="keyword">const</span> s =&#123;</span><br><span class="line">    [sm]: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line">s.sm <span class="comment">//undefined</span></span><br><span class="line">s[sm]<span class="comment">//1</span></span><br></pre></td></tr></table></figure></p><h3 id="消除魔术字符串"><a href="#消除魔术字符串" class="headerlink" title="消除魔术字符串"></a>消除魔术字符串</h3><blockquote><p>代码中多次出现，与代码形成强耦合的某一个具体的字符串或者数值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDate</span>(<span class="params">num,options</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">switch</span> (num)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        data = num + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span> :</span><br><span class="line">        data = num * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// case 右边的 1， 2 就是魔术数值</span></span><br><span class="line"><span class="comment">//一般把魔术字符串 变成变量来消除</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj =&#123;</span><br><span class="line">    one:<span class="built_in">Symbol</span>(),</span><br><span class="line">    two:<span class="built_in">Symbol</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDate</span>(<span class="params">num,options</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">switch</span> (num)&#123;</span><br><span class="line">        <span class="keyword">case</span> obj.one:</span><br><span class="line">        data = options + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> obj.two :</span><br><span class="line">        data =  options * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br><span class="line">getDate(obj.one,<span class="number">3</span>)</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="作为对象属性名"><a href="#作为对象属性名" class="headerlink" title="作为对象属性名"></a>作为对象属性名</h3><ul><li><code>for...in</code>、<code>for...of</code>，<code>Object.keys()</code> , <code>Object.getOwnPropertyNames()</code>,<code>JSON.stringify()</code>返回。</li><li>不是私有属性，可以通过 <code>Object.getOwnPropertySymbols()</code>获取指定symbol名<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="built_in">Symbol</span>(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Symbol</span>(<span class="string">'b'</span>);</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">   [a]:<span class="string">'hello'</span>,</span><br><span class="line">   [b]:<span class="string">'word'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(obj)) <span class="comment">//(2) [Symbol(a), Symbol(b)]</span></span><br></pre></td></tr></table></figure></li></ul><p>-可以通过 <code>Reflect.ownKeys()</code> 返回所有类型的属性名<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="built_in">Symbol</span>(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Symbol</span>(<span class="string">'b'</span>);</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">   [a]:<span class="string">'hello'</span>,</span><br><span class="line">   [b]:<span class="string">'word'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Reflect</span>.ownKeys(obj) <span class="comment">// ["a", Symbol(a), Symbol(b)]</span></span><br></pre></td></tr></table></figure></p><h3 id="Symbol-for-与Symbol"><a href="#Symbol-for-与Symbol" class="headerlink" title="Symbol.for()与Symbol()"></a><code>Symbol.for()</code>与<code>Symbol()</code></h3><blockquote><p>Symbol(‘a’) 和 Symbol.for():两种方法都会生成新的 <code>Symbol</code> 值<br>Symbol(‘a’) 使用10次，会生成10个新的 Symbol<br>Symbol.for(‘a’)，使用10次，会生成一个 Symbol 并创建一个key值<br>Symbol.keyFor(Symbol.for(‘a’)),会返回一个全局 key 值，可以在不同的iframe 或 service worker 获取同一个key</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>.for(<span class="string">'s'</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>.for(<span class="string">'s'</span>);</span><br><span class="line">s == s1 <span class="comment">//false</span></span><br><span class="line">s1 == s2 <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> key = <span class="built_in">Symbol</span>.keyFor(s2) <span class="comment">//s</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;含义&quot;&gt;&lt;a href=&quot;#含义&quot; class=&quot;headerlink&quot; title=&quot;含义&quot;&gt;&lt;/a&gt;含义&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;ES6 引入的原始数据类型，表示独一无二的值&lt;br&gt;通过 &lt;code&gt;Symbol&lt;/code&gt;函数生成的原始值，
      
    
    </summary>
    
      <category term="ES6" scheme="https://owen027.github.io/categories/ES6/"/>
    
    
      <category term="Symbol" scheme="https://owen027.github.io/tags/Symbol/"/>
    
  </entry>
  
  <entry>
    <title>Async/await</title>
    <link href="https://owen027.github.io/2019/03/14/asyncEs8/"/>
    <id>https://owen027.github.io/2019/03/14/asyncEs8/</id>
    <published>2019-03-14T11:27:09.000Z</published>
    <updated>2019-04-21T15:59:13.597Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES2017引入async-函数"><a href="#ES2017引入async-函数" class="headerlink" title="ES2017引入async 函数"></a>ES2017引入async 函数</h2><ul><li>Generator 的语法糖</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//generator</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readFile = <span class="function"><span class="keyword">function</span> (<span class="params">path</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve,reject</span>) </span>&#123;</span><br><span class="line">        fs.readFile(path, <span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</span><br><span class="line">            resolve(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> g = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> f1 = <span class="keyword">yield</span> readFile(url1);</span><br><span class="line">    <span class="keyword">const</span> f2 = <span class="keyword">yield</span> readFile(url2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// async</span></span><br><span class="line"><span class="keyword">const</span> asyncFile = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> f1 = <span class="keyword">await</span> readFile(url1);</span><br><span class="line">    <span class="keyword">const</span> f2 = <span class="keyword">await</span> readFile(url2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将 g 函数的 * 变成 axync</span></span><br><span class="line"><span class="comment"> * 将 yield  变成 await </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="async-对-generator-进行以下优化"><a href="#async-对-generator-进行以下优化" class="headerlink" title="async  对  generator 进行以下优化"></a>async  对  generator 进行以下优化</h3><ul><li>不再需要调用 <code>next</code> 方法就能执行</li><li>更加语义化</li><li>实用性更强 <code>await</code> 后面可以是 Promise , 原始类型值（会自动转成立即 resolved 的 Promise 对象）</li><li>返回值为Promise 对象更加方便，<label>当函数执行遇到 <code>await</code> 时暂停执行，等到异步操作完成，再执行后面的代码</label></li><li>async 函数 return 的返回值会成为 <code>then</code> 方法的参数</li><li><p>async 函数内部抛出错误 将会被 <code>catch</code>方法接收</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve,ms))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncPrint</span>(<span class="params">val, ms </span>) </span>&#123;</span><br><span class="line">     <span class="keyword">await</span> timeout(ms);</span><br><span class="line">    <span class="built_in">console</span>.log(val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncPrint(<span class="string">'Owen'</span>,<span class="number">1000</span>) <span class="comment">//1s 后 "Owen"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//因为 asnyc 返回 Promise 所以可以改用 async</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">timout</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve,ms));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncPrint</span>(<span class="params">val, ms </span>) </span>&#123;</span><br><span class="line">     <span class="keyword">await</span> timeout(ms);</span><br><span class="line">    <span class="built_in">console</span>.log(val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncPrint(<span class="string">'Owen'</span>,<span class="number">1000</span>) <span class="comment">//1s 后 "Owen"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义 async 函数 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表达式</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="keyword">async</span> f()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Storage</span> </span>&#123;</span><br><span class="line">   <span class="keyword">async</span> getAvatar(name) &#123;  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">async</span> () =&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* then方法接收return 的参数 */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Owen"</span></span><br><span class="line">&#125;</span><br><span class="line">foo().then(<span class="function"><span class="params">re</span> =&gt;</span><span class="built_in">console</span>.log(re)); <span class="comment">//Owen</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 接收错误对象 */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="number">18</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn().catch(<span class="function"><span class="params">er</span> =&gt;</span><span class="built_in">console</span>.log(er)) <span class="comment">//error</span></span><br></pre></td></tr></table></figure></li><li><p>asyn回调只有等所有 <code>await</code> 后面的Promise 执行完毕或者报错和<code>return</code>才会执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> time = + <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="built_in">console</span>.log(time,<span class="number">1</span>)</span><br><span class="line">   <span class="keyword">let</span> p1 =  <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve,<span class="number">1000</span>));</span><br><span class="line">   <span class="built_in">console</span>.log(+ <span class="keyword">new</span> <span class="built_in">Date</span>() - time ,<span class="number">2</span>)</span><br><span class="line">   <span class="keyword">let</span> p2 =  <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve,<span class="number">2000</span>));</span><br><span class="line">   <span class="keyword">return</span> +<span class="keyword">new</span> <span class="built_in">Date</span>() - time;</span><br><span class="line">&#125;</span><br><span class="line">fn().then(<span class="function"><span class="params">time</span> =&gt;</span> <span class="built_in">console</span>.log(time,<span class="number">3</span>));</span><br><span class="line"><span class="comment">//  1s 1</span></span><br><span class="line"><span class="comment">//  2s 2</span></span><br><span class="line"><span class="comment">//  3s 3</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="await"><a href="#await" class="headerlink" title="await"></a>await</h3><ul><li><p>await 后面是 <code>thenable</code> 对象，会和返回 promise 对象 一样返回结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sleep</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(timeout) &#123;</span><br><span class="line">    <span class="keyword">this</span>.timeout = timeout;</span><br><span class="line">  &#125;</span><br><span class="line">  then(resolve, reject) &#123;</span><br><span class="line">    <span class="keyword">const</span> startTime = <span class="built_in">Date</span>.now();</span><br><span class="line">    setTimeout(</span><br><span class="line">      () =&gt; resolve(<span class="built_in">Date</span>.now() - startTime),</span><br><span class="line">      <span class="keyword">this</span>.timeout</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> actualTime = <span class="keyword">await</span> <span class="keyword">new</span> Sleep(<span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(actualTime);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li><li><p>如果 <code>await</code> 后面的Promise 状态为 <code>rejected</code> 那么结果将会传递给 <code>catch</code> 方法；并且函数会中断执行,除非使用 <code>try..catch</code> 或者 对应的 <code>Pomise</code> 使用 <code>catch</code>方法 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">ay</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">Promise</span>.reject(<span class="number">18</span>).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Owem"</span></span><br><span class="line">&#125;</span><br><span class="line">ay().then(<span class="function"><span class="params">res</span> =&gt;</span><span class="built_in">console</span>.log(res))</span><br><span class="line"><span class="comment">//18</span></span><br><span class="line"><span class="comment">//Owem</span></span><br></pre></td></tr></table></figure></li><li><p>多个 <code>await</code> 后面的异步，如果不存在继发关系，最好同时触发</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> time = + <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="built_in">console</span>.log(time,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">let</span> [p1,p2] = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([ </span><br><span class="line">       <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve,<span class="number">1000</span>)),</span><br><span class="line">       <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve,<span class="number">2000</span>))]);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> +<span class="keyword">new</span> <span class="built_in">Date</span>() - time;</span><br><span class="line">&#125;</span><br><span class="line">fn().then(<span class="function"><span class="params">time</span> =&gt;</span> <span class="built_in">console</span>.log(time,<span class="number">2</span>));</span><br></pre></td></tr></table></figure><ul><li>只能再 async 函数中使用 await <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">ay</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Owem"</span></span><br><span class="line">&#125;</span><br><span class="line">ay()  <span class="comment">//error</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="async-原理"><a href="#async-原理" class="headerlink" title="async 原理"></a>async 原理</h3><ul><li>将Generator 函数和执行器包装再一个函数中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autoactuator</span> (<span class="params">gen</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">const</span> g = gen();</span><br><span class="line">    <span class="keyword">let</span> step = <span class="function">(<span class="params">next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> n;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            n = next();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(err) &#123;</span><br><span class="line">            <span class="keyword">return</span> reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n.done)&#123;</span><br><span class="line">            <span class="keyword">return</span> resolve(n.value)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Promise</span>.resolve(next.value).ten(<span class="function">(<span class="params">v</span>) =&gt;</span>&#123;</span><br><span class="line">            step(<span class="function"><span class="params">()</span> =&gt;</span> g.next(v));</span><br><span class="line">        &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            setp(<span class="function"><span class="params">()</span> =&gt;</span> g.throw(e));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    step(<span class="function"><span class="params">()</span> =&gt;</span> g.next(<span class="literal">undefined</span>));</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ES2017引入async-函数&quot;&gt;&lt;a href=&quot;#ES2017引入async-函数&quot; class=&quot;headerlink&quot; title=&quot;ES2017引入async 函数&quot;&gt;&lt;/a&gt;ES2017引入async 函数&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Generato
      
    
    </summary>
    
      <category term="ES6" scheme="https://owen027.github.io/categories/ES6/"/>
    
    
      <category term="async" scheme="https://owen027.github.io/tags/async/"/>
    
  </entry>
  
  <entry>
    <title>Pormise</title>
    <link href="https://owen027.github.io/2019/03/14/promise/"/>
    <id>https://owen027.github.io/2019/03/14/promise/</id>
    <published>2019-03-14T11:27:09.000Z</published>
    <updated>2019-06-05T15:15:29.024Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><blockquote><p>为了解决 “回调地狱”（callback hell）而提出的写法<br>允许将 <code>callback</code> 变成链式调用<br>它是一个容器，保存着某个异步操作的结果。</p></blockquote><p><strong>特点</strong></p><ul><li><p>对象的状态部受外界影响；有三种状态， 进行中( pending ) 、 成功( fulfilled ) 、 失败( rejected );只有异步操作的结果可以决定那种状态。</p></li><li><p>状态一旦改变，就不会更改（resolved 定型），状态的改变只会是两种情况 pengding -&gt; fulfilled or pengding -&gt; rejected;</p></li><li><p><label>  一旦建立就会立即执行 </label>, 中途无法取消，无法得知事件进展，不设置callback，内部将会抛出错误</p></li></ul><h3 id="简单实列"><a href="#简单实列" class="headerlink" title="简单实列"></a>简单实列</h3><blockquote><p>使用 <code>Promise</code> 构造函数生成实例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//example</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve,reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//... do something</span></span><br><span class="line">    $.<span class="keyword">get</span>(url,function (data) &#123;</span><br><span class="line">        <span class="keyword">if</span> (data) &#123;</span><br><span class="line">            resolve(data)</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        reject(err)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><p>可见 <code>Promise</code> 接受一个callback 作为参数， callback有两个参数，都是函数</p><ul><li>第一个 <code>resolve</code> 异步操作成功时调用，将成功的信息作为参数传递出去</li><li>第二个 <code>rejcet</code> 异步操作失败时调用，将失败的信息传递出去</li></ul><h4 id="then-方法"><a href="#then-方法" class="headerlink" title="then 方法"></a>then 方法</h4><p>生成实例后,可以使用 <code>then</code> 方法 接收成功状态和失败状态的回调,<label>在当前脚本所有同步任务执行完才会执行</label></p><ul><li>第一个参数是成功后的callback (必传)</li><li>第二个参数是失败后的callback (为可选参数)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise = <span class="function">(<span class="params">time</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"promise"</span>)</span><br><span class="line">        setTimeout(resolve,time,<span class="string">'Owen'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">promise(<span class="number">1000</span>).then(<span class="function">(<span class="params">val</span>) =&gt;</span> <span class="built_in">console</span>.log(val)) <span class="comment">//"promise"  1s后 "Owen"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//加载图片</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImage</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">        image.onload = <span class="function"><span class="params">()</span> =&gt;</span> resolve(image);</span><br><span class="line"></span><br><span class="line">        image.onerror = <span class="function"><span class="params">()</span> =&gt;</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`not lad image at: <span class="subst">$&#123;url&#125;</span>`</span>))</span><br><span class="line"></span><br><span class="line">        image.src = url;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现原生ajax(get)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getJSON = <span class="function"><span class="keyword">function</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> handler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ( <span class="keyword">this</span>.readySate !== <span class="number">4</span> )  <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span> ) &#123;</span><br><span class="line">                resolve(<span class="keyword">this</span>.response)</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                reject( <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="keyword">this</span>.statusText) )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> client = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">              client.open(<span class="string">"GET"</span>,url);</span><br><span class="line">              client.onreadystatechange = handler;</span><br><span class="line">              client.setRequestHeader(<span class="string">"Accept"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">              client.send()</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getJSON(<span class="string">'url'</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;,err =&gt; <span class="built_in">console</span>.error(err));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//---</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line"> resolve();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">  resolve(p1);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setTimeout( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="built_in">window</span>.requestAnimationFrame(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 回调函数执行次数通常是每秒60次</span></span><br><span class="line">    <span class="comment">// 当requestAnimationFrame() 运行在后台标签页或者隐藏的&lt;iframe&gt; 里时，</span></span><br><span class="line">    <span class="comment">// requestAnimationFrame() 会被暂停调用以提升性能和电池寿命。</span></span><br><span class="line">    <span class="comment">//回调函数会被传入DOMHighResTimeStamp参数 （排队的回调开始触发的时间戳）</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">8</span>,v)</span><br><span class="line">    <span class="comment">//cancel​Animation​Frame(requestId) 取消 window.requestAnimationFrame</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p2.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">7</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">6</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//p1的状态决定了p2的状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="comment">//4</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="comment">//&#123;&lt;resolved&gt;: undefined&#125;</span></span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//向另一个 promise 传递 promise 执行状态问题</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'fail'</span>)); <span class="built_in">console</span>.log(<span class="number">1</span>)&#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="number">2</span>); resolve(p1) &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p2.then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error)) <span class="comment">//error fail</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//传入的 promise 会改变 自己 promise 的状态，变成传入的promise的状态</span></span><br></pre></td></tr></table></figure><h3 id="catch-方法"><a href="#catch-方法" class="headerlink" title="catch 方法"></a>catch 方法</h3><ul><li><p>指定发生错误时的回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">p.then(<span class="function">(<span class="params">val</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'fulfilled:'</span>, val))</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'rejected'</span>, err));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">p.then(<span class="function">(<span class="params">val</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'fulfilled:'</span>, val))</span><br><span class="line">  .then(<span class="literal">null</span>, (err) =&gt; <span class="built_in">console</span>.log(<span class="string">"rejected:"</span>, err));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//状态改变后不会再接收之后的状态</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    resolve(<span class="string">'ok'</span>);</span><br><span class="line">   reject( <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'test'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123; <span class="built_in">console</span>.log(value) &#125;) <span class="comment">//ok</span></span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123; <span class="built_in">console</span>.log(error) &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// promise 内部错误不会影响外部的代码，不会退出进程、终止脚本执行</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    resolve(Owen);</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line">promise.catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;<span class="built_in">console</span>.log(error)&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'Owen:'</span> + v)&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//18</span></span><br><span class="line"><span class="comment">//error</span></span><br><span class="line"><span class="comment">//Owen:undefined </span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//如果将 then 放到第一个将不会执行</span></span><br><span class="line"> <span class="comment">//因为 then 接收的是 promise变量 的状态</span></span><br><span class="line"> <span class="comment">//而放到末尾则接收的是 catch 返回的 Promise 函数的状态</span></span><br></pre></td></tr></table></figure><h3 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h3><p>不管 promise 的状态怎么变都会执行的方法 （ES2018)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//finally方法的回调函数不接受任何参数</span></span><br><span class="line">promise.finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 语句</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">promise.then(</span><br><span class="line">  result =&gt; &#123;</span><br><span class="line">    <span class="comment">// 语句</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="comment">// 语句</span></span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h3 id="all"><a href="#all" class="headerlink" title="all"></a>all</h3><ul><li>用于将多个 Promise 实例，包装成一个新 Promise 实例</li><li>参数是一个数组或者具有 Interator的接口（返回成员必须是promise)，如果成员不是 Promise 实例，会将其包装成一个porimse 实例</li><li>等待所以成员的状态都变成 <code>resolved</code> 状态， <code>Promise.all</code> 才变成 <code>resolved</code> 状态，并且<label>成员返回值将以数组形式传递给 <code>then</code></label></li><li>数组成员中只有又一位成员为<code>rejectd</code> 状态，<code>Promise.all</code> 就会变成 <code>rejected</code> , 并<label>将第一个变为<code>rejectd</code>的成员返回值传递给 <code>catch</code></label></li><li>如果成员自己定义了 <code>then</code> 或者 <code>catch</code>  对应成员的返回值不会传递到 <code>all</code> 的回调当中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//example</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> setTimeout(resolve,<span class="number">1000</span>,<span class="string">'Owen'</span>))</span><br><span class="line">            <span class="comment">//.then(result =&gt;console.log(result))</span></span><br><span class="line">           <span class="comment">// .catch(err =&gt;console.log(err));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'报错了'</span>);&#125;)</span><br><span class="line">            .then(<span class="function"><span class="params">re</span> =&gt;</span> <span class="built_in">console</span>.log(re))</span><br><span class="line">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));<span class="comment">//error</span></span><br><span class="line">            </span><br><span class="line"><span class="keyword">const</span> promise = <span class="built_in">Promise</span>.all([p1,p2])</span><br><span class="line">            .then(<span class="function"><span class="params">res</span>=&gt;</span><span class="built_in">console</span>.log(res)) <span class="comment">//1s 后 ["Owen",undefined]  </span></span><br><span class="line">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));</span><br></pre></td></tr></table></figure><h3 id="race"><a href="#race" class="headerlink" title="race"></a>race</h3><ul><li>和 <code>all</code> 方法一样  只是成员状态发生改变的情况不同</li><li>数组中只要有一个成员改变状态， <code>race</code> 就改变状态，并将返回值传递给 <code>race</code>方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//example</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> setTimeout(resolve,<span class="number">1000</span>,<span class="string">'Owen'</span>))</span><br><span class="line">            <span class="comment">//.then(result =&gt;console.log(result))</span></span><br><span class="line">           <span class="comment">// .catch(err =&gt;console.log(err));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'报错了'</span>);&#125;)</span><br><span class="line">            .then(<span class="function"><span class="params">re</span> =&gt;</span> <span class="built_in">console</span>.log(re))</span><br><span class="line">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));<span class="comment">//error</span></span><br><span class="line">            </span><br><span class="line"><span class="keyword">const</span> promise = <span class="built_in">Promise</span>.race([p1,p2])</span><br><span class="line">            .then(<span class="function"><span class="params">res</span>=&gt;</span><span class="built_in">console</span>.log(res)) <span class="comment">//undefined </span></span><br><span class="line">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));</span><br></pre></td></tr></table></figure><h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h3><ul><li>将对象转化为Promise对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'Owen'</span>)</span><br><span class="line"><span class="comment">// 等同</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(<span class="string">'Owen'</span>))</span><br></pre></td></tr></table></figure></li></ul><p>传参情况</p><h4 id="Promise实例"><a href="#Promise实例" class="headerlink" title="Promise实例"></a>Promise实例</h4><ul><li>返回出入的实例</li></ul><h4 id="传入-thenable对象"><a href="#传入-thenable对象" class="headerlink" title="传入 thenable对象"></a>传入 <code>thenable</code>对象</h4><ul><li>具有 <code>then</code>方法的对象,将其转化为 <code>Promise</code> 对象 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    then: <span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        resolve(<span class="string">"Owen"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.resolve(obj);</span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res) <span class="comment">//"Owen"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="不是对象或者没有-thenable方法"><a href="#不是对象或者没有-thenable方法" class="headerlink" title="不是对象或者没有 thenable方法"></a>不是对象或者没有 <code>thenable</code>方法</h4><ul><li>返回一个新的Promise，状态为 <code>resolved</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.resolve(<span class="number">18</span>);</span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">re</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(re) <span class="comment">//18</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="reject"><a href="#reject" class="headerlink" title="reject"></a>reject</h4><ul><li>返回一个新的Promise，状态为 <code>rejectd</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.reject(<span class="string">'出错了'</span>);</span><br><span class="line"><span class="comment">// 等同 </span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> reject(<span class="string">'出错了'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> thenable = &#123;</span><br><span class="line">  then(resolve, reject) &#123;</span><br><span class="line">    reject(<span class="string">'出错了'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.reject(thenable)</span><br><span class="line">.catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e === thenable) <span class="comment">//true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="结合-Generator-使用"><a href="#结合-Generator-使用" class="headerlink" title="结合 Generator 使用"></a>结合 Generator 使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> g = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> foo = <span class="keyword">yield</span> getFoo();</span><br><span class="line">    <span class="built_in">console</span>.log(foo);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFoo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    resolve(<span class="string">'foo'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span> (<span class="params">generator</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> it = generator();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (result.done) <span class="keyword">return</span> result.value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result.value.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> go(it.next(value));</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> go(it.throw(error));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  go(it.next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run(g);</span><br></pre></td></tr></table></figure><h3 id="Promise-A-规范"><a href="#Promise-A-规范" class="headerlink" title="Promise/A+ 规范"></a><a href="https://promisesaplus.com/" target="_blank" rel="noopener">Promise/A+ 规范</a></h3><ul><li>实现者为开发者提供开放的 Promise标准，实现可靠，可互操作的JavaScript承诺。</li></ul><h4 id="术语（Terminology）"><a href="#术语（Terminology）" class="headerlink" title="术语（Terminology）"></a>术语（Terminology）</h4><ol><li><code>promise</code> 是一个对象或函数，其<code>then</code> 方法 的行为符合此规范</li><li><code>thenable</code> 定义 <code>then</code> 方法的对象或函数</li><li><code>value</code> 是任何合法的 <code>JavaScript</code> 值 （包括 <code>undefined</code> 、<code>thenable</code> 和 <code>promise</code>）</li><li><code>exception</code> 是使用 <code>throw</code> 语句抛出的值</li><li><code>reason</code> 是一个值（拒因），表明承诺被拒绝的原因（拒绝回调的值）</li></ol><h4 id="要求（Requirements）"><a href="#要求（Requirements）" class="headerlink" title="要求（Requirements）"></a>要求（Requirements）</h4><h5 id="Promise-states"><a href="#Promise-states" class="headerlink" title="Promise states"></a>Promise states</h5><ul><li>Promise 只有三种状态：pending 、 fulfilled（resolved） 和 rejected 状态</li></ul><ol><li>pending（等待状态）：可以过渡到 resolved 或 rejected 状态</li><li>fulfilled (执行状态）：无法再改变状态，且只有一个无法改变的<code>value</code></li><li>rejected （拒绝状态）：无法再改变状态，必须有一个 <code>reason</code></li></ol><ul><li>这里的 ‘无法再改变’ 意味着不可改变的身份 使用 <code>===</code> 判断 <code>value</code> 或 <code>reason</code>  </li></ul><h5 id="then-方法（The-then-method）"><a href="#then-方法（The-then-method）" class="headerlink" title="then 方法（The then method）"></a><code>then</code> 方法（The <code>then</code> method）</h5><ul><li><p>一个 <code>Promise</code> 必须提供一个 <code>then</code> 方法来访问当前 或 最终<code>value</code> 或 <code>reason</code><br>此方法接收两个参数： <code>onFulfilled</code>,<code>onRejected</code>  必须忽略其中不是函数是参数</p><ol><li><code>onFulfilled</code>：必须在 <code>promise</code> 执行状态（<code>fufilled</code> ）结束后调用，其第一个参数为 <code>value</code>，只能调用一次</li><li><code>onRejected</code>： 必须在 <code>promise</code> 拒绝状态（<code>rejected</code> ）结束后调用, 其第一个参数为 <code>reason</code>，只能调用一次</li></ol></li><li><p>onFulfilled or onRejected 在<a href="https://es5.github.io/#x10.3" target="_blank" rel="noopener">执行上下文</a> (作用域)堆栈仅包含平台代码之前不得调用<br>意味着调用 <code>onFulfilled</code>,<code>onRejected</code> 须在新一轮 <code>event loop</code> 中执行， 可用 <code>macro-task</code>（setTimout,setInterval,I/O,UI rendering, <code>script</code>主线程) 或 <code>micro-task</code>（Promise, Object.observe,process.nextTick,MutationObserver） 机制来实现</p></li><li>onFulfilled or onRejected 必须作为函数调用，在 <code>use strict</code> 下 <code>this 为 undefined</code></li><li><code>then</code>在同一个 promise 中可以链式调用，按照对应注册顺序一次回调</li><li><p><code>then</code>返回一个Promise对象 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">promise2 = promise1.then(onFulfilled, onRejected);</span><br></pre></td></tr></table></figure><ol><li>任一 <code>onFulfilled</code>或<code>onRejected</code>返回一个值x ,则执行 <code>Promise 解决过程</code></li><li><code>onFulfilled</code>或<code>onRejected</code> 抛出异常 e, 则 <code>promise2</code> 必须拒绝执行，并返回 <code>reason</code></li><li>如果<code>onFulfilled</code> 不是函数且 Promise1 为执行 <code>fulfilled</code>状态，那么  promise2 必须返回和 Promise1  相同的<code>value</code></li><li>如果<code>onRejected</code>不是函数且 Promise1 为 <code>rejected</code>状态，那么  promise2 必须返回和 Promise1  相同的<code>reason</code></li></ol><h6 id="Promise-解决过程-The-Promise-Resolution-Procedure"><a href="#Promise-解决过程-The-Promise-Resolution-Procedure" class="headerlink" title="Promise 解决过程 (The Promise Resolution Procedure)"></a>Promise 解决过程 (The Promise Resolution Procedure)</h6><ul><li>Promise 解决过程是一个抽象的操作，作为输入一个Promise,和一个值，用 <code>[[Resolve]](Promise2,x)</code> 表示；<br>如果 <code>x</code> 有 <code>then</code> 方法并且看上去像一个Promise,Promise 解决过程程序会尝试promise采用状态 <code>x</code>，否则用 <code>x</code> 的 <code>value</code>执行Promise;<br>对thenables的这种处理使promise的实现进行互操作，只要它们暴露出一个遵循  <code>Promise/A+</code>规范 兼容<code>then</code>方法即可。它还允许<code>Promise/A+</code>规范来“吸收”与合理不符合标准的实现then方法。</li></ul><p>运行 <a href="promise, x">[Resolve]</a> 需遵循以下步骤：</p><ol><li>如果promise和<code>x</code>指向同一个对象，以<code>TypeError</code>为理由拒绝执行<code>promise</code>。</li><li>如果 <code>x</code> 是 promise，则接收其状态：<br>  2.1 如果 <code>x</code> 为 <code>pending</code>， 则 Promise 保持等待直至 <code>x</code>改变状态<br>  2.2 如果 <code>x</code> 为 <code>resolved</code>，则 用相同的 <code>value</code> 执行 promise<br>  2.3 如果 <code>x</code> 为 <code>rejected</code>，则 用相同的 <code>reason</code>执行 promise</li><li>如果 <code>x</code> 是 Object or Function:<br>  3.1 把 <code>x.then</code> 赋值给 <code>then</code><br>  3.2 如果 <code>xthen</code> 抛出异常 结果 <code>e</code>，promise 状态变为 <code>rejected</code>，<code>reason</code> 为 <code>e</code><br>  3.3 如果 <code>then</code>是一个函数，将<code>x</code>作为函数作用域 <code>this</code> 调用，传递两个回调函数作为参数，第一个为 <code>resolvePromise</code>, 第二个参数为 <code>rejectPromise</code><pre><code>3.3.1 如果 `resolvePromise` 以值 `y`为参数被调用，以 `r`为 `reason` ，则运行 `[[Resolve]](promise, y)`3.3.2 如果 `rejectPromise` 用`r`为参数调用 ，则以 `r`拒绝 promise3.3.3 如果 resolvePromise 和 rejectPromise 均被调用，或者被同一参数调用了多次，则优先采用第一次调用并忽略剩下的调用3.3.4 如果调用then抛出异常`e`，resolvePromise或rejectPromise已被调用，请忽略它；否则以 `e` 为`reason`(据因)拒绝 promise</code></pre>  3.4 如果then不是一个函数, 则以<code>x</code>为参数执行 promise<ol start="4"><li>如果 <code>x</code>不为Object or Function，以 <code>x</code> 为参数执行 promise    </li></ol></li></ol><p>如果一个 promise 被一个循环的 thenable 链中的对象解决，而<code>[[Resolve]](promise, thenable)</code> 的递归性质又使得其被再次调用，根据上述的算法将会陷入无限递归之中。<br>算法虽不强制要求，但也鼓励施者检测这样的递归是否存在，若检测到存在则以一个可识别的 <code>TypeError</code> 为<code>reason</code>(据因)来拒绝 promise  </p><h3 id="手写简版-Promise"><a href="#手写简版-Promise" class="headerlink" title="手写简版 Promise"></a>手写简版 Promise</h3></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常用变量大写</span></span><br><span class="line"><span class="keyword">const</span> PENDING =<span class="string">'pending'</span></span><br><span class="line"><span class="keyword">const</span> RESOLVEd = <span class="string">'resolved'</span></span><br><span class="line"><span class="keyword">const</span> REJECTEd = <span class="string">'rejected'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myPromise</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(callback) &#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="keyword">this</span></span><br><span class="line">    that.state = PENDING;</span><br><span class="line">    that.resolveCallback = [];</span><br><span class="line">    that.rejectCallback = [];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> resolve = <span class="function"><span class="params">value</span> =&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (that.state === PENDING)&#123;</span><br><span class="line">          that.state = RESOLVED;</span><br><span class="line">          that.value = value</span><br><span class="line">          that.resolveCallback.map(<span class="function"><span class="params">cb</span> =&gt;</span> cb(that.value))</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">const</span> reject = <span class="function"><span class="params">value</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (that.state === PENDING)&#123;</span><br><span class="line">          that.state = REJECTED;</span><br><span class="line">          that.value = value</span><br><span class="line">          that.rejectCallback.map(<span class="function"><span class="params">cb</span> =&gt;</span> cb(that.value))</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      callback(resolve,reject)</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">      reject(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  then(onResolved,onRejected)&#123;</span><br><span class="line">      <span class="keyword">const</span> that = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Promise&quot;&gt;&lt;a href=&quot;#Promise&quot; class=&quot;headerlink&quot; title=&quot;Promise&quot;&gt;&lt;/a&gt;Promise&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;为了解决 “回调地狱”（callback hell）而提出的写法&lt;br&gt;允
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://owen027.github.io/categories/JavaScript/"/>
    
    
      <category term="async" scheme="https://owen027.github.io/tags/async/"/>
    
  </entry>
  
</feed>
