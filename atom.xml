<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Owen</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://owen027.github.io/"/>
  <updated>2019-05-19T02:13:02.087Z</updated>
  <id>https://owen027.github.io/</id>
  
  <author>
    <name>Owen Gao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>algorithm</title>
    <link href="https://owen027.github.io/2019/04/21/algorithm/"/>
    <id>https://owen027.github.io/2019/04/21/algorithm/</id>
    <published>2019-04-21T15:39:47.000Z</published>
    <updated>2019-05-19T02:13:02.087Z</updated>
    
    <content type="html"><![CDATA[<h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><ul><li>时间复杂度: 一个算法执行所耗费的时间。<blockquote><p>一个算法花费的时间与算法中语句的执行次数成正比例,一个算法中的语句执行次数称为语句频度或时间频度。记为T(n)。<br>n称为问题的规模，当n不断变化时，时间频度T(n)也会不断变化，要知道变化时呈现什么规律就引入了时间复杂度概念<br>算法中基本操作重复执行的次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n),使得当n趋近于无穷大时，T（n)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作T(n)=Ｏ(f(n)),称Ｏ(f(n)) 为算法的渐进时间复杂度，简称时间复杂度。</p></blockquote></li><li>空间复杂度: 运行完一个程序所需内存的大小。<blockquote><p>一个算法所需的存储空间用f(n)表示。S(n)=O(f(n))　　其中n为问题的规模，S(n)表示空间复杂度。</p></blockquote></li><li>内排序：所有排序操作都在内存中完成； 外排序：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</li><li>稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面； 不稳定：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面；<br><img src="/static/img/big-o-graph.png" alt="复杂度"></li></ul><p><a href="https://liuchuanliang.com/time-and-space-complexity/" target="_blank" rel="noopener">更多信息</a></p><hr><h3 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h3><ul><li>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素(自己不能跟自己加起来等于target)。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure><p>解答：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; target</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 方法一  嵌套循环  时间复杂度：O(n^2) 空间：O(2)</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> [i,k] <span class="keyword">of</span> nums.entries())&#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">let</span> j = i+<span class="number">1</span>; j&lt; nums.length; j++) &#123;</span><br><span class="line">              <span class="keyword">if</span>(  (target - k) === nums[j]) &#123;</span><br><span class="line">               <span class="keyword">return</span>  [i,j];</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 方法二 嵌套循环 比 方法一 更快 </span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> len = nums.length;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> j = i+<span class="number">1</span>; j&lt;len; j++) &#123;</span><br><span class="line">                   <span class="keyword">if</span>( (target - nums[i]) === nums[j]) &#123;</span><br><span class="line">                   <span class="keyword">return</span>  [i,j];</span><br><span class="line">                 &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 方法三 has表   时间复杂度：O(n) 空间：O(n)</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存储对应的值 和 索引 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">      <span class="keyword">const</span> len = nums.length；</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++ ) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(m.has(nums[i]) &amp;&amp; m.get(nums[i]) !== i)&#123;</span><br><span class="line">            <span class="keyword">return</span> [m.get(nums[i]),i]</span><br><span class="line">        &#125;</span><br><span class="line">            m.set((target - nums[i]),i); </span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">      <span class="keyword">const</span> len = nums.length；</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++ ) &#123;</span><br><span class="line">        <span class="keyword">let</span>  res = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span>(m.has(res) &amp;&amp; m.get(res) !== i)&#123;</span><br><span class="line">            <span class="keyword">return</span> [m.get(res),i]</span><br><span class="line">        &#125;</span><br><span class="line">            m.set(nums[i],i); </span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="整数反转"><a href="#整数反转" class="headerlink" title="整数反转"></a>整数反转</h3><ul><li>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。<blockquote><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; x</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverse = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">let</span> res =( x+<span class="string">''</span> ).split(<span class="string">""</span>);</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(res[<span class="number">0</span>] !== <span class="string">'-'</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> num = <span class="built_in">parseInt</span>(res.reverse().join(<span class="string">''</span>),<span class="number">10</span>);</span><br><span class="line">         <span class="keyword">if</span>( num&gt; <span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">31</span>) <span class="number">-1</span>)&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">         &#125;</span><br><span class="line">       <span class="keyword">return</span> num; </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.reverse().pop();</span><br><span class="line">      <span class="keyword">let</span> num = <span class="built_in">parseInt</span>(res.join(<span class="string">''</span>),<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span>( num&gt; <span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">31</span>) <span class="number">-1</span>)&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">'-'</span> + num; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h3><ul><li><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数 。</p><blockquote><p>输入: 121 输出: true<br>输入: -121 输出: false  解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。<br>输入: 10  输出: false  解释: 从右向左读, 为 01 。因此它不是一个回文数。<br>注意 0 是回文数</p></blockquote></li><li><p>进阶: 不将整数转为字符串来解决这个问题 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; x</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">// 方法 一 转化未字符串</span></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span>  x &lt; <span class="number">0</span>? <span class="literal">false</span>: (<span class="built_in">parseInt</span>((x+<span class="string">''</span>).split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)) === x ? <span class="literal">true</span> : <span class="literal">false</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法二  中间数的右边反转后 等于 左边 </span></span><br><span class="line"><span class="comment"> * 提取中间数的右边 通过 *10 、 %10 来提取   </span></span><br><span class="line"><span class="comment"> * */</span> </span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">int</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(int &lt; <span class="number">0</span> ||  (int%<span class="number">10</span> === <span class="number">0</span> &amp;&amp; int !== <span class="number">0</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (int &gt; num )&#123;</span><br><span class="line">        num = num * <span class="number">10</span> + int % <span class="number">10</span>;</span><br><span class="line">        int = <span class="built_in">parseInt</span>(int/<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  int === num || int === <span class="built_in">parseInt</span>(num/<span class="number">10</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;术语&quot;&gt;&lt;a href=&quot;#术语&quot; class=&quot;headerlink&quot; title=&quot;术语&quot;&gt;&lt;/a&gt;术语&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;时间复杂度: 一个算法执行所耗费的时间。&lt;blockquote&gt;
&lt;p&gt;一个算法花费的时间与算法中语句的执行次数成正比例,一个算
      
    
    </summary>
    
      <category term="algorithm" scheme="https://owen027.github.io/categories/algorithm/"/>
    
    
      <category term="Sum of two numbers" scheme="https://owen027.github.io/tags/Sum-of-two-numbers/"/>
    
  </entry>
  
  <entry>
    <title>Axios</title>
    <link href="https://owen027.github.io/2019/04/17/axios/"/>
    <id>https://owen027.github.io/2019/04/17/axios/</id>
    <published>2019-04-17T12:40:28.000Z</published>
    <updated>2019-05-04T14:54:07.929Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原生ajax"><a href="#原生ajax" class="headerlink" title="原生ajax"></a>原生ajax</h3><h4 id="XMLHttpRequest-对象"><a href="#XMLHttpRequest-对象" class="headerlink" title="XMLHttpRequest 对象"></a><code>XMLHttpRequest</code> 对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ajax</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.url = obj.url ||<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">this</span>.type = obj.type || <span class="string">'get'</span>;</span><br><span class="line">    <span class="keyword">this</span>.data = obj.data ||&#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.success = obj.success || <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.error = obj.error || <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Ajax.prototype.send = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span>  toStr = <span class="built_in">Object</span>.prototype.toString; </span><br><span class="line">    <span class="keyword">if</span> (self.data === <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> self.data !== <span class="string">'object'</span> &amp;&amp; <span class="built_in">Array</span>.isArray(obj)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 实例化 XML对象</span></span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            <span class="keyword">var</span> data = <span class="string">''</span>;</span><br><span class="line">            <span class="comment">// 序列化参数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> self.data)&#123;</span><br><span class="line">                    data += k + <span class="string">'='</span> + self.data[k] + <span class="string">'&amp;'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            data = data.substr(<span class="number">0</span>,data.length - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 接收回调函数             </span></span><br><span class="line">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span> || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">                        isFunction(self.success)  &amp;&amp;  self.success(xhr.responseText)</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        isFunction(self.error)  &amp;&amp; self.error(xhr)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 初始化请求</span></span><br><span class="line">            <span class="keyword">if</span>(self.type.toLocaleLowerCase() === <span class="string">'post'</span>)&#123;</span><br><span class="line">                    xhr.open (<span class="string">'post'</span>,self.url,<span class="literal">true</span>)</span><br><span class="line">                    <span class="comment">// 设置请求头</span></span><br><span class="line">                    xhr.setRequestHeader(<span class="string">'Content-Type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">                    <span class="comment">//发送请求</span></span><br><span class="line">                    xhr.send(data)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    xhr.open(<span class="string">'get'</span>, self.url + <span class="string">"?"</span> + data,<span class="literal">true</span>)</span><br><span class="line">                    xhr.send(<span class="literal">null</span>)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> toStr.call(obj) === <span class="string">"[object Function]"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ajax = <span class="keyword">new</span> Ajax(&#123;</span><br><span class="line">     type:<span class="string">'post'</span>,</span><br><span class="line">     url:<span class="string">"/login"</span>,</span><br><span class="line">     data:&#123; </span><br><span class="line">         loginname:<span class="string">"admin"</span>,</span><br><span class="line">         password:<span class="string">"admin"</span> </span><br><span class="line">        &#125;,</span><br><span class="line">      success:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(e)</span><br><span class="line">            &#125;, </span><br><span class="line">       error:<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(err)</span><br><span class="line">              &#125;,</span><br><span class="line">        &#125;).send();</span><br></pre></td></tr></table></figure><h4 id="XMLHttpRequest-Level-2-相比于-老版本的-XMLHttpRequest-新增以下内容："><a href="#XMLHttpRequest-Level-2-相比于-老版本的-XMLHttpRequest-新增以下内容：" class="headerlink" title="XMLHttpRequest Level 2 相比于 老版本的 XMLHttpRequest 新增以下内容："></a><code>XMLHttpRequest Level 2</code> 相比于 老版本的 <code>XMLHttpRequest</code> 新增以下内容：</h4><h5 id="可以设置-HTTP-请求超时时间"><a href="#可以设置-HTTP-请求超时时间" class="headerlink" title="可以设置 HTTP 请求超时时间"></a>可以设置 HTTP 请求超时时间</h5>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'GET'</span>.<span class="string">'url'</span>);</span><br><span class="line"><span class="comment">// 超时 2s</span></span><br><span class="line">xhr.timeout = <span class="number">2000</span>;</span><br><span class="line"><span class="comment">// 超时处理</span></span><br><span class="line">xhr.ontimeout = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;</span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure><h5 id="可以通过-FormData-发送表单数据"><a href="#可以通过-FormData-发送表单数据" class="headerlink" title="可以通过 FormData 发送表单数据"></a>可以通过 <code>FormData</code> 发送表单数据</h5>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 实例化 FormData</span></span><br><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line"> <span class="comment">// 添加数据</span></span><br><span class="line"> formData.append(key,value);</span><br><span class="line"></span><br><span class="line"> xhr.open(<span class="string">'POST'</span>,<span class="string">'url'</span>);</span><br><span class="line"> xhr.send(formData);</span><br></pre></td></tr></table></figure><h5 id="可以上传文件"><a href="#可以上传文件" class="headerlink" title="可以上传文件"></a>可以上传文件</h5><ul><li><code>FormData</code> 除了可以添加字符串数据，也可以添加 <code>blob、file</code> 类型的数据，因此可以用于上传文件。</li><li><p>在浏览器中，一般是通过文件上传输入框来获取 file 对象，比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">'uploadFile'</span> <span class="attr">id</span>=<span class="string">"upload-file"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'upload-file'</span>)</span><br><span class="line">        .addEventListener(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">            <span class="comment">// 获取数据</span></span><br><span class="line">              formData.append(<span class="string">'uploadFile'</span>, <span class="keyword">this</span>.files[<span class="number">0</span>])</span><br><span class="line">               xhr.send(formData)</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="支持跨域请求"><a href="#支持跨域请求" class="headerlink" title="支持跨域请求"></a>支持跨域请求</h5><ul><li>浏览器默认是不允许跨域请求的，有时候又是必要的，在以前通常使用<a href="https://baike.baidu.com/item/JSONP" target="_blank" rel="noopener"><code>JSONP</code></a>来解决（IE10 以下不支持）</li><li>为了标准化跨域请求， W3C提出 <a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享</a>（CORS）前端无须修改代码，只需 服务器返回 <code>Access-Control-Allow-Origin</code> 响应头，指定允许对应的域</li><li><code>CORS</code> 默认不发送 <code>cookie</code> 如果需要发送，前端需要设置 <code>withCredentials</code>属性，同时服务器需要 返回 <code>Access-Control-Allow-Credentials: true</code>,<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></li></ul><h5 id="可以获取服务端二进制数据"><a href="#可以获取服务端二进制数据" class="headerlink" title="可以获取服务端二进制数据"></a>可以获取服务端二进制数据</h5><ol><li>使用 <code>overrideMimeType</code> 方法覆写服务器指定的 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="noopener"><code>MIME</code></a> 类型，从而改变浏览器解析数据的方式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数 MIME 类型</span></span><br><span class="line"><span class="comment">// 告诉浏览器，服务器响应的内容是用户自定义的字符集 </span></span><br><span class="line">xhr.overrideMimeType(<span class="string">'text/plain; charset=x-user-defined'</span>);</span><br><span class="line"><span class="comment">// 浏览器就会将服务器返回的二进制数据当成文本处理，我们需要做进一步的转换才能拿到真实的数据</span></span><br><span class="line">  <span class="comment">// 获取二进制数据的第 i 位的值</span></span><br><span class="line">  <span class="keyword">var</span> byte = xhr.responseText.charCodeAt(i) &amp; <span class="number">0xff</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>“&amp; 0xff” 运算 参考 <a href="http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html" target="_blank" rel="noopener">阮一峰的文章</a></li></ul><ol start="2"><li>xhr.responseType 用于设置服务器返回的数据的类型,将<code>返回类型设置为 blob 或者 arraybuffer</code>，然后就可以从 <code>xhr.response</code> 属性获取到对应类型的服务器返回数据。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xhr.responseType = <span class="string">'arraybuffer'</span></span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> arrayBuffer = xhr.response</span><br><span class="line"><span class="comment">// 接下来对 arrayBuffer 做进一步处理...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="可以获取数据传输进度信息-参考资料"><a href="#可以获取数据传输进度信息-参考资料" class="headerlink" title="可以获取数据传输进度信息 参考资料"></a>可以获取数据传输进度信息 <a href="https://dev.opera.com/articles/xhr2/" target="_blank" rel="noopener">参考资料</a></h5><ul><li><p>使用  onload 监听了一个数据传输完成的事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上传进度监听</span></span><br><span class="line">xhr.upload.addEventListener(<span class="string">'progress'</span>, onProgressHandler, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传输成功完成</span></span><br><span class="line">xhr.upload.addEventListener(<span class="string">'load'</span>, onLoadHandler, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 传输失败信息</span></span><br><span class="line">xhr.upload.addEventListener(<span class="string">'error'</span>, onErrorHandler, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p><a href="http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html" target="_blank" rel="noopener">更多资料参考 阮一峰的文章</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;原生ajax&quot;&gt;&lt;a href=&quot;#原生ajax&quot; class=&quot;headerlink&quot; title=&quot;原生ajax&quot;&gt;&lt;/a&gt;原生ajax&lt;/h3&gt;&lt;h4 id=&quot;XMLHttpRequest-对象&quot;&gt;&lt;a href=&quot;#XMLHttpRequest-对象&quot; c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>class</title>
    <link href="https://owen027.github.io/2019/04/17/class/"/>
    <id>https://owen027.github.io/2019/04/17/class/</id>
    <published>2019-04-17T10:32:50.000Z</published>
    <updated>2019-04-21T15:59:13.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><ul><li>生成类的实例对象的写法，与 ES5 完全一样，也是使用new命令</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">var</span> point = Point(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">var</span> point = <span class="keyword">new</span> Point(<span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>实例的属性除非显式定义在其本身（即定义在this对象上）， 否则都是定义在原型上（即定义在class上）。 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> point = <span class="keyword">new</span> Point(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">point.toString() <span class="comment">// (2, 3)</span></span><br><span class="line"></span><br><span class="line">point.hasOwnProperty(<span class="string">'x'</span>) <span class="comment">// true</span></span><br><span class="line">point.hasOwnProperty(<span class="string">'y'</span>) <span class="comment">// true</span></span><br><span class="line">point.hasOwnProperty(<span class="string">'toString'</span>) <span class="comment">// false</span></span><br><span class="line">point.__proto__.hasOwnProperty(<span class="string">'toString'</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><label>与 ES5 一样，类的所有实例共享一个原型对象。</label></li><li><p>避免对环境产生依赖，生产环境中，我们可以使用 <code>Object.getPrototypeOf</code><br>方法来获取实例对象的原型，然后再来为原型添加方法/属性。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Point(<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">p1.__proto__.printName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'Oops'</span> &#125;;</span><br><span class="line"></span><br><span class="line">p1.printName() <span class="comment">// "Oops"</span></span><br><span class="line">p2.printName() <span class="comment">// "Oops"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> Point(<span class="number">4</span>,<span class="number">2</span>);</span><br><span class="line">p3.printName() <span class="comment">// "Oops"</span></span><br></pre></td></tr></table></figure><p>由于p1的原型就是p2的原型，因此p2也可以调用这个方法。 而且，此后新建的实例p3也可以调用这个方法。这意味着，使用实例的<code>__proto__</code>属性改写原型，必须相当谨慎，不推荐使用，因为这会改变“类”的原始定义，影响到所有实例。</p><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><ul><li>constructor方法是类的默认方法, <label>通过new命令生成对象实例时</label>，自动调用该方法。</li></ul><p>一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。<br>相当于es5 new Vue </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125; <span class="comment">//JavaScript 引擎会自动为它添加一个空的constructor方法。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">new</span> Point ()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>constructor方法默认返回实例对象（即this），完全可以指定返回另外一个对象。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Foo() <span class="keyword">instanceof</span> Foo</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><label>类必须使用new调用</label>，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用new也可以执行。</p><h3 id="表达式定义"><a href="#表达式定义" class="headerlink" title="表达式定义"></a>表达式定义</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyClass = <span class="class"><span class="keyword">class</span> <span class="title">Me</span> </span>&#123;</span><br><span class="line">  getClassName() &#123;</span><br><span class="line">    <span class="keyword">return</span> Me.name;</span><br><span class="line">    <span class="comment">//这个类的名字是MyClass而不是Me，Me只在 Class 的内部代码可用，指代当前类。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//内部没用到Me的话可以省略Me</span></span><br><span class="line"><span class="keyword">const</span> YouClass = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>采用 Class 表达式，可以写出立即执行的 Class。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sayName() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(<span class="string">'张三'</span>);</span><br><span class="line"></span><br><span class="line">person.sayName(); <span class="comment">// "张三"</span></span><br></pre></td></tr></table></figure><ul><li>不存在变量提升 （hoist），必须保证子类在父类之后定义 ，这一点与 ES5 完全不同。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Foo(); <span class="comment">// ReferenceError</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><p>继承类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let Foo = class &#123;&#125;;</span><br><span class="line">  class Bar extends Foo &#123;</span><br><span class="line">  //Bar继承Foo</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h3><p>私有方法是常见需求，但 ES6 不提供，只能通过变通方法模拟实现。<br>有三种方法可模拟</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 公有方法</span></span><br><span class="line">  foo (baz) &#123;</span><br><span class="line">    <span class="keyword">this</span>._bar(baz);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 私有方法</span></span><br><span class="line">  _bar(baz) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.snaf = baz;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// _bar方法前面的下划线，表示这是一个只限于内部使用的私有方法 但是，在类的外部，还是可以调用到这个方法。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> </span>&#123;</span><br><span class="line">  foo (baz) &#123;</span><br><span class="line">    bar.call(<span class="keyword">this</span>, baz);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 内部调用了bar.call(this, baz)，成为了当前模块的私有方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//私有方法移出模块</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">baz</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.snaf = baz;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="built_in">Symbol</span>(<span class="string">'bar'</span>);</span><br><span class="line"><span class="keyword">const</span> snaf = <span class="built_in">Symbol</span>(<span class="string">'snaf'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">myClass</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 公有方法</span></span><br><span class="line">  foo(baz) &#123;</span><br><span class="line">    <span class="keyword">this</span>[bar](baz);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 私有方法 </span></span><br><span class="line">  [bar](baz) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[snaf] = baz;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 利用Symbol值的唯一性，将私有方法的名字命名为一个Symbol值。</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="私有属性的提案"><a href="#私有属性的提案" class="headerlink" title="私有属性的提案"></a><strong>私有属性的提案</strong></h3><ul><li><p>方法是在属性名之前，使用#表示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  #x=0;// 私有属性可以指定初始值，在构造函数执行时进行初始化。</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(x = 0) &#123;</span><br><span class="line">    #x = +x; // 写成 this.#x 亦可</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get #x() &#123; return #x &#125;</span><br><span class="line">  set #x(value) &#123; #x = +value &#125;</span><br><span class="line">  #sum() &#123; return #a + #b; &#125;  //私有方法</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//  #x是一个私有属性，它的读写都通过get #x()和set #x()来完成。 #x和x是两个不同的属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//JavaScript 是一门动态语言，没有类型声明，使用独立的符号似乎是唯一的比较方便可靠的方法，能够准确地区分一种属性是否为私有属性。@已经留给了 Decorator。</span></span><br></pre></td></tr></table></figure></li><li><p>私有属性不限于从this引用，类的实例也可以引用私有属性  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  #privateValue = 42;</span><br><span class="line">  <span class="keyword">static</span> getPrivateValue(foo) &#123;</span><br><span class="line">    return foo.#privateValue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.getPrivateValue(<span class="keyword">new</span> Foo()); <span class="comment">// 42</span></span><br><span class="line">console.log(Foo.#privateValue) // 报错</span><br></pre></td></tr></table></figure></li></ul><h4 id="class-的取值函数（getter）和存值函数（setter）"><a href="#class-的取值函数（getter）和存值函数（setter）" class="headerlink" title="class 的取值函数（getter）和存值函数（setter）"></a>class 的取值函数（getter）和存值函数（setter）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> prop() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'getter'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> prop(value) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setter: '</span>+value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> inst = <span class="keyword">new</span> MyClass();</span><br><span class="line"></span><br><span class="line">inst.prop = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// setter: 123</span></span><br><span class="line"></span><br><span class="line">inst.prop</span><br><span class="line"><span class="comment">// 'getter'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;class&quot;&gt;&lt;a href=&quot;#class&quot; class=&quot;headerlink&quot; title=&quot;class&quot;&gt;&lt;/a&gt;class&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;生成类的实例对象的写法，与 ES5 完全一样，也是使用new命令&lt;/li&gt;
&lt;/ul&gt;
&lt;figure 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JSquestion</title>
    <link href="https://owen027.github.io/2019/04/10/JSquestion/"/>
    <id>https://owen027.github.io/2019/04/10/JSquestion/</id>
    <published>2019-04-10T02:39:57.000Z</published>
    <updated>2019-04-21T15:59:13.595Z</updated>
    
    <content type="html"><![CDATA[<h4 id="赋值运算符多次出现，优先计算问题-结合性"><a href="#赋值运算符多次出现，优先计算问题-结合性" class="headerlink" title="赋值运算符多次出现，优先计算问题(结合性)"></a>赋值运算符多次出现，优先计算问题(结合性)</h4><blockquote><p>赋值表达式为右结合<br>先从左到右解析各个引用，然后计算最右侧的表达式的值，最后把值从右到左赋给各个引用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">a = b = c = v</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">先解析 左侧的操作数</span></span><br><span class="line"><span class="comment">1. refa</span></span><br><span class="line"><span class="comment">2. refb</span></span><br><span class="line"><span class="comment">3. refc</span></span><br><span class="line"><span class="comment">4. value v</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">refa = (refb = (refc = value v))</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 再计算右侧表达式的值 然后和从右到左赋值</span></span><br><span class="line"><span class="comment">1. value v 赋值 refc</span></span><br><span class="line"><span class="comment">2. value v 赋值 refb</span></span><br><span class="line"><span class="comment">3. calue v 赋值 refa</span></span><br><span class="line"><span class="comment">4. 返回 value v</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//example</span></span><br><span class="line"><span class="keyword">var</span> foo = &#123;<span class="attr">n</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> bar = foo;</span><br><span class="line"></span><br><span class="line">foo.x = foo = &#123;<span class="attr">n</span>:<span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">变量名 存储在栈中， 引用对象存储在堆中</span></span><br><span class="line"><span class="comment">根据规则 先解析 =号左侧的引用 </span></span><br><span class="line"><span class="comment"> refx = (refo = &#123;n:2&#125;)</span></span><br><span class="line"><span class="comment">再赋值</span></span><br><span class="line"><span class="comment">refo = &#123;n:2&#125; //refo  开辟新指针 foo  指向 &#123;n:2&#125; </span></span><br><span class="line"><span class="comment">refx =  &#123;n:2&#125; // 在原refo指针对象中开辟新指针 指向 &#123;n:2&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">结果  refo.x == undefined</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">或者</span></span><br><span class="line"><span class="comment"> foo.x赋值前是&#123;n:1,x:unfiend&#125;;</span></span><br><span class="line"><span class="comment">赋值后&#123;n:1,x:&#123;n:2&#125;&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">foo.x <span class="comment">//undefined</span></span><br><span class="line">bar.x <span class="comment">// &#123;n: 1, x: &#123;n:2&#125;&#125;;</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="split"><a href="#split" class="headerlink" title="split"></a>split</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'81 newO'</span>.split(<span class="string">''</span>) <span class="comment">//["8", "1", " ", "n", "e", "w", "O"] </span></span><br><span class="line"></span><br><span class="line"><span class="string">'81 newO'</span>.split(<span class="string">' '</span>)<span class="comment">// ["81", "newO"]</span></span><br><span class="line"></span><br><span class="line"><span class="string">'81 newO'</span>.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line"><span class="comment">//"Owen 18"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;赋值运算符多次出现，优先计算问题-结合性&quot;&gt;&lt;a href=&quot;#赋值运算符多次出现，优先计算问题-结合性&quot; class=&quot;headerlink&quot; title=&quot;赋值运算符多次出现，优先计算问题(结合性)&quot;&gt;&lt;/a&gt;赋值运算符多次出现，优先计算问题(结合性)&lt;/h4
      
    
    </summary>
    
    
      <category term="JSquestion" scheme="https://owen027.github.io/tags/JSquestion/"/>
    
  </entry>
  
  <entry>
    <title>Interator</title>
    <link href="https://owen027.github.io/2019/04/04/Interator/"/>
    <id>https://owen027.github.io/2019/04/04/Interator/</id>
    <published>2019-04-04T11:32:22.000Z</published>
    <updated>2019-04-21T15:59:13.595Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Interator"><a href="#Interator" class="headerlink" title="Interator"></a>Interator</h2><blockquote><p>“集合”数据的结构主要有 <code>Array</code> 、<code>Object</code>、 <code>Set</code>  and <code>Map</code> ，任何数据结构只要部署 Iterator 接口，就可完成遍历操作</p></blockquote><p><strong>遍历过程：</strong> </p><ul><li>创建指针，指向当前数据结构起始位。（遍历对象本质是一个指针对象）。</li><li>依次循环调用指针对象的 <code>next</code>方法，对应指向数据结构成员，直至结束。<br><code>每次调用</code>next<code>方法，返回对象当前成员的信息</code>{value：text,done:true}<code>,其中</code>value<code>表示成员值，</code>done` 表示遍历是否结束</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'Owen'</span>,<span class="string">'18'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> makeInterator = <span class="function"><span class="params">array</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span>  index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">       next ()&#123;</span><br><span class="line">        <span class="keyword">return</span> index &lt; array.length ? </span><br><span class="line">        &#123;<span class="attr">value</span>:array[index++],<span class="attr">done</span>:<span class="literal">false</span>&#125; : </span><br><span class="line">        &#123;<span class="attr">value</span>:<span class="literal">undefined</span>, <span class="attr">done</span>:<span class="literal">true</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span>  inter = makeInterator(arr);</span><br><span class="line">inter.next()</span><br><span class="line">it.next() <span class="comment">// &#123; value: "Owen", done: false &#125;</span></span><br><span class="line">it.next() <span class="comment">// &#123; value: 18, done: false &#125;</span></span><br><span class="line">it.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><p>对与遍历器对象来说 <code>done: false</code> and <code>value:undefined</code> 可省略</p><p>原生具备 Iterator 的数据结构：<code>Array</code> 、 <code>String</code> 、 <code>Map</code>、 <code>Set</code> 、<code>arguments</code> and <code>NodeList</code></p><blockquote><p>都默认部署 <code>[Symbol.iterator]</code> 方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator] : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      next: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          value: <span class="number">1</span>,</span><br><span class="line">          done: <span class="literal">true</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj[<span class="built_in">Symbol</span>.iterator]().next() <span class="comment">//&#123;value: 1, done: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">let</span> iter = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"></span><br><span class="line">iter.next() <span class="comment">// &#123; value: 'a', done: false &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: 'b', done: false &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: 'c', done: false &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>对象（Object）之所以没有默认部署 Iterator 接口，是因为对象的哪个属性先遍历，哪个属性后遍历是不确定的，需要开发者手动指定。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//原型上部署Interator</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RangeIterator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(start, stop) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value = start;</span><br><span class="line">    <span class="keyword">this</span>.stop = stop;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]() &#123; <span class="keyword">return</span> <span class="keyword">this</span>; &#125;</span><br><span class="line"></span><br><span class="line">  next() &#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="keyword">this</span>.value;</span><br><span class="line">    <span class="keyword">if</span> (value &lt; <span class="keyword">this</span>.stop) &#123;</span><br><span class="line">      <span class="keyword">this</span>.value++;</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: value&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">true</span>, <span class="attr">value</span>: <span class="literal">undefined</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">range</span>(<span class="params">start, stop</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> RangeIterator(start, stop);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> range(<span class="number">0</span>, <span class="number">3</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value); <span class="comment">// 0, 1, 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象上部署Interator</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Obj</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.value = value;</span><br><span class="line">  <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Obj.prototype[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> iterator = &#123; <span class="attr">next</span>: next &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> current = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (current) &#123;</span><br><span class="line">      <span class="keyword">var</span> value = current.value;</span><br><span class="line">      current = current.next;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: value &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> iterator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> one = <span class="keyword">new</span> Obj(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> two = <span class="keyword">new</span> Obj(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> three = <span class="keyword">new</span> Obj(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">one.next = two;</span><br><span class="line">two.next = three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">of</span> one)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i); <span class="comment">// 1, 2, 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="类似数组对象，可引用-Array-prototype-Symbol-iterator"><a href="#类似数组对象，可引用-Array-prototype-Symbol-iterator" class="headerlink" title="类似数组对象，可引用 Array.prototype[Symbol.iterator]"></a>类似数组对象，可引用 <code>Array.prototype[Symbol.iterator]</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//NodeList</span></span><br><span class="line">NodeList.prototype[<span class="built_in">Symbol</span>.iterator] = <span class="built_in">Array</span>.prototype[<span class="built_in">Symbol</span>.iterator];</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">NodeList.prototype[<span class="built_in">Symbol</span>.iterator] = [][<span class="built_in">Symbol</span>.iterator];</span><br><span class="line"></span><br><span class="line">[...document.querySelectorAll(<span class="string">'div'</span>)] </span><br><span class="line"></span><br><span class="line"><span class="comment">//obj</span></span><br><span class="line"><span class="keyword">let</span> iterable = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'a'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'c'</span>,</span><br><span class="line">  length: <span class="number">3</span>,</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]: <span class="built_in">Array</span>.prototype[<span class="built_in">Symbol</span>.iterator]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item); <span class="comment">// 'a', 'b', 'c'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一些-默认调用-Iterator-的操作"><a href="#一些-默认调用-Iterator-的操作" class="headerlink" title="一些 默认调用 Iterator 的操作"></a>一些 默认调用 Iterator 的操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 解构赋值</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set().add('a').add('b').add('c');</span><br><span class="line"></span><br><span class="line">let [x,y] = <span class="keyword">set</span>; // x='a'; y='b'</span><br><span class="line"></span><br><span class="line">let [first, ...rest] = <span class="keyword">set</span>; // first='a'; rest=['b','c'];</span><br><span class="line"></span><br><span class="line">//扩展运算符</span><br><span class="line"></span><br><span class="line">var str = 'hello';</span><br><span class="line">[...str] //  ['h','e','l','l','o']</span><br><span class="line"></span><br><span class="line">let arr = ['b', 'c'];</span><br><span class="line">['a', ...arr, 'd']  // ['a', 'b', 'c', 'd']</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//yield*后面跟的是一个可遍历的结构，它会调用该结构的遍历器接口。</span><br><span class="line"></span><br><span class="line">let generator = function* () &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span>* [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iterator = generator();</span><br><span class="line"></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: 3, done: false &#125;</span></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: 4, done: false &#125;</span></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: 5, done: false &#125;</span></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for...of</span></span><br><span class="line"><span class="comment">//for...of循环可以使用的范围包括数组、Set 和 Map 结构、某些类似数组的对象（比如arguments对象、DOM NodeList 对象）、 Generator 对象，以及字符串。</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="built_in">document</span>.querySelectorAll(<span class="string">"p"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr ) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 其他操作*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from()</span><br><span class="line"><span class="built_in">Map</span>(), <span class="built_in">Set</span>(), <span class="built_in">WeakMap</span>(), <span class="built_in">WeakSet</span>() <span class="comment">//生成对应数据结构</span></span><br><span class="line"><span class="built_in">Promise</span>.all()</span><br><span class="line"><span class="built_in">Promise</span>.race()</span><br></pre></td></tr></table></figure><h3 id="遍历器return方法和throw方法"><a href="#遍历器return方法和throw方法" class="headerlink" title="遍历器return方法和throw方法"></a>遍历器return方法和throw方法</h3><h4 id="return"><a href="#return" class="headerlink" title="return()"></a>return()</h4><blockquote><p>return方法必须返回一个对象。<br>如果一个对象在完成遍历前，需要清理或释放资源，就可以部署return方法。<br>如果for…of循环提前退出（通常是因为出错，或者有break语句），就会调用return方法。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                next() &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">done</span>:<span class="literal">false</span>&#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="keyword">return</span>()&#123;</span><br><span class="line">                    file.close()</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">done</span>:<span class="literal">true</span>&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//触发 return()</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> line <span class="keyword">of</span> readFile(fileName)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(line);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//触发 return()</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> line <span class="keyword">of</span> readLinesSync(fileName)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(line);</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for…of-和其他遍历语法对比"><a href="#for…of-和其他遍历语法对比" class="headerlink" title="for…of 和其他遍历语法对比"></a>for…of 和其他遍历语法对比</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="comment">//普通 `for`循环</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt;arr.length; index++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[index]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 书写比较麻烦</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.forEach </span></span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 无法跳出循环，无法使用 break or return </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for...in</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[index]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.数组键名为字符串形式的数字</span></span><br><span class="line"><span class="comment"> * 2.会遍历出原型链上的键，和手动添加的键</span></span><br><span class="line"><span class="comment"> * 3.有些情况是无顺序遍历</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.语法简洁</span></span><br><span class="line"><span class="comment"> * 2.没有 for...in 的缺点</span></span><br><span class="line"><span class="comment"> * 3.可以使用 return、break and continue</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Interator&quot;&gt;&lt;a href=&quot;#Interator&quot; class=&quot;headerlink&quot; title=&quot;Interator&quot;&gt;&lt;/a&gt;Interator&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;“集合”数据的结构主要有 &lt;code&gt;Array&lt;/cod
      
    
    </summary>
    
      <category term="ES6" scheme="https://owen027.github.io/categories/ES6/"/>
    
    
      <category term="Interator" scheme="https://owen027.github.io/tags/Interator/"/>
    
  </entry>
  
  <entry>
    <title>Generator</title>
    <link href="https://owen027.github.io/2019/04/04/generator/"/>
    <id>https://owen027.github.io/2019/04/04/generator/</id>
    <published>2019-04-04T11:28:27.000Z</published>
    <updated>2019-04-21T15:59:13.599Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><blockquote><p> ES6 提供的一种异步编程解决方案<br>Generator 函数是一个状态机，封装了多个内部状态。还是一个遍历器对象生成函数。返回<label>遍历器对象</label>，可以依次遍历 Generator 函数内部的每一个状态。</p></blockquote><p>Generator 函数特征</p><ul><li><code>function</code>关键字和函数名之间 有 <code>*</code>  ES6 没有规定，function关键字与函数名之间的星号，写在哪个位置。</li><li>函数体内部有 <code>yield</code> 表达式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span>  <span class="string">'Owen'</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'end'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象 Iterator </span></span><br><span class="line"><span class="keyword">let</span> person = generator();</span><br><span class="line"></span><br><span class="line">person.next() <span class="comment">//&#123;value:'Owen',done:false&#125;</span></span><br><span class="line">person.next() <span class="comment">//&#123;value:18,done:false&#125;</span></span><br><span class="line">person.next() <span class="comment">//&#123;value:'end',done:true&#125;</span></span><br><span class="line">person.next() <span class="comment">//&#123;value:undefined,done:true&#125;</span></span><br><span class="line">person.next() <span class="comment">//&#123;value:undefined,done:true&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><blockquote><p>yield 后面的表达式以分号作为结束语句<br>一种可以暂停函数执行的表达式，配合 <code>next</code>方法使用。<br>只能再在 <code>Generator</code> 函数中使用，普通函数中使用会报错.<br><code>yield</code> 如果用<label>在另一个表达式中,必须用圆括号包起来</label>，作为函数参数或者赋值表达式右边可以不用加括号。</p></blockquote><p><code>next</code> 运行逻辑</p><ul><li>调用 <code>next</code> 遇到 <code>yield</code>表达式 暂停执行函数后面的操作，并且 <label> 紧跟 <code>yield</code> 后面的表达式的值</label>作为返回对象 <code>value</code> 属性的值。</li><li>再次调用 <code>next</code>,继续执行<code>yield</code>表达式 后面的逻辑代码，直到下一个 <code>yield</code>表达式 或者 <code>return</code> 语句，返回值为 对象 <code>value</code> 属性的值。</li><li>如果没有  <code>return</code> 语句 ，则  <code>value</code> 属性的值为 <code>undefined</code>。</li><li><label>只有调用<code>next</code>方法，才会执行对应 <code>yield</code> 后面的表达式</label><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">g</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span> + <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> num = g() </span><br><span class="line">num <span class="comment">//g &#123;&lt;suspended&gt;&#125;</span></span><br><span class="line">num.next() <span class="comment">//&#123;value:3,done:false&#125;</span></span><br><span class="line">num.next() <span class="comment">//&#123;value:undefined,done:true&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="使用-Interator"><a href="#使用-Interator" class="headerlink" title="使用 Interator"></a>使用 Interator</h3><blockquote><p>由于 <code>Generator</code> 函数是遍历器生成函数，因此 把它赋值给对象的 <code>[Symbol.interator]</code>属性，该对象就可以被遍历<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iter = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">iter[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[...iter] <span class="comment">//[1, 2, 3]</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="next-参数"><a href="#next-参数" class="headerlink" title="next 参数"></a>next 参数</h3><blockquote><p><code>yield</code> 本身的返回值为 undefined， 而 <code>next</code>方法可以带一个参数，当作<label>上一个 <code>yield</code>的返回值<label></label></label></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> g = fn();</span><br><span class="line"></span><br><span class="line"> g.next() <span class="comment">//&#123;value:0,done:false&#125;</span></span><br><span class="line"> g.next() <span class="comment">//&#123;value:1,done:false&#125;</span></span><br><span class="line"> g.next() <span class="comment">//&#123;value:2,done:false&#125;</span></span><br><span class="line"> g.next(<span class="number">1</span>) <span class="comment">//&#123;value:0,done:false&#125;</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span>* <span class="title">fn</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span>  i = <span class="number">0</span>; <span class="literal">true</span>; i++)&#123;</span><br><span class="line">         <span class="keyword">let</span> reset = <span class="keyword">yield</span> i;</span><br><span class="line">         <span class="keyword">if</span>(reset) i = <span class="number">-1</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">dataConsumer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Started'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`1. <span class="subst">$&#123;<span class="keyword">yield</span>&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`2. <span class="subst">$&#123;<span class="keyword">yield</span>&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'result'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> genObj = dataConsumer();</span><br><span class="line">genObj.next();</span><br><span class="line"><span class="comment">// Started</span></span><br><span class="line"><span class="comment">//&#123;value: "undefined", done: fales&#125;</span></span><br><span class="line">genObj.next(<span class="string">'a'</span>)</span><br><span class="line"><span class="comment">//1. a</span></span><br><span class="line"><span class="comment">//&#123;value: "undefined", done: fales&#125;</span></span><br><span class="line">genObj.next(<span class="string">'b'</span>)</span><br><span class="line"><span class="comment">//2. b</span></span><br><span class="line"><span class="comment">//&#123;value: "result", done: true&#125;</span></span><br></pre></td></tr></table></figure><h3 id="for…of-中使用-Generator"><a href="#for…of-中使用-Generator" class="headerlink" title="for…of 中使用 Generator"></a>for…of 中使用 Generator</h3><blockquote><p>可以不用调用 <code>next</code> 方法</p><p><label> 如果 返回对象 done属性值为 true， 循环终并且不包含该对象返回值；<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> fn())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">    <span class="comment">//1 2 3 4 5 undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//斐波那契数列</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fibonacci</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span>  [prev, curr] = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">      <span class="keyword">yield</span> curr;</span><br><span class="line">      [prev,curr] = [curr, prev + curr];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> f <span class="keyword">of</span> fibonacci()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (f &gt; <span class="number">1000</span>) <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历任意对象方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">objectEntries</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> propKeys = <span class="built_in">Reflect</span>.ownKeys(obj);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> propKeys)&#123;</span><br><span class="line">         <span class="keyword">yield</span> [key,obj[key]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>:<span class="string">'Owen'</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key,value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(person))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key,value);</span><br><span class="line">    <span class="comment">//name Owen</span></span><br><span class="line">    <span class="comment">// age 18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key,value] <span class="keyword">of</span> objectEntries(person))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key,value);</span><br><span class="line">     <span class="comment">//name Owen</span></span><br><span class="line">    <span class="comment">// age 18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"></span><br><span class="line">person[<span class="built_in">Symbol</span>.interator] = objectEntries</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key,value] <span class="keyword">of</span> person)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key,value);</span><br><span class="line">     <span class="comment">//name Owen</span></span><br><span class="line">    <span class="comment">// age 18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></label></p></blockquote><h3 id="Generator-throw"><a href="#Generator-throw" class="headerlink" title="Generator throw"></a>Generator throw</h3><blockquote><p>在函数体外抛出错误，再在 函数体内捕获。<br>throw方法抛出的错误要被内部捕获，前提是必须至少执行过一次next方法。因为只有执行一次 <code>next</code>方法，函数才开始执行。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;  <span class="keyword">yield</span>;  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'内部1'</span>,e )</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123; <span class="keyword">yield</span>; &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'内部2'</span>,e)</span><br><span class="line">    &#125;; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span>  t = g();</span><br><span class="line">t.next(); <span class="comment">//&#123;value: undefined, done: false&#125;</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    t.throw(<span class="string">'a'</span>);</span><br><span class="line">    t.throw(<span class="string">'b'</span>);</span><br><span class="line">    t.throw(<span class="string">'c'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'外部'</span>,e)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内部1 a</span></span><br><span class="line"><span class="comment">//内部2 b</span></span><br><span class="line"><span class="comment">//外部 c</span></span><br></pre></td></tr></table></figure><h3 id="Generator-return"><a href="#Generator-return" class="headerlink" title="Generator return"></a>Generator return</h3><blockquote><p>结束 Generator 函数 并且给定对象返回值<br>如果有 <code>try...finally</code>，且在执行中，return方法会等待<code>finally</code> 执行完毕，再执行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">g</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ge = g();</span><br><span class="line"></span><br><span class="line">ge.next(); <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">ge.return(<span class="string">'Owen'</span>); <span class="comment">// &#123; value:"Owen", done: true &#125;</span></span><br><span class="line">ge.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// try...finally</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">numbers</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">yield</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> nun = numbers();</span><br><span class="line">nun.next() <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">nun.next() <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line">nun.return(<span class="number">7</span>) <span class="comment">// &#123; value: 4, done: false &#125;</span></span><br><span class="line">nun.next() <span class="comment">// &#123; value: 5, done: false &#125;</span></span><br><span class="line">nun.next() <span class="comment">// &#123; value: 7, done: true &#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><p><strong>next()、throw()、return()</strong></p><blockquote><p>都是让 Generator 恢复执行，并且使用不同语句替换 <code>yield</code>  </p></blockquote><h3 id="yield-1"><a href="#yield-1" class="headerlink" title="yield*"></a>yield*</h3><blockquote><p>Generator 函数默认不在内部调用另一个 Generator 函数 是没有效果的，如果<label>放到 <code>yield</code> 后面 会返回一个遍历器对象</label><br><code>yield*</code> 后面的 <code>Generator</code> 函数（没有return语句时），等同于在 <code>Generator</code> 函数内部，部署一个 <code>for...of</code> 循环。<br>如果 <code>yield*</code> 后面紧跟数组，会遍历数组成员（数组原始支持遍历器）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">g</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'x'</span>;</span><br><span class="line">    f();</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'y'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span>  g())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key)</span><br><span class="line">    <span class="comment">//"x" "y"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//yield*</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">y</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'x'</span>;</span><br><span class="line">    <span class="keyword">yield</span>* f();</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'y'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">of</span> y()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(k);</span><br><span class="line">    <span class="comment">// "x" "y" 1 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无 return</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">concat</span>(<span class="params">iter1, iter2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span>* iter1;</span><br><span class="line">  <span class="keyword">yield</span>* iter2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">concat</span>(<span class="params">iter1, iter2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> iter1) &#123;</span><br><span class="line">    <span class="keyword">yield</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> iter2) &#123;</span><br><span class="line">    <span class="keyword">yield</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// yield* array 如果去掉 * 会返回整个数组</span></span><br><span class="line"><span class="comment">//任何数据结构只要有 Iterator 接口，就可以被yield*遍历。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">yield</span>* [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> g = gen();</span><br><span class="line"></span><br><span class="line">g.next() <span class="comment">//&#123;value: "a", done: false&#125;</span></span><br><span class="line">g.next() <span class="comment">//&#123;value: "b", done: false&#125;</span></span><br><span class="line">g.next() <span class="comment">//&#123;value: "c", done: false&#125;</span></span><br><span class="line">g.next() <span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//取出嵌套数组的所有成员</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">iterTree</span>(<span class="params">tree</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(tree))&#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">let</span> arr <span class="keyword">of</span> tree) &#123;</span><br><span class="line">             <span class="keyword">yield</span>* iterTree(arr)</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">yield</span> tree</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tree = [<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>],<span class="number">7</span>],<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> iterTree(tree))&#123;</span><br><span class="line"><span class="built_in">console</span>.log(v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1 2 3 4 5 6 7 8</span></span><br><span class="line"></span><br><span class="line">[...iterTree(tree)] <span class="comment">//[1, 2, 3, 4, 5, 6, 7, 8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历完全二叉树</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面是二叉树的构造函数，</span></span><br><span class="line"><span class="comment">// 三个参数分别是左树、当前节点和右树</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tree</span>(<span class="params">left, label, right</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.left = left;</span><br><span class="line">  <span class="keyword">this</span>.label = label;</span><br><span class="line">  <span class="keyword">this</span>.right = right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面是中序（inorder）遍历函数。</span></span><br><span class="line"><span class="comment">// 由于返回的是一个遍历器，所以要用generator函数。</span></span><br><span class="line"><span class="comment">// 函数体内采用递归算法，所以左树和右树要用yield*遍历</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">inorder</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (t) &#123;</span><br><span class="line">    <span class="keyword">yield</span>* inorder(t.left);</span><br><span class="line">    <span class="keyword">yield</span> t.label;</span><br><span class="line">    <span class="keyword">yield</span>* inorder(t.right);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面生成二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断是否为叶节点</span></span><br><span class="line">  <span class="keyword">if</span> (array.length == <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">new</span> Tree(<span class="literal">null</span>, array[<span class="number">0</span>], <span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Tree(make(array[<span class="number">0</span>]), array[<span class="number">1</span>], make(array[<span class="number">2</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tree = make([[[<span class="string">'a'</span>], <span class="string">'b'</span>, [<span class="string">'c'</span>]], <span class="string">'d'</span>, [[<span class="string">'e'</span>], <span class="string">'f'</span>, [<span class="string">'g'</span>]]]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历二叉树</span></span><br><span class="line"><span class="keyword">var</span> result = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> node <span class="keyword">of</span> inorder(tree)) &#123;</span><br><span class="line">  result.push(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result <span class="comment">// ['a', 'b', 'c', 'd', 'e', 'f', 'g']</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="对象属性中的-Generator-函数"><a href="#对象属性中的-Generator-函数" class="headerlink" title="对象属性中的 Generator 函数"></a>对象属性中的 Generator 函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    * generator()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    generator :<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Generator-函数的this"><a href="#Generator-函数的this" class="headerlink" title="Generator 函数的this"></a>Generator 函数的this</h3><blockquote><p>Generator 函数不能和 new 一起使用</p><p><label>函数总返回一个遍历器，并且它指向 函数实例，同时继承 函数原型对象上的方法</label><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">18</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Owen"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj =g() <span class="comment">//g &#123;&lt;suspended&gt;&#125;</span></span><br><span class="line">obj <span class="keyword">instanceof</span> g <span class="comment">//true</span></span><br><span class="line">obj.say() <span class="comment">//"Owen"</span></span><br><span class="line"></span><br><span class="line">obj.next() <span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br><span class="line">obj.say() <span class="comment">//"Owen"</span></span><br><span class="line"><span class="comment">//因为 next 返回的是遍历器对象而不是 this 对象,所以不会返回 18</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过call 绑定this</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">Gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">this</span>.name = <span class="string">"Owen"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = Gen.call(Gen.prototype);</span><br><span class="line">obj.next()</span><br><span class="line">obj.age <span class="comment">// 18</span></span><br><span class="line">obj.next();</span><br><span class="line">obj.name <span class="comment">//"Owen"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 new 的变通方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">G</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Gen.call(Gen.prototype)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="keyword">new</span> G();</span><br><span class="line">obj1.next()</span><br><span class="line">obj1.age <span class="comment">// 18</span></span><br><span class="line">obj1.next();</span><br><span class="line">obj1.name <span class="comment">//"Owen"</span></span><br></pre></td></tr></table></figure></p></blockquote><h2 id="Generator-函数异步应用"><a href="#Generator-函数异步应用" class="headerlink" title="Generator 函数异步应用"></a>Generator 函数异步应用</h2><blockquote><p>异步: 执行一个任务的时候还不能马上返回结果，那么先将其搁置到后台，执行其他任务，等到有结果返回之后放到消息队列中，等主线程任务执行完毕后，再从消息队列中取出对应任务（callback），执行。<br>同步： 执行一个任务，中间无法中断，只能等待任务返回结果，才能执行其他任务。</p></blockquote><p>异步编程：</p><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url:&apos;url&apos;,</span><br><span class="line">  success:function(res)&#123;</span><br><span class="line">    console.log(res)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><blockquote><p>起初由网景公司知道一套事件驱动机制（事件捕获），之后IE 推出自己的驱动机制（事件冒泡）<br>利用驱动机制实现事件代理委托<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">el.addEventListener(event,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;,boolean);</span><br><span class="line"></span><br><span class="line"><span class="comment">//IE8 以下</span></span><br><span class="line">el.attachEvent(event,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//事件代理委托</span></span><br><span class="line"><span class="keyword">var</span> parent = <span class="built_in">document</span>.getElementById(<span class="string">'parent'</span>);</span><br><span class="line">parent.addEventListener(<span class="string">'click'</span>,showColor,<span class="literal">false</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showColor</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> son = e.target;</span><br><span class="line">        <span class="keyword">if</span>(son.nodeName.toLowerCase() === <span class="string">'li'</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'The color is '</span> + son.innerHTML);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="发布-订阅（观察者模式）"><a href="#发布-订阅（观察者模式）" class="headerlink" title="发布/订阅（观察者模式）"></a>发布/订阅（观察者模式）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现一个简单的发布订阅</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  订阅一个事件，发布对应事件并且执行方法</span></span><br><span class="line"><span class="comment">  需要先有代理主题 message proxy</span></span><br><span class="line"><span class="comment">  然后订阅者去订阅</span></span><br><span class="line"><span class="comment">  然后发布者发布消息执行方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">PubSub</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  <span class="comment">// message proxy</span></span><br><span class="line">  PubSub.prototype.message = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// publish</span></span><br><span class="line">  PubSub.prototype.pub = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="comment">// Turn arguments  into real array</span></span><br><span class="line">    <span class="keyword">let</span> args = [].slice.call(<span class="built_in">arguments</span>,<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> event = args.shift();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.message[event]) <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> list = <span class="keyword">this</span>.message[event];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span>  list) &#123;</span><br><span class="line">       item.apply(<span class="keyword">this</span>,args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// subscribe</span></span><br><span class="line">  PubSub.prototype.sub = <span class="function"><span class="keyword">function</span> (<span class="params">event,callback</span>)</span>&#123;      </span><br><span class="line">    <span class="keyword">if</span>( !<span class="keyword">this</span>.message[event]) &#123;</span><br><span class="line">        <span class="keyword">this</span>.message[event] = [];</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.message[event].push(callback);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="comment">// unsubscribe</span></span><br><span class="line">  PubSub.prototype.unsub = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (!<span class="keyword">this</span>.message[event]) <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">this</span>.message[event] = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Promise-对象"><a href="#Promise-对象" class="headerlink" title="Promise 对象"></a>Promise 对象</h3><blockquote><p>为了解决 “回调地狱”（callback hell）而提出的写法<br>允许将 <code>callback</code> 变成链式调用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// read I/O</span></span><br><span class="line"><span class="keyword">let</span> readFile = <span class="built_in">require</span>(<span class="string">'fs-readfile-promise'</span>);</span><br><span class="line"></span><br><span class="line">readFile(fileA)</span><br><span class="line">    .then( <span class="function">(<span class="params">data</span>) =&gt;</span> <span class="built_in">console</span>.log(data.toString()))</span><br><span class="line">    .then( <span class="function"><span class="params">()</span> =&gt;</span>   readFile(fileB))</span><br><span class="line">    .then( <span class="function">(<span class="params">data</span>) =&gt;</span> <span class="built_in">console</span>.log(data.toString()))</span><br><span class="line">    .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(err));</span><br></pre></td></tr></table></figure></p></blockquote><p>Promise 的最大问题是代码冗余，原来的任务被 Promise 包装了一下，不管什么操作，一眼看去都是一堆then，原来的语义变得很不清楚。</p><h3 id="Generator-函数（es6）"><a href="#Generator-函数（es6）" class="headerlink" title="Generator 函数（es6）"></a>Generator 函数（es6）</h3><h4 id="协程"><a href="#协程" class="headerlink" title="协程"></a><strong>协程</strong></h4><blockquote><p>多个线程相互协作，完成异步任务<br>步骤</p><ul><li>A方法开始任务</li><li>A方法执行到一半，暂停，将执行权转移到主线程</li><li>一段时间后主线程交还执行权</li><li>A方法恢复执行</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//example</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">async</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//... do something</span></span><br><span class="line">  <span class="keyword">let</span> file = <span class="keyword">yield</span> readFile(fileA);</span><br><span class="line">  <span class="comment">//... do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//异步操作需要暂停的地方，都用yield语句注明。</span></span><br></pre></td></tr></table></figure><label> 协程代码的写法非常像同步操作，Generator 函数最大优点是可以交出函数执行权</label><p>函数通过<code>next</code> 进行数据交换，通过 <code>throw</code>进行错误处理<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">async</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> n;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">     n =  <span class="keyword">yield</span> ++num;</span><br><span class="line">  &#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> g = <span class="keyword">async</span>(<span class="number">1</span>);</span><br><span class="line">g.next()</span><br><span class="line">g.throw(<span class="string">'error'</span>);</span><br></pre></td></tr></table></figure></p><h4 id="封装异步任务"><a href="#封装异步任务" class="headerlink" title="封装异步任务"></a>封装异步任务</h4><p>使用<code>node-fetch</code> 模块 返回一个Promise 对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> fetch = <span class="built_in">require</span>(<span class="string">'node-fetch'</span>);</span><br><span class="line"><span class="keyword">let</span> g = gen();</span><br><span class="line"><span class="keyword">let</span> result = g.next();</span><br><span class="line"></span><br><span class="line">result.value.then(<span class="function">(<span class="params">data</span>) =&gt;</span> data.json())</span><br><span class="line">            .then(<span class="function">(<span class="params">data</span>) =&gt;</span> g.next(data) );</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> url = <span class="string">'/index.json'</span>;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">yield</span> fetch(url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Thunk-形实转换"><a href="#Thunk-形实转换" class="headerlink" title="Thunk (形实转换)"></a>Thunk (形实转换)</h4><p><strong>函数传值策略</strong></p><ul><li>传值调用（参数在传入函数前计算）,简单易懂，不过可能会造成性能损失</li><li>传名调用（将参数放到一个临时函数，再将这个临时函数传入函数体（<code>Thunk</code> 函数)）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传值</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">x,b</span>) </span>&#123; <span class="keyword">return</span> x * <span class="number">3</span> &#125;;</span><br><span class="line">fn(x + <span class="number">1</span>) <span class="comment">//   4 * 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//传名</span></span><br><span class="line">fn(x + <span class="number">1</span>)  <span class="comment">//    (x + 1) * 3 </span></span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">var</span> thunk = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123; <span class="keyword">return</span> x + <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">fn (thunk) <span class="comment">// thunk() * 3</span></span><br></pre></td></tr></table></figure><h3 id="async-await（es7"><a href="#async-await（es7" class="headerlink" title="async/await（es7)"></a>async/await（es7)</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Generator&quot;&gt;&lt;a href=&quot;#Generator&quot; class=&quot;headerlink&quot; title=&quot;Generator&quot;&gt;&lt;/a&gt;Generator&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt; ES6 提供的一种异步编程解决方案&lt;br&gt;Generat
      
    
    </summary>
    
      <category term="ES6" scheme="https://owen027.github.io/categories/ES6/"/>
    
    
      <category term="async" scheme="https://owen027.github.io/tags/async/"/>
    
      <category term="Generator" scheme="https://owen027.github.io/tags/Generator/"/>
    
  </entry>
  
  <entry>
    <title>Reflect</title>
    <link href="https://owen027.github.io/2019/04/02/Reflect/"/>
    <id>https://owen027.github.io/2019/04/02/Reflect/</id>
    <published>2019-04-02T08:22:02.000Z</published>
    <updated>2019-04-21T15:59:13.596Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h2><blockquote><p>将<code>Object</code>对象中一些属于语言内部的方法，放到 <code>Reflect</code>对象中<br>会逐渐替换<code>Object</code>对象 中对应的方法<br>优化一些放法返回的结果<br>只要是 Proxy 对象的方法，就能在 Reflect 对象上找到对应的方法,不管 Proxy 怎么修改默认行为，你总可以在 Reflect 上获取默认行为。</p></blockquote><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><blockquote><p>13 个静态方法  作用对应Object同名方法</p><label>所有方法第一个参数，必须是对象，否则报错</label></blockquote><h3 id="Reflect-apply-target-thisArg-args"><a href="#Reflect-apply-target-thisArg-args" class="headerlink" title="Reflect.apply(target, thisArg, args)"></a>Reflect.apply(target, thisArg, args)</h3><blockquote><p>等同于 <code>Function</code> 构造函数中的<code>Function.prototype.apply.call(func, thisArg, args)</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ages = [<span class="number">11</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">96</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">const</span> youngest = <span class="built_in">Math</span>.min.apply(<span class="built_in">Math</span>, ages);</span><br><span class="line"><span class="keyword">const</span> oldest = <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, ages);</span><br><span class="line"><span class="keyword">const</span> type = <span class="built_in">Object</span>.prototype.toString.call(youngest);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reflect</span></span><br><span class="line"><span class="keyword">const</span> youngest = <span class="built_in">Reflect</span>.apply(<span class="built_in">Math</span>.min, <span class="built_in">Math</span>, ages);</span><br><span class="line"><span class="keyword">const</span> oldest = <span class="built_in">Reflect</span>.apply(<span class="built_in">Math</span>.max, <span class="built_in">Math</span>, ages);</span><br><span class="line"><span class="keyword">const</span> type = <span class="built_in">Reflect</span>.apply(<span class="built_in">Object</span>.prototype.toString, youngest, []);</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-construct-target-args"><a href="#Reflect-construct-target-args" class="headerlink" title="Reflect.construct(target, args)"></a>Reflect.construct(target, args)</h3><blockquote><p>对应 <code>new target(...args)</code>  提供了一种不使用 new，来调用构造函数的方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greeting</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// new 的写法</span></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> Greeting(<span class="string">'Owen'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reflect.construct 的写法</span></span><br><span class="line"><span class="keyword">const</span> instance = <span class="built_in">Reflect</span>.construct(Greeting, [<span class="string">'Owen'</span>]);</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-get-target-name-receiver"><a href="#Reflect-get-target-name-receiver" class="headerlink" title="Reflect.get(target, name, receiver)"></a>Reflect.get(target, name, receiver)</h3><blockquote><p>查找目标对象属性值并返回<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name : <span class="string">'Owen'</span>,</span><br><span class="line">    age:<span class="number">18</span>,</span><br><span class="line">    <span class="keyword">get</span> baz()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="keyword">this</span>.age </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.get(obj,<span class="string">'name'</span>) <span class="comment">//'Owen'</span></span><br><span class="line"><span class="built_in">Reflect</span>.get(obj,<span class="string">'baz'</span>)  <span class="comment">//'Owen18'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// receiver 改变 get 函数 this 指向</span></span><br><span class="line"><span class="keyword">let</span> obj1 =&#123;</span><br><span class="line">     name : <span class="string">'Owen'</span>,</span><br><span class="line">    age:<span class="number">16</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Reflect</span>.get(obj,<span class="string">'baz'</span>,obj1) <span class="comment">//'Owen16</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-set-target-name-value-receiver"><a href="#Reflect-set-target-name-value-receiver" class="headerlink" title="Reflect.set(target, name, value, receiver)"></a>Reflect.set(target, name, value, receiver)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name : <span class="string">'Owen'</span>,</span><br><span class="line">    age:<span class="number">18</span>,</span><br><span class="line">    <span class="keyword">set</span> baz(val)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.age = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Reflect</span>.set(obj,<span class="string">'name'</span>,<span class="string">'wen'</span>) </span><br><span class="line">obj.name <span class="comment">//'wen'</span></span><br><span class="line"><span class="built_in">Reflect</span>.set(obj,<span class="string">'baz'</span>, <span class="number">16</span>)</span><br><span class="line">obj.age <span class="comment">// 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//receiver 改变 set this 指向</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  name: <span class="string">'wen'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Reflect</span>.set(obj,<span class="string">'baz'</span>, <span class="number">16</span>,obj1)</span><br><span class="line">obj.name <span class="comment">// wen</span></span><br></pre></td></tr></table></figure><blockquote><p>如果 <code>Proxy</code>和 <code>Reflect</code> 联合使用，<label>并且传入 <code>receiver</code> </label>， 那么 <code>Reflect.set</code> 会触发<code>Proxy.defineProperty</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> proxy = &#123;</span><br><span class="line">    name:<span class="string">'Owen'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">    <span class="keyword">set</span> (target, key, value, receiver)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'set'</span>)</span><br><span class="line">        Refelect.set(target, key, value, receiver)</span><br><span class="line">    &#125;,</span><br><span class="line">    defineProerty(target, key, attribute)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'defineProperty'</span>)</span><br><span class="line">        <span class="built_in">Reflect</span>.defineProperty(target, key, attribute)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(proxy,handler)</span><br><span class="line">obj.name = <span class="string">'wen'</span>;</span><br><span class="line"><span class="comment">// set</span></span><br><span class="line"><span class="comment">// defineProperty</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">因为Proxy.set的receiver参数总是指向当前的 Proxy实例（即上例的obj），</span></span><br><span class="line"><span class="comment">而Reflect.set一旦传入receiver，就会将属性赋值到receiver上面（即obj），导致触发defineProperty拦截。</span></span><br><span class="line"><span class="comment">如果Reflect.set没有传入receiver，那么就不会触发defineProperty拦截。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-defineProperty-target-propertykey-attribute"><a href="#Reflect-defineProperty-target-propertykey-attribute" class="headerlink" title="Reflect.defineProperty(target, propertykey, attribute)"></a>Reflect.defineProperty(target, propertykey, attribute)</h3><blockquote><p>对应 <code>Object.defineProperty</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyDate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*…*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(MyDate, <span class="string">'now'</span>, &#123;</span><br><span class="line">  value: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Date</span>.now()</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="built_in">Reflect</span>.defineProperty(MyDate, <span class="string">'now'</span>, &#123;</span><br><span class="line">  value: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Date</span>.now()</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-deleteProperty-target-name"><a href="#Reflect-deleteProperty-target-name" class="headerlink" title="Reflect.deleteProperty(target, name)"></a>Reflect.deleteProperty(target, name)</h3><blockquote><p>对应 <code>delete obj.name</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name:<span class="string">'Owen'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//es5 </span></span><br><span class="line"><span class="keyword">delete</span> obj.name</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reflect</span></span><br><span class="line"><span class="built_in">Reflect</span>.deleteProperty(obj,<span class="string">'name'</span>)</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-has-target-name"><a href="#Reflect-has-target-name" class="headerlink" title="Reflect.has(target, name)"></a>Reflect.has(target, name)</h3><blockquote><p>对应 <code>name in obj</code>  中的 in 运算<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name:<span class="string">'Owen'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//es5</span></span><br><span class="line"> <span class="string">'name'</span> <span class="keyword">in</span> obj <span class="comment">// ture</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Reflect</span></span><br><span class="line"><span class="built_in">Reflect</span>.has(obj,<span class="string">'name'</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-ownKeys-target"><a href="#Reflect-ownKeys-target" class="headerlink" title="Reflect.ownKeys(target)"></a>Reflect.ownKeys(target)</h3><blockquote><p>对应 <code>Object.getOwnPropertyNames</code> and <code>Object.getOwnPropertySymbols</code>  返回对象所有属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name:<span class="string">'Owen'</span>,</span><br><span class="line">  age:<span class="number">18</span>,</span><br><span class="line">  [<span class="built_in">Symbol</span>.for(<span class="string">'name'</span>)]:<span class="string">'Owen'</span>,</span><br><span class="line">  [<span class="built_in">Symbol</span>.for(<span class="string">'age'</span>)]:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(obj)</span><br><span class="line"><span class="comment">// ['name', 'age']</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertySymbols(obj)</span><br><span class="line"><span class="comment">//[Symbol(name), Symbol(age)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="built_in">Reflect</span>.ownKeys(obj)</span><br><span class="line"><span class="comment">//['name', 'age',Symbol(name), Symbol(age)]</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-isExtensible-target"><a href="#Reflect-isExtensible-target" class="headerlink" title="Reflect.isExtensible(target)"></a>Reflect.isExtensible(target)</h3><blockquote><p>对应 <code>Object.isExtensible</code>  返回 <code>boolean</code>，表示当前对象是否可扩展。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj =&#123;&#125;</span><br><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="built_in">Object</span>.isExtensible(obj) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="built_in">Reflect</span>.isExtensible(obj) <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-preventExtensions-target"><a href="#Reflect-preventExtensions-target" class="headerlink" title="Reflect.preventExtensions(target)"></a>Reflect.preventExtensions(target)</h3><blockquote><p> 对应 <code>Object.preventExtensions</code>  让一个对象变为不可扩展。它返回 <code>boolean</code>，表示是否操作成功。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj =&#123;&#125;</span><br><span class="line"><span class="comment">// es5 </span></span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(obj) <span class="comment">// Object &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="built_in">Reflect</span>.preventExtensions(obj) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-getOwnPropertyDescriptor-target-propertyKey"><a href="#Reflect-getOwnPropertyDescriptor-target-propertyKey" class="headerlink" title="Reflect.getOwnPropertyDescriptor(target, propertyKey)"></a>Reflect.getOwnPropertyDescriptor(target, propertyKey)</h3><blockquote><p>对应 <code>Object.getOwnPropertyDescriptors</code>   返回对象所有自身属性（非继承） 的描述对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj t = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'hidden'</span>, &#123;</span><br><span class="line">  value: <span class="literal">true</span>,</span><br><span class="line">  enumerable: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">var</span> theDescriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">'hidden'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line">theDescriptor = <span class="built_in">Reflect</span>.getOwnPropertyDescriptor(obj, <span class="string">'hidden'</span>);</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reflect-getPrototypeOf-target"><a href="#Reflect-getPrototypeOf-target" class="headerlink" title="Reflect.getPrototypeOf(target)"></a>Reflect.getPrototypeOf(target)</h3><blockquote><p>获取对象原型<br>参数不是对象，Object.getPrototypeOf会将这个参数转为对象，然后再运行，而Reflect.getPrototypeOf会报错。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObj = <span class="keyword">new</span> FancyThing();</span><br><span class="line"></span><br><span class="line"><span class="comment">// es5 </span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(myObj) === FancyThing.prototype;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reflect</span></span><br><span class="line"><span class="built_in">Reflect</span>.getPrototypeOf(myObj) === FancyThing.prototype;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Reflect-setPrototypeOf-target-prototype"><a href="#Reflect-setPrototypeOf-target-prototype" class="headerlink" title="Reflect.setPrototypeOf(target, prototype)"></a>Reflect.setPrototypeOf(target, prototype)</h4><blockquote><p>对应<code>Object.setPrototypeOf</code> 设置 原型对象， 返回 <code>Boolean</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj,Person.prototype);</span><br><span class="line"></span><br><span class="line"><span class="comment">//es6 </span></span><br><span class="line"><span class="built_in">Reflect</span>.setPrototypeOf(obj,Person.prototype);</span><br><span class="line"></span><br><span class="line">obj.length <span class="comment">//0</span></span><br></pre></td></tr></table></figure><h2 id="Proxy-Observer-Mode"><a href="#Proxy-Observer-Mode" class="headerlink" title="Proxy Observer  Mode"></a>Proxy Observer  Mode</h2><blockquote><p>函数字段观察数据对象，如果数据改变，函数自动执行</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//队列函数</span></span><br><span class="line"><span class="keyword">const</span> observe = <span class="function"><span class="params">callback</span> =&gt;</span> queue.add(callback);</span><br><span class="line"></span><br><span class="line"><span class="comment">//观察目标</span></span><br><span class="line"><span class="keyword">const</span> observable = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj,&#123;<span class="keyword">set</span>&#125;);</span><br><span class="line"></span><br><span class="line">//自动执行</span><br><span class="line">function <span class="keyword">set</span> (target,key,value,receiver)&#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.set(target,key,value,receiver);</span><br><span class="line">  queue.forEach(<span class="function"><span class="params">observer</span> =&gt;</span> observer() );</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = observable(&#123;  </span><br><span class="line">    name:<span class="string">'Owen'</span>,</span><br><span class="line">    age:<span class="number">18</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span>  <span class="title">auto</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;person.name&#125;</span>,<span class="subst">$&#123;person.age&#125;</span>`</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">observe(auto);</span><br><span class="line">person.name = <span class="string">'Owen'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">先定义一个Set集合，所有观察者函数都放进这个集合。然后，observable函数返回原始对象的代理，拦截赋值操作。</span></span><br><span class="line"><span class="comment">拦截函数set之中，会自动执行所有观察者。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Reflect&quot;&gt;&lt;a href=&quot;#Reflect&quot; class=&quot;headerlink&quot; title=&quot;Reflect&quot;&gt;&lt;/a&gt;Reflect&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;将&lt;code&gt;Object&lt;/code&gt;对象中一些属于语言内部的方法，放到
      
    
    </summary>
    
      <category term="ES6" scheme="https://owen027.github.io/categories/ES6/"/>
    
    
      <category term="Reflect" scheme="https://owen027.github.io/tags/Reflect/"/>
    
  </entry>
  
  <entry>
    <title>proxy</title>
    <link href="https://owen027.github.io/2019/03/26/proxy/"/>
    <id>https://owen027.github.io/2019/03/26/proxy/</id>
    <published>2019-03-26T14:51:32.000Z</published>
    <updated>2019-04-21T15:59:13.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><blockquote><p>用于修改某些操作的默认行为。（对编程语言进行编程）<br>在目标对象之前架设一层‘门户’，外界访问对象时，必须先访问这个门户，<label>对外界的访问进行过滤和改写</label></p></blockquote><p><strong>生成:</strong></p><blockquote><p>ES6中 所有proxy实例 通过 Proxy 构造函数生成<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">new</span> <span class="built_in">Proxy</span>(target,handler);</span><br><span class="line"><span class="comment">// target对象 要访问的对象， handler对象 拦截行为</span></span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  <span class="keyword">get</span>: function(target, property) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">35</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy.time <span class="comment">// 35</span></span><br><span class="line">proxy.name <span class="comment">// 35</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Proxy-支持的操作"><a href="#Proxy-支持的操作" class="headerlink" title="Proxy 支持的操作"></a>Proxy 支持的操作</h3><h4 id="get-target-propKey-proxy"><a href="#get-target-propKey-proxy" class="headerlink" title="get(target, propKey, proxy)"></a>get(target, propKey, proxy)</h4><blockquote><p>拦截对象属性的读取，比如proxy.foo和proxy[‘foo’]。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*get 接收三个参数</span></span><br><span class="line"><span class="comment">*target 目标对象</span></span><br><span class="line"><span class="comment">*property 属性名</span></span><br><span class="line"><span class="comment">*proxy 实例本身</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">"Owen"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;</span><br><span class="line">  <span class="keyword">get</span>: function(target, property) &#123;</span><br><span class="line">    <span class="keyword">if</span> (property <span class="keyword">in</span> target) &#123;</span><br><span class="line">      <span class="keyword">return</span> target[property];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">ReferenceError</span>(<span class="string">"Property \""</span> + property + <span class="string">"\" does not exist."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy.name <span class="comment">// "Owen"</span></span><br><span class="line">proxy.age <span class="comment">// error:Property "age" does not exist.</span></span><br><span class="line"><span class="comment">//如果访问目标对象不存在的属性，会抛出一个错误。如果没有这个拦截函数，访问不存在的属性，只会返回undefined。</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="set-target-propKey-value-proxy"><a href="#set-target-propKey-value-proxy" class="headerlink" title="set(target, propKey, value, proxy)"></a>set(target, propKey, value, proxy)</h4><blockquote><p>拦截对象属性的设置，比如proxy.foo = v或proxy[‘foo’] = v，返回一个布尔值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*set 有4 个参数</span></span><br><span class="line"><span class="comment">*target 目标对象</span></span><br><span class="line"><span class="comment">*property 属性名</span></span><br><span class="line"><span class="comment">*value 属性值</span></span><br><span class="line"><span class="comment">*proxy 实例本身</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">let</span> validator = &#123;</span><br><span class="line">  <span class="keyword">set</span>: function(obj, prop, value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prop === <span class="string">'age'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">Number</span>.isInteger(value)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'The age is not an integer'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (value &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeError</span>(<span class="string">'The age seems invalid'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对于满足条件的 age 属性以及其他属性，直接保存</span></span><br><span class="line">    obj[prop] = value;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">//严格模式下 return false or undefined 会报错 </span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, validator);</span><br><span class="line">obj.age = <span class="number">18</span>;</span><br><span class="line">obj.age =<span class="string">'18'</span>; <span class="comment">//error</span></span><br><span class="line">obj.age =<span class="number">101</span>;<span class="comment">//error</span></span><br><span class="line"><span class="comment">//每当对象发生变化时，会自动更新 DOM。</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="has-target-propKey"><a href="#has-target-propKey" class="headerlink" title="has(target, propKey)"></a>has(target, propKey)</h4><blockquote><p>拦截propKey in proxy的操作，返回一个布尔值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*接收两个参数</span></span><br><span class="line"><span class="comment">*target目标对象</span></span><br><span class="line"><span class="comment">*key 查询的属性名</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  has (target, key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">'_'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> key <span class="keyword">in</span> target;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">_prop</span>: <span class="string">'Owen'</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="string">'_prop'</span> <span class="keyword">in</span> proxy <span class="comment">// false</span></span><br><span class="line"><span class="comment">//拦截以‘_’开头的属性名 对for ...in 遍历不生效</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="deleteProperty-target-propKey"><a href="#deleteProperty-target-propKey" class="headerlink" title="deleteProperty(target, propKey)"></a>deleteProperty(target, propKey)</h4><blockquote><p>拦截delete proxy[propKey]的操作，返回一个布尔值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  deleteProperty (target, key) &#123;</span><br><span class="line">    invariant(key, <span class="string">'delete'</span>);</span><br><span class="line">    <span class="keyword">delete</span> target[key];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invariant</span> (<span class="params">key, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">'_'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Invalid attempt to <span class="subst">$&#123;action&#125;</span> private "<span class="subst">$&#123;key&#125;</span>" property`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">_prop</span>: <span class="string">'foo'</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="keyword">delete</span> proxy._prop</span><br><span class="line"><span class="comment">// Error: Invalid attempt to delete private "_prop" property</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="ownKeys-target"><a href="#ownKeys-target" class="headerlink" title="ownKeys(target)"></a>ownKeys(target)</h4><blockquote><p>拦截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for…in循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而Object.keys()的返回结果仅包括目标对象自身的可遍历属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拦截对象自身属性的读取操作</span></span><br><span class="line"><span class="keyword">let</span> target = &#123;</span><br><span class="line">  _bar: <span class="string">'foo'</span>,</span><br><span class="line">  _prop: <span class="string">'bar'</span>,</span><br><span class="line">  prop: <span class="string">'Owen'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">  ownKeys (target) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.ownKeys(target).filter(<span class="function"><span class="params">key</span> =&gt;</span> key[<span class="number">0</span>] !== <span class="string">'_'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(proxy)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(target[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//会自动过滤 不存在的属性，Symbol，不可遍历属性</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="getOwnPropertyDescriptor-target-propKey"><a href="#getOwnPropertyDescriptor-target-propKey" class="headerlink" title="getOwnPropertyDescriptor(target, propKey)"></a>getOwnPropertyDescriptor(target, propKey)</h4><blockquote><p>拦截Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  getOwnPropertyDescriptor (target, key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">'_'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.getOwnPropertyDescriptor(target, key);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">_foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="string">'tar'</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(proxy, <span class="string">'wat'</span>)</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(proxy, <span class="string">'_foo'</span>)</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(proxy, <span class="string">'baz'</span>)</span><br><span class="line"><span class="comment">// &#123; value: 'tar', writable: true, enumerable: true, configurable: true &#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="defineProperty-target-propKey-propDesc"><a href="#defineProperty-target-propKey-propDesc" class="headerlink" title="defineProperty(target, propKey, propDesc)"></a>defineProperty(target, propKey, propDesc)</h4><blockquote><p>拦截 Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一个布尔值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  defineProperty (target, key, descriptor) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line">proxy.owen = <span class="string">'Owen'</span> <span class="comment">// 不会生效</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="preventExtensions-target"><a href="#preventExtensions-target" class="headerlink" title="preventExtensions(target)"></a>preventExtensions(target)</h4><blockquote><p>拦截<code>Object.preventExtensions(proxy)</code>，返回一个布尔值。<br>该方法必须返回一个布尔值，否则会被自动转为布尔值。<br>目标对象不可扩展时（<label>即Object.isExtensible(proxy)为false</label>），<code>proxy.preventExtensions</code>才能返回true<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  preventExtensions: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(proxy)</span><br><span class="line"><span class="comment">//error</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="getPrototypeOf-target"><a href="#getPrototypeOf-target" class="headerlink" title="getPrototypeOf(target)"></a>getPrototypeOf(target)</h4><blockquote><p>拦截Object.getPrototypeOf(proxy)，返回一个对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主要拦截获取对象原型</span></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">*Object.prototype.__proto__</span></span><br><span class="line"><span class="comment">*Object.prototype.isPrototypeOf()</span></span><br><span class="line"><span class="comment">*Object.getPrototypeOf()</span></span><br><span class="line"><span class="comment">*Reflect.getPrototypeOf()</span></span><br><span class="line"><span class="comment">*instanceof</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">var</span> proto = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  getPrototypeOf(target) &#123;</span><br><span class="line">    <span class="keyword">return</span> proto;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(p) === proto <span class="comment">// true</span></span><br><span class="line"><span class="comment">//返回值必须是对象或者null，否则报错</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="isExtensible-target"><a href="#isExtensible-target" class="headerlink" title="isExtensible(target)"></a>isExtensible(target)</h4><blockquote><p>拦截Object.isExtensible(proxy)，返回一个布尔值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  isExtensible: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Owen"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.isExtensible(p)</span><br><span class="line"><span class="comment">//返回值必须是Boolean</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="setPrototypeOf-target-proto"><a href="#setPrototypeOf-target-proto" class="headerlink" title="setPrototypeOf(target, proto)"></a>setPrototypeOf(target, proto)</h4><blockquote><p>拦截Object.setPrototypeOf(proxy, proto)，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  setPrototypeOf (target, proto) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Changing the prototype is forbidden'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> proto = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> target = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(proxy, proto);</span><br><span class="line"><span class="comment">// Error: Changing the prototype is forbidden</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="apply-target-object-args"><a href="#apply-target-object-args" class="headerlink" title="apply(target, object, args)"></a>apply(target, object, args)</h4><blockquote><p>拦截 Proxy 实例作为函数调用的操作，比如proxy(…args)、proxy.call(object, …args)、proxy.apply(…)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*接收三个参数 </span></span><br><span class="line"><span class="comment">*target 目标对象</span></span><br><span class="line"><span class="comment">*this  目标对象上下文</span></span><br><span class="line"><span class="comment">*目标对象的参数数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> target = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'I am the target'</span>; &#125;;</span><br><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  apply: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'I am the proxy'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"></span><br><span class="line">p()</span><br><span class="line"><span class="comment">// "I am the proxy"</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="construct-target-args"><a href="#construct-target-args" class="headerlink" title="construct(target, args)"></a>construct(target, args)</h4><blockquote><p>拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(…args)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接收两个参数</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*target 目标对象</span></span><br><span class="line"><span class="comment">*args 构造函数参数对象</span></span><br><span class="line"><span class="comment">函数必须返回对象，否则会报错</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">let</span> obj = &#123;</span><br><span class="line">      construct: <span class="function"><span class="keyword">function</span>(<span class="params">target, args</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Owen: '</span> + args.join(<span class="string">', '</span>));</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">value</span>: args[<span class="number">0</span>] * <span class="number">10</span> &#125;;</span><br><span class="line">   <span class="comment">// retirn '18'; error</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, obj)</span><br><span class="line"> <span class="keyword">new</span> p(<span class="number">2</span>).value <span class="comment">// 20</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Proxy-revocable"><a href="#Proxy-revocable" class="headerlink" title="Proxy.revocable"></a>Proxy.revocable</h3><blockquote><p><code>Proxy.revocable</code>方法返回一个可取消的 Proxy 实例。<br>使用场景： 目标对象不允许直接访问，必须通过代理访问，一旦访问结束，就收回代理权，不允许再次访问。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> handler = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;proxy, revoke&#125; = <span class="built_in">Proxy</span>.revocable(target,handler);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">Proxy.revocable(target, handler);</span></span><br><span class="line"><span class="comment">&#123;proxy: Proxy, revoke: ƒ&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">proxy.name = <span class="string">'Owen'</span></span><br><span class="line">proxy.name</span><br><span class="line"></span><br><span class="line">revoke() <span class="comment">//取消 proxy 实例</span></span><br><span class="line">proxy.name </span><br><span class="line"><span class="comment">//error</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Proxy-this"><a href="#Proxy-this" class="headerlink" title="Proxy this"></a>Proxy this</h3> <label> 在 Proxy 代理的情况下，目标对象内部的<code>this</code>关键字会指向 Proxy 代理。 </label> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">const</span> target = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">const</span> handler = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"></span><br><span class="line">proxy.getDate();</span><br><span class="line"><span class="comment">//error</span></span><br></pre></td></tr></table></figure><h3 id="Proxy-实例使用"><a href="#Proxy-实例使用" class="headerlink" title="Proxy 实例使用"></a>Proxy 实例使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = createWebService(<span class="string">'http://example.com/data'</span>);</span><br><span class="line"></span><br><span class="line">service.employees().then(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> employees = <span class="built_in">JSON</span>.parse(json);</span><br><span class="line">  <span class="comment">// ···</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWebService</span>(<span class="params">baseUrl</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">    <span class="keyword">get</span>(target, propKey, receiver) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> httpGet(baseUrl+<span class="string">'/'</span> + propKey);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Proxy&quot;&gt;&lt;a href=&quot;#Proxy&quot; class=&quot;headerlink&quot; title=&quot;Proxy&quot;&gt;&lt;/a&gt;Proxy&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;用于修改某些操作的默认行为。（对编程语言进行编程）&lt;br&gt;在目标对象之前架设一层‘门户’，
      
    
    </summary>
    
      <category term="ES6" scheme="https://owen027.github.io/categories/ES6/"/>
    
    
      <category term="Proxy" scheme="https://owen027.github.io/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>Extend</title>
    <link href="https://owen027.github.io/2019/03/19/extend/"/>
    <id>https://owen027.github.io/2019/03/19/extend/</id>
    <published>2019-03-19T11:28:30.000Z</published>
    <updated>2019-05-04T15:00:19.052Z</updated>
    
    <content type="html"><![CDATA[<h3 id="String-Extend"><a href="#String-Extend" class="headerlink" title="String Extend"></a>String Extend</h3><h4 id="被-for-of-遍历"><a href="#被-for-of-遍历" class="headerlink" title="被 for ... of 遍历"></a><strong>被 <code>for ... of</code> 遍历</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> <span class="string">'abc'</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">    <span class="comment">//a</span></span><br><span class="line">    <span class="comment">//b</span></span><br><span class="line">    <span class="comment">//c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找字符"><a href="#查找字符" class="headerlink" title="查找字符"></a><strong>查找字符</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'Hello Brother!'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//includes 是否包含参数字符串</span></span><br><span class="line">str.includes(<span class="string">'Br'</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//startsWith  开头是否存在参数字符串</span></span><br><span class="line">str.startsWith(<span class="string">'Hello'</span>) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//endsWith 结尾是否存在参数字符串</span></span><br><span class="line">str.endsWith(<span class="string">'er!'</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="重复字符"><a href="#重复字符" class="headerlink" title="重复字符"></a><strong>重复字符</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//repeat  重复 n 次，  n 为参数,返回新字符串</span></span><br><span class="line"><span class="keyword">let</span> re = <span class="string">'Hello Brother!'</span>;</span><br><span class="line"></span><br><span class="line">re.repeat(<span class="number">2</span>); <span class="comment">//"Hello Brother!Hello Brother!"</span></span><br><span class="line"></span><br><span class="line">re.repeat(<span class="number">-2</span>); <span class="comment">// Invalid count value</span></span><br><span class="line">re.repeat(<span class="literal">Infinity</span>); <span class="comment">// Invalid count value</span></span><br><span class="line"><span class="comment">//小数会取整 </span></span><br><span class="line">re.repeat(<span class="number">1.9</span>) <span class="comment">// "Hello Brother!"</span></span><br><span class="line">re.repeat(<span class="number">-0.9</span>) <span class="comment">// ""</span></span><br></pre></td></tr></table></figure><h4 id="补全字符"><a href="#补全字符" class="headerlink" title="补全字符"></a><strong>补全字符</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//补全开头 padStart 补齐尾部 padEnd</span></span><br><span class="line"><span class="keyword">let</span> pd = <span class="string">'Brother!'</span>; </span><br><span class="line">pd.padStart(<span class="number">14</span>,<span class="string">'Hello '</span>); <span class="comment">//"Hello Brother!"</span></span><br><span class="line"><span class="comment">//第一个参数为补齐的最大长度（整串字符） 第二个参数为补齐缺省的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果原始字符长度大于等于最大长度，返回原字符串</span></span><br><span class="line">pd.padStart(<span class="number">7</span>,<span class="string">'Hello '</span>)<span class="comment">// 'Brother!'</span></span><br><span class="line">pd.padStart(<span class="number">8</span>,<span class="string">'Hello '</span>)<span class="comment">// 'Brother!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果最大长度小于补齐长度，则去除超出部分</span></span><br><span class="line">pd.padStart(<span class="number">9</span>,<span class="string">'Aay '</span>)<span class="comment">//'ABrother!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果缺省第二个参数则 默认使用空格补齐</span></span><br><span class="line">pd.padStart(<span class="number">9</span>)<span class="comment">//' Brother!'</span></span><br></pre></td></tr></table></figure><h4 id="模板字符"><a href="#模板字符" class="headerlink" title="模板字符"></a><strong>模板字符</strong></h4><blockquote><p>通过反引号 “ <code></code> ” 当普通字符串使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有换行和空格会保留，嵌入变量，须将变量包含在 `$&#123;&#125;` 中，并且可进行运算,函数调用，对象调用</span></span><br><span class="line"><span class="keyword">let</span> num =<span class="number">1</span>,obj =&#123;<span class="attr">name</span>:<span class="string">'Owen'</span>&#125;, fn=<span class="function"><span class="params">()</span>=&gt;</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> str =<span class="string">` </span></span><br><span class="line"><span class="string"><span class="subst">$&#123;num * <span class="number">3</span> + <span class="number">1</span> + fn() + obj.name&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str)</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">" </span></span><br><span class="line"><span class="comment">7Owen"</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果紧更在函数名后，函数将被调用（标签模板）</span></span><br><span class="line">alert<span class="string">`123`</span>  <span class="comment">// 等同于</span></span><br><span class="line">alert(<span class="number">123</span>)</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="转义符"><a href="#转义符" class="headerlink" title="转义符 \"></a><strong>转义符 <code>\</code></strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以 x 开头,会被当做 16 进制</span></span><br><span class="line"></span><br><span class="line"> <span class="string">`\x23`</span> <span class="comment">// #</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//以 u 开头,会被当做 unicode  字符</span></span><br><span class="line"> <span class="string">`\u004F`</span> <span class="comment">//"O"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果无法编译将会报错</span></span><br></pre></td></tr></table></figure><p>ES2018 放松了对<code>标签模板</code>里面的字符串转义的限制，无法转义的返回<code>undefined</code>；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log<span class="string">`\uw`</span>;</span><br><span class="line"><span class="comment">//[undefined, raw: Array(1)]</span></span><br><span class="line"><span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><hr><h3 id="Function-Extend"><a href="#Function-Extend" class="headerlink" title="Function Extend"></a>Function Extend</h3><h4 id="形参指定默认值"><a href="#形参指定默认值" class="headerlink" title="形参指定默认值"></a><strong>形参指定默认值</strong></h4><blockquote><p>形参 不能再次使用 let 和 const 声明<br>形参不能重名<br>函数 length 不包含设置默认值和后面的形参个数<br>使用 <code>...arg</code> 中的参数 length 也不包含</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function">(<span class="params">x, y = <span class="string">'Owen'</span></span>) =&gt;</span>( <span class="built_in">console</span>.log(x,y));</span><br><span class="line">fn(<span class="number">1</span>) <span class="comment">// 1 "Owen"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认参数 惰性求值</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">99</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">y = x + <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(y);</span><br><span class="line">&#125;</span><br><span class="line">foo() <span class="comment">// 100</span></span><br><span class="line">x = <span class="number">100</span>;</span><br><span class="line">foo() <span class="comment">// 101</span></span><br><span class="line"><span class="comment">//调用一次计算一次</span></span><br></pre></td></tr></table></figure><blockquote><p>事实上 每次调用函数，如果不传递参数， 形参默认传递 <code>undefined</code><br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 默认参数最好定义再尾部，因为使用形参默认参数，那么那个位置的形参必传</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y = <span class="number">5</span>, z， ...arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y, z];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f() <span class="comment">// [undefined, 5, undefined]</span></span><br><span class="line">f(<span class="number">1</span>) <span class="comment">// [1, 5, undefined]</span></span><br><span class="line">f(<span class="number">1</span>, ,<span class="number">2</span>) <span class="comment">// 报错</span></span><br><span class="line">f(<span class="number">1</span>, <span class="literal">undefined</span>, <span class="number">2</span>) <span class="comment">// [1, 5, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//length 不包含设置默认值 和后面的形参 的个数，</span></span><br><span class="line">f().length <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a><strong>作用域</strong></h4><blockquote><p>函数中的<label>变量无法访问</label> 默认值<br>函数中的形参名不能和默认名一样<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数变量无法访问默认值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">y = x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f() <span class="comment">// ReferenceError: x is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数中的形参名不能和默认名一样</span></span><br><span class="line"><span class="comment">//参数x = x形成一个单独作用域。实际执行的是let x = x，由于暂时性死区的原因，这行代码会报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x = x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">f()<span class="comment">//  x is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y = function(</span>) </span>&#123; x = <span class="number">2</span>; &#125;) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">3</span>;</span><br><span class="line">  y();</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo() <span class="comment">// 3</span></span><br><span class="line">x <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p></blockquote><p>由于  var 声明的 x 和函数形参 x 不再同一个作用域 ， 因此调用 y() x值不变；<br>如果 去掉 var , 那么 x 就指向 形参 x ,调用 y() x = 2。</p><h4 id="reset-参数-（…）"><a href="#reset-参数-（…）" class="headerlink" title="reset 参数 （…）"></a><strong>reset 参数 （…）</strong></h4><blockquote><p>使用形式 <code>...arg</code>  实数以数组的形势赋给变量<br>reset 参数后不能再有形参，否则报错<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">a,...arg</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)<span class="comment">//[2,3,4,5]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">a,...arg,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ught SyntaxError: Rest parameter must be last formal parameter</span></span><br></pre></td></tr></table></figure></p></blockquote><label>只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错。 </label><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a, b = a</span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="comment">// code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params">&#123;a, b&#125;</span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="comment">// code</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function">(<span class="params">...a</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="comment">// code</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="comment">// 报错</span></span><br><span class="line">  fn(&#123;a, b&#125;) &#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br><br>####  <strong>箭头函数</strong><br>&gt;使用 <code>() =&gt;</code>  定义函数<br>注意：<br>- this 指向函数定义时所绑定的普通函数，不会被(bind,call,apply)更改,也不会被调用时的上下文改变。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span><span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">"Owen"</span>&#125;;</span><br><span class="line"></span><br><span class="line">fn.call(obj) <span class="comment">//window</span></span><br><span class="line"></span><br><span class="line">fn.bind(obj)</span><br><span class="line">fn() <span class="comment">//window</span></span><br><span class="line"></span><br><span class="line">fn.apply(obj)  <span class="comment">//window</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="comment">//可以通过改变宿主环境来改变 this 指向</span></span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>)&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">foo.call(obj)() <span class="comment">//&#123;name: "Owen"&#125;</span></span><br><span class="line">foo.call(obj)()() <span class="comment">//&#123;name: "Owen"&#125; &#123;name: "Owen"&#125;</span></span><br></pre></td></tr></table></figure><br><br>- 外层没有普通函数 ，严格模式和非严格模式下它的this都会指向window(全局对象)。<br><br>- 不可以当作构造函数，也就是说，不可以使用new命令，没有<code>prototype</code>属性，不支持<code>new.target</code>,否则会抛出一个错误。<br>- 参数和箭头之间不能换行<br>- 不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。<br><br>- 不可以使用yield命令，因此箭头函数不能用作 Generator 函数。<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//定义简单函数</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">'Owen'</span>;</span><br><span class="line">fn()<span class="comment">// 'Owen'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo = <span class="function"><span class="params">r</span> =&gt;</span> r;</span><br><span class="line">foo(<span class="string">'Owen'</span>) <span class="comment">// 'Owen'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f = <span class="function">(<span class="params">num1,num2</span>) =&gt;</span> num1 + num2;</span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>)<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果返回一个对象需要小括号包裹,f否则会报错</span></span><br><span class="line"><span class="keyword">let</span> f = <span class="function">(<span class="params">name,age</span>) =&gt;</span> (&#123;name,age&#125;);</span><br><span class="line">f(<span class="string">'Owen'</span>,<span class="number">18</span>)<span class="comment">//&#123;name: "Owen", age: 18&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果代码部分大于一条语句，那么需要 大括号包裹，使用return 返回值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fn1 = <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="keyword">return</span> r + a;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">####  **不推荐使用场景**</span><br><span class="line"></span><br><span class="line">- 在对象中使用 <span class="keyword">this</span>.</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`javascript</span></span><br><span class="line"><span class="string">var obj = &#123;</span></span><br><span class="line"><span class="string">  gender:"man",</span></span><br><span class="line"><span class="string">  getSex: () =&gt;  &#123;console.log(this.gender)&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">obj.getSex() //undefined</span></span><br><span class="line"><span class="string">//this -&gt; global</span></span><br></pre></td></tr></table></figure><br><br>- 动态使用 this.<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelector(<span class="string">'li'</span>);</span><br><span class="line">lis.addEventListener(<span class="string">'click'</span>,() =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// this -&gt; global</span></span><br></pre></td></tr></table></figure><br><br>- 内部有大量的读写操作，不单纯是为了计算值，这时也不应该使用箭头函数<br><br><br>####  <strong>双冒号运算符 <code>::</code></strong><br><br>&gt; 目前只是一个提案，用来绑定函数的 this 类似于 (bind,call,apply)<br>&gt; 将做边的对象作为参数，绑定到右边函数上。<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bar:: fn</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">fn.bind(bar);</span><br><span class="line"></span><br><span class="line">bar::fn(...arguments);</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">fn.apply(bar, <span class="built_in">arguments</span>);</span><br></pre></td></tr></table></figure><br><br>####  <strong>函数调用</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   foo()</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   fn()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">f()</span><br></pre></td></tr></table></figure><br><br>&gt; 函数调用会在内存中形成一个 调用记录（<code>调用帧</code>），保存着调用位置和内部变量等信息。<br>&gt; 函数 <code>f</code>内部调用 <code>foo</code>函数，<code>f</code>调用帧的上方会形成 <code>foo</code>的调用帧， <code>foo</code>运行接受并且将结果返回给 <code>f</code>，<code>foo</code>的调用帧才会消失，同理，<code>foo</code>函数 内部调用<code>fn</code>函数，还会有 <code>fn</code> 的调用帧，以此类推，形成一个<code>调用栈</code>。<br><br>####  <strong>尾调用</strong><br>&gt; 指某个函数的最后一步是调用另一个函数。<br>&gt; 不一定出现在函数尾部，只要是最后一步操作即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尾调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fn(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//不属于尾调用</span></span><br><span class="line"><span class="comment">// 情况一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> y = g(x);</span><br><span class="line">  <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况二</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> g(x) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况三</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  g(x);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  g(x);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>——<br><br>### Array Extend<br><br>#### <strong>扩展运算 (…)</strong><br><br>&gt;主要用于函数调用， 将一个数组，变为参数序列。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(... [<span class="number">1</span>,<span class="number">2</span>]) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><br><br>##### <strong>clone数组</strong><br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//es5 </span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = arr.concat();</span><br><span class="line"></span><br><span class="line"> <span class="comment">//es6</span></span><br><span class="line"><span class="keyword">let</span> [...arr2] = arr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr];</span><br></pre></td></tr></table></figure><br><br>##### <strong>合并数组</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="keyword">let</span> arr3 = arr.concat(arr1,arr2);</span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="keyword">let</span> arr4 = [...arr,...arr1,...arr2];</span><br></pre></td></tr></table></figure><br><br>合并和clone 都是浅拷贝；<br><br>##### <strong>配合解构赋值</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">first <span class="comment">// 1</span></span><br><span class="line">rest  <span class="comment">// [2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [];</span><br><span class="line">first <span class="comment">// undefined</span></span><br><span class="line">rest  <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="string">"foo"</span>];</span><br><span class="line">first  <span class="comment">// "foo"</span></span><br><span class="line">rest   <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展运算符，只能放在参数的最后一位，否则会报错。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...middle, last] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">//error</span></span><br></pre></td></tr></table></figure><br><br>##### <strong>将伪数组(内部实现了Iterator)转化伪数组</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//内部实现Iterator</span></span><br><span class="line"><span class="comment">//字符串， Set, Map, Generator, NodeList, htmlcollection, classList ,argument内部都实现了迭代接口</span></span><br><span class="line"><span class="keyword">let</span> nodes = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> divs = [...nodes];</span><br><span class="line"></span><br><span class="line"><span class="comment">//内部未实现Iterator</span></span><br><span class="line"><span class="keyword">let</span> objs = &#123;</span><br><span class="line">  <span class="string">'0'</span>: <span class="string">'a'</span>,</span><br><span class="line">  <span class="string">'1'</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="string">'2'</span>: <span class="string">'c'</span>,</span><br><span class="line">  length: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> arr =[...objs];<span class="comment">//error</span></span><br><span class="line"><span class="comment">//可通过 Array.from方法转化</span></span><br><span class="line"><span class="keyword">let</span> arr1 = <span class="built_in">Array</span>.from(objs)</span><br></pre></td></tr></table></figure><br><br>#### Array.from<br>&gt; 将伪数组转化为数组<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrLike = &#123;</span><br><span class="line">  <span class="string">'0'</span>: <span class="string">'a'</span>,</span><br><span class="line">  <span class="string">'1'</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="string">'2'</span>: <span class="string">'c'</span>,</span><br><span class="line">  length: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(arrLike)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*第二个参数</span></span><br><span class="line"><span class="comment"> 遍历每个元素并返回运算结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">Array</span>.from(arrLike, x =&gt; x * x);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">Array</span>.from(arrLike).map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], (x) =&gt; x * x)</span><br><span class="line"><span class="comment">// [1, 4, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将布尔值为false的成员转为0</span></span><br><span class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>, , <span class="number">2</span>, , <span class="number">3</span>], (n) =&gt; n || <span class="number">0</span>)</span><br><span class="line"><span class="comment">// [1, 0, 2, 0, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取DOM 节点的文本内容。</span></span><br><span class="line"><span class="built_in">Array</span>.from</span><br><span class="line">(<span class="built_in">document</span>.querySelectorAll(<span class="string">'span.name'</span>);, s =&gt; s.textContent)</span><br><span class="line"><span class="comment">//第三个参数 绑定第二个参数中回调函数的this</span></span><br></pre></td></tr></table></figure><br><br>#### <strong>find and findIndex</strong><br>&gt; 回调函数遍历所有成员，返回符合条件的值， 没有则返回 undefined<br>&gt; find 返回值为，第一个符合条件的成员<br>&gt;findIndex ，没有则返回 -1<br>&gt; 回调函数接受三个参数（成员，位置，原数组）<br>&gt; 第二个参数 绑定回调函数 this<br>&gt; 可以识别NaN<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].find(<span class="function"><span class="keyword">function</span>(<span class="params">v,i,arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v&lt;<span class="number">0</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// -5</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].findIndex(<span class="function">(<span class="params">n</span>) =&gt;</span> n &lt; <span class="number">0</span>)</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><br><br>#### <strong>fill</strong><br>&gt; 填充数组,修改原数组<br>&gt; 第一个参数为填充值，第二个参数为开始填充的位置，第三个参数为结束位置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.fill(<span class="string">'Owen'</span>);</span><br><span class="line"><span class="comment">//["Owen","Owen","Owen"]</span></span><br><span class="line">arr.fill(<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">//[1,1,3]</span></span><br></pre></td></tr></table></figure><br><br>#### <strong>Interator</strong><br>&gt; keys,values,entries 对应属性遍历<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// keys</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'o'</span>,<span class="string">'w'</span>,<span class="string">'e'</span>,<span class="string">'n'</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> arr.keys())&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(key);</span><br><span class="line">   <span class="comment">//0 1 2 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr.values())&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(item);</span><br><span class="line">   <span class="comment">//o w e n</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [i,item] <span class="keyword">of</span> arr.entries())&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(i,item)</span><br><span class="line"><span class="comment">//1 "w"</span></span><br><span class="line"><span class="comment">//2 "e"</span></span><br><span class="line"><span class="comment">//3 "n"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>#### <strong>includes</strong><br>&gt; 返回一个Boolean ,数组是否包含给定的值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].includes(<span class="number">3</span>)<span class="comment">//true</span></span><br><span class="line"><span class="comment">//第二个参数为搜索的起始位置</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].includes(<span class="number">3</span>,<span class="number">4</span>)<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 是否支持 */</span></span><br><span class="line"><span class="keyword">const</span> contains = <span class="function">(<span class="params">(</span>) =&gt;</span></span><br><span class="line">  <span class="built_in">Array</span>.prototype.includes</span><br><span class="line">    ? <span class="function">(<span class="params">arr, value</span>) =&gt;</span> arr.includes(value)</span><br><span class="line">    : <span class="function">(<span class="params">arr, value</span>) =&gt;</span> arr.some(<span class="function"><span class="params">el</span> =&gt;</span> el === value)</span><br><span class="line">)();</span><br><span class="line">contains([<span class="string">'foo'</span>, <span class="string">'bar'</span>], <span class="string">'baz'</span>); <span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><br><br>#### <strong>flat ,flatMap</strong><br>&gt; 将二维数组变成一位数组，并返回新数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>]].flat()</span><br><span class="line"><span class="comment">//[1,2,3,4]</span></span><br><span class="line"><span class="comment">//默认拉平1层</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,[<span class="number">4</span>]]].flat(<span class="number">2</span>)</span><br><span class="line"><span class="comment">//[1,2,3,4]</span></span><br><span class="line"><span class="comment">//将所有维度变成一维</span></span><br><span class="line">array.flat(Infinty)</span><br><span class="line"><span class="comment">//会忽略空位</span></span><br><span class="line">[<span class="number">1</span>,,[<span class="number">3</span>,<span class="number">4</span>]].flat()</span><br><span class="line"><span class="comment">//[1,3,4]</span></span><br></pre></td></tr></table></figure><br><br>—<br>#### ES5 methods<br>##### every<br>-  访问每一个成员,给定某个条件，如果<label>所有成员满足条件</label>就返回true<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num  = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> n = num.every(<span class="function"><span class="keyword">function</span>(<span class="params">item,key,array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ( item&gt;<span class="number">2</span> )</span><br><span class="line">&#125;)</span><br><span class="line"> n <span class="comment">//false</span></span><br></pre></td></tr></table></figure><br><br>#### some<br>- 访问每一个成员,给定某个条件，<label>只要有一个成员满足条件就返回true</label><br>- 有一个满足条件的成员之后的不再执行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num  = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> n = num.some(<span class="function"><span class="keyword">function</span>(<span class="params">item,key,array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ( item &gt; <span class="number">2</span> )</span><br><span class="line">&#125;)</span><br><span class="line"> n <span class="comment">//true</span></span><br></pre></td></tr></table></figure><br><br>##### filter<br>- 访问每一个成员,给定某个条件，<label>将满足条件的成员组成数组返回</label>， 否则返回 <code>[]</code><br>- <label>只会在已经赋值的索引上被调用，对于那些已经被删除或者从未被赋值的索引不会被调用</label><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num  = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> n = num.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,key,array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ( item &gt; <span class="number">2</span> )</span><br><span class="line">&#125;)</span><br><span class="line"> n <span class="comment">//[3, 4, 5, 4, 3]</span></span><br></pre></td></tr></table></figure><h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><ul><li>访问每一个成员,将每次访问执行的结果组成数组返回，也就是说<label>每个成员都 必须要有return返回结果，否则都是<code>unndefined</code></label></li><li>map不支持continue跳出循环</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num  = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> n = num.map(<span class="function"><span class="keyword">function</span>(<span class="params">item,key,array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item * <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"> n <span class="comment">// [0, 2, 4, 4, 6, 8, 10, 6, 10]</span></span><br></pre></td></tr></table></figure><h5 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h5><ul><li>访问每一个成员,没有返回值</li><li>中途不能用常规操作跳出循环</li><li>不支持链式操作<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num  = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> n = num.map(<span class="function"><span class="keyword">function</span>(<span class="params">item,key,array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item * <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"> n <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="reduce-and-reduceRight"><a href="#reduce-and-reduceRight" class="headerlink" title="reduce and reduceRight"></a>reduce and reduceRight</h5><ul><li>reduce 从数组的第一项开始，逐个遍历到最后。</li><li>reduceRight  从数组的最后一项开始，向前遍历到第一项。</li><li>接收两个参数 回调函数和 回调函数第一个参数的值，默认数组第一个元素。</li><li>返回 累计处理的结果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @param</span></span><br><span class="line"><span class="comment">  *  prev 上次调用回调时的累积值</span></span><br><span class="line"><span class="comment">  *  cur  当前数组成员</span></span><br><span class="line"><span class="comment">  *  i  数组索引</span></span><br><span class="line"><span class="comment">  *  arrary 原数组</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">var</span> num  = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> n = num.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,cur,i,array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> prev*<span class="number">2</span> + cur</span><br><span class="line">&#125;)</span><br><span class="line"> n <span class="comment">// 431</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> num  = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> n = num.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,cur,i,array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> prev*<span class="number">2</span> + cur</span><br><span class="line">&#125;)</span><br><span class="line"> n <span class="comment">// 2186</span></span><br></pre></td></tr></table></figure><p> 以上都不会修改原数组，除非使用第三个参数做些操作，注意<label>数组成员是值类型，还是引用类型</label></p><h5 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h5><ul><li>对数组排序 默认排序按字母升序（根据字符串Unicode ）</li><li>参数为回调函数<code>callback(a,b)</code>  </li><li>返回值为负数 那么 a 会被排列到 b 之前</li><li>返回值为 0 位置不变</li><li>返回值为正数 b 会被排列到 a 之前<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">44</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>];</span><br><span class="line">num.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b</span><br><span class="line">&#125;)</span><br><span class="line">num <span class="comment">// [1, 2, 2, 3, 3, 4, 7, 9, 44]</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h4><ul><li>翻转数组<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">44</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>];</span><br><span class="line">num <span class="comment">//[9, 4, 3, 2, 44, 7, 2, 3, 1]</span></span><br><span class="line">num.reverse()</span><br></pre></td></tr></table></figure></li></ul><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><ul><li>has方法 会发生隐式转化 1 ==’1’ <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> unique = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">      <span class="keyword">var</span> res = [];     </span><br><span class="line">      arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,i</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(!obj[item])&#123;</span><br><span class="line">              obj[item] = <span class="literal">true</span>;</span><br><span class="line">              res.push(item) </span><br><span class="line">          &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">    <span class="keyword">return</span>  res</span><br><span class="line">&#125;</span><br><span class="line">unique(arr)</span><br><span class="line">&lt;&lt;<span class="xml"><span class="tag">&lt;&lt;&lt;&lt;&lt; <span class="attr">HEAD</span></span></span></span><br><span class="line"><span class="xml">=======</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">- map has方法 不会发生隐式转化</span></span><br><span class="line"><span class="xml">var unique = function(arr) &#123;</span></span><br><span class="line"><span class="xml">      var m = new Map();</span></span><br><span class="line"><span class="xml">      var res = [];     </span></span><br><span class="line"><span class="xml">      arr.forEach(function(item,i)&#123;</span></span><br><span class="line"><span class="xml">          if(!m.has(item))&#123;</span></span><br><span class="line"><span class="xml">              res.push(item) </span></span><br><span class="line"><span class="xml">          &#125;</span></span><br><span class="line"><span class="xml">          m.set(item,2);</span></span><br><span class="line"><span class="xml">       &#125;)</span></span><br><span class="line"><span class="xml">    return  res</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">unique(arr)</span></span><br><span class="line"><span class="xml">&gt;&gt;&gt;&gt;&gt;&gt;&gt; d71c39e5118389885ef986735a9a15598115e5b9</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>filter <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//会忽略 undefined</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> unique = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span>  arr.sort().filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,i,array</span>) </span>&#123; </span><br><span class="line">     <span class="keyword">return</span> item !== array[i+<span class="number">1</span>]; </span><br><span class="line">     &#125;)</span><br><span class="line">&#125;</span><br><span class="line"> unique(arr) <span class="comment">//  ["", 1, null]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> unique = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span>  arr.filter( <span class="function"><span class="keyword">function</span>(<span class="params">item, idx </span>)  </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr.indexOf(item) === idx;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unique(arr) <span class="comment">//[null, undefined, "", 1]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Object-extend"><a href="#Object-extend" class="headerlink" title="Object extend"></a>Object extend</h3><h4 id="对象中的简写"><a href="#对象中的简写" class="headerlink" title="对象中的简写"></a>对象中的简写</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数</span></span><br><span class="line"><span class="keyword">const</span> obj =&#123;</span><br><span class="line">  methode()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Owen'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  * m() &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'hello world'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">const</span> obj =&#123;</span><br><span class="line">  methode:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Owen'</span></span><br><span class="line">  &#125;</span><br><span class="line">  m:<span class="function"><span class="keyword">function</span>* (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'hello world'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用变量定义对象</span></span><br><span class="line">  <span class="comment">//默认情况下会自动将对象转为字符串[object Object]，这一点要特别小心。</span></span><br><span class="line"><span class="keyword">let</span> lastWord = <span class="string">'last word'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="string">'first word'</span>: <span class="string">'hello'</span>,</span><br><span class="line">  [lastWord]: <span class="string">'world'</span>,</span><br><span class="line">  [<span class="string">'h'</span> + <span class="string">'ello'</span>]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hi'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj[<span class="string">'first word'</span>] <span class="comment">// "hello"</span></span><br><span class="line">obj[lastWord] <span class="comment">// "world"</span></span><br><span class="line">obj[<span class="string">'last word'</span>] <span class="comment">// "world"</span></span><br><span class="line">obj.hello() <span class="comment">// hi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象中 函数 name属性</span></span><br><span class="line"><span class="comment">//对象的方法是一个 Symbol 值，那么name属性返回的是这个 Symbol 值的描述。</span></span><br><span class="line"><span class="keyword">const</span> key1 = <span class="built_in">Symbol</span>(<span class="string">'description'</span>);</span><br><span class="line"><span class="keyword">const</span> key2 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [key1]() &#123;&#125;,</span><br><span class="line">  [key2]() &#123;&#125;,</span><br><span class="line">  sayName() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Owen'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">get</span> foo() &#123;&#125;,</span><br><span class="line">  <span class="keyword">set</span> foo(x) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj[key1].name <span class="comment">// "[description]"</span></span><br><span class="line">obj[key2].name <span class="comment">// ""</span></span><br><span class="line">obj.sayName.name   <span class="comment">// "sayName"</span></span><br><span class="line"><span class="keyword">const</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">'foo'</span>);</span><br><span class="line"></span><br><span class="line">descriptor.get.name <span class="comment">// "get foo"</span></span><br><span class="line">descriptor.set.name <span class="comment">// "set foo"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过构造函数创立的函数</span></span><br><span class="line">(<span class="keyword">new</span> <span class="built_in">Function</span>()).name <span class="comment">// "anonymous"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过 bind 绑定的函数</span></span><br><span class="line"><span class="keyword">var</span> doSomething = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line">doSomething.bind().name <span class="comment">// "bound doSomething"</span></span><br></pre></td></tr></table></figure><h4 id="枚举和遍历"><a href="#枚举和遍历" class="headerlink" title="枚举和遍历"></a>枚举和遍历</h4><blockquote><p>Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name:<span class="string">'Owen'</span></span><br><span class="line">&#125;</span><br><span class="line">Objct.getOwnPropertyDescriptor(obj,<span class="string">'name'</span>);</span><br><span class="line"><span class="comment">//  &#123;</span></span><br><span class="line"><span class="comment">//    value: Owen,</span></span><br><span class="line"><span class="comment">//    writable: true,</span></span><br><span class="line"><span class="comment">//    enumerable: true, //可枚举</span></span><br><span class="line"><span class="comment">//    configurable: true</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br></pre></td></tr></table></figure><h5 id="如果-enumerable-为-false"><a href="#如果-enumerable-为-false" class="headerlink" title="如果 enumerable 为 false"></a><strong>如果 enumerable 为 false</strong></h5><p>有些操作会忽略，当前属性</p><ul><li>for…in循环：只遍历对象自身的和继承的可枚举的属性。</li><li>Object.keys()：返回对象自身的所有可枚举的属性的键名。</li><li>JSON.stringify()：只串行化对象自身的可枚举的属性。</li><li>(ES6) Object.assign()： 忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。</li></ul><blockquote><p>共有 5 种方法可以遍历对象的属性。</p><ul><li>for…in</li></ul></blockquote><p>for…in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。</p><ul><li>Object.keys(obj)</li></ul><p>Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。</p><ul><li>Object.getOwnPropertyNames(obj)</li></ul><p>Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。</p><ul><li>Object.getOwnPropertySymbols(obj)</li></ul><p>Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性的键名。</p><ul><li>Reflect.ownKeys(obj)<br>Reflect.ownKeys返回一个数组，包含对象自身的所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。</li></ul><h5 id="都遵守同样的属性遍历的次序规则。"><a href="#都遵守同样的属性遍历的次序规则。" class="headerlink" title="都遵守同样的属性遍历的次序规则。"></a><strong>都遵守同样的属性遍历的次序规则。</strong></h5><ul><li>首先遍历所有数值键，按照数值升序排列。</li><li>其次遍历所有字符串键，按照加入时间升序排列。</li><li>最后遍历所有 Symbol 键，按照加入时间升序排列。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Reflect</span>.ownKeys(&#123; [<span class="built_in">Symbol</span>()]:<span class="number">0</span>, <span class="attr">b</span>:<span class="number">0</span>, <span class="number">10</span>:<span class="number">0</span>, <span class="number">2</span>:<span class="number">0</span>, <span class="attr">a</span>:<span class="number">0</span> &#125;)</span><br><span class="line"><span class="comment">// ['2', '10', 'b', 'a', Symbol()]</span></span><br></pre></td></tr></table></figure></li></ul><p>上面代码中，Reflect.ownKeys方法返回一个数组，包含了参数对象的所有属性。这个数组的属性次序是这样的，首先是数值属性2和10，其次是字符串属性b和a，最后是 Symbol 属性。</p><p><strong>super</strong></p><blockquote><p><code>this</code> 总是指向函数所在的当前对象<br><code>super</code> 指向当前对象的原型对象。<br>super关键字表示原型对象时，<code>只能用在对象的方法之中</code>，用在其他地方都会报错。<br>目前，只有对象<label>方法的简写法可以让 JavaScript 引擎确认，定义的是对象的方法。</label><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proto = &#123;</span><br><span class="line">  foo: <span class="string">'hello'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  foo: <span class="string">'world'</span>,</span><br><span class="line">  find() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.foo;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, proto);</span><br><span class="line">obj.find() <span class="comment">// "hello"</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="对象扩展运算符"><a href="#对象扩展运算符" class="headerlink" title="对象扩展运算符"></a>对象扩展运算符</h4><blockquote><p>ES2018 将这个运算符引入了对象。<br>解构赋值的拷贝是浅拷贝<br>不能复制继承自原型对象的属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 解构</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//必须保证右方为对象，否则报错</span></span><br><span class="line"><span class="keyword">let</span> &#123; x, y, ...z &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br><span class="line">z <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//与函数参数扩展运算类似，解构赋值须最后一个参数</span></span><br><span class="line"><span class="keyword">let</span> &#123; ...x, y, z &#125; = someObject; <span class="comment">// 句法错误</span></span><br><span class="line"><span class="keyword">let</span> &#123; x, ...y, ...z &#125; = someObject; <span class="comment">// 句法错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//无法继承原型</span></span><br><span class="line"><span class="keyword">let</span> o1 = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> o2 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line">o2.__proto__ = o1;</span><br><span class="line"><span class="keyword">let</span> &#123; ...o3 &#125; = o2;</span><br><span class="line">o3 <span class="comment">// &#123; b: 2 &#125;</span></span><br><span class="line">o3.a <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展运算</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组是特殊的对象，所以对象的扩展运算符也可以用于数组</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123; ...[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>] &#125;;</span><br><span class="line">foo</span><br><span class="line"><span class="comment">// &#123;0: "a", 1: "b", 2: "c"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展运算符后面是一个空对象，无效果</span></span><br><span class="line">&#123;...&#123;&#125;, <span class="attr">a</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="comment">// &#123; a: 1 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展运算符后面不是对象，则会自动将其转为对象 </span></span><br><span class="line">&#123;..<span class="number">.1</span>&#125; <span class="comment">// &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展运算符后面是字符串，它会自动转成一个类似数组的对象</span></span><br><span class="line">&#123;...<span class="string">'Owen'</span>&#125;</span><br><span class="line"><span class="comment">//&#123;0: "O", 1: "w", 2: "e", 3: "n"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ab = &#123; ...a, ...b &#125;;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> ab = <span class="built_in">Object</span>.assign(&#123;&#125;, a, b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//完整克隆一个对象，还拷贝对象原型的属性，可以采用下面的写法。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法一 非浏览器环境不一定部署 __proto__</span></span><br><span class="line"><span class="keyword">const</span> clone1 = &#123;</span><br><span class="line">  __proto__: <span class="built_in">Object</span>.getPrototypeOf(obj),</span><br><span class="line">  ...obj</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">const</span> clone2 = <span class="built_in">Object</span>.assign(</span><br><span class="line">  <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.getPrototypeOf(obj)),</span><br><span class="line">  obj</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法三</span></span><br><span class="line"><span class="keyword">const</span> clone3 = <span class="built_in">Object</span>.create(</span><br><span class="line">  <span class="built_in">Object</span>.getPrototypeOf(obj),</span><br><span class="line">  <span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象的扩展运算符后面可以跟表达式</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  ...(x &gt; <span class="number">1</span> ? &#123;<span class="attr">a</span>: <span class="number">1</span>&#125; : &#123;&#125;),</span><br><span class="line">  b: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展运算符的参数对象之中，如果有取值函数get，这个函数是会执行let aWithXGetter = &#123;</span></span><br><span class="line">  ...a,</span><br><span class="line">  <span class="keyword">get</span> x() &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'not throw yet'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 会抛出错误，因为 x 属性被执行了</span></span><br><span class="line"><span class="keyword">let</span> runtimeError = &#123;</span><br><span class="line">  ...a,</span><br><span class="line">  ...&#123;</span><br><span class="line">    <span class="keyword">get</span> x() &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'throw now'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><hr><h3 id="New-method-for-objects"><a href="#New-method-for-objects" class="headerlink" title="New method for objects"></a>New method for objects</h3><h4 id="Object-is-比较两个值是否严格相等"><a href="#Object-is-比较两个值是否严格相等" class="headerlink" title="Object.is() 比较两个值是否严格相等"></a>Object.is() 比较两个值是否严格相等</h4><blockquote><p>和 <code>===</code> 的区别<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">0</span> === <span class="number">-0</span> <span class="comment">//true</span></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.is(+<span class="number">0</span>, <span class="number">-0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>) <span class="comment">// true</span></span><br><span class="line">es5 实现</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>,<span class="string">'is'</span>,&#123;</span><br><span class="line">  value: <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x === y) &#123;</span><br><span class="line">      <span class="comment">// 针对+0 不等于 -0的情况</span></span><br><span class="line">      <span class="keyword">return</span> x !== <span class="number">0</span> || <span class="number">1</span> / x === <span class="number">1</span> / y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 针对NaN的情况</span></span><br><span class="line">    <span class="keyword">return</span> x !== x &amp;&amp; y !== y;</span><br><span class="line">  &#125;,</span><br><span class="line">  configurable: <span class="literal">true</span>,</span><br><span class="line">  enumerable: <span class="literal">false</span>,</span><br><span class="line">  writable: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h4><blockquote><p>浅拷贝对象，无法拷贝原型,也不拷贝不可枚举的属性。<br>总是拷贝一个属性的值，而不会拷贝它背后的赋值方法或取值方法。<br>同属性后面的覆盖前面的值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(&#123;<span class="attr">b</span>: <span class="string">'c'</span>&#125;,</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(&#123;&#125;, <span class="string">'invisible'</span>, &#123;</span><br><span class="line">    enumerable: <span class="literal">false</span>,</span><br><span class="line">    value: <span class="string">'hello'</span></span><br><span class="line">  &#125;) )</span><br><span class="line"><span class="comment">// &#123; b: 'c' &#125;</span></span><br><span class="line"><span class="built_in">Object</span>.assign([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="comment">//[4,5,3]</span></span><br></pre></td></tr></table></figure><h4 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors()"></a>Object.getOwnPropertyDescriptors()</h4><blockquote><p>返回目标对象所有自身属性（非继承） 的描述对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  foo: <span class="number">123</span>,</span><br><span class="line">  <span class="keyword">get</span> bar() &#123; <span class="keyword">return</span> <span class="string">'Owen'</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span><br><span class="line"><span class="comment">// &#123; foo:</span></span><br><span class="line"><span class="comment">//    &#123; value: 123,</span></span><br><span class="line"><span class="comment">//      writable: true,</span></span><br><span class="line"><span class="comment">//      enumerable: true,</span></span><br><span class="line"><span class="comment">//      configurable: true &#125;,</span></span><br><span class="line"><span class="comment">//   bar:</span></span><br><span class="line"><span class="comment">//    &#123; get: [Function: get bar],</span></span><br><span class="line"><span class="comment">//      set: undefined,</span></span><br><span class="line"><span class="comment">//      enumerable: true,</span></span><br><span class="line"><span class="comment">//      configurable: true &#125; &#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>主要是为了解决Object.assign()无法正确拷贝get属性和set属性的问题。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source = &#123;</span><br><span class="line">  <span class="keyword">set</span> foo(value) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> shallowMerge = <span class="function">(<span class="params">target, source</span>) =&gt;</span> <span class="built_in">Object</span>.defineProperties(</span><br><span class="line">  target,</span><br><span class="line">  <span class="built_in">Object</span>.getOwnPropertyDescriptors(source)</span><br><span class="line">);</span><br><span class="line">shallowMerge(target,source)</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(target, <span class="string">'foo'</span>)</span><br><span class="line"><span class="comment">// &#123; get: undefined,</span></span><br><span class="line"><span class="comment">//   set: [Function: set foo],</span></span><br><span class="line"><span class="comment">//   enumerable: true,</span></span><br><span class="line"><span class="comment">//   configurable: true &#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>配合Object.create()方法，将对象属性克隆到一个新对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shallowClone = <span class="function">(<span class="params">obj</span>) =&gt;</span> <span class="built_in">Object</span>.create(</span><br><span class="line">  <span class="built_in">Object</span>.getPrototypeOf(obj),</span><br><span class="line">  <span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>实现一个对象继承另一个对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一</span></span><br><span class="line"><span class="keyword">const</span> obj1 = <span class="built_in">Object</span>.create(prot);</span><br><span class="line">obj.foo = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二</span></span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="built_in">Object</span>.assign(</span><br><span class="line">  <span class="built_in">Object</span>.create(prot),</span><br><span class="line">  &#123;</span><br><span class="line">    foo: <span class="number">123</span>,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//三</span></span><br><span class="line"><span class="keyword">const</span>  obj3 = <span class="built_in">Object</span>.create(prot,<span class="built_in">Object</span>.getOwnPropertyDescriptors(&#123;</span><br><span class="line">  name:<span class="string">'Owen'</span></span><br><span class="line">&#125;))</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>实现<code>Mixin</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mix = <span class="function">(<span class="params">obj</span>) =&gt;</span> (</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">with</span>:<span class="function">(<span class="params">...mixins</span>) =&gt;</span> mixins.reduce(</span><br><span class="line">      (c,mixin) =&gt; <span class="built_in">Object</span>.create(  c, <span class="built_in">Object</span>.getOwePropertyDescriptors( minxin )), obj</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="keyword">let</span> a = &#123;<span class="attr">a</span>: <span class="string">'a'</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> b = &#123;<span class="attr">b</span>: <span class="string">'b'</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> c = &#123;<span class="attr">c</span>: <span class="string">'c'</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> d = mix(c).with(a, b);</span><br><span class="line"></span><br><span class="line">d.c <span class="comment">// "c"</span></span><br><span class="line">d.b <span class="comment">// "b"</span></span><br><span class="line">d.a <span class="comment">// "a"</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="proto属性，Object-setPrototypeOf-，Object-getPrototypeOf"><a href="#proto属性，Object-setPrototypeOf-，Object-getPrototypeOf" class="headerlink" title="proto属性，Object.setPrototypeOf()，Object.getPrototypeOf()"></a><strong>proto</strong>属性，Object.setPrototypeOf()，Object.getPrototypeOf()</h4><blockquote><p>设置，和 获取原型<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//set</span></span><br><span class="line"><span class="keyword">let</span> proto = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">x</span>: <span class="number">10</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, proto);</span><br><span class="line"></span><br><span class="line">proto.y = <span class="number">20</span>;</span><br><span class="line">proto.z = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">obj.x <span class="comment">// 10</span></span><br><span class="line">obj.y <span class="comment">// 20</span></span><br><span class="line">obj.z <span class="comment">// 40</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//get</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rec = <span class="keyword">new</span> Rectangle();</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(rec) === Rectangle.prototype</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(rec, <span class="built_in">Object</span>.prototype);</span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(rec) === Rectangle.prototype</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Object-keys-，Object-values-，Object-entries"><a href="#Object-keys-，Object-values-，Object-entries" class="headerlink" title="Object.keys()，Object.values()，Object.entries()"></a>Object.keys()，Object.values()，Object.entries()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//keys</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;; <span class="comment">//es5</span></span><br><span class="line"><span class="built_in">Object</span>.keys(obj)</span><br><span class="line"><span class="comment">// ["foo", "baz"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//values</span></span><br><span class="line"><span class="built_in">Object</span>.values(obj)</span><br><span class="line"><span class="comment">//['bar,42]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.entries(obj)</span><br><span class="line"><span class="comment">// [['foo', 'bar'],  ['baz', 42]]</span></span><br></pre></td></tr></table></figure><h4 id="Object-fromEntries"><a href="#Object-fromEntries" class="headerlink" title="Object.fromEntries()"></a>Object.fromEntries()</h4><blockquote><p> Object.entries 方法的逆操作<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.fromEntries([</span><br><span class="line">  [<span class="string">'foo'</span>, <span class="string">'bar'</span>],</span><br><span class="line">  [<span class="string">'baz'</span>, <span class="number">42</span>]</span><br><span class="line">])</span><br><span class="line"><span class="comment">// &#123; foo: "bar", baz: 42 &#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><p>目前谷歌版本 Chrome/72.0.3626.121 Safari/537.36  及以下不支持</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;String-Extend&quot;&gt;&lt;a href=&quot;#String-Extend&quot; class=&quot;headerlink&quot; title=&quot;String Extend&quot;&gt;&lt;/a&gt;String Extend&lt;/h3&gt;&lt;h4 id=&quot;被-for-of-遍历&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="ES6" scheme="https://owen027.github.io/categories/ES6/"/>
    
    
      <category term="Extend Methods" scheme="https://owen027.github.io/tags/Extend-Methods/"/>
    
  </entry>
  
  <entry>
    <title>Map</title>
    <link href="https://owen027.github.io/2019/03/19/map/"/>
    <id>https://owen027.github.io/2019/03/19/map/</id>
    <published>2019-03-19T10:48:52.000Z</published>
    <updated>2019-04-21T15:59:13.599Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><blockquote><p>键值对的集合 键名的范围不限制于字符串</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>: <span class="string">'Owen'</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="comment">//设值</span></span><br><span class="line">m.set(obj,<span class="string">"boy"</span>); <span class="comment">//将 obj 作为键名， 给它赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以是对象，数组，甚至是函数，任何数据类型都可以当作属性名（键名）</span></span><br><span class="line">m.set(fn,<span class="number">1</span>) </span><br><span class="line"><span class="comment">//对同一个键名赋值，后面的将覆盖前面的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获值</span></span><br><span class="line">m.get(obj) <span class="comment">// 'boy'</span></span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line">m.has(obj) <span class="comment">// true</span></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">m.delete(obj)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="Map-参数"><a href="#Map-参数" class="headerlink" title="Map 参数"></a>Map 参数</h3><blockquote><p>任何 <code>Iterator</code> 接口，并且每个成员都是双元素数组的数据结构 都可以作为参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">3</span>]];</span><br><span class="line"><span class="keyword">const</span> ma = <span class="keyword">new</span> <span class="built_in">Map</span>(arr); <span class="comment">//Map(2) &#123;1 =&gt; 2, 2 =&gt; 3&#125;</span></span><br><span class="line">ma.get(<span class="number">1</span>) <span class="comment">//2</span></span><br><span class="line">ma.get(<span class="number">2</span>) <span class="comment">//3</span></span><br><span class="line"><span class="comment">//如果几组双元素成员相同那么只会生成一个值</span></span><br><span class="line">arr = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>]];</span><br><span class="line">mss = <span class="keyword">new</span> <span class="built_in">Map</span>(arr); <span class="comment">//Map(1) &#123;1 =&gt; 2&#125;</span></span><br><span class="line">ma.size<span class="comment">//2</span></span><br><span class="line">mss.size<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// keys 键名</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> ma.keys())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key)</span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">    <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//values 值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> ma.values())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val)</span><br><span class="line">    <span class="comment">//2</span></span><br><span class="line">    <span class="comment">//3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//entries  键值 等同于 遍历 ma 默认遍历的是entries </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key,val] <span class="keyword">of</span> ma.entries())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key,val)</span><br><span class="line">    <span class="comment">//1,2</span></span><br><span class="line">    <span class="comment">//2,3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//转化为数组</span></span><br><span class="line"></span><br><span class="line">[... ma.keys() ] <span class="comment">//[1,2]</span></span><br><span class="line"></span><br><span class="line">[... ma.values() ] <span class="comment">//[2,3]</span></span><br><span class="line"></span><br><span class="line">[... ma] <span class="comment">//[[1,2],[2,3]]</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Map&quot;&gt;&lt;a href=&quot;#Map&quot; class=&quot;headerlink&quot; title=&quot;Map&quot;&gt;&lt;/a&gt;Map&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;键值对的集合 键名的范围不限制于字符串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;
      
    
    </summary>
    
      <category term="ES6" scheme="https://owen027.github.io/categories/ES6/"/>
    
    
      <category term="Map" scheme="https://owen027.github.io/tags/Map/"/>
    
  </entry>
  
  <entry>
    <title>Set</title>
    <link href="https://owen027.github.io/2019/03/15/set/"/>
    <id>https://owen027.github.io/2019/03/15/set/</id>
    <published>2019-03-15T13:20:20.000Z</published>
    <updated>2019-04-21T15:59:13.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><blockquote><p>ES6 提供的数据结构类似于数组，值是唯一的，通过 <code>Set</code> 构造函数来生成</p></blockquote> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="comment">//参数可以是一个可以迭代的数据结构</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = new Set(arr); //Set(5)&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">[...set] <span class="comment">//[1,2,3,4,5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> set1 = <span class="keyword">new</span> <span class="built_in">Set</span>(<span class="string">'12343333433225'</span>);  <span class="comment">//Set(5) &#123;"1", "2", "3", "4", "5"&#125;</span></span><br><span class="line">set1.size <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组去重</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [... new <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>])];</span><br><span class="line"><span class="keyword">const</span> arr2 = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]));</span><br></pre></td></tr></table></figure><h3 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">  s.constructor <span class="comment">//指向 Set 函数 </span></span><br><span class="line">  s.size <span class="comment">//成员总数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作方法 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以通过 add()方法添加 只有一个参数</span></span><br><span class="line"><span class="keyword">const</span> set2 =<span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">set2.add(<span class="number">1</span>) <span class="comment">//Set(1) &#123;1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不会发生类型转换  NaN 会 = NaN </span></span><br><span class="line">set2.add(<span class="string">"1"</span>) <span class="comment">//Set(2) &#123;1,"1"&#125;</span></span><br><span class="line"></span><br><span class="line">set2.add(<span class="literal">NaN</span>).add(<span class="literal">NaN</span>)<span class="comment">// Set(3) &#123;1,"1",NaN&#125;  链式调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//两个对象不相等</span></span><br><span class="line">set2.add(&#123;&#125;)</span><br><span class="line">set2.size <span class="comment">//4</span></span><br><span class="line">set2.add(&#123;&#125;)</span><br><span class="line">set2.size <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过 delete() 删除某个值 返回 Boolean 值 </span></span><br><span class="line">set2.delete(<span class="number">1</span>) <span class="comment">//true</span></span><br><span class="line">set2.delete(&#123;&#125;) <span class="comment">//false </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//has()  是否存在某个值 </span></span><br><span class="line">set2.has(<span class="literal">NaN</span>) <span class="comment">//true</span></span><br><span class="line">set2.has(&#123;&#125;) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//clear() 清除所有成员</span></span><br><span class="line">set2.clear() <span class="comment">//Set(0) &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 遍历方法 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   keys 返回键名的迭代器， values 返回 键值的迭代器， 由于 Set 键名和键值 相同 所以</span></span><br><span class="line"><span class="comment"> * keys 和 values 方法返回值相同</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">const</span> sK = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]).keys()   <span class="comment">//SetIterator &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"> <span class="keyword">const</span> sV= <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]).values()   <span class="comment">//SetIterator &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//enters 返回键值对</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]).entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [1, 1]</span></span><br><span class="line"><span class="comment">// [2, 2]</span></span><br><span class="line"><span class="comment">// [3, 3]</span></span><br><span class="line"><span class="comment">// [4, 4]</span></span><br><span class="line"><span class="comment">// [5, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//推荐使用for of </span></span><br><span class="line"><span class="keyword">const</span> sI = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> sI) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(key); <span class="comment">//1 2 3 4 5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Set的遍历顺序就是插入顺序。使用 Set 保存一个回调函数列表，调用时能保证按照添加顺序调用。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//forEach</span></span><br><span class="line">sI.forEach(<span class="function">(<span class="params">value, key</span>) =&gt;</span> <span class="built_in">console</span>.log(key + <span class="string">' : '</span> + value))</span><br><span class="line"><span class="comment">// 1 : 1</span></span><br><span class="line"><span class="comment">// 2 : 2</span></span><br><span class="line"><span class="comment">// 3 : 3</span></span><br><span class="line"><span class="comment">// 4 : 4</span></span><br><span class="line"><span class="comment">// 5 : 5</span></span><br></pre></td></tr></table></figure><h3 id="weakSet"><a href="#weakSet" class="headerlink" title="weakSet"></a>weakSet</h3><blockquote><p>和Set 类似 但是只能存储对象，不可遍历<br>如果其他对象未应用该对象，垃圾回收机制会自动收回所占用的内存<br>适合存储临时对象和绑定对应对象的信息</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]]); <span class="comment">//WeakSet &#123;[1, 2], [3, 4]&#125;</span></span><br><span class="line"><span class="comment">//a 的成员自动成为 weakSet 的成员</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//add 方法</span></span><br><span class="line"><span class="keyword">let</span> arr =[[<span class="number">1</span>]];</span><br><span class="line">ws.add(arr);</span><br><span class="line"><span class="comment">//delete 删除对应成员</span></span><br><span class="line">ws.delete(arr); <span class="comment">//true</span></span><br><span class="line"><span class="comment">// has 是否包含</span></span><br><span class="line">ws.has(arr) <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>由于 WeakSet 的成员都是弱引用随时可能被回收，因此可以存储DOM节点，不用担心节点移除时，发生内存泄漏。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="keyword">new</span> <span class="built_in">WeakSet</span>()</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">   <span class="keyword">constructor</span>()&#123;</span><br><span class="line">     foo.add(<span class="keyword">this</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   method ()&#123;</span><br><span class="line">     <span class="keyword">if</span>(!foo.has (<span class="keyword">this</span>))&#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"method 只能在Foo 实例上使用"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Set&quot;&gt;&lt;a href=&quot;#Set&quot; class=&quot;headerlink&quot; title=&quot;Set&quot;&gt;&lt;/a&gt;Set&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;ES6 提供的数据结构类似于数组，值是唯一的，通过 &lt;code&gt;Set&lt;/code&gt; 构造函数来生成&lt;/p
      
    
    </summary>
    
      <category term="ES6" scheme="https://owen027.github.io/categories/ES6/"/>
    
    
      <category term="Set" scheme="https://owen027.github.io/tags/Set/"/>
    
  </entry>
  
  <entry>
    <title>symbol</title>
    <link href="https://owen027.github.io/2019/03/15/symbol/"/>
    <id>https://owen027.github.io/2019/03/15/symbol/</id>
    <published>2019-03-15T11:19:04.000Z</published>
    <updated>2019-04-21T15:59:13.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h2><blockquote><p>ES6 引入的原始数据类型，表示独一无二的值<br>通过 <code>Symbol</code>函数生成的原始值，不是对象，所以无法添加属性和方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> s1 = <span class="keyword">new</span> <span class="built_in">Symbol</span>(<span class="string">'s'</span>); <span class="comment">//TypeError</span></span><br><span class="line"><span class="comment">// 不能通过 new Symbol 否则会报错</span></span><br><span class="line"></span><br><span class="line">s.toString()<span class="comment">//"Symbol()"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>();</span><br><span class="line">s == s2 <span class="comment">// false</span></span><br><span class="line"><span class="comment">//独一无二的特性</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Boolean</span>(s) <span class="comment">//true</span></span><br><span class="line">!s <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">s + s1 <span class="comment">//error </span></span><br><span class="line">s + <span class="number">1</span>  <span class="comment">//error </span></span><br><span class="line">s + <span class="string">"1"</span> <span class="comment">// error </span></span><br><span class="line"><span class="comment">//symbol 不能参与任何值的运算</span></span><br></pre></td></tr></table></figure></p></blockquote><p>对象中的 symbol 无法通过 <code>.</code> 点运算访问<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sm = <span class="built_in">Symbol</span>()</span><br><span class="line"><span class="keyword">const</span> s =&#123;</span><br><span class="line">    [sm]: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line">s.sm <span class="comment">//undefined</span></span><br><span class="line">s[sm]<span class="comment">//1</span></span><br></pre></td></tr></table></figure></p><h3 id="消除魔术字符串"><a href="#消除魔术字符串" class="headerlink" title="消除魔术字符串"></a>消除魔术字符串</h3><blockquote><p>代码中多次出现，与代码形成强耦合的某一个具体的字符串或者数值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDate</span>(<span class="params">num,options</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">switch</span> (num)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        data = num + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span> :</span><br><span class="line">        data = num * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// case 右边的 1， 2 就是魔术数值</span></span><br><span class="line"><span class="comment">//一般把魔术字符串 变成变量来消除</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj =&#123;</span><br><span class="line">    one:<span class="built_in">Symbol</span>(),</span><br><span class="line">    two:<span class="built_in">Symbol</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDate</span>(<span class="params">num,options</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">switch</span> (num)&#123;</span><br><span class="line">        <span class="keyword">case</span> obj.one:</span><br><span class="line">        data = options + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> obj.two :</span><br><span class="line">        data =  options * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br><span class="line">getDate(obj.one,<span class="number">3</span>)</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="作为对象属性名"><a href="#作为对象属性名" class="headerlink" title="作为对象属性名"></a>作为对象属性名</h3><ul><li><code>for...in</code>、<code>for...of</code>，<code>Object.keys()</code> , <code>Object.getOwnPropertyNames()</code>,<code>JSON.stringify()</code>返回。</li><li>不是私有属性，可以通过 <code>Object.getOwnPropertySymbols()</code>获取指定symbol名<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="built_in">Symbol</span>(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Symbol</span>(<span class="string">'b'</span>);</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">   [a]:<span class="string">'hello'</span>,</span><br><span class="line">   [b]:<span class="string">'word'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(obj)) <span class="comment">//(2) [Symbol(a), Symbol(b)]</span></span><br></pre></td></tr></table></figure></li></ul><p>-可以通过 <code>Reflect.ownKeys()</code> 返回所有类型的属性名<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="built_in">Symbol</span>(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Symbol</span>(<span class="string">'b'</span>);</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">   [a]:<span class="string">'hello'</span>,</span><br><span class="line">   [b]:<span class="string">'word'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Reflect</span>.ownKeys(obj) <span class="comment">// ["a", Symbol(a), Symbol(b)]</span></span><br></pre></td></tr></table></figure></p><h3 id="Symbol-for-与Symbol"><a href="#Symbol-for-与Symbol" class="headerlink" title="Symbol.for()与Symbol()"></a><code>Symbol.for()</code>与<code>Symbol()</code></h3><blockquote><p>Symbol(‘a’) 和 Symbol.for():两种方法都会生成新的 <code>Symbol</code> 值<br>Symbol(‘a’) 使用10次，会生成10个新的 Symbol<br>Symbol.for(‘a’)，使用10次，会生成一个 Symbol 并创建一个key值<br>Symbol.keyFor(Symbol.for(‘a’)),会返回一个全局 key 值，可以在不同的iframe 或 service worker 获取同一个key</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>.for(<span class="string">'s'</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>.for(<span class="string">'s'</span>);</span><br><span class="line">s == s1 <span class="comment">//false</span></span><br><span class="line">s1 == s2 <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> key = <span class="built_in">Symbol</span>.keyFor(s2) <span class="comment">//s</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;含义&quot;&gt;&lt;a href=&quot;#含义&quot; class=&quot;headerlink&quot; title=&quot;含义&quot;&gt;&lt;/a&gt;含义&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;ES6 引入的原始数据类型，表示独一无二的值&lt;br&gt;通过 &lt;code&gt;Symbol&lt;/code&gt;函数生成的原始值，
      
    
    </summary>
    
      <category term="ES6" scheme="https://owen027.github.io/categories/ES6/"/>
    
    
      <category term="Symbol" scheme="https://owen027.github.io/tags/Symbol/"/>
    
  </entry>
  
  <entry>
    <title>Async/await</title>
    <link href="https://owen027.github.io/2019/03/14/asyncEs8/"/>
    <id>https://owen027.github.io/2019/03/14/asyncEs8/</id>
    <published>2019-03-14T11:27:09.000Z</published>
    <updated>2019-04-21T15:59:13.597Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES2017引入async-函数"><a href="#ES2017引入async-函数" class="headerlink" title="ES2017引入async 函数"></a>ES2017引入async 函数</h2><ul><li>Generator 的语法糖</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//generator</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readFile = <span class="function"><span class="keyword">function</span> (<span class="params">path</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve,reject</span>) </span>&#123;</span><br><span class="line">        fs.readFile(path, <span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</span><br><span class="line">            resolve(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> g = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> f1 = <span class="keyword">yield</span> readFile(url1);</span><br><span class="line">    <span class="keyword">const</span> f2 = <span class="keyword">yield</span> readFile(url2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// async</span></span><br><span class="line"><span class="keyword">const</span> asyncFile = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> f1 = <span class="keyword">await</span> readFile(url1);</span><br><span class="line">    <span class="keyword">const</span> f2 = <span class="keyword">await</span> readFile(url2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将 g 函数的 * 变成 axync</span></span><br><span class="line"><span class="comment"> * 将 yield  变成 await </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="async-对-generator-进行以下优化"><a href="#async-对-generator-进行以下优化" class="headerlink" title="async  对  generator 进行以下优化"></a>async  对  generator 进行以下优化</h3><ul><li>不再需要调用 <code>next</code> 方法就能执行</li><li>更加语义化</li><li>实用性更强 <code>await</code> 后面可以是 Promise , 原始类型值（会自动转成立即 resolved 的 Promise 对象）</li><li>返回值为Promise 对象更加方便，<label>当函数执行遇到 <code>await</code> 时暂停执行，等到异步操作完成，再执行后面的代码</label></li><li>async 函数 return 的返回值会成为 <code>then</code> 方法的参数</li><li><p>async 函数内部抛出错误 将会被 <code>catch</code>方法接收</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve,ms))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncPrint</span>(<span class="params">val, ms </span>) </span>&#123;</span><br><span class="line">     <span class="keyword">await</span> timeout(ms);</span><br><span class="line">    <span class="built_in">console</span>.log(val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncPrint(<span class="string">'Owen'</span>,<span class="number">1000</span>) <span class="comment">//1s 后 "Owen"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//因为 asnyc 返回 Promise 所以可以改用 async</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">timout</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve,ms));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncPrint</span>(<span class="params">val, ms </span>) </span>&#123;</span><br><span class="line">     <span class="keyword">await</span> timeout(ms);</span><br><span class="line">    <span class="built_in">console</span>.log(val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncPrint(<span class="string">'Owen'</span>,<span class="number">1000</span>) <span class="comment">//1s 后 "Owen"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义 async 函数 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表达式</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="keyword">async</span> f()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Storage</span> </span>&#123;</span><br><span class="line">   <span class="keyword">async</span> getAvatar(name) &#123;  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">async</span> () =&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* then方法接收return 的参数 */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Owen"</span></span><br><span class="line">&#125;</span><br><span class="line">foo().then(<span class="function"><span class="params">re</span> =&gt;</span><span class="built_in">console</span>.log(re)); <span class="comment">//Owen</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 接收错误对象 */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="number">18</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn().catch(<span class="function"><span class="params">er</span> =&gt;</span><span class="built_in">console</span>.log(er)) <span class="comment">//error</span></span><br></pre></td></tr></table></figure></li><li><p>asyn回调只有等所有 <code>await</code> 后面的Promise 执行完毕或者报错和<code>return</code>才会执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> time = + <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="built_in">console</span>.log(time,<span class="number">1</span>)</span><br><span class="line">   <span class="keyword">let</span> p1 =  <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve,<span class="number">1000</span>));</span><br><span class="line">   <span class="built_in">console</span>.log(+ <span class="keyword">new</span> <span class="built_in">Date</span>() - time ,<span class="number">2</span>)</span><br><span class="line">   <span class="keyword">let</span> p2 =  <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve,<span class="number">2000</span>));</span><br><span class="line">   <span class="keyword">return</span> +<span class="keyword">new</span> <span class="built_in">Date</span>() - time;</span><br><span class="line">&#125;</span><br><span class="line">fn().then(<span class="function"><span class="params">time</span> =&gt;</span> <span class="built_in">console</span>.log(time,<span class="number">3</span>));</span><br><span class="line"><span class="comment">//  1s 1</span></span><br><span class="line"><span class="comment">//  2s 2</span></span><br><span class="line"><span class="comment">//  3s 3</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="await"><a href="#await" class="headerlink" title="await"></a>await</h3><ul><li><p>await 后面是 <code>thenable</code> 对象，会和返回 promise 对象 一样返回结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sleep</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(timeout) &#123;</span><br><span class="line">    <span class="keyword">this</span>.timeout = timeout;</span><br><span class="line">  &#125;</span><br><span class="line">  then(resolve, reject) &#123;</span><br><span class="line">    <span class="keyword">const</span> startTime = <span class="built_in">Date</span>.now();</span><br><span class="line">    setTimeout(</span><br><span class="line">      () =&gt; resolve(<span class="built_in">Date</span>.now() - startTime),</span><br><span class="line">      <span class="keyword">this</span>.timeout</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> actualTime = <span class="keyword">await</span> <span class="keyword">new</span> Sleep(<span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(actualTime);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li><li><p>如果 <code>await</code> 后面的Promise 状态为 <code>rejected</code> 那么结果将会传递给 <code>catch</code> 方法；并且函数会中断执行,除非使用 <code>try..catch</code> 或者 对应的 <code>Pomise</code> 使用 <code>catch</code>方法 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">ay</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">Promise</span>.reject(<span class="number">18</span>).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Owem"</span></span><br><span class="line">&#125;</span><br><span class="line">ay().then(<span class="function"><span class="params">res</span> =&gt;</span><span class="built_in">console</span>.log(res))</span><br><span class="line"><span class="comment">//18</span></span><br><span class="line"><span class="comment">//Owem</span></span><br></pre></td></tr></table></figure></li><li><p>多个 <code>await</code> 后面的异步，如果不存在继发关系，最好同时触发</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> time = + <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="built_in">console</span>.log(time,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">let</span> [p1,p2] = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([ </span><br><span class="line">       <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve,<span class="number">1000</span>)),</span><br><span class="line">       <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve,<span class="number">2000</span>))]);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> +<span class="keyword">new</span> <span class="built_in">Date</span>() - time;</span><br><span class="line">&#125;</span><br><span class="line">fn().then(<span class="function"><span class="params">time</span> =&gt;</span> <span class="built_in">console</span>.log(time,<span class="number">2</span>));</span><br></pre></td></tr></table></figure><ul><li>只能再 async 函数中使用 await <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">ay</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Owem"</span></span><br><span class="line">&#125;</span><br><span class="line">ay()  <span class="comment">//error</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="async-原理"><a href="#async-原理" class="headerlink" title="async 原理"></a>async 原理</h3><ul><li>将Generator 函数和执行器包装再一个函数中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autoactuator</span> (<span class="params">gen</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">const</span> g = gen();</span><br><span class="line">    <span class="keyword">let</span> step = <span class="function">(<span class="params">next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> n;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            n = next();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(err) &#123;</span><br><span class="line">            <span class="keyword">return</span> reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n.done)&#123;</span><br><span class="line">            <span class="keyword">return</span> resolve(n.value)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Promise</span>.resolve(next.value).ten(<span class="function">(<span class="params">v</span>) =&gt;</span>&#123;</span><br><span class="line">            step(<span class="function"><span class="params">()</span> =&gt;</span> g.next(v));</span><br><span class="line">        &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            setp(<span class="function"><span class="params">()</span> =&gt;</span> g.throw(e));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    step(<span class="function"><span class="params">()</span> =&gt;</span> g.next(<span class="literal">undefined</span>));</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ES2017引入async-函数&quot;&gt;&lt;a href=&quot;#ES2017引入async-函数&quot; class=&quot;headerlink&quot; title=&quot;ES2017引入async 函数&quot;&gt;&lt;/a&gt;ES2017引入async 函数&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Generato
      
    
    </summary>
    
      <category term="ES6" scheme="https://owen027.github.io/categories/ES6/"/>
    
    
      <category term="async" scheme="https://owen027.github.io/tags/async/"/>
    
  </entry>
  
  <entry>
    <title>Pormise</title>
    <link href="https://owen027.github.io/2019/03/14/promise/"/>
    <id>https://owen027.github.io/2019/03/14/promise/</id>
    <published>2019-03-14T11:27:09.000Z</published>
    <updated>2019-04-21T15:59:13.601Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><blockquote><p>为了解决 “回调地狱”（callback hell）而提出的写法<br>允许将 <code>callback</code> 变成链式调用<br>它是一个容器，保存着某个异步操作的结果。</p></blockquote><p><strong>特点</strong></p><ul><li><p>对象的状态部受外界影响；有三种状态， 进行中( pending ) 、 成功( fulfilled ) 、 失败( rejected );只有异步操作的结果可以决定那种状态。</p></li><li><p>状态一旦改变，就不会更改（resolved 定型），状态的改变只会是两种情况 pengding -&gt; fulfilled or pengding -&gt; rejected;</p></li><li><p><label>  一旦建立就会立即执行 </label>, 中途无法取消，无法得知事件进展，不设置callback，内部将会抛出错误</p></li></ul><h3 id="简单实列"><a href="#简单实列" class="headerlink" title="简单实列"></a>简单实列</h3><blockquote><p>使用 <code>Promise</code> 构造函数生成实例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//example</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve,reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//... do something</span></span><br><span class="line">    $.<span class="keyword">get</span>(url,function (data) &#123;</span><br><span class="line">        <span class="keyword">if</span> (data) &#123;</span><br><span class="line">            resolve(data)</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        reject(err)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><p>可见 <code>Promise</code> 接受一个callback 作为参数， callback有两个参数，都是函数</p><ul><li>第一个 <code>resolve</code> 异步操作成功时调用，将成功的信息作为参数传递出去</li><li>第二个 <code>rejcet</code> 异步操作失败时调用，将失败的信息传递出去</li></ul><h4 id="then-方法"><a href="#then-方法" class="headerlink" title="then 方法"></a>then 方法</h4><p>生成实例后,可以使用 <code>then</code> 方法 接收成功状态和失败状态的回调,<label>在当前脚本所有同步任务执行完才会执行</label></p><ul><li>第一个参数是成功后的callback (必传)</li><li>第二个参数是失败后的callback (为可选参数)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise = <span class="function">(<span class="params">time</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"promise"</span>)</span><br><span class="line">        setTimeout(resolve,time,<span class="string">'Owen'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">promise(<span class="number">1000</span>).then(<span class="function">(<span class="params">val</span>) =&gt;</span> <span class="built_in">console</span>.log(val)) <span class="comment">//"promise"  1s后 "Owen"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//加载图片</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImage</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">        image.onload = <span class="function"><span class="params">()</span> =&gt;</span> resolve(image);</span><br><span class="line"></span><br><span class="line">        image.onerror = <span class="function"><span class="params">()</span> =&gt;</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`not lad image at: <span class="subst">$&#123;url&#125;</span>`</span>))</span><br><span class="line"></span><br><span class="line">        image.src = url;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现原生ajax(get)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getJSON = <span class="function"><span class="keyword">function</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> handler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ( <span class="keyword">this</span>.readySate !== <span class="number">4</span> )  <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span> ) &#123;</span><br><span class="line">                resolve(<span class="keyword">this</span>.response)</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                reject( <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="keyword">this</span>.statusText) )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> client = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">              client.open(<span class="string">"GET"</span>,url);</span><br><span class="line">              client.onreadystatechange = handler;</span><br><span class="line">              client.setRequestHeader(<span class="string">"Accept"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">              client.send()</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getJSON(<span class="string">'url'</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;,err =&gt; <span class="built_in">console</span>.error(err));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//---</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line"> resolve();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">  resolve(p1);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setTimeout( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="built_in">window</span>.requestAnimationFrame(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 回调函数执行次数通常是每秒60次</span></span><br><span class="line">    <span class="comment">// 当requestAnimationFrame() 运行在后台标签页或者隐藏的&lt;iframe&gt; 里时，</span></span><br><span class="line">    <span class="comment">// requestAnimationFrame() 会被暂停调用以提升性能和电池寿命。</span></span><br><span class="line">    <span class="comment">//回调函数会被传入DOMHighResTimeStamp参数 （排队的回调开始触发的时间戳）</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">8</span>,v)</span><br><span class="line">    <span class="comment">//cancel​Animation​Frame(requestId) 取消 window.requestAnimationFrame</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p2.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">7</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">6</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//p1的状态决定了p2的状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="comment">//4</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="comment">//&#123;&lt;resolved&gt;: undefined&#125;</span></span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//向另一个 promise 传递 promise 执行状态问题</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'fail'</span>)); <span class="built_in">console</span>.log(<span class="number">1</span>)&#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="number">2</span>); resolve(p1) &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p2.then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error)) <span class="comment">//error fail</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//传入的 promise 会改变 自己 promise 的状态，变成传入的promise的状态</span></span><br></pre></td></tr></table></figure><h3 id="catch-方法"><a href="#catch-方法" class="headerlink" title="catch 方法"></a>catch 方法</h3><ul><li><p>指定发生错误时的回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">p.then(<span class="function">(<span class="params">val</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'fulfilled:'</span>, val))</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'rejected'</span>, err));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">p.then(<span class="function">(<span class="params">val</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'fulfilled:'</span>, val))</span><br><span class="line">  .then(<span class="literal">null</span>, (err) =&gt; <span class="built_in">console</span>.log(<span class="string">"rejected:"</span>, err));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//状态改变后不会再接收之后的状态</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    resolve(<span class="string">'ok'</span>);</span><br><span class="line">   reject( <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'test'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123; <span class="built_in">console</span>.log(value) &#125;) <span class="comment">//ok</span></span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123; <span class="built_in">console</span>.log(error) &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// promise 内部错误不会影响外部的代码，不会退出进程、终止脚本执行</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    resolve(Owen);</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line">promise.catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;<span class="built_in">console</span>.log(error)&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'Owen:'</span> + v)&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//18</span></span><br><span class="line"><span class="comment">//error</span></span><br><span class="line"><span class="comment">//Owen:undefined </span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//如果将 then 放到第一个将不会执行</span></span><br><span class="line"> <span class="comment">//因为 then 接收的是 promise变量 的状态</span></span><br><span class="line"> <span class="comment">//而放到末尾则接收的是 catch 返回的 Promise 函数的状态</span></span><br></pre></td></tr></table></figure><h3 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h3><p>不管 promise 的状态怎么变都会执行的方法 （ES2018)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//finally方法的回调函数不接受任何参数</span></span><br><span class="line">promise.finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 语句</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">promise.then(</span><br><span class="line">  result =&gt; &#123;</span><br><span class="line">    <span class="comment">// 语句</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="comment">// 语句</span></span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h3 id="all"><a href="#all" class="headerlink" title="all"></a>all</h3><ul><li>用于将多个 Promise 实例，包装成一个新 Promise 实例</li><li>参数是一个数组或者具有 Interator的接口（返回成员必须是promise)，如果成员不是 Promise 实例，会将其包装成一个porimse 实例</li><li>等待所以成员的状态都变成 <code>resolved</code> 状态， <code>Promise.all</code> 才变成 <code>resolved</code> 状态，并且<label>成员返回值将以数组形式传递给 <code>then</code></label></li><li>数组成员中只有又一位成员为<code>rejectd</code> 状态，<code>Promise.all</code> 就会变成 <code>rejected</code> , 并<label>将第一个变为<code>rejectd</code>的成员返回值传递给 <code>catch</code></label></li><li>如果成员自己定义了 <code>then</code> 或者 <code>catch</code>  对应成员的返回值不会传递到 <code>all</code> 的回调当中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//example</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> setTimeout(resolve,<span class="number">1000</span>,<span class="string">'Owen'</span>))</span><br><span class="line">            <span class="comment">//.then(result =&gt;console.log(result))</span></span><br><span class="line">           <span class="comment">// .catch(err =&gt;console.log(err));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'报错了'</span>);&#125;)</span><br><span class="line">            .then(<span class="function"><span class="params">re</span> =&gt;</span> <span class="built_in">console</span>.log(re))</span><br><span class="line">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));<span class="comment">//error</span></span><br><span class="line">            </span><br><span class="line"><span class="keyword">const</span> promise = <span class="built_in">Promise</span>.all([p1,p2])</span><br><span class="line">            .then(<span class="function"><span class="params">res</span>=&gt;</span><span class="built_in">console</span>.log(res)) <span class="comment">//1s 后 ["Owen",undefined]  </span></span><br><span class="line">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));</span><br></pre></td></tr></table></figure><h3 id="race"><a href="#race" class="headerlink" title="race"></a>race</h3><ul><li>和 <code>all</code> 方法一样  只是成员状态发生改变的情况不同</li><li>数组中只要有一个成员改变状态， <code>race</code> 就改变状态，并将返回值传递给 <code>race</code>方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//example</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> setTimeout(resolve,<span class="number">1000</span>,<span class="string">'Owen'</span>))</span><br><span class="line">            <span class="comment">//.then(result =&gt;console.log(result))</span></span><br><span class="line">           <span class="comment">// .catch(err =&gt;console.log(err));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'报错了'</span>);&#125;)</span><br><span class="line">            .then(<span class="function"><span class="params">re</span> =&gt;</span> <span class="built_in">console</span>.log(re))</span><br><span class="line">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));<span class="comment">//error</span></span><br><span class="line">            </span><br><span class="line"><span class="keyword">const</span> promise = <span class="built_in">Promise</span>.race([p1,p2])</span><br><span class="line">            .then(<span class="function"><span class="params">res</span>=&gt;</span><span class="built_in">console</span>.log(res)) <span class="comment">//undefined </span></span><br><span class="line">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));</span><br></pre></td></tr></table></figure><h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h3><ul><li>将对象转化为Promise对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'Owen'</span>)</span><br><span class="line"><span class="comment">// 等同</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(<span class="string">'Owen'</span>))</span><br></pre></td></tr></table></figure></li></ul><p>传参情况</p><h4 id="Promise实例"><a href="#Promise实例" class="headerlink" title="Promise实例"></a>Promise实例</h4><ul><li>返回出入的实例</li></ul><h4 id="传入-thenable对象"><a href="#传入-thenable对象" class="headerlink" title="传入 thenable对象"></a>传入 <code>thenable</code>对象</h4><ul><li>具有 <code>then</code>方法的对象,将其转化为 <code>Promise</code> 对象 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    then: <span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        resolve(<span class="string">"Owen"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.resolve(obj);</span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res) <span class="comment">//"Owen"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="不是对象或者没有-thenable方法"><a href="#不是对象或者没有-thenable方法" class="headerlink" title="不是对象或者没有 thenable方法"></a>不是对象或者没有 <code>thenable</code>方法</h4><ul><li>返回一个新的Promise，状态为 <code>resolved</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.resolve(<span class="number">18</span>);</span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">re</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(re) <span class="comment">//18</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="reject"><a href="#reject" class="headerlink" title="reject"></a>reject</h4><ul><li>返回一个新的Promise，状态为 <code>rejectd</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.reject(<span class="string">'出错了'</span>);</span><br><span class="line"><span class="comment">// 等同 </span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> reject(<span class="string">'出错了'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> thenable = &#123;</span><br><span class="line">  then(resolve, reject) &#123;</span><br><span class="line">    reject(<span class="string">'出错了'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.reject(thenable)</span><br><span class="line">.catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e === thenable) <span class="comment">//true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="结合-Generator-使用"><a href="#结合-Generator-使用" class="headerlink" title="结合 Generator 使用"></a>结合 Generator 使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> g = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> foo = <span class="keyword">yield</span> getFoo();</span><br><span class="line">    <span class="built_in">console</span>.log(foo);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFoo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    resolve(<span class="string">'foo'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span> (<span class="params">generator</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> it = generator();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (result.done) <span class="keyword">return</span> result.value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result.value.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> go(it.next(value));</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> go(it.throw(error));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  go(it.next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run(g);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Promise&quot;&gt;&lt;a href=&quot;#Promise&quot; class=&quot;headerlink&quot; title=&quot;Promise&quot;&gt;&lt;/a&gt;Promise&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;为了解决 “回调地狱”（callback hell）而提出的写法&lt;br&gt;允
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://owen027.github.io/categories/JavaScript/"/>
    
    
      <category term="async" scheme="https://owen027.github.io/tags/async/"/>
    
  </entry>
  
  <entry>
    <title>异步操作原理（二）</title>
    <link href="https://owen027.github.io/2019/03/13/eventLoop/"/>
    <id>https://owen027.github.io/2019/03/13/eventLoop/</id>
    <published>2019-03-13T14:19:05.000Z</published>
    <updated>2019-04-21T15:59:13.598Z</updated>
    
    <content type="html"><![CDATA[<h3 id="事件循环-eventLoop-详解"><a href="#事件循环-eventLoop-详解" class="headerlink" title="事件循环(eventLoop) 详解"></a>事件循环(<code>eventLoop</code>) 详解</h3><p><strong>并行和并发：</strong></p><p>并行性是指两个或多个事件在同一时刻发生；<br>并发性是指两个或多个事件在同一时间段内发生。</p><h4 id="任务队列-和-事件循环"><a href="#任务队列-和-事件循环" class="headerlink" title="任务队列 和 事件循环"></a>任务队列 和 事件循环</h4><blockquote><p>JS 将变量存储在 <label>堆 <code>heap</code></label> 和 <label> 栈 <code>stack</code></label>中<br>堆中存放对象比如 ：数组，对象，函数<br>栈中存放变量和对象的指针<br>运行时同步任务会排好队，依次执行，而排队的地方就叫执行栈（先进后出）</p></blockquote><ul><li><p>JS运行时，除了有一个主线程运行，引擎还提供任务队列 <code>task queue</code> , 里面是各种需要当前程序处理的异步任务。（不止一个任务队列）</p></li><li><p>异步任务通常是一个回调函数；如果一个异步任务没有回调函数，是不会放入异步任务队列中，同样也不会进入主线程中执行。</p></li></ul><p><strong>执行过程：</strong></p><ol><li>主线程会先执行完所有同步任务</li><li>同步任务结束，查看任务队列（<label>先进先出的数据结构，排在前面的事件，优先被主线程读取。</label>）里面的异步任务</li><li>查看所有满足执行条件的异步任务，放入主线程中变成同步任务，执行对应的回调函数。</li><li>执行完毕再将下一个满足执行条件的异步任务放入主线程中执行。</li><li>不断重复前三步操作</li></ol><p>只要同步任务执行完毕，JS引擎会不停的监测检查任务队列中的异步任务，将满足执行条件且最先进入的任务加入到执行栈中去执行，如此往复。这种检查机制就叫事件循环 <code>Event Loop</code><br><img src="/static/img/eventLoop.png" alt="event loop"></p><h4 id="微任务与宏任务"><a href="#微任务与宏任务" class="headerlink" title="微任务与宏任务"></a>微任务与宏任务</h4><p>异步任务还会分两层：</p><ul><li>微任务(<code>micro task</code>) </li><li>宏任务(<code>macro task</code>)</li></ul><p><label>主线程会先查看微任务 <code>micro task</code></label>；<br>如果没有满足条件的任务，再去宏任务中查找；<br>如果有则将所有满足条件的微任务按顺序依次加入到主进程中；<br>执行完毕后再去红任务队列中查找，往复循环。<br>常见宏任务：</p><ul><li>定时器 I/O（输入/输出）操作 </li></ul><p>微任务(<code>jobs</code>)： </p><ul><li>Promise async/await<h4 id="nodeJS"><a href="#nodeJS" class="headerlink" title="nodeJS"></a>nodeJS</h4>nodeJS 中任务队列 加入了 <code>process.nextTick</code> 和 <code>setImmediate</code>。<br>前者比后者先执行<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  process.nextTick(<span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">2</span>);&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">setImmediate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  setImmediate(<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    setImmediate(<span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">4</span>);&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'TIMEOUT FIRED'</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// TIMEOUT FIRED</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">//这个结果是不确定的可能是 1234  TIMEOUT FIRED  ||   12  TIMEOUT FIRED 34</span></span><br></pre></td></tr></table></figure></li></ul><p>其二者的调用顺序取决于当前event loop的上下文，如果他们在异步i／o callback之外调用，其执行先后顺序是不确定的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line">fs.readFile(__filename, () =&gt; &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timeout'</span>)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">  setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'immediate'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//immediate</span></span><br><span class="line"><span class="comment">//timeout</span></span><br></pre></td></tr></table></figure></p><p>这是因为<code>fs.readFile</code> callback执行完后，程序设定了<code>timer</code> 和 <code>setImmediate</code>，因此poll阶段不会被阻塞进而进入check阶段先执行setImmediate，后进入timer阶段执行setTimeout。<a href="https://juejin.im/post/5aab2d896fb9a028b86dc2fd#comment" target="_blank" rel="noopener">setTimeout和setImmediate的差异</a></p><p>process.nextTick在最新版nodejs中不被推荐使用，推荐使用setImmediate ，原因在于nextTick是在当前帧介绍后立即执行，会阻断I/O并且有最大数量限制；而setImmediate不会阻断I/O，更像是setTimeout(func, 0) </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;事件循环-eventLoop-详解&quot;&gt;&lt;a href=&quot;#事件循环-eventLoop-详解&quot; class=&quot;headerlink&quot; title=&quot;事件循环(eventLoop) 详解&quot;&gt;&lt;/a&gt;事件循环(&lt;code&gt;eventLoop&lt;/code&gt;) 详解&lt;/h
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://owen027.github.io/categories/JavaScript/"/>
    
    
      <category term="async" scheme="https://owen027.github.io/tags/async/"/>
    
  </entry>
  
  <entry>
    <title>异步操作原理(一)</title>
    <link href="https://owen027.github.io/2019/03/11/async/"/>
    <id>https://owen027.github.io/2019/03/11/async/</id>
    <published>2019-03-11T11:50:34.000Z</published>
    <updated>2019-04-21T15:59:13.597Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h3><blockquote><ul><li><code>javascript</code> 只再一个线程上<label>运行</label>，同时只能执行一个任务，一行一行执行。</li><li>javascript 运行在单线程上，并不代表 JavaScript引擎就是单线程的，其实它有多个线程，单个脚本只能在一个线程上运行（主线程），其他线程在后台配合运行。</li><li>为了利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程，但是子线程完全受主线程控制，且不得操作 DOM。所以，这个新标准并没有改变 JavaScript 单线程的本质。</li></ul></blockquote><p>这种模式好处在于， 实现起来简单，环境单纯。 但是 耗时较长，后面的任务必须等待前面的任务执行完毕。</p><h3 id="同步和异步任务"><a href="#同步和异步任务" class="headerlink" title="同步和异步任务"></a>同步和异步任务</h3><ul><li>同步<br>未被引擎挂起、在主线程上排队执行的任务。需要前面的任务执行完后才能执行。</li><li>异步<ol><li>被引擎挂起，暂不处理的任务,不进入主线程、而进入任务队列;</li><li><label>只有达到某个条件，异步任务才会进入主线程，不会堵塞异步任务后面的代码 （ajax 是最具代表性的异步任务）</label></li></ol></li></ul><h3 id="异步操作模式"><a href="#异步操作模式" class="headerlink" title="异步操作模式"></a>异步操作模式</h3><h4 id="回调函数-Callback"><a href="#回调函数-Callback" class="headerlink" title="回调函数 Callback"></a>回调函数 <code>Callback</code></h4><blockquote><p>将函数传递进一个方法中，函数不会立即执行，等待出来结果之后在执行。<br>回调函数是异步操作最基本的方法</p></blockquote><p>容易出现回调地狱（<code>Callback hell</code>)<br>比如多个 ajax 嵌套请求<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ajax(url, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 处理逻辑</span></span><br><span class="line">    ajax(url1, () =&gt; &#123;</span><br><span class="line">        <span class="comment">// 处理逻辑</span></span><br><span class="line">        ajax(url2, () =&gt; &#123;</span><br><span class="line">            <span class="comment">// 处理逻辑</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这种方式容易理解和简单，但是不利于<label>维护和阅读</label>；<br>耦合度高，结构混乱，错误较难追踪，而且每个任务只能指定一个回调。</p><h4 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h4><blockquote><p>采用事件驱动。<br>W3C规范中定义3个事件阶段：捕获(Netscape)，目标，冒泡（IE）。<br>事件冒泡：在目标元素上发生click事件的顺序 目标元素 -&gt; 父级元素 -&gt; body -&gt; html -&gt; document<br>事件捕获： 与冒泡相反，document -&gt; html -&gt; body -&gt; 父级元素 -&gt; 目标元素<br>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原生事件委托</span></span><br><span class="line">    <span class="keyword">var</span> parent = <span class="built_in">document</span>.getElementById(<span class="string">'parent'</span>);</span><br><span class="line">    parent.addEventListener(<span class="string">'click'</span>,showColor,<span class="literal">false</span>);</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">showColor</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> son = e.target;</span><br><span class="line">            <span class="keyword">if</span>(son.nodeName.toLowerCase() === <span class="string">'li'</span>)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'The color is '</span> + son.innerHTML);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   <span class="comment">//类似 jQuery写法</span></span><br><span class="line">    fn.on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br><span class="line">    <span class="comment">//等同于</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//do someing</span></span><br><span class="line">            fn.trigger(<span class="string">'done'</span>)</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>   这种方法比较容易理解，可以绑定多个事件，每个事件可以指定多个回调函数，可以去“耦合”(<code>decoupling</code>),便于实现模块化。 但是整个程序都会变成事件驱动，流程不清晰。</p><h4 id="发布-订阅"><a href="#发布-订阅" class="headerlink" title="发布/订阅"></a>发布/订阅</h4><blockquote><p>消息的发送者（称为发布者） 不会将消息直接发送给特定的接收者（称为订阅者），而是将不消息分为不同的类别，不需要了解哪些订阅者；<br>订阅者,只接收感兴趣的消息，不需要了解哪些发布者<br>可以把事件理解成“信号”,如果存在一个“信号中心”；<br> 某个任务执行完成，就向信号中心“发布” (<code>publish</code>) 一个信号，其他任务可以向信号中心“订阅”(<code>subscribe</code>)这个信号，从而知道什么时候自己开始执行</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = $(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">obj.on(<span class="string">"aaa"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">111111111111</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">obj.on(<span class="string">"aaa"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">222222222222</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">$(dom).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        obj.trigger(<span class="string">"aaa"</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>当 <code>foo</code> 执行完毕后，想消息纵向发布 <code>done</code>信号，引发执行<code>fn</code></p><h5 id="消息过滤"><a href="#消息过滤" class="headerlink" title="消息过滤"></a>消息过滤</h5><p>订阅者通常接收信号中心中(消息代理)的一个子集，选择接受和处理的消息过程叫过滤<br><strong>过滤形式</strong></p><ul><li>基于主题<blockquote><p>消息被发布到主题或命名通道上；订阅者将受到所有信息，并且所有订阅同一主题的订阅者都将收到同样的信息；发布者赋值定义订阅者所订阅的消息类别</p></blockquote></li><li>基于内容<blockquote><p>订阅者定义感兴趣的条件，只有当消息的属性或内容满足订阅者的条件，消息才投递到该订阅者。订阅者负责堆消息分类。</p></blockquote></li></ul><h5 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h5><p>发布者 发布消息到一个消息代理，订阅者向其注册订阅，由消息代理来过滤</p><p>优缺点：</p><ul><li>松耦合，发布者和订阅者只需要关注主题内容，相互独立地运行。</li><li>扩展性强，通过并行操作，消息缓存，基于树或网路路由等技术，比传统客户端具有更好的扩展性。<ul><li>缺点： 发布者解耦订阅者，问题难以跟踪，无法知道消息传送是成功的还是失败的</li></ul></li></ul><h3 id="异步操作的流程控制（多个异步操作如何确定异步操作的执行顺序，如何保证这种顺序执行）"><a href="#异步操作的流程控制（多个异步操作如何确定异步操作的执行顺序，如何保证这种顺序执行）" class="headerlink" title="异步操作的流程控制（多个异步操作如何确定异步操作的执行顺序，如何保证这种顺序执行）"></a>异步操作的流程控制（多个异步操作如何确定异步操作的执行顺序，如何保证这种顺序执行）</h3><h4 id="串行执行"><a href="#串行执行" class="headerlink" title="串行执行"></a>串行执行</h4><blockquote><p>一个任务执行完毕后，再执行另一个<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"> <span class="keyword">let</span> results = [];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="function">(<span class="params">arg,callback</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`参数：<span class="subst">$&#123;arg&#125;</span>，1秒后返回`</span>);</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>callback(arr*<span class="number">2</span>)&#125;,<span class="number">1000</span>);</span><br><span class="line">  &#125; </span><br><span class="line"><span class="keyword">const</span> final = <span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`完成：`</span>,res);</span><br><span class="line"><span class="keyword">const</span> series = <span class="function"><span class="params">item</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(item)&#123;</span><br><span class="line">        <span class="keyword">async</span>(item,result=&gt;&#123;</span><br><span class="line">            results.push(result);</span><br><span class="line">            <span class="keyword">return</span> serise(items.shift();)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> final(results[results.length<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">series(items.shift());</span><br></pre></td></tr></table></figure></p></blockquote><p>上面代码 <code>series</code> 就是一个串行函数； 类似与同步任务</p><h4 id="并行执行"><a href="#并行执行" class="headerlink" title="并行执行"></a>并行执行</h4><blockquote><p>所有异步任务同时执行，全部执行完毕，再执行 最终 (<code>final</code>) 函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"> <span class="keyword">let</span> results = [];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="function">(<span class="params">arg,callback</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`参数：<span class="subst">$&#123;arg&#125;</span>，1秒后返回`</span>);</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>callback(arr*<span class="number">2</span>)&#125;,<span class="number">1000</span>);</span><br><span class="line">  &#125; </span><br><span class="line"><span class="keyword">const</span> final = <span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`完成：`</span>,res);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> items)&#123;</span><br><span class="line">     <span class="keyword">async</span>(item,(result) =&gt;&#123;</span><br><span class="line">         results.push(result)</span><br><span class="line">     &#125;)</span><br><span class="line">     <span class="keyword">if</span>(results.length == items.length)&#123;</span><br><span class="line">         final(results[results.length<span class="number">-1</span>]);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p> 上面代码，for 循环会同时执行5异步任务，等他们执行完毕再执行 <code>final</code> 函数。 过个并行任务较多，容易耗尽系统资源，拖慢运行</p><h4 id="并串结合"><a href="#并串结合" class="headerlink" title="并串结合"></a>并串结合</h4><blockquote><p>限制并行执行任务的数量，避免占用过多系统资源</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> items = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> results = [];</span><br><span class="line"><span class="keyword">let</span> running = <span class="number">0</span>,limit = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="function">(<span class="params">arg,callback</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`参数：<span class="subst">$&#123;arg&#125;</span>，1秒后返回`</span>);</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>callback(arr*<span class="number">2</span>)&#125;,<span class="number">1000</span>);</span><br><span class="line">  &#125; </span><br><span class="line"><span class="keyword">const</span> final = <span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`完成：`</span>,res);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> launcher = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (running &lt; limit &amp;&amp; items.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> item = items.shift()；</span><br><span class="line">        <span class="keyword">async</span> (item,(res)=&gt;&#123;</span><br><span class="line">            results.push(result);</span><br><span class="line">            running--;</span><br><span class="line">            items.length? launcher(): final(results);</span><br><span class="line">        &#125;)</span><br><span class="line">        running++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码，最多只能运行两个异步任务，当前 <code>running</code> 记录运行的任务数量，低于门槛 limit 就会新增一个任务，直到任务执行完毕。</p><h3 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hash = <span class="built_in">window</span>.location.hash;</span><br><span class="line"><span class="keyword">const</span> hashWatcher = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.location.hash != hash)&#123;</span><br><span class="line">        updatePage()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setInterval(hashWatcher,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p><code>setInterval</code> 时间 间隔是” 开始执行 “ 之间的间隔,不会考虑每次执行的任务时间，所以两次执行间隔会小于指定时间。比如 指定 100ms  任务本身消耗 105 ms，那么第一次执行完毕后，第二次会立即执行。</p><p>如果要固定间隔，可以使用 <code>setTimeout</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hash = <span class="built_in">window</span>.location.hash;</span><br><span class="line"><span class="keyword">const</span> hashWatcher = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.location.hash != hash)&#123;</span><br><span class="line">        updatePage()</span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(hashWatcher,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(hashWatcher,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong></p><blockquote><p>HTML标准规定 <code>setTimeout</code> 最大间隔 4ms<br> 由于定时器每执行一次,会返回一个整数，连续执行，返回值比上一次大1<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 每轮事件循环检查一次</span></span><br><span class="line">  <span class="keyword">var</span> gid = setInterval(clearAllTimeouts, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">clearAllTimeouts</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> id = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"g:"</span>+gid) </span><br><span class="line">    &#125;,<span class="number">0</span>);</span><br><span class="line">   <span class="keyword">while</span> (id &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (id !== gid) &#123;</span><br><span class="line">        clearTimeout(id);</span><br><span class="line">      &#125;</span><br><span class="line">      id--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="防抖（debounce）"><a href="#防抖（debounce）" class="headerlink" title="防抖（debounce）"></a>防抖（<code>debounce</code>）</h3><blockquote><p>在某些场景下不希望事件执行太频繁，我们可以设置一个阀门临界值，再一段时间内只执行一次,或者一段时间过后执完所有任务</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一段时间只执行一次</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> perform = <span class="function">(<span class="params">fn,time</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span>  flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span>  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> self = <span class="keyword">this</span>,arg = <span class="built_in">arguments</span>;</span><br><span class="line">         <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">             flag = <span class="literal">false</span>;</span><br><span class="line">             fn.apply(self,arg);</span><br><span class="line">               setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">                flag = <span class="literal">true</span></span><br><span class="line">             &#125;,time)</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">setInterval(perform(fn,<span class="number">2000</span>),<span class="number">500</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 经过一段时间再执行所有要执行的任务</span></span><br><span class="line"> <span class="keyword">let</span> debounce = <span class="function">(<span class="params">fn,delay</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> self = <span class="keyword">this</span>,arg = <span class="built_in">arguments</span>;</span><br><span class="line">         timer &amp;&amp; clearTimeout(timer);</span><br><span class="line">         timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">             fn.apply(self,arg)</span><br><span class="line">         &#125;,delay)</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">setInterval(perform(fn,<span class="number">2500</span>),<span class="number">500</span>);</span><br></pre></td></tr></table></figure><hr><p><a href="http://wangdoc.com/javascript/async/general.html#%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF" target="_blank" rel="noopener">参考原文链接： http://wangdoc.com</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;单线程&quot;&gt;&lt;a href=&quot;#单线程&quot; class=&quot;headerlink&quot; title=&quot;单线程&quot;&gt;&lt;/a&gt;单线程&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&lt;/code&gt; 只再一个线程上&lt;label&gt;运行&lt;/label
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://owen027.github.io/categories/JavaScript/"/>
    
    
      <category term="async" scheme="https://owen027.github.io/tags/async/"/>
    
  </entry>
  
  <entry>
    <title>模块化开发(二)</title>
    <link href="https://owen027.github.io/2019/03/07/modularization/"/>
    <id>https://owen027.github.io/2019/03/07/modularization/</id>
    <published>2019-03-07T14:07:50.000Z</published>
    <updated>2019-05-19T01:55:58.423Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ES6-详解"><a href="#ES6-详解" class="headerlink" title="ES6 详解"></a>ES6 详解</h3><blockquote><p>ES6 的模块自动采用严格模式，不管你有没有在模块头部加上”use strict”。<br> 顶层的this指向undefined，即不应该在顶层代码使用this。</p></blockquote><p>严格模式主要有以下限制：</p><ol><li>变量必须声明后再使用</li><li>函数的参数不能有同名属性，否则报错</li><li>不能使用<code>with</code>语句</li><li>不能对只读属性赋值，否则报错</li><li>不能使用前缀 0 表示八进制数，否则报错</li><li>不能删除不可删除的属性，否则报错</li><li>不能删除变量<code>delete prop</code>，会报错，只能删除属性<code>delete global[prop]</code></li><li><code>eval</code>不会在它的外层作用域引入变量</li><li><code>eval</code>和<code>arguments</code>不能被重新赋值</li><li>arguments不会自动反映函数参数的变化</li><li>不能使用<code>arguments.callee</code></li><li>不能使用<code>arguments.caller</code></li><li>禁止this指向全局对象</li><li>不能使用<code>fn.caller</code>和<code>fn.arguments</code>获取函数调用的堆栈</li><li><p>增加了保留字（比如<code>protected</code>、<code>static</code>和<code>interface</code>）<br>上面这些限制，模块都必须遵守。</p><h4 id="export命令"><a href="#export命令" class="headerlink" title="export命令"></a>export命令</h4></li></ol><ul><li><p><code>export</code>除了输出变量，还可以输出函数或类（class）,还可以通过 <code>as</code> 更改输出名。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> obj =&#123;<span class="attr">name</span>:  <span class="string">"Owen"</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> multiply = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x * y;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    age,</span><br><span class="line">    obj <span class="keyword">as</span> monicker, <span class="comment">//改变量名</span></span><br><span class="line">    multiply</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>导出的对象必须是对外的接口</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num =<span class="number">2</span>;</span><br><span class="line"><span class="keyword">export</span> num ; <span class="comment">//error 因为实际输出的是一个值，须放在对象中 &#123;num&#125;</span></span><br><span class="line"></span><br><span class="line">exprot <span class="number">2</span>  <span class="comment">//error  输出的是值 而不是一个对外接口 =&gt; 须改成 export let num =2；</span></span><br></pre></td></tr></table></figure><ul><li>不能放到局部作用域中导出， 因为导出的对象是动态绑定的<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="function">(<span class="params">r</span>) =&gt;</span> r++;</span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">export</span> <span class="keyword">default</span> foo; <span class="comment">//error</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="export-default"><a href="#export-default" class="headerlink" title="export default"></a>export default</h3><ul><li>全局只能有一个 <code>export default</code></li><li><code>export default</code>  后面不能有 变量声明的关键字</li><li>使用 <code>export default</code> ，import 就不需要使用 <code>{}</code>,只需要自定义一个变量即可</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">var</span> a=<span class="number">1</span>; <span class="comment">//error</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> obj =&#123;<span class="attr">name</span>:<span class="string">'Owen'</span>&#125;;</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">name</span>:<span class="string">"Owen"</span>&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;num, obj1&#125;</span><br></pre></td></tr></table></figure><h3 id="import"><a href="#import" class="headerlink" title="import"></a><code>import</code></h3><ul><li><p>配合 <code>from</code> 导入模块,  通过 <code>as</code> 修改导入接口, 接口不能重新赋值，但对象可以修改内部属性或方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;age, monicker <span class="keyword">as</span> obj, multiply&#125; <span class="keyword">from</span> <span class="string">'./preson.js'</span>;</span><br><span class="line">  age = <span class="number">0</span> ; <span class="comment">//error</span></span><br><span class="line">  obj.feature = <span class="string">"handsome Owen"</span>; </span><br><span class="line">  <span class="built_in">console</span>.log(age, obj。name, multiply(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">  <span class="keyword">import</span> * <span class="keyword">as</span> preson <span class="keyword">from</span> <span class="string">"./preson.js"</span> <span class="comment">//引入所有接口</span></span><br></pre></td></tr></table></figure></li><li><p><code>import</code> 具有提升的效果，会提升到作用域顶部执行，同一个模块多次引入只执行一次，并且不能再局部作用域中引入。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">multiply(<span class="number">2</span>,<span class="number">2</span>); <span class="comment">//4</span></span><br><span class="line"><span class="keyword">import</span> &#123;age, monicker <span class="keyword">as</span> obj, multiply&#125; <span class="keyword">from</span> <span class="string">'./preson.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">import</span> &#123;age, monicker <span class="keyword">as</span> obj, multiply&#125; <span class="keyword">from</span> <span class="string">'./preson.js'</span>; <span class="comment">//error</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="import-1"><a href="#import-1" class="headerlink" title="import()"></a><code>import()</code></h3><ul><li>因为require是运行时加载模块，import命令无法取代require的动态加载功能。因此，有一个提案，引入<code>import()</code>函数，完成动态加载。</li><li>import()函数可以用在任何地方，不仅仅是模块，非模块的脚本也可以使用。</li><li><p>和 <code>require</code>类似，不同之处在于 <code>import()</code>是同步加载 <code>require()</code>是异步加载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path =<span class="keyword">import</span>(<span class="string">'path'</span>);</span><br></pre></td></tr></table></figure></li><li><p>我们可以利用 <code>import()</code> 进行按需加载,动态加载，按条件加载:</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">'./a.js'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">        r.fn();</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">/* Error handling */</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="keyword">if</span>( x == <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> path =<span class="keyword">import</span>(<span class="string">'path'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>如果想同时加载多个模块，可以采用下面的写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">Promise</span>.all([</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./a.js'</span>),</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./b.js'</span>),</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./c.js'</span>),</span><br><span class="line">]) .then(<span class="function">(<span class="params">[a,b,c]</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line"> &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">/* Error handling */</span></span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ES6-详解&quot;&gt;&lt;a href=&quot;#ES6-详解&quot; class=&quot;headerlink&quot; title=&quot;ES6 详解&quot;&gt;&lt;/a&gt;ES6 详解&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;ES6 的模块自动采用严格模式，不管你有没有在模块头部加上”use strict”
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://owen027.github.io/categories/JavaScript/"/>
    
    
      <category term="moduleDevelop" scheme="https://owen027.github.io/tags/moduleDevelop/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli 升级 webpack4 配置</title>
    <link href="https://owen027.github.io/2019/03/07/webpack/"/>
    <id>https://owen027.github.io/2019/03/07/webpack/</id>
    <published>2019-03-07T09:20:47.000Z</published>
    <updated>2019-04-21T15:59:13.603Z</updated>
    
    <content type="html"><![CDATA[<h3 id="升级webpack4-先删除之前的webpack"><a href="#升级webpack4-先删除之前的webpack" class="headerlink" title="升级webpack4  先删除之前的webpack"></a>升级webpack4  先删除之前的webpack</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D webpack  webpack-cli webpack-dev-server</span><br></pre></td></tr></table></figure><h3 id="build-base-conf-js"><a href="#build-base-conf-js" class="headerlink" title="build/base.conf.js"></a>build/base.conf.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>) <span class="comment">//node OS模块 可查看主机系统相关信息</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>) <span class="comment">//node path模块 c处理文件路径</span></span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>) <span class="comment">//vue-cli封装的公用模块</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)<span class="comment">//vue-cli封装的配置</span></span><br><span class="line"><span class="keyword">const</span> HappyPack = <span class="built_in">require</span>(<span class="string">"happypack"</span>)<span class="comment">//开启多个子进程去并发执行</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)<span class="comment">//webpack主要插件，可以简化HTML文件的创建</span></span><br><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);<span class="comment">//清空打包好的文件</span></span><br><span class="line"><span class="keyword">const</span> ProgressBarPlugin = <span class="built_in">require</span>(<span class="string">'progress-bar-webpack-plugin'</span>)<span class="comment">//查看进度</span></span><br><span class="line"><span class="keyword">const</span> vueLoaderConfig = <span class="built_in">require</span>(<span class="string">'./vue-loader.conf'</span>)<span class="comment">// 处理less,sass等样式配置文件 </span></span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> argv = <span class="built_in">require</span>(<span class="string">"yargs-parser"</span>)(process.argv.slice(<span class="number">2</span>))<span class="comment">//获取运行  scripts 里面的指令 --mode 后面参数 </span></span><br><span class="line"><span class="keyword">const</span> isPro = argv.mode == <span class="string">"production"</span></span><br><span class="line"><span class="keyword">const</span> resolve = <span class="function"><span class="params">dir</span> =&gt;</span> path.resolve(__dirname, <span class="string">".."</span>, dir)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    context: path.resolve(__dirname, <span class="string">'../'</span>),</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: <span class="string">"./src/main.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: config.build.assetsRoot,</span><br><span class="line">        filename: <span class="string">'[name].js'</span>,</span><br><span class="line">        publicPath: isPro ?</span><br><span class="line">            config.build.assetsPublicPath : config.dev.assetsPublicPath</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>],</span><br><span class="line">        alias: &#123;</span><br><span class="line">            <span class="string">'vue'</span>: <span class="string">'vue/dist/vue.esm.js'</span>,</span><br><span class="line">            <span class="string">'src'</span>: path.resolve(__dirname, <span class="string">'../src/common'</span>),</span><br><span class="line">            <span class="string">'@'</span>: resolve(<span class="string">'src'</span>),</span><br><span class="line">            <span class="string">'~'</span>: resolve(<span class="string">'src/components/common'</span>),</span><br><span class="line">            <span class="string">'static'</span>: path.resolve(__dirname, <span class="string">'../static'</span>),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">                test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">                loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">                options: vueLoaderConfig</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                loaders: <span class="string">'happypack/loader?id=babel'</span>,<span class="comment">//配合 happypack插件使用</span></span><br><span class="line">                exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">                include: [resolve(<span class="string">'src'</span>), resolve(<span class="string">'test'</span>)]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    limit: <span class="number">10000</span>,</span><br><span class="line">                    name: utils.assetsPath(<span class="string">'img/[name].[hash:7].[ext]'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/</span>,</span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    limit: <span class="number">10000</span>,</span><br><span class="line">                    name: utils.assetsPath(<span class="string">'media/[name].[hash:7].[ext]'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(woff2?|eot|ttf|otf)(\?.*)?$/</span>,</span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    limit: <span class="number">10000</span>,</span><br><span class="line">                    name: utils.assetsPath(<span class="string">'fonts/[name].[hash:7].[ext]'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    node: &#123;</span><br><span class="line">        setImmediate: <span class="literal">false</span>,</span><br><span class="line">        dgram: <span class="string">'empty'</span>,</span><br><span class="line">        fs: <span class="string">'empty'</span>,</span><br><span class="line">        net: <span class="string">'empty'</span>,</span><br><span class="line">        tls: <span class="string">'empty'</span>,</span><br><span class="line">        child_process: <span class="string">'empty'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> ProgressBarPlugin(),</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">        <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">            id: <span class="string">'babel'</span>,</span><br><span class="line">            loaders: [&#123;</span><br><span class="line">                loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    babelrc: <span class="literal">true</span>,</span><br><span class="line">                    cacheDirectory: <span class="literal">true</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                publicPath: <span class="string">"/"</span></span><br><span class="line">            &#125;],</span><br><span class="line">            <span class="comment">//共享进程池</span></span><br><span class="line">            threadPool: HappyPack.ThreadPool(&#123;</span><br><span class="line">                size: os.cpus().length <span class="comment">//cpu nunbers</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="comment">//允许 HappyPack 输出日志</span></span><br><span class="line">            verbose: <span class="literal">true</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">            <span class="string">'process.env'</span>: &#123;</span><br><span class="line">                <span class="string">'NODE_ENV'</span>: <span class="built_in">JSON</span>.stringify(argv.mode)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'index.html'</span>,</span><br><span class="line">            template: <span class="string">'index.html'</span>,</span><br><span class="line">            inject: <span class="literal">true</span>,</span><br><span class="line">            favicon: <span class="string">'./src/assets/img/favicon.ico'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> webpack.ProvidePlugin(&#123;<span class="comment">//引入全局变量</span></span><br><span class="line">            $: <span class="string">'jquery'</span>,</span><br><span class="line">            jQuery: <span class="string">'jquery'</span>, <span class="comment">// 加上这个</span></span><br><span class="line">        &#125;), <span class="keyword">new</span> VueLoaderPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="build-dev-conf-js"><a href="#build-dev-conf-js" class="headerlink" title="build/dev.conf.js"></a>build/dev.conf.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)<span class="comment">//可以合并 base.conf 配置文件</span></span><br><span class="line"><span class="keyword">const</span> baseWebpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.base.conf'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> FriendlyErrorsPlugin = <span class="built_in">require</span>(<span class="string">'friendly-errors-webpack-plugin'</span>)<span class="comment">//让日志更加友好</span></span><br><span class="line"><span class="keyword">const</span> portfinder = <span class="built_in">require</span>(<span class="string">'portfinder'</span>) <span class="comment">//查找开放端口或域接字的简单工具 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HOST = process.env.HOST</span><br><span class="line"><span class="keyword">const</span> PORT = process.env.PORT &amp;&amp; <span class="built_in">Number</span>(process.env.PORT)</span><br><span class="line"><span class="keyword">const</span> devWebpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class="line">  mode:<span class="string">'development'</span>,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: utils.styleLoaders(&#123; <span class="attr">sourceMap</span>: config.dev.cssSourceMap, <span class="attr">usePostCSS</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: config.dev.devtool,</span><br><span class="line"></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    clientLogLevel: <span class="string">'warning'</span>,</span><br><span class="line">    historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    host: HOST || config.dev.host,</span><br><span class="line">    port: PORT || config.dev.port,</span><br><span class="line">    open: config.dev.autoOpenBrowser,</span><br><span class="line">    overlay: config.dev.errorOverlay</span><br><span class="line">      ? &#123; <span class="attr">warnings</span>: <span class="literal">false</span>, <span class="attr">errors</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      : <span class="literal">false</span>,</span><br><span class="line">    publicPath: config.dev.assetsPublicPath,</span><br><span class="line">    proxy: config.dev.proxyTable,</span><br><span class="line">    quiet: <span class="literal">true</span>, <span class="comment">// necessary for FriendlyErrorsPlugin</span></span><br><span class="line">    watchOptions: &#123;</span><br><span class="line">      poll: config.dev.poll,</span><br><span class="line">    &#125;,</span><br><span class="line">    disableHostCheck: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  portfinder.basePort = process.env.PORT || config.dev.port</span><br><span class="line">  portfinder.getPort(<span class="function">(<span class="params">err, port</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      process.env.PORT = port</span><br><span class="line">      devWebpackConfig.devServer.port = port</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Add FriendlyErrorsPlugin</span></span><br><span class="line">      devWebpackConfig.plugins.push(<span class="keyword">new</span> FriendlyErrorsPlugin(&#123;</span><br><span class="line">        compilationSuccessInfo: &#123;</span><br><span class="line">          messages: [<span class="string">`Your application is running here: http://<span class="subst">$&#123;devWebpackConfig.devServer.host&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">        onErrors: config.dev.notifyOnErrors</span><br><span class="line">        ? utils.createNotifierCallback()</span><br><span class="line">        : <span class="literal">undefined</span></span><br><span class="line">      &#125;))</span><br><span class="line"></span><br><span class="line">      resolve(devWebpackConfig)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="pluguin"><a href="#pluguin" class="headerlink" title="pluguin"></a>pluguin</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D happypack html-webpack-plugin  clean-webpack-plugin progress-bar-webpack-plugin yargs-parser  friendly-errors-webpack-plugin  portfinder  webpack-merge extract-text-webpack-plugin@next optimize-css-assets-webpack-plugin  uglifyjs-webpack-plugin chalk rimraf</span><br></pre></td></tr></table></figure><h3 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a>babel-loader</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-loader @babel/cli  @babel/core @babel/  @babel/preset-env plugin-proposal-class-properties @babel/ plugin-proposal-decorators @babel/ plugin-syntax-dynamic-import @babel/plugin-transform-classes @babel/plugin-transform-runtime -D</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save   @babel/runtime   @babel/runtime-corejs2</span><br></pre></td></tr></table></figure><h3 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a>.babelrc</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [</span><br><span class="line">        [<span class="string">"@babel/preset-env"</span>, &#123;</span><br><span class="line">            <span class="attr">"useBuiltIns"</span>: <span class="string">"usage"</span></span><br><span class="line">        &#125;]</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"plugins"</span>: [</span><br><span class="line">        [<span class="string">"@babel/plugin-proposal-decorators"</span>, &#123;</span><br><span class="line">            <span class="attr">"legacy"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="string">"@babel/proposal-class-properties"</span>,</span><br><span class="line">        [<span class="string">"@babel/plugin-transform-runtime"</span>, &#123;</span><br><span class="line">            <span class="attr">"corejs"</span>: <span class="number">2</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="string">"@babel/plugin-syntax-dynamic-import"</span>,</span><br><span class="line">        <span class="string">"@babel/plugin-transform-classes"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="build-prod-conf-js"><a href="#build-prod-conf-js" class="headerlink" title="build/prod.conf.js"></a>build/prod.conf.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> baseWebpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.base.conf'</span>)</span><br><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>)<span class="comment">//复制文件和目录</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)<span class="comment">//提取样式文件，只有extract-text-webpack-plugin@^4.0.0-beta.0 才支持webpack4  </span></span><br><span class="line"><span class="comment">//或者使用 mini-css-extract-plugin  用法详见  ![GitHub](https://github.com/search?q=mini-css-extract-plugin)</span></span><br><span class="line"><span class="keyword">const</span> OptimizeCSSPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>) <span class="comment">//用于优化\最小化 CSS</span></span><br><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>) <span class="comment">// 压缩JS资源</span></span><br><span class="line"><span class="keyword">const</span> webpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class="line">    mode: <span class="string">'production'</span>,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: utils.styleLoaders(&#123;</span><br><span class="line">            sourceMap: config.build.productionSourceMap,</span><br><span class="line">            extract: <span class="literal">true</span>,</span><br><span class="line">            usePostCSS: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: config.build.productionSourceMap ? config.build.devtool : <span class="literal">false</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: config.build.assetsRoot,</span><br><span class="line">        filename: utils.assetsPath(<span class="string">'js/[name].[chunkhash].js'</span>),</span><br><span class="line">        chunkFilename: utils.assetsPath(<span class="string">'js/[id].[chunkhash].js'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">            chunks: <span class="string">'all'</span>,              <span class="comment">// initial、async和all</span></span><br><span class="line">            minSize: <span class="number">30000</span>,             <span class="comment">// 形成一个新代码块最小的体积</span></span><br><span class="line">            maxAsyncRequests: <span class="number">5</span>,        <span class="comment">// 按需加载时候最大的并行请求数</span></span><br><span class="line">            maxInitialRequests: <span class="number">3</span>,      <span class="comment">// 最大初始化请求数</span></span><br><span class="line">            automaticNameDelimiter: <span class="string">'~'</span>, <span class="comment">// 打包分割符</span></span><br><span class="line">            name: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        minimizer: [</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">                uglifyOptions: &#123;</span><br><span class="line">                    compress: &#123;</span><br><span class="line">                        warnings: <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                sourceMap: config.build.productionSourceMap,</span><br><span class="line">                parallel: <span class="literal">true</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="comment">// extract css into its own file</span></span><br><span class="line">            <span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">                filename: utils.assetsPath(<span class="string">'css/[name].[hash].css'</span>),</span><br><span class="line">                allChunks: <span class="literal">true</span>,</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> OptimizeCSSPlugin(&#123;</span><br><span class="line">                cssProcessorOptions: config.build.productionSourceMap ? &#123;</span><br><span class="line">                    safe: <span class="literal">true</span>,</span><br><span class="line">                    map: &#123;</span><br><span class="line">                        inline: <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; : &#123;</span><br><span class="line">                    safe: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">                filename: config.build.index,</span><br><span class="line">                template: <span class="string">'index.html'</span>,</span><br><span class="line">                inject: <span class="literal">true</span>,</span><br><span class="line">                favicon: <span class="string">'./src/assets/img/favicon.ico'</span>,</span><br><span class="line">                minify: &#123;</span><br><span class="line">                    removeComments: <span class="literal">true</span>,</span><br><span class="line">                    collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">                    removeAttributeQuotes: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line"></span><br><span class="line">                chunksSortMode: <span class="string">'dependency'</span></span><br><span class="line">            &#125;),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> webpack.optimize.ModuleConcatenationPlugin(),</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> CopyWebpackPlugin([&#123;</span><br><span class="line">                <span class="keyword">from</span>: path.resolve(__dirname, <span class="string">'../static'</span>),</span><br><span class="line">                to: config.build.assetsSubDirectory,</span><br><span class="line">                ignore: [<span class="string">'.*'</span>]</span><br><span class="line">            &#125;])</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = webpackConfig</span><br></pre></td></tr></table></figure><h3 id="build-js"><a href="#build-js" class="headerlink" title="build.js"></a>build.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./check-versions'</span>)()</span><br><span class="line"></span><br><span class="line">process.env.NODE_ENV = <span class="string">'production'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rm = <span class="built_in">require</span>(<span class="string">'rimraf'</span>)<span class="comment">//删除文件</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)<span class="comment">//终端字符串样式</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"><span class="keyword">const</span> webpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.prod.conf'</span>)</span><br><span class="line"></span><br><span class="line">rm(path.join(config.build.assetsRoot, config.build.assetsSubDirectory), err =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">  webpack(webpackConfig, (err, stats) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">    process.stdout.write(stats.toString(&#123;</span><br><span class="line">      colors: <span class="literal">true</span>,</span><br><span class="line">      modules: <span class="literal">false</span>,</span><br><span class="line">      children: <span class="literal">false</span>, </span><br><span class="line">      chunks: <span class="literal">false</span>,</span><br><span class="line">      chunkModules: <span class="literal">false</span></span><br><span class="line">    &#125;) + <span class="string">'\n\n'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (stats.hasErrors()) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(chalk.red(<span class="string">' 构建失败，错误.\n'</span>))</span><br><span class="line">      process.exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(chalk.cyan(<span class="string">'  Build success.\n'</span>))</span><br><span class="line">    <span class="built_in">console</span>.log(chalk.yellow(</span><br><span class="line">      <span class="string">' 打包文件应该通过HTTP服务器启用.\n'</span> </span><br><span class="line">    ))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;升级webpack4-先删除之前的webpack&quot;&gt;&lt;a href=&quot;#升级webpack4-先删除之前的webpack&quot; class=&quot;headerlink&quot; title=&quot;升级webpack4  先删除之前的webpack&quot;&gt;&lt;/a&gt;升级webpack4  先
      
    
    </summary>
    
      <category term="package" scheme="https://owen027.github.io/categories/package/"/>
    
    
      <category term="webpack4" scheme="https://owen027.github.io/tags/webpack4/"/>
    
  </entry>
  
  <entry>
    <title>模块化开发(一)</title>
    <link href="https://owen027.github.io/2019/03/07/module/"/>
    <id>https://owen027.github.io/2019/03/07/module/</id>
    <published>2019-03-06T16:41:22.000Z</published>
    <updated>2019-05-19T01:56:06.170Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是模块化"><a href="#什么是模块化" class="headerlink" title="什么是模块化"></a>什么是模块化</h3><blockquote><p>将一组模块（及其依赖项）以正确的顺序拼接到一个文件（或一组文件）中的过程。</p></blockquote><h3 id="传统的模块化做法。"><a href="#传统的模块化做法。" class="headerlink" title="传统的模块化做法。"></a>传统的模块化做法。</h3><blockquote><p>模块是实现特定功能的一组属性和方法的封装。</p></blockquote><p>将模块写成一个对象，所有的模块成员都放到这个对象里面。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;</span><br><span class="line">  _count:<span class="number">0</span>,</span><br><span class="line">  f1:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">  f2:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line">module1.f1()</span><br><span class="line">module1.f2()</span><br></pre></td></tr></table></figure></p><p>上面的对象可以改变里面的属性和方法，不安全</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = （<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> count=<span class="number">0</span>;</span><br><span class="line"> <span class="keyword">return</span> &#123; </span><br><span class="line">   f1:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">  f2:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;&#125;</span><br><span class="line">&#125;());</span><br><span class="line">module1.f1()</span><br><span class="line">module1.f2()</span><br><span class="line">module1.count <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>使用<label>立即执行函数</label> 将相应的方法和属性封装在函数中,这样就不会暴露私有成员</p><h4 id="利用构造函数封装对象"><a href="#利用构造函数封装对象" class="headerlink" title="利用构造函数封装对象"></a>利用构造函数封装对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr =[];</span><br><span class="line">  <span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>)</span>&#123;</span><br><span class="line">       arr.push(val)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.join(<span class="string">''</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Father();</span><br><span class="line">a.add(<span class="number">1</span>);<span class="comment">//[1]</span></span><br><span class="line">a.toString();<span class="comment">//"1"</span></span><br><span class="line">a.arr <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>上面的函数将 <code>arr</code> 变成私有变量，在函数外部无法访问，但是形成了闭包，非常耗费内存；<br>违背了构造函数与实例对象在数据上相分离的原则（即实例对象的数据，不应该保存在实例对象以外）。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ToString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._buffer = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ToString.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: ToString,</span><br><span class="line">  add: function (str) &#123;</span><br><span class="line">    <span class="keyword">this</span>._buffer.push(str);</span><br><span class="line">  &#125;,</span><br><span class="line">  toString: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._buffer.join(<span class="string">''</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>虽然上面的构造函数未生成闭包，但是外部可以修改方法和属性，不安全</p><h4 id="放大模式"><a href="#放大模式" class="headerlink" title="放大模式"></a>放大模式</h4><p>如果一个模块很大或者一个模块需要继承另一个模块可以利用立即执行函数的特效来封装<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span>(<span class="params">m1</span>)</span>&#123;</span><br><span class="line">mod1.col=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> mod1;</span><br><span class="line">&#125;(<span class="built_in">window</span>.modlue2 ||&#123;&#125;)) <span class="comment">//有些模块可能是null 确保函数正常执行 采用兼容模式 window.modlue2 ||&#123;&#125;</span></span><br></pre></td></tr></table></figure></p><ul><li>独立性是模块的重要特点，模块内部最好不与程序的其他部分直接交互。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span> (<span class="params">$, Swiper</span>) </span>&#123;</span><br><span class="line">　<span class="comment">//...</span></span><br><span class="line">&#125;(jQuery, Swiper));</span><br></pre></td></tr></table></figure></li></ul><p>上面的 module1 引入 jQuery 和 Swiper 当做两个参数传入模块中，保证了模块的独立性，还使得模块之间的依赖关系变得明显。</p><p><strong>立即执行函数还可以起到命名空间的作用。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$, window, document</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleEvents</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">initialize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dieCarouselDie</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//attach to the global scope</span></span><br><span class="line">  <span class="built_in">window</span>.finalCarousel = &#123;</span><br><span class="line">    init : initialize,</span><br><span class="line">    destroy : dieCarouselDie</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;( jQuery, <span class="built_in">window</span>, <span class="built_in">document</span> ));</span><br></pre></td></tr></table></figure></p><p>以上都有一个共同点:使用单个全局变量箭头代码包装在函数中，使用闭包建立私有空间<br>但是都有缺点：</p><ul><li>不知道模块(库) 的加载顺序</li><li><p>还是有可能引起命名冲突，比如两个库都有相同的名称，或者使用哪个版本<br>有几种良好实施的方法：CommonJS、AMD和CMD。可以解决以上的缺陷</p><h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3></li><li><p><code>CommonJS</code> 是一种思想, 本质上是可复用的JavaScript,它导出特定的对象，提供其它程序使用。</p></li><li><p>由于 <code>JavaScript</code> 没有模块系统、标准库较少、缺乏包管理工具,因此<code>CommonJS</code>是为它的表现来制定规范。</p></li><li><p>每个JavaScript 文件 都将模块存储在自己独有的作用域中。</p></li><li><p>需要使用 <code>module.exports</code> 和 <code>exports.obj</code> 来导出对象，并在需要它的程序中使用 <code>require(&#39;module&#39;)</code> 加载</p></li></ul> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//文件1</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">myModule</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello!'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.goodbye = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'goodbye!'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = myModule;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//文件2</span></span><br><span class="line"> <span class="keyword">var</span> myModule = <span class="built_in">require</span>(<span class="string">'myModule'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myModuleInstance = <span class="keyword">new</span> myModule();</span><br><span class="line">myModuleInstance.hello(); <span class="comment">// 'hello!'</span></span><br><span class="line">myModuleInstance.goodbye(); <span class="comment">// 'goodbye!'</span></span><br></pre></td></tr></table></figure><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = &#123; </span><br><span class="line">  export1:&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">module,exports</span>)</span>&#123;</span><br><span class="line">   exports.add = functon(val)&#123;</span><br><span class="line">      <span class="keyword">return</span> val *<span class="number">10</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;(module1,module1.export1));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = module1.export1.add;</span><br><span class="line">fn(<span class="number">2</span>)<span class="comment">//20</span></span><br></pre></td></tr></table></figure><p>利用立即执行函数 接受两个参数 module 和 exports， 模块就通过立即执行函数赋值，然后导出模块，即可实现模块的加载<br><strong>这种方法的好处：</strong></p><ul><li>避免全局污染</li><li>明确依赖项目</li><li>语法清晰<br><strong>缺点：</strong></li><li><p>由于 <code>CommonJS</code> 采用服务器优先方法并且同步加载模块，因此在浏览器中使用它会阻止浏览器运行其他内容，直到加载完成。</p><p>我们可以使用 <code>AMD</code> 来异步加载</p><h3 id="AMD-Asynchromous-Module-Definition"><a href="#AMD-Asynchromous-Module-Definition" class="headerlink" title="AMD(Asynchromous Module Definition)"></a>AMD(Asynchromous Module Definition)</h3></li><li>定义了一套 JavaScript 模块依赖异步加载标准，来解决同步加载的问题。</li><li>AMD模块加载不影响后面语句的运行。所有依赖某些模块的语句均放置在回调函数中。</li><li>定义了一个函数 <code>define</code>，通过 <code>define</code> 方法定义模块。</li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> define([<span class="string">'myModule'</span>, <span class="string">'myOtherModule'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">myModule, myOtherModule</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(myModule.hello());</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的 <code>define</code> 函数将每个模块的依赖项，以数组的形式作为参数。</p><blockquote><p>这些依赖项会在后台异步加载，一旦加载完成，<code>define</code> 函数就调用模块给出的回调函数<br><code>myModule</code> 可能像下面一样定义：</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   define([], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    goodbye: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'goodbye'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="CMD-Common-Module-Definition"><a href="#CMD-Common-Module-Definition" class="headerlink" title="CMD(Common Module Definition)"></a>CMD(Common Module Definition)</h4><ul><li><code>CMD</code>由玉伯大佬提出并用于<a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="noopener">SeaJS</a> </li><li><p>CMD 和 AMD 很相似，都有 define 函数， 通过 require 加载 </p><p>CMD和AMD 不同点：</p><ul><li>对于依赖的模块 CMD 延迟执行， AMD 提前执行(requireJS 高版本也开始延迟执行)</li><li><p>CMD使用依赖就近原则（按需加载）：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">     define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;   </span><br><span class="line">       <span class="keyword">var</span> near = <span class="built_in">require</span>(<span class="string">'./a'</span>)   </span><br><span class="line">       near.doSomething()   </span><br><span class="line">       <span class="comment">// 此处略去 100 行  </span></span><br><span class="line">        <span class="keyword">var</span> nearOne = <span class="built_in">require</span>(<span class="string">'./b'</span>) <span class="comment">// 依赖可以就近书写   </span></span><br><span class="line">        nearOne.doSomething()   <span class="comment">// ...</span></span><br><span class="line">         &#125;)</span><br><span class="line">     <span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">- AMD使用依赖前置原则（必须先加载完依赖）：</span></span><br><span class="line"><span class="string">    `</span><span class="string">``</span>javascript</span><br><span class="line">    define([<span class="string">'./a'</span>, <span class="string">'./b'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">nearTow, nearThree</span>) </span>&#123; <span class="comment">// 必须一开始加载</span></span><br><span class="line">          nearTow.doSomething()</span><br><span class="line">          <span class="comment">// 此处略去 100 行</span></span><br><span class="line">          nearThree.doSomething()</span><br><span class="line">          ...</span><br><span class="line">          &#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>CMD</code> 里，没有全局 require，而是根据模块系统的完备性，提供 seajs.use 来实现模块系统的加载启动。CMD 里，每个 API 都简单纯粹。   <code>AMD</code> 的 API 默认是一个当多个用，CMD 的 API 严格区分，推崇职责单一。比如 AMD 里，require 分全局 require 和局部 require，都叫 require。 </p></li></ul></li></ul><h4 id="AMD-和-CommonJS-不同点："><a href="#AMD-和-CommonJS-不同点：" class="headerlink" title=" AMD 和 CommonJS 不同点："></a><label> <code>AMD</code> 和 <code>CommonJS</code> 不同点：</label></h4><p><code>AMD</code>：</p><ul><li>采用浏览器优先的方法，异步加载，主要用于浏览器</li><li>先加载依赖项</li><li>依赖项可以说 对象、函数、构造函数、字符串等等其他JS类型</li></ul><p><code>CommonJS</code>:</p><ul><li>采用服务器优先的方法，同步加载，主要用于服务器</li><li>支持对象作为模块<br>共同点： 先加载依赖项</li></ul><h3 id="通用模块定义-UMD"><a href="#通用模块定义-UMD" class="headerlink" title="通用模块定义 UMD"></a>通用模块定义 <code>UMD</code></h3><blockquote><p>同时支持 <code>AMD</code>和 <code>CommonJS</code><br>本质 创建了一种方法来使用两者的任何一种，同时支持全局变量定义，(JS兼容性的常用思想)所以 <code>UMD</code> 可以在客户端和服务器上工作<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">root, factory</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">      <span class="comment">// AMD</span></span><br><span class="line">    define([<span class="string">'myModule'</span>, <span class="string">'myOtherModule'</span>], factory);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> exports === <span class="string">'object'</span>) &#123;</span><br><span class="line">      <span class="comment">// CommonJS</span></span><br><span class="line">    <span class="built_in">module</span>.exports = factory(<span class="built_in">require</span>(<span class="string">'myModule'</span>),</span><br><span class="line">     <span class="built_in">require</span>(<span class="string">'myOtherModule'</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    root.returnExports = factory(root.myModule, root.myOtherModule);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params">myModule, myOtherModule</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">notHelloOrGoodbye</span>(<span class="params"></span>)</span>&#123;&#125;; </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>)</span>&#123;&#125;; </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">goodbye</span>(<span class="params"></span>)</span>&#123;&#125;; </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">      hello: hello,</span><br><span class="line">      goodbye: goodbye</span><br><span class="line">  &#125;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="ES6模块（即-ES2015-ECMAScript-6、ES6）"><a href="#ES6模块（即-ES2015-ECMAScript-6、ES6）" class="headerlink" title="ES6模块（即 ES2015/ECMAScript 6、ES6）"></a>ES6模块（即 <a href="http://es6.ruanyifeng.com/#docs/module#%E6%A6%82%E8%BF%B0" target="_blank" rel="noopener">ES2015/ECMAScript 6、ES6</a>）</h3><ul><li>使用 <code>import</code> 关键字引入模块，通过 <code>export</code> 关键字导出模块</li><li><p>ES6目前无法在浏览器中执行,只能通过babel将不被支持的import编译为当前受到广泛支持的 require。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> cun =<span class="number">1</span>; </span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  cun++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----------------</span></span><br><span class="line"><span class="keyword">import</span> &#123; cun, add &#125; <span class="keyword">from</span> <span class="string">'./a.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(cun); <span class="comment">// 1</span></span><br><span class="line">incCounter();</span><br><span class="line"><span class="built_in">console</span>.log(cun); <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> fo =<span class="string">'a'</span>;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> fo =<span class="string">'b'</span>,<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;fo&#125; <span class="keyword">from</span> <span class="string">'./a.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(fo);<span class="comment">//'a'</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> <span class="built_in">console</span>.log(fo),<span class="number">500</span>)<span class="comment">//'b'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6 输入的模块变量，只是一个“符号连接”，所以这个变量是只读的，对它进行重新赋值会报错。</span></span><br><span class="line">fo = <span class="string">'s'</span> <span class="comment">//error</span></span><br></pre></td></tr></table></figure></li><li><p>ES6 模块之中，顶层的this指向undefined，即不应该在顶层代码使用this。<br><code>CommonJS</code>、<code>AMD</code>和<code>CMD</code>相比:</p></li><li><code>ES6</code>模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</li><li>ES6 对外接口只是一种静态定义，在代码静态解析阶段就会生成。</li><li>ES6 module编译时输出接口(加载)，输出的是值的引用。(静态编译)</li><li>CommonJS 加载的是一个对象（即module.exports属性），该对象只有在脚本运行完才会生成。</li><li>CommonJS 模块运行时加载，输出的是一个值的拷贝。(动态编译)<br>一旦输出一个值，模块内部的变化就影响不到这个值。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib/counter.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrement</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  counter--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  counter: counter,</span><br><span class="line">  increment: increment,</span><br><span class="line">  decrement: decrement</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// src/main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> counter = <span class="built_in">require</span>(<span class="string">'../../lib/counter'</span>);</span><br><span class="line"></span><br><span class="line">counter.increment();</span><br><span class="line"><span class="built_in">console</span>.log(counter.counter); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是模块化&quot;&gt;&lt;a href=&quot;#什么是模块化&quot; class=&quot;headerlink&quot; title=&quot;什么是模块化&quot;&gt;&lt;/a&gt;什么是模块化&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;将一组模块（及其依赖项）以正确的顺序拼接到一个文件（或一组文件）中的过程。&lt;/p&gt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://owen027.github.io/categories/JavaScript/"/>
    
    
      <category term="moduleDevelop" scheme="https://owen027.github.io/tags/moduleDevelop/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript OOP(三)</title>
    <link href="https://owen027.github.io/2019/03/05/oop3/"/>
    <id>https://owen027.github.io/2019/03/05/oop3/</id>
    <published>2019-03-05T15:36:51.000Z</published>
    <updated>2019-04-21T15:59:13.600Z</updated>
    
    <content type="html"><![CDATA[<h3 id="对象继承"><a href="#对象继承" class="headerlink" title="对象继承"></a>对象继承</h3><p>A 对象通过继承 B 对象，就能直接拥有 B 对象的所有属性和方法。这对于<label>代码的复用</label>是非常有用的。</p><p>JavaScript 语言的继承不通过 class，而是通过“原型对象”<code>prototype</code>实现</p><h4 id="传统原型链式继承"><a href="#传统原型链式继承" class="headerlink" title="传统原型链式继承"></a>传统原型链式继承</h4><ul><li>过多的继承属性</li><li>比如一个函数用不到某个原型方法或属性，那么方法或属性就过剩了<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Grand</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">Grand.prototype.name=<span class="string">"grand"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> grand = <span class="keyword">new</span> Grand();</span><br><span class="line"></span><br><span class="line">Father.prototype=grand;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> father = <span class="keyword">new</span> Father();</span><br><span class="line"></span><br><span class="line">Son.prototype=father;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> Son();</span><br></pre></td></tr></table></figure></li></ul><h4 id="借用构造函数-使用call-appply"><a href="#借用构造函数-使用call-appply" class="headerlink" title="借用构造函数  使用call/appply"></a>借用构造函数  使用call/appply</h4><ul><li>不是真正继承，因为不能调用原型上的方法，而且每调用一次都会调用多次函数，实际上步骤没有变少</li><li>工业级推荐使用</li><li>缺点无法添加私有原型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Father.call(<span class="keyword">this</span>); <span class="comment">// 调用父类构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son.prototype.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Father.prototype.print.call(<span class="keyword">this</span>);<span class="comment">//只使用单个方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类继承父类的原型</span></span><br><span class="line">Son.prototype = <span class="built_in">Object</span>.create(Father.prototype);</span><br><span class="line">Son.prototype.constructor = Son;</span><br></pre></td></tr></table></figure><h4 id="共有原型"><a href="#共有原型" class="headerlink" title="共有原型"></a>共有原型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Father.prototype =&#123;</span><br><span class="line">    name:<span class="string">"common"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Son.prototype =  <span class="built_in">Object</span>.create(Father.prototype)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span> (<span class="params">Target,Origin</span>)</span>&#123;<span class="comment">//继承源</span></span><br><span class="line">  Target.prototype = Origin.prototype;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="圣杯模式"><a href="#圣杯模式" class="headerlink" title="圣杯模式"></a>圣杯模式</h4><blockquote><p>隐式附加的东西就私有化，可以公共定义的东西提取出来公有化<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> inherit =(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> Interim =<span class="function"><span class="keyword">function</span> <span class="title">Interim</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">   <span class="keyword">return</span>  <span class="function"><span class="keyword">function</span> (<span class="params">Target,Origin</span>)</span>&#123;<span class="comment">//继承源</span></span><br><span class="line">   Interim.prototype =<span class="built_in">Object</span>.create(Origin);</span><br><span class="line">   Target.prototype = Interim.prototype;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//现在 可以 制定自己的私有属性，但是 constuctor 不是 原函数所一手动赋值回来，如果想要知道函数真正继承那个原型需要保存它</span></span><br><span class="line">  Target.prototype.constuctor = Target;</span><br><span class="line">  Target.prototype.yliluokka =Origin;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;())</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h4><p>JavaScript 不提供多重继承功能，即不允许一个对象同时继承多个对象。但是，可以通过<code>Object.assign</code>，实现这个功能。这种模式称之为 Mixin (混入)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn1</span>(<span class="params"></span>)</span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn2</span>(<span class="params"></span>)</span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  F1.call(<span class="keyword">this</span>);</span><br><span class="line">  F2.call(<span class="keyword">this</span>);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//继承F1</span></span><br><span class="line">Son.prototype =<span class="built_in">Object</span>.create(Fn1.prototype);</span><br><span class="line"><span class="comment">//继承F2</span></span><br><span class="line"><span class="built_in">Object</span>.assign(Son.prototype,Fn2.prototype);</span><br><span class="line">Son.prototype.constructor =Son;</span><br><span class="line"><span class="keyword">let</span> a =<span class="keyword">new</span> Son();</span><br></pre></td></tr></table></figure></p><h3 id="call，apply-and-bind"><a href="#call，apply-and-bind" class="headerlink" title="call，apply and bind"></a>call，apply and bind</h3><blockquote><p>都可改变函数内部this的指向（即函数执行时所在的作用域），然后在所指定的作用域中，调用该函数。</p></blockquote><h4 id="call-and-apply"><a href="#call-and-apply" class="headerlink" title="call and apply"></a>call and apply</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;&#125; </span><br><span class="line"><span class="comment">//test() == test.call()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj =&#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(obj) <span class="comment">//"[object Object]"</span></span><br><span class="line"><span class="comment">//因为call 和 apply 会将函数中的this指向第一个参数</span></span><br><span class="line"><span class="comment">//相当于 obj.toString()</span></span><br></pre></td></tr></table></figure><p><code>call and apply</code> 二者区别在于传参：</p><ul><li>call 第二个参数开始单个单个参数传</li><li>apply 第二个参数为数组或类数组<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回数组中最大的数</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">15</span>];</span><br><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, a) <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将数组的空元素变为undefined</span></span><br><span class="line"><span class="built_in">Array</span>.apply(<span class="literal">null</span> [<span class="number">1</span>,,<span class="number">3</span>,,<span class="number">4</span>)<span class="comment">//[1,undefined,3,undefined,4];</span></span><br></pre></td></tr></table></figure></li></ul><p>空元素与undefined的差别</p><ul><li>forEach方法会跳过空元素，但是不会跳过undefined。因此，遍历内部元素的时候，会得到不同的结果。</li><li><label>转换类似数组的对象</label></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let obj=&#123;0: 1, length: 2&#125;</span><br><span class="line">Array.protetype.slice.apply(obj);//[1,undefined]</span><br></pre></td></tr></table></figure><label>被处理的对象必须有length属性，以及相对应的数字键。</label><h6 id="参数为空、null和undefined，则默认传入全局对象。"><a href="#参数为空、null和undefined，则默认传入全局对象。" class="headerlink" title="参数为空、null和undefined，则默认传入全局对象。"></a><label>参数为空、null和undefined，则默认传入全局对象。</label></h6><hr><p>bind方法用于将函数体内的this绑定到某个对象，然后返回一个新函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> counter = &#123;</span><br><span class="line">  count: <span class="number">0</span>,</span><br><span class="line">  inc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> func = counter.inc.bind(counter);</span><br><span class="line">func();</span><br><span class="line">counter.count <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * <span class="keyword">this</span>.m + y * <span class="keyword">this</span>.n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  m: <span class="number">2</span>,</span><br><span class="line">  n: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newAdd = add.bind(obj, <span class="number">5</span>); <span class="comment">//将x 绑定为 5 </span></span><br><span class="line">newAdd(<span class="number">5</span>) <span class="comment">// 20</span></span><br><span class="line">newAdd(<span class="number">1</span>,<span class="number">5</span>)<span class="comment">//12</span></span><br></pre></td></tr></table></figure><p> <label>第一个参数是null或undefined，等于将this绑定到全局对象</label></p><h4 id="bind方法使用注意点"><a href="#bind方法使用注意点" class="headerlink" title="bind方法使用注意点"></a>bind方法使用注意点</h4><ul><li><p>bind方法每运行一次，就返回一个新函数 需要一个变量接收</p></li><li><p>结合回调函数使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> counter = &#123;</span><br><span class="line">  count: <span class="number">0</span>,</span><br><span class="line">  inc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callIt</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  callback();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">callIt(counter.inc.bind(counter));</span><br><span class="line">counter.count <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li><li><p>结合call方法使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].slice(<span class="number">0</span>, <span class="number">1</span>) <span class="comment">// [1]</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.call([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">0</span>, <span class="number">1</span>) <span class="comment">// [1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将Array.prototype.slice变成Function.prototype.call方法所在的对象</span></span><br><span class="line"><span class="comment">//调用时就变成了Array.prototype.slice.call。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> slice = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Array</span>.prototype.slice);</span><br><span class="line"><span class="built_in">Function</span>.prototype.slice.call([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">0</span>, <span class="number">1</span>) <span class="comment">// [1]</span></span><br><span class="line"><span class="comment">//slice([1, 2, 3], 0, 1) </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> push = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Array</span>.prototype.push);</span><br><span class="line"><span class="keyword">let</span> pop = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Array</span>.prototype.pop);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span> ,<span class="number">2</span> ,<span class="number">3</span>];</span><br><span class="line">push(a, <span class="number">4</span>)</span><br><span class="line">a <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">pop(a)</span><br><span class="line">a <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure></li><li><p>将Function.prototype.bind方法变成Function.prototype.call的方法，就意味着bind的调用形式也可以被改写</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o = &#123; <span class="attr">v</span>: <span class="number">123</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> bind = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Function</span>.prototype.bind);</span><br><span class="line">bind(f, o)() <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><h3 id="Object-系统默认方法"><a href="#Object-系统默认方法" class="headerlink" title="Object 系统默认方法"></a><code>Object 系统默认方法</code></h3><ul><li><p><code>getPrototypeOf</code> 获取对象原型,只有一个参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> Foo ();</span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(obj) <span class="comment">// Foo.prototype</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//空对象原型</span></span><br><span class="line"> <span class="built_in">Object</span>.getPrototypeOf(&#123;&#125;) <span class="comment">// Object.prototype</span></span><br><span class="line"><span class="comment">// Object.prototype 原型</span></span><br><span class="line"> <span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">Object</span>.prototype) <span class="comment">//null</span></span><br><span class="line"><span class="comment">// Foo</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(Foo) <span class="comment">// Function.prototype</span></span><br></pre></td></tr></table></figure></li><li><p><code>setPrototypeOf</code> 设置对象原型<br>有两个参数：</p><ol><li>现有对象</li><li>继承的原型对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> now = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> pro = &#123;<span class="attr">name</span>:<span class="string">"Owen"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(now,pro);</span><br><span class="line">now.name <span class="comment">//"Owen"</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h4 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a><code>Object.create()</code></h4><blockquote><p>生成实例对象的常用方法 参数必须为对象 或 null</p><ul><li>参数为 <code>null</code> 会生成一个不会继承任何属性和方法的对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">obj.toString()<span class="comment">// Error</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//会继承第二个参数的属性和方法</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(&#123;&#125;, &#123;</span><br><span class="line">    p1: &#123;</span><br><span class="line">      value: <span class="number">123</span>,</span><br><span class="line">      enumerable: <span class="literal">true</span>,</span><br><span class="line">      configurable: <span class="literal">true</span>,</span><br><span class="line">      writable: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    p2: &#123;</span><br><span class="line">      value: <span class="string">'Owen'</span>,</span><br><span class="line">      enumerable: <span class="literal">true</span>,</span><br><span class="line">      configurable: <span class="literal">true</span>,</span><br><span class="line">      writable: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(&#123;&#125;);</span><br><span class="line">obj.p1 = <span class="number">123</span>;</span><br><span class="line">obj.p2 = <span class="string">'Owen'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成的对象会继承它的原型对象的构造函数。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Object</span>.create(f);</span><br><span class="line"></span><br><span class="line">b.constructor === Foo <span class="comment">// true</span></span><br><span class="line">b <span class="keyword">instanceof</span> Foo <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><h4 id="object-isPrototypeOf"><a href="#object-isPrototypeOf" class="headerlink" title="object.isPrototypeOf"></a><code>object.isPrototypeOf</code></h4><blockquote><p>判断对象是否再参数对象的原型链上</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> F()</span><br><span class="line">F.prototype.isPrototypeOf(f) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h5 id="获取原型的三种方法"><a href="#获取原型的三种方法" class="headerlink" title="获取原型的三种方法"></a>获取原型的三种方法</h5><ol><li><code>obj.__proto__</code></li><li><code>obj.constructor.prototype</code></li><li><code>Object.getPrototypeOf(obj)</code></li></ol><ul><li><p>前两种不可靠，都个一手动修改， 而且 <code>__proto__</code> 只有浏览器才需要部署</p><h4 id="getOwnPropertyNames-和-keys"><a href="#getOwnPropertyNames-和-keys" class="headerlink" title="getOwnPropertyNames 和 keys"></a><code>getOwnPropertyNames</code> 和 <code>keys</code></h4><blockquote><p>以数组形式返回参数对象所有属性名(不包含继承属性)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不管可不可遍历都会返回出来</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(<span class="built_in">Date</span>);<span class="comment">//["length", "name", "prototype", "now", "parse", "UTC"]</span></span><br><span class="line"><span class="comment">//返回可遍历属性</span></span><br><span class="line"><span class="built_in">Object</span>.keys(<span class="built_in">Date</span>)<span class="comment">// []</span></span><br></pre></td></tr></table></figure></blockquote></li></ul><h4 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty"></a><code>hasOwnProperty</code></h4><blockquote><p>判断参数是否是自身的属性，唯一一个不会遍历原型链的方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.hasOwnProperty(<span class="string">'length'</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="拷贝对象"><a href="#拷贝对象" class="headerlink" title="拷贝对象"></a>拷贝对象</h3><p>拷贝对象需要确保两件事情：</p><ul><li>与原对象具有同样的原型。</li><li>与原对象具有同样的实例属性。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyOwn</span> (<span class="params">target,origin</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.getOwnPropertyNames(origin).forEach(<span class="function">(<span class="params">key</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> desc =<span class="built_in">Object</span>.getOwnPropertyDescriptor(origin,key);</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(target,origin,desc);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">origin</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> clone = <span class="built_in">Object</span>.create (<span class="built_in">Object</span>.getPrototypeOf(origin));</span><br><span class="line">    copyOwn(clone,origin)</span><br><span class="line">  <span class="keyword">return</span> clone</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//es8</span></span><br><span class="line"><span class="keyword">const</span> copyTwo = <span class="function"><span class="params">origin</span> =&gt;</span><span class="built_in">Object</span>.create( <span class="built_in">Object</span>.getPropertyOf(origin),<span class="built_in">Object</span>.getOwnPropertyDescriptor(origin) );</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;对象继承&quot;&gt;&lt;a href=&quot;#对象继承&quot; class=&quot;headerlink&quot; title=&quot;对象继承&quot;&gt;&lt;/a&gt;对象继承&lt;/h3&gt;&lt;p&gt;A 对象通过继承 B 对象，就能直接拥有 B 对象的所有属性和方法。这对于&lt;label&gt;代码的复用&lt;/label&gt;是非常有用
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://owen027.github.io/categories/JavaScript/"/>
    
    
      <category term="OOP" scheme="https://owen027.github.io/tags/OOP/"/>
    
  </entry>
  
</feed>
